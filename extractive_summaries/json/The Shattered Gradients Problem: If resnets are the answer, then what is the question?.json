{
  "sections": [{
    "heading": "1. Introduction",
    "text": "Deep neural networks have achieved outstanding performance (Krizhevsky et al., 2012; Szegedy et al., 2015; He et al., 2016b). Reducing the tendency of gradients to vanish or explode with depth (Hochreiter, 1991; Bengio et al., 1994) has been essential to this progress.\nCombining careful initialization (Glorot & Bengio, 2010; *Equal contribution 1Victoria University of Wellington, New Zealand 2SEED, Electronic Arts 3Disney Research, Zürich, Switzerland. Correspondence to: David Balduzzi <dbalduzzi@gmail.com>, Brian McWilliams <brian@disneyresearch.com>.\nProceedings of the 34 th International Conference on Machine Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017 by the author(s).\nHe et al., 2015) with batch normalization (Ioffe & Szegedy, 2015) bakes two solutions to the vanishing/exploding gradient problem into a single architecture. The He initialization ensures variance is preserved across rectifier layers, and batch normalization ensures that backpropagation through layers is unaffected by the scale of the weights (Ioffe & Szegedy, 2015).\nIt is perhaps surprising then that residual networks (resnets) still perform so much better than standard architectures when networks are sufficiently deep (He et al., 2016a;b). This raises the question: If resnets are the solution, then what is the problem? We identify the shattered gradient problem: a previously unnoticed difficulty with gradients in deep rectifier networks that is orthogonal to vanishing and exploding gradients. The shattering gradients problem is that, as depth increases, gradients in standard feedforward networks increasingly resemble white noise. Resnets dramatically reduce the tendency of gradients to shatter.\nOur analysis applies at initialization. Shattering should decrease during training. Understanding how shattering affects training is an important open problem.\nTerminology. We refer to networks without skip connections as feedforward nets—in contrast to residual nets (resnets) and highway nets. We distinguish between the real-valued output of a rectifier and its binary activation: the activation is 1 if the output is positive and 0 otherwise."
  }, {
    "heading": "1.1. The Shattered Gradients Problem",
    "text": "The first step is to simply look at the gradients of neural networks. Gradients are averaged over minibatches, depend on both the loss and the random sample from the data, and are extremely high-dimensional, which introduces multiple confounding factors and makes visualization difficult (but see section 4). We therefore construct a minimal model designed to eliminate these confounding factors. The minimal model is a neural network fW : R ! R taking scalars to scalars; each hidden layer contains N = 200 rectifier neurons. The model is not intended to be applied to real data. Rather, it is a laboratory where gradients can be isolated and investigated.\nWe are interested in how the gradient varies, at initializa-\ntion, as a function of the input:\ndfW dx (x(i)) where x(i) 2 [ 2, 2] is in a (1)\n1-dim grid of M = 256 “data points”.\nUpdates during training depend on derivatives with respect to weights, not inputs. Our results are relevant because, by the chain rule, @fW@wij = @fW @nj @nj @wij\n. Weight updates thus depend on @fW@nj —i.e. how the output of the network varies with the output of neurons in one layer (which are just inputs to the next layer).\nThe top row of figure 1 plots dfWdx (x (i) ) for each point x(i) in the 1-dim grid. The bottom row shows the (absolute value) of the covariance matrix: |(g ¯g)(g ¯g)>|/ 2g where g is the 256-vector of gradients, ¯g the mean, and 2g the variance.\nIf all the neurons were linear then the gradient would be a horizontal line (i.e. the gradient would be constant as a function of x). Rectifiers are not smooth, so the gradients are discontinuous.\nGradients of shallow networks resemble brown noise. Suppose the network has a single hidden layer: fw,b(x) = w\n>⇢(x · v b). Following Glorot & Bengio (2010), weights w and biases b are sampled from N (0, 2) with 2 = 1N . Set v = (1, . . . , 1).\nFigure 1a shows the gradient of the network for inputs x 2 [ 2, 2] and its covariance matrix. Figure 1d shows a discrete approximation to brownian motion: BN (t) =Pt\ns=1 Ws where Ws ⇠ N (0, 1 N ). The plots are strikingly similar: both clearly exhibit spatial covariance structure. The resemblance is not coincidental: section A1 applies\nDonsker’s theorem to show the gradient converges to brownian motion as N ! 1.\nGradients of deep networks resemble white noise. Figure 1b shows the gradient of a 24-layer fully-connected rectifier network. Figure 1e shows white noise given by samples Wk ⇠ N (0, 1). Again, the plots are strikingly similar.\nSince the inputs lie on a 1-dim grid, it makes sense to compute the autocorrelation function (ACF) of the gradient. Figures 2a and 2d compare this function for feedforward networks of different depth with white and brown noise. The ACF for shallow networks resembles the ACF of brown noise. As the network gets deeper, the ACF quickly comes to resemble that of white noise.\nTheorem 1 explains this phenomenon. We show that correlations between gradients decrease exponentially 12L with depth in feedforward rectifier networks.\nTraining is difficult when gradients behave like white noise. The shattered gradient problem is that the spatial structure of gradients is progressively obliterated as neural nets deepen. The problem is clearly visible when inputs are taken from a one-dimensional grid, but is difficult to observe when inputs are randomly sampled from a highdimensional dataset.\nShattered gradients undermine the effectiveness of algorithms that assume gradients at nearby points are similar such as momentum-based and accelerated methods (Sutskever et al., 2013; Balduzzi et al., 2017). If dfWdnj behaves like white noise, then a neuron’s effect on the output of the network (whether increasing weights causes the network to output more or less) becomes extremely unstable\nmaking learning difficult.\nGradients of deep resnets lie in between brown and white noise. Introducing skip-connections allows much deeper networks to be trained (Srivastava et al., 2015; He et al., 2016b;a; Greff et al., 2017). Skip-connections significantly change the correlation structure of gradients. Figure 1c shows the concrete example of a 50-layer resnet which has markedly more structure than the equivalent feedforward net (figure 1b). Figure 2b shows the ACF of resnets of different depths. Although the gradients become progressively less structured, they do not whiten to the extent of the gradients in standard feedforward networks— there are still correlations in the 50-layer resnet whereas in the equivalent feedforward net, the gradients are indistinguishable from white noise. Figure 2c shows the dramatic effect of recently proposed -rescaling (Szegedy et al., 2016): the ACF of even the 50 layer network resemble brown-noise.\nTheorem 3 shows that correlations between gradients decay sublinearly with depth 1p\nL for resnets with batch normal-\nization. We also show, corollary 1, that modified highway networks (where the gates are scalars) can achieve a depth independent correlation structure on gradients. The analysis explains why skip-connections, combined with suitable rescaling, preserve the structure of gradients."
  }, {
    "heading": "1.2. Outline",
    "text": "Section 2 shows that batch normalization increases neural efficiency. We explore how batch normalization behaves differently in feedforward and resnets, and draw out facts that are relevant to the main results.\nThe main results are in section 3. They explain why gradients shatter and how skip-connections reduce shattering. The proofs are for a mathematically amenable model: fully-connected rectifier networks with the same number of hidden neurons in each layer. Section 4 presents empirical results which show gradients similarly shatter in convnets for real data. It also shows that shattering causes average\ngradients over minibatches to decrease with depth (relative to the average variance of gradients).\nFinally, section 5 proposes the LL-init (“looks linear initialization”) which eliminates shattering. Preliminary experiments show the LL-init allows training of extremely deep networks (⇠200 layers) without skip-connections."
  }, {
    "heading": "1.3. Related work",
    "text": "Carefully initializing neural networks has led to a series of performance breakthroughs dating back (at least) to the unsupervised pretraining in Hinton et al. (2006); Bengio et al. (2006). The insight of Glorot & Bengio (2010) is that controlling the variance of the distributions from which weights are sampled allows to control how layers progressively amplify or dampen the variance of activations and error signals. More recently, He et al. (2015) refined the approach to take rectifiers into account. Rectifiers effectively halve the variance since, at initialization and on average, they are active for half their inputs. Orthogonalizing weight matrices can yield further improvements albeit at a computational cost (Saxe et al., 2014; Mishkin & Matas, 2016). The observation that the norms of weights form a random walk was used by Sussillo & Abbott (2015) to tune the gains of neurons.\nIn short, it has proven useful to treat weights and gradients as random variables, and carefully examine their effect on the variance of the signals propagated through the network. This paper presents a more detailed analysis that considers correlations between gradients at different datapoints.\nThe closest work to ours is Veit et al. (2016), which shows resnets behave like ensembles of shallow networks. We provide a more detailed analysis of the effect of skipconnections on gradients. A recent paper showed resnets have universal finite-sample expressivity and may lack spurious local optima (Hardt & Ma, 2017) but does not explain why deep feedforward nets are harder to train than resnets. An interesting hypothesis is that skip-connections improve performance by breaking symmetries (Orhan, 2017).\nThe Shattered Gradients Problem"
  }, {
    "heading": "2. Observations on batch normalization",
    "text": "Batch normalization was introduced to reduce covariate shift (Ioffe & Szegedy, 2015). However, it has other effects that are less well-known – and directly impact the correlation structure of gradients. We investigate the effect of batch normalization on neuronal activity at initialization (i.e. when it mean-centers and rescales to unit variance).\nWe first investigate batch normalization’s effect on neural activations. Neurons are active for half their inputs on average, figure 3, with or without batch normalization. Figure 3 also shows how often neurons are co-active for two inputs. With batch normalization, neurons are co-active for 14 of distinct pairs of inputs, which is what would happen if activations were decided by unbiased coin flips. Without batch normalization, the co-active proportion climbs with depth, suggesting neuronal responses are increasingly redundant. Resnets with batch normalization behave the same as feedforward nets (not shown).\nFigure 4 takes a closer look. It turns out that computing the proportion of inputs causing neurons to be active on average is misleading. The distribution becomes increasingly bimodal with depth. In particular, neurons are either always active or always inactive for layer 50 in the feedforward net without batch normalization (blue histogram in figure 4a). Batch normalization causes most neurons to be active for half the inputs, blue histograms in figures 4b,c.\nNeurons that are always active may as well be linear. Neurons that are always inactive may as well not exist. It follows that batch normalization increases the efficiency with which rectifier nonlinearities are utilized.\nThe increased efficiency comes at a price. The raster plot for feedforward networks resembles static television noise: the spatial structure is obliterated. Resnets (Figure 4c) exhibit a compromise where neurons are utilized efficiently but the spatial structure is also somewhat preserved. The preservation of spatial structure is quantified via the contiguity histograms which counts long runs of consistent activation. Resnets maintain a broad distribution of contiguity even with deep networks whereas batch normalization on feedforward nets shatters these into small sections."
  }, {
    "heading": "3. Analysis",
    "text": "This section analyzes the correlation structure of gradients in neural nets at initialization. The main ideas and results are presented; the details provided in section A3.\nPerhaps the simplest way to probe the structure of a random process is to measure the first few moments: the mean, variance and covariance. We investigate how the correlation between typical datapoints (defined below) changes with network structure and depth. Weaker correlations correspond to whiter gradients. The analysis is for fullyconnected networks. Extending to convnets involves (significant) additional bookkeeping.\nProof strategy. The covariance defines an inner product on the vector space of real-valued random variables with mean zero and finite second moment. It was shown in Balduzzi et al. (2015); Balduzzi (2016) that the gradients in neural nets are sums of path-weights over active paths, see section A3. The first step is to observe that path-weights are orthogonal with respect to the variance inner product. To express gradients as linear combinations of path-weights is thus to express them over an orthogonal basis.\nWorking in the path-weight basis reduces computing the covariance between gradients at different datapoints to counting the number of co-active paths through the network. The second step is to count co-active paths and adjust for rescaling factors (e.g. due to batch normalization).\nThe following assumption is crucial to the analysis: Assumption 1 (typical datapoints). We say x(i) and x(j) are typical datapoints if half of neurons per layer are active for each and a quarter per layer are co-active for both. We assume all pairs of datapoints are typical.\nThe assumption will not hold for every pair of datapoints. Figure 3 shows the assumption holds, on average, under batch normalization for both activations and coactivations. The initialization in He et al. (2015) assumes datapoints activate half the neurons per layer. The assumption on co-activations is implied by (and so weaker than) the assumption in Choromanska et al. (2015) that activations are Bernoulli random variables independent of the inputs.\nCorrelations between gradients. Weight updates in a neural network are proportional to\nwjk / #mbX\ni=1\nPX\np=1\n@`\n@fp @fp @nk @nk @wjk x (i) .\nwhere fp is the pth coordinate of the output of the network and nk is the output of the kth neuron. The derivatives @`@fp and @nk@wjk do not depend on the network’s internal structure. We are interested in the middle term @fp@nk , which does. It is mathematically convenient to work with the sumPP\np=1 fp over output coordinates of the network. Section 4 shows that our results hold for convnets on real-data with the cross-entropy loss. See also remark A2. Definition 1. Let ri := PP p=1 @fp @n (x (i) ) be the derivative with respect to neuron n given input x(i) 2 D. For each input x(i), the derivative ri is a real-valued random variable. It has mean zero since weights are sampled from distributions with mean zero. Denote the covariance and correlation of gradients by\nC(i, j) = E[ri rj ] and R(i, j) = E[ri rj ]q E[r2i ] · E[r2j ] ,\nwhere the expectations are w.r.t the distribution on weights."
  }, {
    "heading": "3.1. Feedforward networks",
    "text": "Without loss of generality, pick a neuron n separated from the output by L layers. The first major result is Theorem 1 (covariance of gradients in feedforward nets). Suppose weights are initialized with variance 2 = 2N following He et al. (2015). Then\na) The variance of the gradient at x(i) is C fnn(i) = 1.\nb) The covariance is C fnn(i, j) = 12L .\nPart (a) recovers the observation in He et al. (2015) that setting 2 = 2N preserves the variance across layers in rectifier networks. Part (b) is new. It explains the empirical observation, figure 2a, that gradients in feedforward nets whiten with depth. Intuitively, gradients whiten because the number of paths through the network grows exponentially faster with depth than the fraction of co-active paths, see section A3 for details."
  }, {
    "heading": "3.2. Residual networks",
    "text": "The residual modules introduced in He et al. (2016a) are\nxl = xl 1 +W l⇢BN ⇣ V l⇢BN (xl 1) ⌘\nwhere ⇢BN (a) = ⇢(BN(a)) and ⇢(a) = max(0, a) is the rectifier. We analyse the stripped-down variant\nxl = ↵ · xl 1 + ·Wl⇢BN (xl 1)\n(2)\nwhere ↵ and are rescaling factors. Dropping Vl⇢BN makes no essential difference to the analysis. The - rescaling was introduced in Szegedy et al. (2016) where it was observed setting 2 [0.1, 0.3] reduces instability. We include ↵ for reasons of symmetry. Theorem 2 (covariance of gradients in resnets). Consider a resnet with batch normalization disabled and ↵ = = 1. Suppose 2 = 2N as above. Then\na) The variance of the gradient at x(i) is Cres(i) = 2L.\nThe Shattered Gradients Problem\nb) The covariance is Cres(i, j) = 3 2 L.\nThe correlation is Rres(i, j) = 3 4 L.\nThe theorem implies there are two problems in resnets without batch normalization: (i) the variance of gradients grows and (ii) their correlation decays exponentially with depth. Both problems are visible empirically."
  }, {
    "heading": "3.3. Rescaling in Resnets",
    "text": "A solution to the exploding variance of resnets is to rescale layers by ↵ = 1p\n2 which yields\nCres ↵= p 2 (i) = 1 and Rres ↵= p 2 (i, j) =\n✓ 3\n4\n◆L\nand so controls the variance but the correlation between gradients still decays exponentially with depth. Both theoretical predictions hold empirically.\nIn practice, ↵-rescaling is not used. Instead, activations are rescaled by batch normalization (Ioffe & Szegedy, 2015) and, more recently, setting 2 [0.1, 0.3] per Szegedy et al. (2016). The effect is dramatic: Theorem 3 (covariance of gradients in resnets with BN and rescaling). Under the assumptions above, for resnets with batch normalization and -rescaling,\na) the variance is Cres ,BN(i) = 2(L 1) + 1; b) the covariance1 is Cres ,BN(i, j) ⇠ p L; and\nthe correlation is Rres ,BN(i, j) ⇠ 1 pL .\nThe theorem explains the empirical observation, figure 2a, that gradients in resnets whiten much more slowly with depth than feedforward nets. It also explains why setting near zero further reduces whitening.\nBatch normalization changes the decay of the correlations from 12L to 1p L\n. Intuitively, the reason is that the variance of the outputs of layers grows linearly, so batch normalization rescales them by different amounts. Rescaling by introduces a constant factor. Concretely, the model predicts using batch normalization with = 0.1 on a 100- layer resnet gives typical correlation Rres0.1,BN(i, j) = 0.7. Setting = 1.0 gives Rres1.0,BN(i, j) = 0.1. By contrast, a 100-layer feedforward net has correlation indistinguishable from zero."
  }, {
    "heading": "3.4. Highway networks",
    "text": "Highway networks can be thought of as a generalization of resnets, that were in fact introduced slightly earlier (Srivas-\n1See section A3.4 for exact computations.\ntava et al., 2015; Greff et al., 2017). The standard highway network has layers of the form\nxl = 1 T (xl 1) · xl 1 + T (xl 1) ·H(xl 1)\nwhere T (·) and H(·) are learned gates and features respectively. Consider the following modification where 1 and 2 are scalars satisfying 21 + 22 = 1:\nxl = 1 · xl 1 + 2 ·Wl⇢(xl 1)\nThe module can be recovered by judiciously choosing ↵ and in equation (2). However, it is worth studying in its own right:\nCorollary 1 (covariance of gradients in highway networks). Under the assumptions above, for modified highway networks with -rescaling,\na) the variance of gradients is CHN (i) = 1; and\nb) the correlation is RHN (i, j) = 21 + 1 2 2 2 L.\nIn particular, if 1 = q 1 1L and 2 = q 1 L then the correlation between gradients does not decay with depth\nlim L!1 RHN (i, j) = 1p e .\nThe tradeoff is that the contributions of the layers becomes increasingly trivial (i.e. close to the identity) as L ! 1."
  }, {
    "heading": "4. Gradients shatter in convnets",
    "text": "In this section we provide empirical evidence that the main results also hold for deep convnets using the CIFAR-10 dataset. We instantiate feedforward and resnets with 2, 4, 10, 24 and 50 layers of equivalent size. Using a slight modification of the “bottleneck” architecture in He et al. (2016a), we introduce one skip-connection for every two convolutional layers and both network architectures use batch normalization.\nFigures 5a and b compare the covariance of gradients in the first layer of feedforward and resnets ( = 0.1) with a minibatch of 256 random samples from CIFAR-10 for networks of depth 2 and 50. To highlight the spatial structure of the gradients, the indices of the minibatches were reordered according to a k-means clustering (k = 10) applied to the gradients of the two-layer networks. The same permutation is used for all networks within a row. The spatial structure is visible in both two-layer networks, although it is more apparent in the resnet. In the feedforward network the structure quickly disappears with depth. In the resnet, the structure remains apparent at 50 layers.\nTo quantify this effect we consider the “whiteness” of the gradient using relative effective rank. Let be the matrix whose columns are the gradients with respect to the input, for each datapoint x(i) in a minibatch. The effective rank is r( ) = tr( > )/k k22 and measures the intrinsic dimension of a matrix (Vershynin, 2012). It is bounded above by the rank of —a matrix with highly correlated columns and therefore more structure will have a lower effective rank. We are interested in the effective rank of the covariance matrix of the gradients relative to a “white” matrix Y of the same dimensions with i.i.d. Gaussian entries. The relative effective rank r( )/r(Y) measures the similarity between the second moments of and Y.\nFigure 5c shows that the relative effective rank (averaged over 30 minibatches) grows much faster as a function of depth for networks without skip-connections. For resnets, the parameter slows down the rate of growth of the effective rank as predicted by theorem 3.\nFigure 5d shows the average `2-norm of the gradient in each coordinate (normalized by the standard deviation computed per minibatch). We observe that this quantity decays much more rapidly as a function of depth for feedforward networks. This is due to the effect of averaging increasingly whitening gradients within each minibatch. In other words, the noise within minibatches overwhelms the signal. The phenomenon is much less pronounced in resnets.\nTaken together these results confirm the results in section 3 for networks with convolutional layers and show that the gradients in resnets are indeed more structured than those in feedforward nets and therefore do not vanish when averaged within a minibatch. This phenomena allows for the training of very deep resnets."
  }, {
    "heading": "5. The “looks linear” initialization",
    "text": "Shattering gradients are not a problem for linear networks, see remark after equation (1). Unfortunately, linear networks are not useful since they lack expressivity.\nThe LL-init combines the best of linear and rectifier nets by initializing rectifiers to look linear. Several implementations are possible; see Zagoruyko & Komodakis (2017) for related architectures yielding good empirical results. We use concatenated rectifiers or CReLUs (Shang et al., 2016):\nx 7! ✓\n⇢(x) ⇢( x)\n◆\nThe key observation is that initializing weights with a mirrored block structure yields linear outputs\nW W · ✓\n⇢(x) ⇢( x)\n◆ = W⇢(x) W⇢( x) = Wx.\nThe output will cease to be linear as soon as weight updates cause the two blocks to diverge.\nAn alternative architecture is based on the PReLU introduced in He et al. (2015):\nPReLU: ⇢p(x) = ( x if x > 0 ax else.\nSetting a = 1 at initialization obtains a different kind of LL-init. Preliminary experiments, not shown, suggest that the LL-init is more effective on the CReLU-based architecture than PReLU. The reason is unclear.\nOrthogonal convolutions. A detailed analysis of learning in linear neural networks by Saxe et al. (2014) showed, theoretically and experimentally, that arbitrarily deep linear networks can be trained when initialized with orthogonal weights. Motivated by these results, we use the LL-init in conjunction with orthogonal weights.\nThe Shattered Gradients Problem\nDepth\nWe briefly describe how we orthogonally initialize a kernel K of size A ⇥ B ⇥ 3 ⇥ 3 where A B. First, set all the entries of K to zero. Second, sample a random matrix W of size (A ⇥ B) with orthonormal columns. Finally, set K[:, :, 2, 2] := W. The kernel is used in conjunction with strides of one and zero-padding."
  }, {
    "heading": "5.1. Experiments",
    "text": "We investigated the performance of the LL-init on very deep networks, evaluated on CIFAR-10. The aim was not to match the state-of-the-art, but rather to test the hypothesis that shattered gradients adversely affect training in very deep rectifier nets. We therefore designed an experiment where (concatenated) rectifier nets are and are not shattered at initialization. We find that the LL-init allows to train significantly deeper nets, which confirms the hypothesis.\nWe compared a CReLU architecture with an orthogonal LL-init against an equivalent CReLU network, resnet, and a standard feedforward ReLU network. The other networks were initialized according to He et al. (2015). The architectures are thin with the number of filters per layer in the ReLU networks ranging from 8 at the input layer to 64, see section A4. Doubling with each spatial extent reduction. The thinness of the architecture makes it particularly difficult for gradients to propagate at high depth. The reduction is performed by convolutional layers with strides of 2, and following the last reduction the representation is passed to a fully connected layer with 10 neurons for classification. The numbers of filters per layer of the CReLU models were adjusted by a factor of 1/ p 2 to achieve parameter parity with the ReLU models. The Resnet version of the model is the same as the basic ReLU model with skip-connections after every two modules following He et al. (2016a).\nUpdates were performed with Adam (Kingma & Ba, 2015). Training schedules were automatically determined by an auto-scheduler that measures how quickly the loss on the training set has been decreasing over the last ten epochs, and drops the learning rate if a threshold remains crossed for five measurements in a row. Standard data augmentation was performed; translating up to 4 pixels in any direction and flipping horizontally with p = 0.5.\nResults are shown in figure 6. Each point is the mean of 10 trained models. The ReLU and CReLU nets performed steadily worse with depth; the ReLU net performing worse than the linear baseline of 40% at the maximum depth of 198. The feedforward net with LL-init performs comparably to a resnet, suggesting that shattered gradients are a large part of the problem in training very deep networks."
  }, {
    "heading": "6. Conclusion",
    "text": "The representational power of rectifier networks depends on the number of linear regions into which it splits the input space. It was shown in Montufar et al. (2014) that the number of linear regions can grow exponentially with depth (but only polynomially with width). Hence deep neural networks are capable of far richer mappings than shallow ones (Telgarsky, 2016). An underappreciated consequence of the exponential growth in linear regions is the proliferation of discontinuities in the gradients of rectifier nets.\nThis paper has identified and analyzed a previously unnoticed problem with gradients in deep networks: in a randomly initialized network, the gradients of deeper layers are increasingly uncorrelated. Shattered gradients play havoc with the optimization methods currently in use2 and may explain the difficulty in training deep feedforward networks even when effective initialization and batch normalization are employed. Averaging gradients over minibatches becomes analogous to integrating over white noise – there is no clear trend that can be summarized in a single average direction. Shattered gradients can also introduce numerical instabilities, since small differences in the input can lead to large differences in gradients.\nSkip-connections in combination with suitable rescaling reduce shattering. Specifically, we show that the rate at which correlations between gradients decays changes from exponential for feedforward architectures to sublinear for resnets. The analysis uncovers a surprising and (to us at least) unexpected side-effect of batch normalization. An alternate solution to the shattering gradient problem is to design initializations that do not shatter such as the LLinit. An interesting future direction is to investigate hybrid architectures combining the LL-init with skip connections.\n2Note that even the choice of a step size in SGD typically reflects an assumption about the correlation scale of the gradients.\nThe Shattered Gradients Problem"
  }],
  "year": 2017,
  "references": [{
    "title": "Deep Online Convex Optimization with Gated Games",
    "authors": ["Balduzzi", "David"],
    "venue": "In arXiv:1604.01952,",
    "year": 2016
  }, {
    "title": "Kickback cuts Backprop’s red-tape: Biologically plausible credit assignment in neural networks",
    "authors": ["Balduzzi", "David", "Vanchinathan", "Hastagiri", "Buhmann", "Joachim"],
    "venue": "In AAAI Conference on Artificial Intelligence (AAAI),",
    "year": 2015
  }, {
    "title": "Neural Taylor Approximations: Convergence and Exploration in Rectifier Networks",
    "authors": ["Balduzzi", "David", "McWilliams", "Brian", "Butler-Yeoman", "Tony"],
    "venue": "In ICML,",
    "year": 2017
  }, {
    "title": "Greedy Layer-Wise Training of Deep Networks",
    "authors": ["Y Bengio", "P Lamblin", "D. Popovici", "H. Larochelle"],
    "venue": "In NIPS,",
    "year": 2006
  }, {
    "title": "Learning long-term dependencies with gradient descent is difficult",
    "authors": ["Bengio", "Yoshua", "P Simard", "P. Frasconi"],
    "venue": "IEEE Trans. Neur. Net.,",
    "year": 1994
  }, {
    "title": "The loss surface of multilayer networks",
    "authors": ["A Choromanska", "M Henaff", "M Mathieu", "G B Arous", "Y. LeCun"],
    "venue": "In Journal of Machine Learning Research: Workshop and Conference Proceeedings,",
    "year": 2015
  }, {
    "title": "Understanding the difficulty of training deep feedforward neural networks",
    "authors": ["Glorot", "Xavier", "Bengio", "Yoshua"],
    "venue": "In AISTATS,",
    "year": 2010
  }, {
    "title": "Highway and Residual Networks learn Unrolled Iterative Estimation",
    "authors": ["Greff", "Klaus", "Srivastava", "Rupesh Kumar", "Schmidhuber", "Juergen"],
    "venue": "In ICLR,",
    "year": 2017
  }, {
    "title": "Identity Matters in Deep Learning",
    "authors": ["Hardt", "Moritz", "Ma", "Tengyu"],
    "venue": "In ICLR,",
    "year": 2017
  }, {
    "title": "Delving Deep into Rectifiers: Surpassing Human-Level Performance on ImageNet Classification",
    "authors": ["He", "Kaiming", "Zhang", "Xiangyu", "Ren", "Shaoqing", "Sun", "Jian"],
    "venue": "In ICCV,",
    "year": 2015
  }, {
    "title": "Identity Mappings in Deep Residual Networks",
    "authors": ["He", "Kaiming", "Zhang", "Xiangyu", "Ren", "Shaoqing", "Sun", "Jian"],
    "venue": "In ECCV,",
    "year": 2016
  }, {
    "title": "Deep Residual Learning for Image Recognition",
    "authors": ["He", "Kaiming", "Zhang", "Xiangyu", "Ren", "Shaoqing", "Sun", "Jian"],
    "venue": "In CVPR,",
    "year": 2016
  }, {
    "title": "A Fast Learning Algorithm for Deep Belief Nets",
    "authors": ["GE Hinton", "S Osindero", "Teh", "Y W"],
    "venue": "Neural Computation,",
    "year": 2006
  }, {
    "title": "Untersuchungen zu dynamischen neuronalen Netzen",
    "authors": ["Hochreiter", "Sepp"],
    "venue": "Master’s thesis, Technische Universität München,",
    "year": 1991
  }, {
    "title": "Batch normalization: Accelerating deep network training by reducing internal covariate shift",
    "authors": ["Ioffe", "Sergey", "Szegedy", "Christian"],
    "venue": "In ICML,",
    "year": 2015
  }, {
    "title": "Adam: A method for stochastic optimization",
    "authors": ["Kingma", "Diederik P", "Ba", "Jimmy Lei"],
    "venue": "In ICLR,",
    "year": 2015
  }, {
    "title": "Imagenet classification with deep convolutional neural networks",
    "authors": ["A Krizhevsky", "I Sutskever", "Hinton", "G E"],
    "venue": "In Advances in Neural Information Processing Systems (NIPS),",
    "year": 2012
  }, {
    "title": "All you need is a good init",
    "authors": ["D Mishkin", "J. Matas"],
    "venue": "In ICLR,",
    "year": 2016
  }, {
    "title": "On the number of linear regions of deep neural networks",
    "authors": ["Montufar", "Guido F", "Pascanu", "Razvan", "Cho", "Kyunghyun", "Bengio", "Yoshua"],
    "venue": "In Advances in neural information processing systems,",
    "year": 2014
  }, {
    "title": "Skip Connections as Effective SymmetryBreaking",
    "authors": ["Orhan", "A Emin"],
    "venue": "In arXiv:1701.09175,",
    "year": 2017
  }, {
    "title": "Exact solutions to the nonlinear dynamics of learning in deep linear neural networks",
    "authors": ["Saxe", "Andrew M", "McClelland", "James L", "Ganguli", "Surya"],
    "venue": "In ICLR,",
    "year": 2014
  }, {
    "title": "Understanding and Improving Convolutional Neural Networks via Concatenated Rectified Linear Units",
    "authors": ["Shang", "Wenling", "Sohn", "Kihyuk", "Almeida", "Diogo", "Lee", "Honglak"],
    "year": 2016
  }, {
    "title": "Random Walk Initialization for Training Very Deep Feedforward Networks",
    "authors": ["Sussillo", "David", "Abbott", "L F"],
    "venue": "In ICLR,",
    "year": 2015
  }, {
    "title": "On the importance of initialization and momentum in deep learning",
    "authors": ["Sutskever", "Ilya", "Martens", "James", "Dahl", "George", "Hinton", "Geoffrey"],
    "venue": "In Proceedings of the 30th International Conference on Machine Learning",
    "year": 2013
  }, {
    "title": "Going Deeper With Convolutions",
    "authors": ["Szegedy", "Christian", "Liu", "Wei", "Jia", "Yangqing", "Sermanet", "Pierre", "Reed", "Scott", "Anguelov", "Dragomir", "Erhan", "Dumitru", "Vanhoucke", "Vincent", "Rabinovich", "Andrew"],
    "venue": "In CVPR,",
    "year": 2015
  }, {
    "title": "Inception-v4, Inception-ResNet and the Impact of Residual Connections on Learning",
    "authors": ["Szegedy", "Christian", "Ioffe", "Sergey", "Vanhoucke", "Vincent"],
    "venue": "In arXiv:1602.07261,",
    "year": 2016
  }, {
    "title": "Benefits of depth in neural networks",
    "authors": ["Telgarsky", "Matus"],
    "venue": "In COLT,",
    "year": 2016
  }, {
    "title": "Residual Networks Behave Like Ensembles of Relatively Shallow Networks",
    "authors": ["Veit", "Andreas", "Wilber", "Michael J", "Belongie", "Serge"],
    "venue": "In NIPS,",
    "year": 2016
  }, {
    "title": "Introduction to the non-asymptotic analysis of random matrices",
    "authors": ["Vershynin", "Roman"],
    "venue": "In Compressed sensing,",
    "year": 2012
  }, {
    "title": "DiracNets: Training Very Deep Neural Networks Without Skip-Connections",
    "authors": ["Zagoruyko", "Sergey", "Komodakis", "Nikos"],
    "venue": "In arXiv:1706.00388,",
    "year": 2017
  }],
  "id": "SP:59b599d9abb2125f1875f5cda0bb14d0938304ed",
  "authors": [{
    "name": "David Balduzzi",
    "affiliations": []
  }, {
    "name": "Marcus Frean",
    "affiliations": []
  }, {
    "name": "Lennox Leary",
    "affiliations": []
  }, {
    "name": "JP Lewis",
    "affiliations": []
  }, {
    "name": "Kurt Wan-Duo",
    "affiliations": []
  }, {
    "name": "Brian McWilliams",
    "affiliations": []
  }],
  "abstractText": "A long-standing obstacle to progress in deep learning is the problem of vanishing and exploding gradients. Although, the problem has largely been overcome via carefully constructed initializations and batch normalization, architectures incorporating skip-connections such as highway and resnets perform much better than standard feedforward architectures despite wellchosen initialization and batch normalization. In this paper, we identify the shattered gradients problem. Specifically, we show that the correlation between gradients in standard feedforward networks decays exponentially with depth resulting in gradients that resemble white noise whereas, in contrast, the gradients in architectures with skip-connections are far more resistant to shattering, decaying sublinearly. Detailed empirical evidence is presented in support of the analysis, on both fully-connected networks and convnets. Finally, we present a new “looks linear” (LL) initialization that prevents shattering, with preliminary experiments showing the new initialization allows to train very deep networks without the addition of skip-connections.",
  "title": "The Shattered Gradients Problem: If resnets are the answer, then what is the question?"
}