{
  "sections": [{
    "text": "Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics, pages 321–331 Vancouver, Canada, July 30 - August 4, 2017. c©2017 Association for Computational Linguistics\nhttps://doi.org/10.18653/v1/P17-1030"
  }, {
    "heading": "1 Introduction",
    "text": "Language modeling is a fundamental task, used for example to predict the next word or character in a text sequence given the context. Recently, recurrent neural networks (RNNs) have shown promising performance on this task (Mikolov et al., 2010; Sutskever et al., 2011). RNNs with Long Short-Term Memory (LSTM) units (Hochreiter and Schmidhuber, 1997) have emerged as a popular architecture, due to their representational power and effectiveness at capturing long-term dependencies.\nRNNs are usually trained via back-propagation through time (Werbos, 1990), using stochastic op-\n∗Equal contribution. †Corresponding author.\ntimization methods such as stochastic gradient descent (SGD) (Robbins and Monro, 1951); stochastic methods of this type are particularly important for training with large data sets. However, this approach often provides a maximum a posteriori (MAP) estimate of model parameters. The MAP solution is a single point estimate, ignoring weight uncertainty (Blundell et al., 2015; HernándezLobato and Adams, 2015). Natural language often exhibits significant variability, and hence such a point estimate may make over-confident predictions on test data.\nTo alleviate overfitting RNNs, good regularization is known as a key factor to successful applications. In the neural network literature, Bayesian learning has been proposed as a principled method to impose regularization and incorporate model uncertainty (MacKay, 1992; Neal, 1995), by imposing prior distributions on model parameters. Due to the intractability of posterior distributions in neural networks, Hamiltonian Monte Carlo (HMC) (Neal, 1995) has been used to provide sample-based approximations to the true posterior. Despite the elegant theoretical property of asymptotic convergence to the true posterior, HMC and other conventional Markov Chain Monte Carlo methods are not scalable to large training sets.\nThis paper seeks to scale up Bayesian learning of RNNs to meet the challenge of the increasing amount of “big” sequential data in natural language processing, leveraging recent advances in stochastic gradient Markov Chain Monte Carlo (SG-MCMC) algorithms (Welling and Teh, 2011; Chen et al., 2014; Ding et al., 2014; Li et al., 2016a,b). Specifically, instead of training a single network, SG-MCMC is employed to train an ensemble of networks, where each network has its parameters drawn from a shared posterior distribution. This is implemented by adding additional\n321\ngradient noise during training and utilizing model averaging when testing.\nThis simple procedure has the following salutary properties for training neural networks: (i) When training, the injected noise encourages model-parameter trajectories to better explore the parameter space. This procedure was also empirically found effective in Neelakantan et al. (2016). (ii) Model averaging when testing alleviates overfitting and hence improves generalization, transferring uncertainty in the learned model parameters to subsequent prediction. (iii) In theory, both asymptotic and non-asymptotic consistency properties of SG-MCMC methods in posterior estimation have been recently established to guarantee convergence (Chen et al., 2015a; Teh et al., 2016). (iv) SG-MCMC is scalable; it shares the same level of computational cost as SGD in training, by only requiring the evaluation of gradients on a small mini-batch. To the authors’ knowledge, RNN training using SG-MCMC has not been investigated previously, and is a contribution of this paper. We also perform extensive experiments on several natural language processing tasks, demonstrating the effectiveness of SG-MCMC for RNNs, including character/word-level language modeling, image captioning and sentence classification."
  }, {
    "heading": "2 Related Work",
    "text": "Several scalable Bayesian learning methods have been proposed recently for neural networks. These come in two broad categories: stochastic variational inference (Graves, 2011; Blundell et al., 2015; Hernández-Lobato and Adams, 2015) and\nSG-MCMC methods (Korattikara et al., 2015; Li et al., 2016a). While prior work focuses on feed-forward neural networks, there has been little if any research reported for RNNs using SGMCMC.\nDropout (Hinton et al., 2012; Srivastava et al., 2014) is a commonly used regularization method for training neural networks. Recently, several works have studied how to apply dropout to RNNs (Pachitariu and Sahani, 2013; Bayer et al., 2013; Pham et al., 2014; Zaremba et al., 2014; Bluche et al., 2015; Moon et al., 2015; Semeniuta et al., 2016; Gal and Ghahramani, 2016b). Among them, naive dropout (Zaremba et al., 2014) can impose weight uncertainty only on encoding weights (those that connect input to hidden units) and decoding weights (those that connect hidden units to output), but not the recurrent weights (those that connect consecutive hidden states). It has been concluded that noise added in the recurrent connections leads to model instabilities, hence disrupting the RNN’s ability to model sequences.\nDropout has been recently shown to be a variational approximation technique in Bayesian learning (Gal and Ghahramani, 2016a; Kingma et al., 2015). Based on this, (Gal and Ghahramani, 2016b) proposed a new variant of dropout that can be successfully applied to recurrent layers, where the same dropout masks are shared along time for encoding, decoding and recurrent weights, respectively. Alternatively, we focus on SG-MCMC, which can be viewed as the Bayesian interpretation of dropout from the perspective of posterior sampling (Li et al., 2016c); this also allows imposition of model uncertainty on recurrent layers, enhancing performance. A comparison of naive dropout and SG-MCMC is illustrated in Fig. 1."
  }, {
    "heading": "3 Recurrent Neural Networks",
    "text": ""
  }, {
    "heading": "3.1 RNN as Bayesian Predictive Models",
    "text": "Consider data D = {D1, · · · ,DN}, where Dn , (Xn,Yn), with input Xn and output Yn. Our goal is to learn model parameters θ to best characterize the relationship from Xn to Yn, with corresponding data likelihood p(D|θ) =∏N n=1 p(Dn|θ). In Bayesian statistics, one sets a prior on θ via distribution p(θ). The posterior p(θ|D) ∝ p(θ)p(D|θ) reflects the belief concerning the model parameter distribution after observing the data. Given a test input X̃ (with missing output Ỹ), the uncertainty learned in training\nis transferred to prediction, yielding the posterior predictive distribution:\np(Ỹ|X̃,D)= ∫\nθ p(Ỹ|X̃,θ)p(θ|D)dθ . (1)\nWhen the input is a sequence, RNNs may be used to parameterize the input-output relationship. Specifically, consider input sequence X = {x1, . . . ,xT }, where xt is the input data vector at time t. There is a corresponding hidden state vector ht at each time t, obtained by recursively applying the transition function ht = H(ht−1,xt) (specified in Section 3.2; see Fig. 1). The output Y differs depending on the application: a sequence {y1, . . . ,yT } in language modeling or a discrete label in sentence classification. In RNNs the corresponding decoding function is p(y|h), described in Section 3.3."
  }, {
    "heading": "3.2 RNN Architectures",
    "text": "The transition function H(·) can be implemented with a gated activation function, such as Long Short-Term Memory (LSTM) (Hochreiter and Schmidhuber, 1997) or a Gated Recurrent Unit (GRU) (Cho et al., 2014). Both the LSTM and GRU have been proposed to address the issue of learning long-term sequential dependencies.\nLong Short-Term Memory The LSTM architecture addresses the problem of learning longterm dependencies by introducing a memory cell, that is able to preserve the state over long periods of time. Specifically, each LSTM unit has a cell containing a state ct at time t. This cell can be viewed as a memory unit. Reading or writing the cell is controlled through sigmoid gates: input gate it, forget gate ft, and output gate ot. The hidden units ht are updated as\nit = σ(Wixt +Uiht−1 + bi) ,\nft = σ(Wfxt +Ufht−1 + bf ) ,\not = σ(Woxt +Uoht−1 + bo) ,\nc̃t = tanh(Wcxt +Ucht−1 + bc) ,\nct = ft ct−1 + it c̃t , ht = ot tanh(ct) ,\nwhere σ(·) denotes the logistic sigmoid function, and represents the element-wise matrix multiplication operator. W{i,f,o,c} are encoding weights, and U{i,f,o,c} are recurrent weights, as shown in Fig. 1. b{i,f,o,c} are bias terms.\nVariants Similar to the LSTM unit, the GRU also has gating units that modulate the flow of information inside the hidden unit. It has been shown that a GRU can achieve similar performance to an LSTM in sequence modeling (Chung et al., 2014). We specify the GRU in the Supplementary Material.\nThe LSTM can be extended to the bidirectional LSTM and multilayer LSTM. A bidirectional LSTM consists of two LSTMs that are run in parallel: one on the input sequence and the other on the reverse of the input sequence. At each time step, the hidden state of the bidirectional LSTM is the concatenation of the forward and backward hidden states. In multilayer LSTMs, the hidden state of an LSTM unit in layer ` is used as input to the LSTM unit in layer ` + 1 at the same time step (Graves, 2013)."
  }, {
    "heading": "3.3 Applications",
    "text": "The proposed Bayesian framework can be applied to any RNN model; we focus on the following tasks to demonstrate the ideas.\nLanguage Modeling In word-level language modeling, the input to the network is a sequence of words, and the network is trained to predict the next word in the sequence with a softmax classifier. Specifically, for a length-T sequence, denote yt = xt+1 for t = 1, . . . , T − 1. x1 and yT are always set to a special START and END token, respectively. At each time t, there is a decoding function p(yt|ht) = softmax(Vht) to compute the distribution over words, where V are the decoding weights (the number of rows of V corresponds to the number of words/characters). We also extend this basic language model to consider other applications: (i) a character-level language model can be specified in a similar manner by replacing words with characters (Karpathy et al., 2016). (ii) Image captioning can be considered as a conditional language modeling problem, in which we learn a generative language model of the caption conditioned on an image (Vinyals et al., 2015; Gan et al., 2017).\nSentence Classification Sentence classification aims to assign a semantic category label y to a whole sentence X. This is usually implemented through applying the decoding function once at the end of sequence: p(y|hT ) = softmax(VhT ), where the final hidden state of a RNN hT is often considered as the summary of the sentence (here\nthe number of rows of V corresponds to the number of classes)."
  }, {
    "heading": "4 Scalable Learning with SG-MCMC",
    "text": ""
  }, {
    "heading": "4.1 The Pitfall of Stochastic Optimization",
    "text": "Typically there is no closed-form solution for the posterior p(θ|D), and traditional Markov Chain Monte Carlo (MCMC) methods (Neal, 1995) scale poorly for largeN . To ease the computational burden, stochastic optimization is often employed to find the MAP solution. This is equivalent to minimizing an objective of regularized loss function U(θ) that corresponds to a (non-convex) model of interest: θMAP = argminU(θ), U(θ) = − log p(θ|D). The expectation in (1) is approximated as:\np(Ỹ|X̃,D)= p(Ỹ|X̃,θMAP) . (2)\nThough simple and effective, this procedure largely loses the benefit of the Bayesian approach, because the uncertainty on weights is ignored. To more accurately approximate (1), we employ stochastic gradient (SG) MCMC (Welling and Teh, 2011)."
  }, {
    "heading": "4.2 Large-scale Bayesian Learning",
    "text": "The negative log-posterior is\nU(θ) , − log p(θ)− N∑\nn=1\nlog p(Dn|θ). (3)\nIn optimization,E = −∑Nn=1 log p(Dn|θ) is typically referred to as the loss function, and R ∝ − log p(θ) as a regularizer.\nFor large N , stochastic approximations are often employed:\nŨt(θ),− log p(θ)− N\nM\nM∑\nm=1\nlog p(Dim |θ), (4)\nwhere Sm = {i1, · · · , iM} is a random subset of the set {1, 2, · · · , N}, with M N . The gradient on this mini-batch is denoted as f̃t = ∇Ũt(θ), which is an unbiased estimate of the true gradient. The evaluation of (4) is cheap even when N is large, allowing one to efficiently collect a sufficient number of samples in large-scale Bayesian learning, {θs}Ss=1, where S is the number of samples (this will be specified later). These samples are used to construct a sample-based estimation to the expectation in (1):\nThe finite-time estimation errors of SG-MCMC methods are bounded (Chen et al., 2015a), which guarantees (5) is an unbiased estimate of (1) asymptotically under appropriate decreasing stepsizes."
  }, {
    "heading": "4.3 SG-MCMC Algorithms",
    "text": "SG-MCMC and stochastic optimization are parallel lines of work, designed for different purposes; their relationship has recently been revealed in the context of deep learning. The most basic SG-MCMC algorithm has been applied to Langevin dynamics, and is termed SGLD (Welling and Teh, 2011). To help convergence, a momentum term has been introduced in SGHMC (Chen et al., 2014), a “thermostat” has been devised in SGNHT (Ding et al., 2014; Gan et al., 2015) and preconditioners have been employed in pSGLD (Li et al., 2016a). These SG-MCMC algorithms often share similar characteristics with their counterpart approaches from the optimization literature such as the momentum SGD, Santa (Chen et al., 2016) and RMSprop/Adagrad (Tieleman and Hinton, 2012; Duchi et al., 2011). The interrelationships between SG-MCMC and optimizationbased approaches are summarized in Table 1.\nSGLD Stochastic Gradient Langevin Dynamics (SGLD) (Welling and Teh, 2011) draws posterior samples, with updates\nθt = θt−1 − ηtf̃t−1 + √ 2ηtξt , (6)\nwhere ηt is the learning rate, and ξt ∼ N (0, Ip) is a standard Gaussian random vector. SGLD is the SG-MCMC analog to stochastic gradient descent (SGD), whose parameter updates are given by:\nθt = θt−1 − ηtf̃t−1 . (7)\nAlgorithm 1: pSGLD Input: Default hyperparameter settings:\nηt = 1×10−3, λ = 10−8, β1 = 0.99. Initialize: v0 ← 0, θ1 ∼ N (0, I) ; for t = 1, 2, . . . , T do\n% Estimate gradient from minibatch St f̃t = ∇Ũt(θ); % Preconditioning vt ← β1vt−1 + (1− β1)f̃t f̃t; G−1t ← diag ( 1 ( λ1+ v 1 2 t )) ;\n% Parameter update ξt ∼ N (0, ηtG−1t ); θt+1← θt + ηt2 G−1t f̃t+ ξt;\nend\nSGD is guaranteed to converge to a local minimum under mild conditions (Bottou, 2010). The additional Gaussian term in SGLD helps the learning trajectory to explore the parameter space to approximate posterior samples, instead of obtaining a local minimum.\npSGLD Preconditioned SGLD (pSGLD) (Li et al., 2016a) was proposed recently to improve the mixing of SGLD. It utilizes magnitudes of recent gradients to construct a diagonal preconditioner to approximate the Fisher information matrix, and thus adjusts to the local geometry of parameter space by equalizing the gradients so that a constant stepsize is adequate for all dimensions. This is important for RNNs, whose parameter space often exhibits pathological curvature and saddle points (Pascanu et al., 2013), resulting in slow mixing. There are multiple choices of preconditioners; similar ideas in optimization include Adagrad (Duchi et al., 2011), Adam (Kingma and Ba, 2015) and RMSprop (Tieleman and Hinton, 2012). An efficient version of pSGLD, adopting RMSprop as the preconditioner G, is summarized in Algorithm 1, where denotes elementwise matrix division. When the preconditioner is fixed as the identity matrix, the method reduces to SGLD."
  }, {
    "heading": "4.4 Understanding SG-MCMC",
    "text": "To further understand SG-MCMC, we show its close connection to dropout/dropConnect (Srivastava et al., 2014; Wan et al., 2013). These methods improve the generalization ability of deep models, by randomly adding binary/Gaussian noise to the\nlocal units or global weights. For neural networks with the nonlinear function q(·) and consecutive layers h1 and h2, dropout and dropConnect are denoted as:\nDropout: h2 = ξ0 q(θh1), DropConnect: h2 = q((ξ0 θ)h1),\nwhere the injected noise ξ0 can be binary-valued with dropping rate p or its equivalent Gaussian form (Wang and Manning, 2013):\nBinary noise: ξ0 ∼ Ber(p), Gaussian noise: ξ0 ∼ N (1, p\n1− p).\nNote that ξ0 is defined as a vector for dropout, and a matrix for dropConnect. By combining dropConnect and Gaussian noise from the above, we have the update rule (Li et al., 2016c):\nθt+1 = ξ0 θt − η\n2 f̃t = θt −\nη 2 f̃t + ξ ′ 0 , (8)\nwhere ξ′0 ∼ N ( 0, p(1−p)diag(θ 2 t ) )\n; (8) shows that dropout/ dropConnect and SGLD in (6) share the same form of update rule, with the distinction being that the level of injected noise is different. In practice, the noise injected by SGLD may not be enough. A better way that we find to improve the performance is to jointly apply SGLD and dropout. This method can be interpreted as using SGLD to sample the posterior distribution of a mixture of RNNs, with mixture probability controlled by the dropout rate."
  }, {
    "heading": "5 Experiments",
    "text": "We present results on several tasks, including character/word-level language modeling, image captioning, and sentence classification. We do not perform any dataset-specific tuning other than early stopping on validation sets. When dropout is utilized, the dropout rate is set to 0.5. All experiments are implemented in Theano (Theano Development Team, 2016), using a NVIDIA GeForce GTX TITAN X GPU with 12GB memory.\nThe hyper-parameters for the proposed algorithm include step size, minibatch size, thinning interval, number of burn-in epochs and variance of the Gaussian priors. We list the specific values used in our experiments in Table 2. The explanation of these hyperparameters, the initialization of model parameters and model specifications on each dataset are provided in the Supplementary Material."
  }, {
    "heading": "5.1 Language Modeling",
    "text": "We first test character-level and word-level language modeling. The setup is as follows.\n• Following Karpathy et al. (2016), we test character-level language modeling on the War and Peace (WP) novel. The training/validation/test sets contain 260/32/33 batches, in which there are 100 characters. The vocabulary size is 87, and we consider a 2-hidden-layer RNN of dimension 128. • The Penn Treebank (PTB) corpus (Marcus\net al., 1993) is used for word-level language modeling. The dataset adopts the standard split (929K training words, 73K validation words, and 82K test words) and has a vocabulary of size 10K. We train LSTMs of three sizes; these are denoted the small/medium/large LSTM. All LSTMs have two layers and are unrolled for 20 steps. The small, medium and large LSTM has 200, 650 and 1500 units per layer, respectively.\nWe consider two types of training schemes on PTB corpus: (i) Successive minibatches: Following Zaremba et al. (2014), the final hidden states of the current minibatch are used as the initial hidden states of the subsequent minibatch (successive minibatches sequentially traverse the training set). (ii) Random minibatches: The initial hidden states of each minibatch are set to zero vectors, hence we can randomly sample minibatches in each update.\nWe study the effects of different types of architecture (LSTM/GRU/Vanilla RNN (Karpathy et al., 2016)) on the WP dataset, and effects of different learning algorithms on the PTB dataset. The comparison of test cross-entropy loss on WP is shown in Table 3. We observe that pSGLD consistently outperforms RMSprop. Table 4 summarizes the test set performance on PTB1. It is clear\n1The results reported here do not match Zaremba et al. (2014) due to the implementation details. However, we pro-\nthat our sampling-based method consistently outperforms the optimization counterpart, where the performance gain mainly comes from adding gradient noise and model averaging. When compared with dropout, SGLD performs better on the small LSTM model, but worse on the medium and large LSTM model. This may imply that dropout is suitable to regularizing large networks, while SGLD exhibits better regularization ability on small networks, partially due to the fact that dropout may inject a higher level of noise during training than SGLD. In order to inject a higher level of noise into SGLD, we empirically apply SGLD and dropout jointly, and found that this provided the best performace on the medium and large LSTM model.\nWe study three strategies to do model averaging, i.e., forward collection, backward collection and thinned collection. Given samples (θ1, · · · ,θK) and the number of samples S used for averaging, forward collection refers to using (θ1, · · · ,θS) for the evaluation of a test function, backward collection refers to using (θK−S+1, · · · ,θK), while thinned collection chooses samples from θ1 to θK with interval K/S. Fig. 2 plots the effects of these strategies, where Fig. 2(a) plots the perplexity of every single sample, Fig. 2(b) plots the perplexities using the three schemes. Only after 20\nvide a fair comparison to all methods.\nsamples is a converged perplexity achieved in the thinned collection, while it requires 30 samples for forward collection or 60 samples for backward collection. This is unsurprising, because thinned collection provides a better way to select samples. Nevertheless, averaging of samples provides significantly lower perplexity than using single samples. Note that the overfitting problem in Fig. 2(a) is also alleviated by model averaging.\nTo better illustrate the benefit of model averaging, we visualize in Fig. 3 the probabilities of each word in a randomly chosen test sentence. The first 3 rows are the results predicted by 3 distinctive model samples, respectively; the bottom row is the result after averaging. Their corresponding perplexities for the test sentence are also shown on the right of each row. The 3 individual samples provide reasonable probabilities. For example, the consecutive words “New York”, “stock exchange” and “did not” are assigned with a higher probability. After averaging, we can see a much lower perplexity, as the samples can complement each other. For example, though the second sample can yield the lowest single-model perplexity, its prediction on word “York” is still benefited from the other two via averaging."
  }, {
    "heading": "5.2 Image Caption Generation",
    "text": "We next consider the problem of image caption generation, which is a conditional RNN model, where image features are extracted by residual network (He et al., 2016), and then fed into the RNN to generate the caption. We present results on two benchmark datasets, Flickr8k (Hodosh et al., 2013) and Flickr30k (Young et al., 2014). These\n25.55the new york stock exchange did not fall apart 22.24the new york stock exchange did not fall apart 29.83the new york stock exchange did not fall apart\n21.98the new york stock exchange did not fall apart 0\n0.2\n0.4\n0.6\n0.8\nFigure 3: Predictive probabilities obtained by 3 samples and their average. Colors indicate normalized probability of each word. Best viewed in color.\na\"tan\"dog\"is\"playing\"in\"the\"grass a\"tan\"dog\"is\"playing\"with\"a\"red\"ball\"in\"the\"grass a\"tan\"dog\"with\"a\"red\"collar\"is\"running\"in\"the\"grass\na\"yellow\"dog\"runs\"through\"the\"grass a\"yellow\"dog\"is\"running\"through\"the\"grass a\"brown\"dog\"is\"running\"through\"the\"grass\na\"group\"of\"people\"stand\"in\"front\"of\"a\"building a\"group\"of\"people\"stand\"in\"front\"of\"a\"white\"building a\"group\"of\"people\"stand\"in\"front\"of\"a\"large\"building\na\"man\"and\"a\"woman\"walking\"on\"a\"sidewalk a\"man\"and\"a\"woman\"stand\"on\"a\"balcony a\"man\"and\"a\"woman\"standing\"on\"the\"ground\nFigure 4: Image captioning with different samples. Left are the given images, right are the corresponding captions. The captions in each box are from the same model sample.\ndatasets contain 8,000 and 31,000 images, respectively. Each image is annotated with 5 sentences. A single-layer LSTM is employed with the number of hidden units set to 512.\nThe widely used BLEU (Papineni et al., 2002), METEOR (Banerjee and Lavie, 2005), ROUGEL (Lin, 2004), and CIDEr-D (Vedantam et al., 2015) metrics are used to evaluate the performance. All the metrics are computed by using the code released by the COCO evaluation server (Chen et al., 2015b).\nTable 5 presents results for pSGLD/RMSprop\nTable 5: Performance on Flickr8k & Flickr30k: BLEU’s, METEOR, CIDEr, ROUGE-L and perplexity.\nMethods B-1 B-2 B-3 B-4 METEOR CIDEr ROUGE-L Perp. Results on Flickr8k RMSprop 0.640 0.427 0.288 0.197 0.205 0.476 0.500 16.64 RMSprop + Dropout 0.647 0.444 0.305 0.209 0.208 0.514 0.510 15.72 RMSprop + Gal’s Dropout 0.651 0.443 0.305 0.209 0.206 0.501 0.509 14.70 pSGLD 0.669 0.463 0.321 0.224 0.214 0.535 0.522 14.29 pSGLD + Dropout 0.656 0.450 0.309 0.211 0.209 0.512 0.512 14.26 Results on Flickr30k RMSprop 0.644 0.422 0.279 0.184 0.180 0.372 0.476 17.80 RMSprop + Dropout 0.656 0.435 0.295 0.200 0.185 0.396 0.481 18.05 RMSprop + Gal’s Dropout 0.636 0.429 0.290 0.197 0.190 0.408 0.480 17.27 pSGLD 0.657 0.438 0.300 0.206 0.192 0.421 0.490 15.61 pSGLD + Dropout 0.666 0.448 0.308 0.209 0.189 0.419 0.487 17.05\nwith or without dropout. In addition to (naive) dropout, we further compare pSGLD with the Gal’s dropout, recently proposed in Gal and Ghahramani (2016b), which is shown to be applicable to recurrent layers. Consistent with the results in the basic language modeling, pSGLD yields improved performance compared to RMSprop. For example, pSGLD provides 2.7 BLEU-4 score improvement over RMSprop on the Flickr8k dataset. By comparing pSGLD with RMSprop with dropout, we conclude that pSGLD exhibits better regularization ability than dropout on these two datasets.\nApart from modeling weight uncertainty, different samples from our algorithm may capture different aspects of the input image. An example with two images is shown in Fig. 4, where 2 randomly chosen model samples are considered for each image. For each model sample, the top 3 generated captions are presented. We use the beam search approach (Vinyals et al., 2015) to generate captions, with a beam of size 5. In Fig. 4, the two samples for the first image mainly differ in the color and activity of the dog, e.g., “tan” or “yellow”, “playing” or “running”, whereas for the second image, the two samples reflect different understanding of the image content."
  }, {
    "heading": "5.3 Sentence Classification",
    "text": "We study the task of sentence classification on 5 datasets as in Kiros et al. (2015): MR (Pang and Lee, 2005), CR (Hu and Liu, 2004), SUBJ (Pang and Lee, 2004), MPQA (Wiebe et al., 2005) and TREC (Li and Roth, 2002). A single-layer bidirectional LSTM is employed with the number of hidden units set to 400. Table 6 shows the test-\n5 10 15 #Epoch\n0.00\n0.05\n0.10\n0.15\n0.20\n0.25\nEr ro\nr\nTrain RMSprop RMSprop + Dropout pSGLD pSGLD + Dropout\n5 10 15 #Epoch\n0.10\n0.12\n0.14\n0.16\n0.18\n0.20\n0.22\n0.24\n0.26\nEr ro\nr\nValidation\n5 10 15 #Epoch\n0.10\n0.15\n0.20\nEr ro\nr\nTest\nFigure 5: Learning curves on TREC dataset.\ning classification errors. 10-fold cross-validation is used for evaluation on the first 4 datasets, while TREC has a pre-defined training/test split, and we run each algorithm 10 times on TREC. The combination of pSGLD and dropout consistently provides the lowest errors.\nIn the following, we focus on the analysis of TREC. Each sentence of TREC is a question, and the goal is to decide which topic type the question is most related to: location, human, numeric, abbreviation, entity or description. Fig. 5 plots the learning curves of different algorithms on the training, validation and testing sets of the TREC dataset. pSGLD and dropout have similar behavior: they explore the parameter space during learning, and thus coverge slower than RMSprop on the training dataset. However, the learned uncertainty alleviates overfitting and results in lower errors on the validation and testing datasets.\nTo further study the Bayesian nature of the proposed approach, in Fig. 6 we choose two testing sentences with high uncertainty (i.e., standard derivation in prediction) from the TREC dataset. Interestingly, after embedding to 2d-space with tSNE (Van der Maaten and Hinton, 2008), the two\nTable 6: Sentence classification errors on five benchmark datasets.\nMethods MR CR SUBJ MPQA TREC RMSprop 21.86±1.19 20.20±1.35 8.13±1.19 10.60±1.28 8.14±0.63 RMSprop + Dropout 20.52±0.99 19.57±1.79 7.24±0.86 10.66±0.74 7.48±0.47 RMSprop + Gal’s Dropout 20.22±1.12 19.29±1.93 7.52±1.17 10.59±1.12 7.34±0.66 pSGLD 20.36±0.85 18.72±1.28 7.00±0.89 10.54±0.99 7.48±0.82 pSGLD + Dropout 19.33±1.10 18.18±1.32 6.61±1.06 10.22±0.89 6.88±0.65\nsentences correspond to points lying on the boundary of different classes. We use 20 model samples to estimate the prediction mean and standard derivation on the true type and predicted type. The classifier yields higher probability on the wrong types, associated with higher standard derivations. One can leverage the uncertainty information to make decisions: either manually make a human judgement when uncertainty is high, or automatically choose the one with lower standard derivations when both types exhibits similar prediction means. A more rigorous usage of the uncertainty information is left as future work."
  }, {
    "heading": "5.4 Discussion",
    "text": "Ablation Study We investigate the effectivenss of each module in the proposed algorithm in Table 7 on two datasets: TREC and PTB. The small network size is used on PTB. Let M1 denote only gradient noise, and M2 denote only model averaging. As can be seen, The last sample in pSGLD (M1) does not necessarily bring better results than RMSprop, but the model averaging over the samples of pSGLD indeed provide better results than model averaging of RMSprop (M2). This indicates that both gradient noise and model averaging are crucial for good performance in pSGLD.\nRunning Time We report the training and testing time for image captioning on the Flickr30k dataset in Table 8. For pSGLD, the extra cost in training comes from adding gradient noise, and the extra cost in testing comes from model averaging. However, the cost in model averaging can be alleviated via the distillation methods: learning a single neural network that approximates the results of either a large model or an ensemble of models (Korattikara et al., 2015; Kim and Rush, 2016; Kuncoro et al., 2016). The idea can be incorporated with our SG-MCMC technique to achieve the same goal, which we leave for our future work."
  }, {
    "heading": "6 Conclusion",
    "text": "We propose a scalable Bayesian learning framework using SG-MCMC, to model weight uncertainty in recurrent neural networks. The learning framework is tested on several tasks, including language models, image caption generation and sentence classification. Our algorithm outperforms stochastic optimization algorithms, indicating the importance of learning weight uncertainty in recurrent neural networks. Our algorithm requires little additional computational overhead in training, and multiple times of forward-passing for model averaging in testing.\nAcknowledgments This research was supported by ARO, DARPA, DOE, NGA, ONR and NSF. We acknowledge Wenlin Wang for the code on language modeling experiment."
  }],
  "year": 2017,
  "references": [{
    "title": "Meteor: An automatic metric for mt evaluation with improved correlation with human judgments",
    "authors": ["S. Banerjee", "A. Lavie."],
    "venue": "ACL workshop.",
    "year": 2005
  }, {
    "title": "On fast dropout and its applicability to recurrent networks",
    "authors": ["J. Bayer", "C. Osendorfer", "D. Korhammer", "N. Chen", "S. Urban", "P. van der Smagt."],
    "venue": "arXiv:1311.0701 .",
    "year": 2013
  }, {
    "title": "Where to apply dropout in recurrent neural networks for handwriting recognition? In ICDAR",
    "authors": ["T. Bluche", "C. Kermorvant", "J. Louradour"],
    "year": 2015
  }, {
    "title": "Weight uncertainty in neural networks",
    "authors": ["C. Blundell", "J. Cornebise", "K. Kavukcuoglu", "D. Wierstra."],
    "venue": "ICML.",
    "year": 2015
  }, {
    "title": "Large-scale machine learning with stochastic gradient descent",
    "authors": ["L Bottou."],
    "venue": "COMPSTAT .",
    "year": 2010
  }, {
    "title": "Bridging the gap between stochastic gradient MCMC and stochastic optimization",
    "authors": ["C. Chen", "D. Carlson", "Z. Gan", "C. Li", "L. Carin."],
    "venue": "AISTATS.",
    "year": 2016
  }, {
    "title": "On the convergence of stochastic gradient MCMC algorithms with high-order integrators",
    "authors": ["C. Chen", "N. Ding", "L. Carin."],
    "venue": "NIPS.",
    "year": 2015
  }, {
    "title": "Stochastic gradient Hamiltonian Monte Carlo",
    "authors": ["T. Chen", "E.B. Fox", "C. Guestrin."],
    "venue": "ICML.",
    "year": 2014
  }, {
    "title": "Microsoft coco captions: Data collection and evaluation server",
    "authors": ["X. Chen", "H. Fang", "T. Lin", "R. Vedantam", "S. Gupta", "P. Dollár", "C.L. Zitnick."],
    "venue": "arXiv:1504.00325 .",
    "year": 2015
  }, {
    "title": "Learning phrase representations using RNN encoder-decoder for statistical machine translation",
    "authors": ["K. Cho", "B. Van Merriënboer", "C. Gulcehre", "D. Bahdanau", "F. Bougares", "H. Schwenk", "Y. Bengio."],
    "venue": "EMNLP.",
    "year": 2014
  }, {
    "title": "Empirical evaluation of gated recurrent neural networks on sequence modeling",
    "authors": ["J. Chung", "C. Gulcehre", "K. Cho", "Y. Bengio."],
    "venue": "arXiv:1412.3555 .",
    "year": 2014
  }, {
    "title": "Bayesian sampling using stochastic gradient thermostats",
    "authors": ["N. Ding", "Y. Fang", "R. Babbush", "C. Chen", "R.D. Skeel", "H. Neven."],
    "venue": "NIPS.",
    "year": 2014
  }, {
    "title": "Adaptive subgradient methods for online learning and stochastic optimization",
    "authors": ["J. Duchi", "E. Hazan", "Y. Singer."],
    "venue": "JMLR .",
    "year": 2011
  }, {
    "title": "Dropout as a Bayesian approximation: Representing model uncertainty in deep learning",
    "authors": ["Y. Gal", "Z. Ghahramani."],
    "venue": "ICML.",
    "year": 2016
  }, {
    "title": "A theoretically grounded application of dropout in recurrent neural networks",
    "authors": ["Y. Gal", "Z. Ghahramani."],
    "venue": "NIPS.",
    "year": 2016
  }, {
    "title": "Scalable deep poisson factor analysis for topic modeling",
    "authors": ["Z. Gan", "C. Chen", "R. Henao", "D. Carlson", "L. Carin."],
    "venue": "ICML.",
    "year": 2015
  }, {
    "title": "Semantic compositional networks for visual captioning",
    "authors": ["Z. Gan", "C. Gan", "X. He", "Y. Pu", "K. Tran", "J. Gao", "L. Carin", "L. Deng."],
    "venue": "CVPR.",
    "year": 2017
  }, {
    "title": "Practical variational inference for neural networks",
    "authors": ["A. Graves."],
    "venue": "NIPS.",
    "year": 2011
  }, {
    "title": "Generating sequences with recurrent neural networks",
    "authors": ["A. Graves."],
    "venue": "arXiv:1308.0850 .",
    "year": 2013
  }, {
    "title": "Deep residual learning for image recognition",
    "authors": ["K. He", "X. Zhang", "S. Ren", "J. Sun."],
    "venue": "CVPR.",
    "year": 2016
  }, {
    "title": "Probabilistic backpropagation for scalable learning of Bayesian neural networks",
    "authors": ["J.M. Hernández-Lobato", "R.P. Adams."],
    "venue": "ICML.",
    "year": 2015
  }, {
    "title": "Improving neural networks by preventing co-adaptation of feature detectors",
    "authors": ["G. Hinton", "N. Srivastava", "A. Krizhevsky", "I. Sutskever", "R Salakhutdinov."],
    "venue": "arXiv:1207.0580 .",
    "year": 2012
  }, {
    "title": "Long shortterm memory",
    "authors": ["S. Hochreiter", "J. Schmidhuber."],
    "venue": "Neural computation.",
    "year": 1997
  }, {
    "title": "Framing image description as a ranking task: Data, models and evaluation metrics",
    "authors": ["M. Hodosh", "P. Young", "J. Hockenmaier."],
    "venue": "JAIR .",
    "year": 2013
  }, {
    "title": "Mining and summarizing customer reviews",
    "authors": ["M. Hu", "B. Liu."],
    "venue": "SIGKDD .",
    "year": 2004
  }, {
    "title": "Visualizing and understanding recurrent networks",
    "authors": ["A. Karpathy", "J. Johnson", "L. Fei-Fei."],
    "venue": "ICLR Workshop.",
    "year": 2016
  }, {
    "title": "Sequence-level knowledge distillation",
    "authors": ["Y. Kim", "A.M. Rush."],
    "venue": "EMNLP.",
    "year": 2016
  }, {
    "title": "Adam: A method for stochastic optimization",
    "authors": ["D. Kingma", "J. Ba."],
    "venue": "ICLR.",
    "year": 2015
  }, {
    "title": "Variational dropout and the local reparameterization trick",
    "authors": ["D. Kingma", "T. Salimans", "M. Welling."],
    "venue": "NIPS.",
    "year": 2015
  }, {
    "title": "Skip-thought vectors",
    "authors": ["R. Kiros", "Y. Zhu", "R. Salakhutdinov", "R. Zemel", "R. Urtasun", "A. Torralba", "S. Fidler."],
    "venue": "NIPS.",
    "year": 2015
  }, {
    "title": "Bayesian dark knowledge",
    "authors": ["A. Korattikara", "V. Rathod", "K. Murphy", "M. Welling."],
    "venue": "NIPS.",
    "year": 2015
  }, {
    "title": "Distilling an ensemble of greedy dependency parsers into one mst parser",
    "authors": ["A. Kuncoro", "M. Ballesteros", "L. Kong", "C. Dyer", "N.A. Smith."],
    "venue": "EMNLP.",
    "year": 2016
  }, {
    "title": "Preconditioned stochastic gradient Langevin dynamics for deep neural networks",
    "authors": ["C. Li", "C. Chen", "D. Carlson", "L. Carin."],
    "venue": "AAAI.",
    "year": 2016
  }, {
    "title": "Highorder stochastic gradient thermostats for Bayesian learning of deep models",
    "authors": ["C. Li", "C. Chen", "K. Fan", "L. Carin."],
    "venue": "AAAI.",
    "year": 2016
  }, {
    "title": "Learning weight uncertainty with stochastic gradient mcmc for shape classification",
    "authors": ["C. Li", "A. Stevens", "C. Chen", "Y. Pu", "Z. Gan", "L. Carin."],
    "venue": "CVPR.",
    "year": 2016
  }, {
    "title": "Learning question classifiers",
    "authors": ["X. Li", "D. Roth."],
    "venue": "ACL .",
    "year": 2002
  }, {
    "title": "Rouge: A package for automatic evaluation of summaries",
    "authors": ["C. Lin."],
    "venue": "ACL workshop.",
    "year": 2004
  }, {
    "title": "A practical Bayesian framework for backpropagation networks",
    "authors": ["D.J.C. MacKay."],
    "venue": "Neural computation.",
    "year": 1992
  }, {
    "title": "Building a large annotated corpus of english: The penn treebank",
    "authors": ["M.P. Marcus", "M.A. Marcinkiewicz", "B. Santorini."],
    "venue": "Computational linguistics .",
    "year": 1993
  }, {
    "title": "Recurrent neural network based language model",
    "authors": ["T. Mikolov", "M. Karafiát", "L. Burget", "J. Cernockỳ", "S. Khudanpur."],
    "venue": "INTERSPEECH.",
    "year": 2010
  }, {
    "title": "Rnndrop: A novel dropout for rnns in asr",
    "authors": ["T. Moon", "H. Choi", "H. Lee", "I. Song."],
    "venue": "ASRU .",
    "year": 2015
  }, {
    "title": "Bayesian learning for neural networks",
    "authors": ["R.M. Neal."],
    "venue": "PhD thesis, University of Toronto.",
    "year": 1995
  }, {
    "title": "Adding gradient noise improves learning for very deep networks",
    "authors": ["A. Neelakantan", "L. Vilnis", "Q. Le", "I. Sutskever", "L. Kaiser", "K. Kurach", "J. Martens."],
    "venue": "ICLR workshop.",
    "year": 2016
  }, {
    "title": "Regularization and nonlinearities for neural language models: when are they needed",
    "authors": ["M. Pachitariu", "M. Sahani"],
    "year": 2013
  }, {
    "title": "A sentimental education: Sentiment analysis using subjectivity summarization based on minimum cuts",
    "authors": ["B. Pang", "L. Lee."],
    "venue": "ACL .",
    "year": 2004
  }, {
    "title": "Seeing stars: Exploiting class relationships for sentiment categorization with respect to rating scales",
    "authors": ["B. Pang", "L. Lee."],
    "venue": "ACL .",
    "year": 2005
  }, {
    "title": "Bleu: a method for automatic evaluation of machine translation",
    "authors": ["K. Papineni", "S. Roukos", "T. Ward", "W. Zhu."],
    "venue": "ACL.",
    "year": 2002
  }, {
    "title": "On the difficulty of training recurrent neural networks",
    "authors": ["R. Pascanu", "T. Mikolov", "Y. Bengio."],
    "venue": "ICML.",
    "year": 2013
  }, {
    "title": "Dropout improves recurrent neural networks for handwriting recognition",
    "authors": ["V. Pham", "T. Bluche", "C. Kermorvant", "J. Louradour."],
    "venue": "ICFHR.",
    "year": 2014
  }, {
    "title": "A stochastic approximation method",
    "authors": ["H. Robbins", "S. Monro."],
    "venue": "The annals of mathematical statistics.",
    "year": 1951
  }, {
    "title": "Recurrent dropout without memory loss",
    "authors": ["S. Semeniuta", "A. Severyn", "E. Barth."],
    "venue": "arXiv:1603.05118 .",
    "year": 2016
  }, {
    "title": "Dropout: A simple way to prevent neural networks from overfitting",
    "authors": ["N. Srivastava", "G. Hinton", "A. Krizhevsky", "I. Sutskever", "R. Salakhutdinov."],
    "venue": "JMLR .",
    "year": 2014
  }, {
    "title": "Generating text with recurrent neural networks",
    "authors": ["I. Sutskever", "J. Martens", "G.E. Hinton."],
    "venue": "ICML.",
    "year": 2011
  }, {
    "title": "Consistency and fluctuations for stochastic gradient Langevin dynamics",
    "authors": ["Y.W. Teh", "A.H. Thiéry", "S.J. Vollmer."],
    "venue": "JMLR .",
    "year": 2016
  }, {
    "title": "Theano: A Python framework for fast computation of mathematical expressions",
    "authors": ["Theano Development Team."],
    "venue": "arXiv:1605.02688 .",
    "year": 2016
  }, {
    "title": "Lecture 6.5rmsprop: Divide the gradient by a running average of its recent magnitude. Coursera: Neural Networks for Machine Learning",
    "authors": ["T. Tieleman", "G. Hinton"],
    "year": 2012
  }, {
    "title": "Visualizing data using t-SNE",
    "authors": ["L. Van der Maaten", "G.E. Hinton."],
    "venue": "JMLR .",
    "year": 2008
  }, {
    "title": "Cider: Consensus-based image description evaluation",
    "authors": ["R. Vedantam", "C.L. Zitnick", "D. Parikh."],
    "venue": "CVPR.",
    "year": 2015
  }, {
    "title": "Show and tell: A neural image caption generator",
    "authors": ["O. Vinyals", "A. Toshev", "S. Bengio", "D. Erhan."],
    "venue": "CVPR.",
    "year": 2015
  }, {
    "title": "Regularization of neural networks using DropConnect",
    "authors": ["L. Wan", "M. Zeiler", "S. Zhang", "Y. LeCun", "R. Fergus."],
    "venue": "ICML.",
    "year": 2013
  }, {
    "title": "Fast Dropout training",
    "authors": ["S. Wang", "C. Manning."],
    "venue": "ICML.",
    "year": 2013
  }, {
    "title": "Bayesian learning via stochastic gradient Langevin dynamics",
    "authors": ["M. Welling", "Y.W. Teh."],
    "venue": "ICML.",
    "year": 2011
  }, {
    "title": "Backpropagation through time: what it does and how to do it",
    "authors": ["P. Werbos."],
    "venue": "Proceedings of the IEEE.",
    "year": 1990
  }, {
    "title": "Annotating expressions of opinions and emotions in language",
    "authors": ["J. Wiebe", "T. Wilson", "C. Cardie."],
    "venue": "Language resources and evaluation .",
    "year": 2005
  }, {
    "title": "From image descriptions to visual denotations: New similarity metrics for semantic inference over event descriptions",
    "authors": ["P. Young", "A. Lai", "M. Hodosh", "J. Hockenmaier."],
    "venue": "TACL .",
    "year": 2014
  }, {
    "title": "Recurrent neural network regularization",
    "authors": ["W. Zaremba", "I. Sutskever", "O. Vinyals."],
    "venue": "arXiv:1409.2329 .",
    "year": 2014
  }],
  "id": "SP:7e43521351f40887b78fe7a17c3fd30c3b0b6414",
  "authors": [{
    "name": "Zhe Gan",
    "affiliations": []
  }, {
    "name": "Chunyuan Li",
    "affiliations": []
  }, {
    "name": "Changyou Chen",
    "affiliations": []
  }, {
    "name": "Yunchen Pu",
    "affiliations": []
  }, {
    "name": "Qinliang Su",
    "affiliations": []
  }, {
    "name": "Lawrence Carin",
    "affiliations": []
  }],
  "abstractText": "Recurrent neural networks (RNNs) have shown promising performance for language modeling. However, traditional training of RNNs using back-propagation through time often suffers from overfitting. One reason for this is that stochastic optimization (used for large training sets) does not provide good estimates of model uncertainty. This paper leverages recent advances in stochastic gradient Markov Chain Monte Carlo (also appropriate for large training sets) to learn weight uncertainty in RNNs. It yields a principled Bayesian learning algorithm, adding gradient noise during training (enhancing exploration of the model-parameter space) and model averaging when testing. Extensive experiments on various RNN models and across a broad range of applications demonstrate the superiority of the proposed approach relative to stochastic optimization.",
  "title": "Scalable Bayesian Learning of Recurrent Neural Networks for Language Modeling"
}