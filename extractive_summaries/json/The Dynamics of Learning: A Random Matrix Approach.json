{
  "sections": [{
    "heading": "1. Introduction",
    "text": "Deep neural networks trained with backpropagation have commonly attained superhuman performance in applications of computer vision (Krizhevsky et al., 2012) and many others (Schmidhuber, 2015) and are thus receiving an unprecedented research interest. Despite the rapid growth of the list of successful applications with these gradientbased methods, our theoretical understanding, however, is progressing at a more modest pace.\nOne of the salient features of deep networks today is that they often have far more model parameters than the number of training samples that they are trained on, but meanwhile some of the models still exhibit remarkably good generalization performance when applied to unseen data of similar nature, while others generalize poorly in exactly the same setting. A satisfying explanation of this phenomenon would be the key to more powerful and reliable network structures.\n1Laboratoire des Signaux et Systèmes (L2S), CentraleSupélec, Université Paris-Saclay, France; 2G-STATS Data Science Chair, GIPSA-lab, University Grenobles-Alpes, France. Correspondence to: Zhenyu Liao <zhenyu.liao@l2s.centralesupelec.fr>, Romain Couillet <romain.couillet@centralesupelec.fr>.\nProceedings of the 35 th International Conference on Machine Learning, Stockholm, Sweden, PMLR 80, 2018. Copyright 2018 by the author(s).\nTo answer such a question, statistical learning theory has proposed interpretations from the viewpoint of system complexity (Vapnik, 2013; Bartlett & Mendelson, 2002; Poggio et al., 2004). In the case of large numbers of parameters, it is suggested to apply some form of regularization to ensure good generalization performance. Regularizations can be explicit, such as the dropout technique (Srivastava et al., 2014) or the l2-penalization (weight decay) as reported in (Krizhevsky et al., 2012); or implicit, as in the case of the early stopping strategy (Yao et al., 2007) or the stochastic gradient descent algorithm itself (Zhang et al., 2016).\nInspired by the recent line of works (Saxe et al., 2013; Advani & Saxe, 2017), in this article we introduce a random matrix framework to analyze the training and, more importantly, the generalization performance of neural networks, trained by gradient descent. Preliminary results established from a toy model of two-class classification on a single-layer linear network are presented, which, despite their simplicity, shed new light on the understanding of many important aspects in training neural nets. In particular, we demonstrate how early stopping can naturally protect the network against overfitting, which becomes more severe as the number of training sample approaches the dimension of the data. We also provide a strict lower bound on the training sample size for a given classification task in this simple setting. A byproduct of our analysis implies that random initialization, although commonly used in practice in training deep networks (Glorot & Bengio, 2010; Krizhevsky et al., 2012), may lead to a degradation of the network performance.\nFrom a more theoretical point of view, our analyses allow one to evaluate any functional of the eigenvalues of the sample covariance matrix of the data (or of the data representation learned from previous layers in a deep model), which is at the core of understanding many experimental observations in today’s deep networks (Glorot & Bengio, 2010; Ioffe & Szegedy, 2015). Our results are envisioned to generalize to more elaborate settings, notably to deeper models that are trained with the stochastic gradient descent algorithm, which is of more practical interest today due to the tremendous size of the data.\nNotations: Boldface lowercase (uppercase) characters stand for vectors (matrices), and non-boldface for scalars respectively. 0p is the column vector of zeros of size p, and Ip\nthe p ⇥ p identity matrix. The notation (·)T denotes the transpose operator. The norm k · k is the Euclidean norm for vectors and the operator norm for matrices. =(·) denotes the imaginary part of a complex number. For x 2 R, we denote for simplicity (x)+ ⌘ max(x, 0).\nIn the remainder of the article, we introduce the problem of interest and recall the results of (Saxe et al., 2013) in Section 2. After a brief overview of basic concepts and methods to be used throughout the article in Section 3, our main results on the training and generalization performance of the network are presented in Section 4, followed by a thorough discussion in Section 5 and experiments on the popular MNIST database (LeCun et al., 1998) in Section 6. Section 7 concludes the article by summarizing the main results and outlining future research directions."
  }, {
    "heading": "2. Problem Statement",
    "text": "Let the training data x1, . . . ,xn 2 Rp be independent vectors drawn from two distribution classes C1 and C2 of cardinality n1 and n2 (thus n1 + n2 = n), respectively. We assume that the data vector xi of class Ca can be written as\nxi = ( 1)aµ+ zi\nfor a = {1, 2}, with µ 2 Rp and zi a Gaussian random vector zi ⇠ N (0p, Ip). In the context of a binary classification problem, one takes the label yi = 1 for xi 2 C1 and yj = 1 for xj 2 C2 to distinguish the two classes. We denote the training data matrix X = ⇥ x1, . . . ,xn ⇤ 2 Rp⇥n by cascading all xi’s as column vectors and associated label vector y 2 Rn. With the pair {X,y}, a classifier is trained using “full-batch” gradient descent to minimize the loss function L(w) given by\nL(w) = 1\n2n kyT wTXk2\nso that for a new datum x̂, the output of the classifier is ŷ = wTx̂, the sign of which is then used to decide the class of x̂. The derivative of L with respective to w is given by\n@L(w) @w = 1 n X(y XTw).\nThe gradient descent algorithm (Boyd & Vandenberghe, 2004) takes small steps of size ↵ along the opposite direction of the associated gradient, i.e., wt+1 = wt ↵@L(w)@w\nw=wt\n.\nFollowing the previous works of (Saxe et al., 2013; Advani & Saxe, 2017), when the learning rate ↵ is small, wt+1 and wt are close to each other so that by performing a continuous-time approximation, one obtains the following differential equation\n@w(t) @t = ↵@L(w) @w = ↵ n X y XTw(t)\nthe solution of which is given explicitly by\nw(t) = e ↵t n XX T w0 + ⇣ Ip e ↵t n XX T ⌘ (XXT) 1Xy\n(1) if one assumes that XXT is invertible (only possible in the case p < n), with w0 ⌘ w(t = 0) the initialization of the weight vector; we recall the definition of the exponential of a matrix 1nXX\nT given by the power series e 1nXX T = P1\nk=0 1 k! ( 1 nXX T)k = Ve⇤VT, with the eigendecomposition of 1nXX\nT = V⇤VT and e⇤ is a diagonal matrix with elements equal to the exponential of the elements of ⇤. As t ! 1 the network “forgets” the initialization w0 and results in the least-square solution wLS ⌘ (XXT) 1Xy.\nWhen p > n, XXT is no longer invertible. Assuming XTX is invertible and writing Xy = XXT X XTX 1 y, the solution is similarly given by\nw(t) = e ↵t n XX T w0 +X ⇣ In e ↵t n X TX ⌘ (XTX) 1y\nwith the least-square solution wLS ⌘ X(XTX) 1y.\nIn the work of (Advani & Saxe, 2017) it is assumed that X has i.i.d. entries and that there is no linking structure between the data and associated targets in such a way that the “true” weight vector w̄ to be learned is independent of X so as to simplify the analysis. In the present work we aim instead at exploring the capacity of the network to retrieve the (mixture modeled) data structure and position ourselves in a more realistic setting where w captures the different statistical structures (between classes) of the pair (X,y). Our results are thus of more guiding significance for practical interests.\nFrom (1) note that both e ↵tn XX T and Ip e ↵t n XX T share the same eigenvectors with the sample covariance matrix 1 nXX\nT, which thus plays a pivotal role in the network learning dynamics. More concretely, the projections of w0 and wLS onto the eigenspace of 1nXX\nT, weighted by functions (exp( ↵t i) or 1 exp( ↵t i)) of the associated eigenvalue i, give the temporal evolution of w(t) and consequently the training and generalization performance of the network. The core of our study therefore consists in deeply understanding of the eigenpairs of this sample covariance matrix, which has been largely investigated in the random matrix literature (Bai & Silverstein, 2010)."
  }, {
    "heading": "3. Preliminaries",
    "text": "Throughout this paper, we will be relying on some basic yet powerful concepts and methods from random matrix theory, which shall be briefly highlighted in this section."
  }, {
    "heading": "3.1. Resolvent and deterministic equivalents",
    "text": "Consider an n⇥ n Hermitian random matrix M. We define its resolvent QM(z), for z 2 C not an eigenvalue of M, as\nQM(z) = (M zIn) 1 .\nThrough the Cauchy integral formula discussed in the following subsection, as well as its central importance in random matrix theory, Q 1\nnXX T(z) is the key object investigated\nin this article.\nFor certain simple distributions of M, one may define a so-called deterministic equivalent (Hachem et al., 2007; Couillet & Debbah, 2011) Q̄M for QM, which is a deterministic matrix such that for all A 2 Rn⇥n and all a,b 2 Rn of bounded (spectral and Euclidean, respectively) norms, 1n tr (AQM) 1 n tr AQ̄M ! 0 and aT QM Q̄M b ! 0 almost surely as n ! 1. As such, deterministic equivalents allow to transfer random spectral properties of M in the form of deterministic limiting quantities and thus allows for a more detailed investigation."
  }, {
    "heading": "3.2. Cauchy’s integral formula",
    "text": "First note that the resolvent QM(z) has the same eigenspace as M, with associated eigenvalue i replaced by 1 i z . As discussed at the end of Section 2, our objective is to evaluate functions of these eigenvalues, which reminds us of the fundamental Cauchy’s integral formula, stating that for any function f holomorphic on an open subset U of the complex plane, one can compute f( ) by contour integration. More concretely, for a closed positively (counter-clockwise) oriented path in U with winding number one (i.e., describing a 360 rotation), one has, for contained in the surface described by , 12⇡i H f(z) z dz = f( ) and 1 2⇡i H f(z) z dz = 0 if lies outside the contour of .\nWith Cauchy’s integral formula, one is able to evaluate more sophisticated functionals of the random matrix M. For example, for f(M) ⌘ aTeMb one has\nf(M) = 1 2⇡i\nI\nexp(z)aTQM(z)b dz\nwith a positively oriented path circling around all the eigenvalues of M. Moreover, from the previous subsection one knows that the bilinear form aTQM(z)b is asymptotically close to a non-random quantity aTQ̄M(z)b. One thus deduces that the functional aTeMb has an asymptotically deterministic behavior that can be expressed as 12⇡i H exp(z)a TQ̄M(z)b dz.\nThis observation serves in the present article as the foundation for the performance analysis of the gradient-based classifier, as described in the following section."
  }, {
    "heading": "4. Temporal Evolution of Training and Generalization Performance",
    "text": "With the explicit expression of w(t) in (1), we now turn our attention to the training and generalization performances of the classifier as a function of the training time t. To this end, we shall be working under the following assumptions. Assumption 1 (Growth Rate). As n ! 1,\n1. p n ! c 2 (0,1).\n2. For a = {1, 2}, nan ! ca 2 (0, 1).\n3. kµk = O(1).\nThe above assumption ensures that the matrix 1nXX T is of bounded operator norm for all large n, p with probability one (Bai & Silverstein, 1998). Assumption 2 (Random Initialization). Let w0 ⌘ w(t = 0) be a random vector with i.i.d. entries of zero mean, variance 2 /p for some > 0 and finite fourth moment.\nWe first focus on the generalization performance, i.e., the average performance of the trained classifier taking as input an unseen new datum x̂ drawn from class C1 or C2."
  }, {
    "heading": "4.1. Generalization Performance",
    "text": "To evaluate the generalization performance of the classifier, we are interested in two types of misclassification rates, for a new datum x̂ drawn from class C1 or C2, as\nP(w(t)Tx̂ > 0 | x̂ 2 C1), P(w(t)Tx̂ < 0 | x̂ 2 C2).\nSince the new datum x̂ is independent of w(t), w(t)Tx̂ is a Gaussian random variable of mean ±w(t)Tµ and variance kw(t)k2. The above probabilities can therefore be given via the Q-function: Q(x) ⌘ 1p\n2⇡\nR1 x exp\n⇣ u 2\n2\n⌘ du. We thus\nresort to the computation of w(t)Tµ as well as w(t)Tw(t) to evaluate the aforementioned classification error.\nFor µTw(t), with Cauchy’s integral formula we have\nµTw(t) = µTe ↵t n XX T w0 + µ T ⇣ Ip e ↵t n XX T ⌘ wLS\n= 1 2⇡i\nI\nft(z)µ\nT\n✓ 1\nn XXT zIp\n◆ 1 w0 dz\n1 2⇡i\nI\n1 ft(z) z\nµT ✓ 1\nn XXT zIp ◆ 1 1 n Xy dz\nwith ft(z) ⌘ exp( ↵tz), for a positive closed path circling around all eigenvalues of 1nXX\nT. Note that the data matrix X can be rewritten as\nX = µjT1 + µjT2 + Z = µyT + Z\nwith Z ⌘ ⇥ z1, . . . , zn ⇤ 2 Rp⇥n of i.i.d. N (0, 1) entries and ja 2 Rn the canonical vectors of class Ca such that (ja)i = xi2Ca . To isolate the deterministic vectors µ and ja’s from the random Z in the expression of µTw(t), we exploit Woodbury’s identity to obtain\n✓ 1\nn XXT zIp\n◆ 1 = Q(z) Q(z) ⇥ µ 1nZy ⇤\n µTQ(z)µ 1 + 1nµ\nTQ(z)Zy ⇤ 1 + 1ny TZTQ(z) 1nZy\n1  µT\n1 ny TZT\nQ(z)\nwhere we denote the resolvent Q(z) ⌘ 1 nZZ T zIp 1, a deterministic equivalent of which is given by\nQ(z) $ Q̄(z) ⌘ m(z)Ip\nwith m(z) determined by the popular Marčenko–Pastur equation (Marčenko & Pastur, 1967)\nm(z) = 1 c z\n2cz +\np (1 c z)2 4cz\n2cz (2)\nwhere the branch of the square root is selected in such a way that =(z) ·=m(z) > 0, i.e., for a given z there exists a unique corresponding m(z).\nSubstituting Q(z) by the simple form deterministic equivalent m(z)Ip, we are able to estimate the random variable µTw(t) with a contour integral of some deterministic quantities as n, p ! 1. Similar arguments also hold for w(t)Tw(t), together leading to the following theorem.\nTheorem 1 (Generalization Performance). Let Assumptions 1 and 2 hold. As n ! 1, with probability one\nP(w(t)Tx̂ > 0 | x̂ 2 C1) Q ✓\nEp V\n◆ ! 0\nP(w(t)Tx̂ < 0 | x̂ 2 C2) Q ✓\nEp V\n◆ ! 0\nwhere\nE ⌘ 1 2⇡i\nI\n1 ft(z) z kµk2m(z) dz (kµk2 + c)m(z) + 1\nV ⌘ 1 2⇡i\nI \" 1 z2 (1 ft(z)) 2\n(kµk2 + c)m(z) + 1 2 f 2 t (z)m(z)\n# dz\nwith a closed positively oriented path that contains all eigenvalues of 1 nXX T and the origin, ft(z) ⌘ exp( ↵tz) and m(z) given by Equation (2).\nAlthough derived from the case p < n, Theorem 1 also applies when p > n. To see this, note that with Cauchy’s integral formula, for z 6= 0 not an eigenvalue of 1nXX T (thus not of 1nX TX), one has X 1 nX TX zIn 1 y =\n1 nXX T zIp 1\nXy, which further leads to the same expressions as in Theorem 1. Since 1nXX T and 1nX TX have the same eigenvalues except for additional zero eigenvalues for the larger matrix, the path remains unchanged (as we demand that contains the origin) and hence Theorem 1 holds true for both p < n and p > n. The case p = n can be obtained by continuity arguments."
  }, {
    "heading": "4.2. Training performance",
    "text": "To compare generalization versus training performance, we are now interested in the behavior of the classifier when applied to the training set X. To this end, we consider the random vector XTw(t) given by\nXTw(t) = XTe ↵t n XX T w0+X T ⇣ Ip e ↵t n XX T ⌘ wLS .\nNote that the i-th entry of XTw(t) is given by the bilinear form eTi XTw(t), with ei the canonical vector with unique non-zero entry [ei]i = 1. With previous notations we have\neTi X Tw(t)\n= 1 2⇡i\nI\nft(z, t)e T i X T\n✓ 1\nn XXT zIp\n◆ 1 w0 dz\n1 2⇡i\nI\n1 ft(z) z eTi 1 n XT\n✓ 1\nn XXT zIp\n◆ 1 Xy dz\nwhich yields the following results.\nTheorem 2 (Training Performance). Under the assumptions and notations of Theorem 1, as n ! 1,\nP(w(t)Txi > 0 | xi 2 C1) Q E⇤p V⇤ E2⇤\n! ! 0\nP(w(t)Txi < 0 | xi 2 C2) Q E⇤p V⇤ E2⇤\n! ! 0\nalmost surely, with\nE⇤ ⌘ 1\n2⇡i\nI\n1 ft(z) z\ndz\n(kµk2 + c)m(z) + 1\nV⇤ ⌘ 1\n2⇡i\nI \" 1 z (1 ft(z)) 2\n(kµk2 + c)m(z) + 1 2 f 2 t (z)zm(z)\n# dz.\nIn Figure 1 we compare finite dimensional simulations with theoretical results obtained from Theorem 1 and 2 and observe a very close match, already for not too large n, p. As t grows large, the generalization error first drops rapidly with the training error, then goes up, although slightly, while the training error continues to decrease to zero. This is because the classifier starts to over-fit the training data\nThe Dynamics of Learning: A Random Matrix Approach\n0 50 100 150 200 250 300 0\n0.1\n0.2\n0.3\n0.4\n0.5\nTraining time (t)\nM is\ncl as\nsi fic\nat io\nn ra\nte\nSimulation: training performance Theory: training performance Simulation: generalization performance Theory: generalization performance\n0 50 100 150 200 250 300 0\n0.1\n0.2\n0.3\n0.4 0.5\nTraining time (t)\nM is\ncl as\nsi fic\nat io\nn ra\nte\nSimulation: training performance Theory: training performance Simulation: generalization performance Theory: generalization performance\nFigure 1. Training and generalization performance for µ = [2;0p 1], p = 256, n = 512, 2 = 0.1, ↵ = 0.01 and c1 = c2 = 1/2. Results obtained by averaging over 50 runs.\nX and performs badly on unseen ones. To avoid overfitting, one effectual approach is to apply regularization strategies (Bishop, 2007), for example, to “early stop” (at t = 100 for instance in the setting of Figure 1) in the training process. However, this introduces new hyperparameters such as the optimal stopping time topt that is of crucial importance for the network performance and is often tuned through cross-validation in practice. Theorem 1 and 2 tell us that the training and generalization performances, although being random themselves, have asymptotically deterministic behaviors described by (E⇤, V⇤) and (E, V ), respectively, which allows for a deeper understanding on the choice of topt, since E, V are in fact functions of t via ft(z) ⌘ exp( ↵tz).\nNonetheless, the expressions in Theorem 1 and 2 of contour integrations are not easily analyzable nor interpretable. To gain more insight, we shall rewrite (E, V ) and (E⇤, V⇤) in a more readable way. First, note from Figure 2 that the matrix 1nXX\nT has (possibly) two types of eigenvalues: those inside the main bulk (between ⌘ (1 p c)2 and\n+ ⌘ (1 + p c)2) of the Marčenko–Pastur distribution\n⌫(dx) =\np (x )+( + x)+\n2⇡cx dx+\n✓ 1 1\nc\n◆+ (x)\n(3) and a (possibly) isolated one1 lying away from [ , +], that shall be treated separately. We rewrite the path (that contains all eigenvalues of 1nXX T) as the sum of two paths\n1The existence (or absence) of outlying eigenvalues for the sample covariance matrix has been largely investigated in the random matrix literature and is related to the so-called “spiked random matrix model”. We refer the reader to (Benaych-Georges & Nadakuditi, 2011) for an introduction. The information carried by these “isolated” eigenpairs also marks an important technical difference to (Advani & Saxe, 2017) in which X is only composed of noise terms.\nb and s, that circle around the main bulk and the isolated eigenvalue (if any), respectively. To handle the first integral of b, we use the fact that for any nonzero 2 R, the limit limz2Z! m(z) ⌘ m̌( ) exists (Silverstein & Choi, 1995) and follow the idea in (Bai & Silverstein, 2008) by choosing the contour b to be a rectangle with sides parallel to the axes, intersecting the real axis at 0 and + and the horizontal sides being a distance \" ! 0 away from the real axis, to split the contour integral into four single ones of m̌(x). The second integral circling around s can be computed with the residue theorem. This together leads to the expressions of (E, V ) and (E⇤, V⇤) as follows2\nE =\nZ 1 ft(x)\nx µ(dx) (4)\nV = kµk2 + c kµk2\nZ (1 ft(x))2µ(dx)\nx2 + 2\nZ f 2 t (x)⌫(dx)\n(5)\nE⇤ = kµk2 + c kµk2\nZ 1 ft(x)\nx µ(dx) (6)\nV⇤ = kµk2 + c kµk2\nZ (1 ft(x))2µ(dx)\nx + 2\nZ xf\n2 t (x)⌫(dx)\n(7)\nwhere we recall ft(x) = exp( ↵tx), ⌫(x) given by (3) and denote the measure µ(dx) ⌘ p\n(x )+( + x)+ 2⇡( s x) dx+ (kµk4 c)+\nkµk2 s(x) (8)\nas well as\ns = c+ 1 + kµk2 + c kµk2 ( p c+ 1)2 (9)\nwith equality if and only if kµk2 = p c.\nA first remark on the expressions of (4)-(7) is that E⇤ differs from E only by a factor of kµk\n2+c kµk2 . Also, both V and V⇤\nare the sum of two parts: the first part that strongly depends on µ and the second one that is independent of µ. One thus deduces for kµk ! 0 that E ! 0 and\nV ! Z (1 ft(x))2\nx2 ⇢(dx) + 2\nZ f 2 t (x)⌫(dx) > 0\nwith ⇢(dx) ⌘ p\n(x )+( + x)+ 2⇡(c+1) dx and therefore the gen-\neralization performance goes to Q(0) = 0.5. On the other hand, for kµk ! 1, one has Ep\nV ! 1 and hence the\nclassifier makes perfect predictions.\nIn a more general context (i.e., for Gaussian mixture models with generic means and covariances as investigated in\n2We defer the readers to Section A in Supplementary Material for a detailed exposition of Theorem 1 and 2, as well as (4)-(7).\nThe Dynamics of Learning: A Random Matrix Approach\n(Benaych-Georges & Couillet, 2016), and obviously for practical datasets), there may be more than one eigenvalue of 1nXX\nT lying outside the main bulk, which may not be limited to the interval [ , +]. In this case, the expression of m(z), instead of being explicitly given by (2), may be determined through more elaborate (often implicit) formulations. While handling more generic models is technically reachable within the present analysis scheme, the results are much less intuitive. Similar objectives cannot be achieved within the framework presented in (Advani & Saxe, 2017); this conveys more practical interest to our results and the proposed analysis framework.\n0 1 2 3 4\nEigenvalues of 1nXX T Marčenko–Pastur distribution Theory: s given in (9)\n0 1 2 3 4\nEigenvalues of 1nXX T Marčenko–Pastur distribution Theory: s given in (9)\nFigure 2. Eigenvalue distribution of 1nXX T for µ = [1.5;0p 1], p = 512, n = 1024 and c1 = c2 = 1/2."
  }, {
    "heading": "5. Discussions",
    "text": "In this section, with a careful inspection of (4) and (5), discussions will be made from several different aspects. First of all, recall that the generalization performance is simply given by Q ⇣ µTw(t) kw(t)k ⌘ , with the term µ Tw(t) kw(t)k describing the alignment between w(t) and µ, therefore the best possible generalization performance is simply Q(kµk). Nonetheless, this “best” performance can never be achieved as long as p/n ! c > 0, as described in the following remark. Remark 1 (Optimal Generalization Performance). Note that, with Cauchy–Schwarz inequality and the fact thatR µ(dx) = kµk2 from (8), one has\nE 2 \nZ (1 ft(x))2\nx2 dµ(x) ·\nZ dµ(x)  kµk 4\nkµk2 + cV\nwith equality in the right-most inequality if and only if the variance 2 = 0. One thus concludes that E/ p V  kµk2/ p kµk2 + c and the best generalization performance (lowest misclassification rate) is Q(kµk2/ p kµk2 + c) and can be attained only when 2 = 0.\nThe above remark is of particular interest because, for a given task (thus p,µ fixed) it allows one to compute the\nminimum training data number n to fulfill a certain request of classification accuracy. As a side remark, note that in the expression of E/ p V the initialization variance 2 only appears in V , meaning that random initializations impair the generalization performance of the network. As such, one should initialize with 2 very close, but not equal, to zero, to obtain symmetry breaking between hidden units (Goodfellow et al., 2016) as well as to mitigate the drop of performance due to large 2.\nIn Figure 3 we plot the optimal generalization performance with the corresponding optimal stopping time as functions of 2, showing that small initialization helps training in terms of both accuracy and efficiency.\nAlthough the integrals in (4) and (5) do not have nice closed forms, note that, for t close to 0, with a Taylor expansion of ft(x) ⌘ exp( ↵tx) around ↵tx = 0, one gets more interpretable forms of E and V without integrals, as presented in the following subsection."
  }, {
    "heading": "5.1. Approximation for t close to 0",
    "text": "Taking t = 0, one has ft(x) = 1 and therefore E = 0, V = 2 R ⌫(dx) = 2, with ⌫(dx) the Marčenko–Pastur distribution given in (3). As a consequence, at the beginning stage of training, the generalization performance is Q(0) = 0.5 for 2 6= 0 and the classifier makes random guesses.\nFor t not equal but close to 0, the Taylor expansion of ft(x) ⌘ exp( ↵tx) around ↵tx = 0 gives\nft(x) ⌘ exp( ↵tx) ⇡ 1 ↵tx+O(↵2t2x2).\nMaking the substitution x = 1 + c 2 p c cos ✓ and with the fact that R ⇡ 0 sin2 ✓ p+q cos ✓d✓ = p⇡ q2 ⇣ 1 p 1 q2/p2 ⌘ (see for example 3.644-5 in (Gradshteyn & Ryzhik, 2014)), one gets E = Ẽ +O(↵2t2) and V = Ṽ +O(↵2t2), where\nẼ ⌘ ↵t 2 g(µ, c) +\n(kµk4 c)+\nkµk2 ↵t = kµk 2 ↵t\nṼ ⌘ kµk 2 + c kµk2 (kµk4 c)+ kµk2 ↵ 2 t 2 + kµk2 + c kµk2 ↵ 2 t 2 2 g(µ, c)\n+ 2(1 + c)↵2t2 2 2↵t+ ✓ 1 1\nc\n◆+ 2\n+ 2\n2c\n1 + c (1 + p c)|1 p c|\n= (kµk2 + c+ c 2)↵2t2 + 2(↵t 1)2\nwith g(µ, c) ⌘ kµk2+ ckµk2 ⇣ kµk+ p c kµk ⌘ kµk p c kµk and consequently 12g(µ, c) + (kµk4 c)+ kµk2 = kµk 2. It is interesting to note from the above calculation that, although E and V seem to have different behaviors3 for kµk2 > p c or c > 1, it is in fact not the case and the extra part of kµk2 > p c (or c > 1) compensates for the singularity of the integral, so that the generalization performance of the classifier is a smooth function of both kµk2 and c.\nTaking the derivative of Ẽp Ṽ with respect to t, one has\n@\n@t Ẽp Ṽ\n= ↵(1 ↵t) 2\nṼ 3/2\nwhich implies that the maximum of Ẽp Ṽ\nis kµk 2p\nkµk2+c+c 2\nand can be attained with t = 1/↵. Moreover, taking t = 0 in the above equation one gets @@t\nẼp Ṽ t=0 = ↵ . Therefore,\nlarge is harmful to the training efficiency, which coincides with the conclusion from Remark 1.\nThe approximation error arising from Taylor expansion can be large for t away from 0, e.g., at t = 1/↵ the difference E Ẽ is of order O(1) and thus cannot be neglected."
  }, {
    "heading": "5.2. As t ! 1: least-squares solution",
    "text": "As t ! 1, one has ft(x) ! 0 which results in the least-square solution wLS = (XXT) 1Xy or wLS = X(XTX) 1y and consequently\nµTwLS kwLSk = kµk2p kµk2 + c\ns\n1 min ✓ c, 1\nc\n◆ . (10)\nComparing (10) with the expression in Remark 1, one observes that when t ! 1 the network becomes “over-trained” and the performance drops by a factor of p 1 min(c, c 1). This becomes even worse when c gets close to 1, as is consistent with the empirical findings in (Advani & Saxe, 2017). However, the point c = 1 is a singularity for (10), but not for Ep V\nas in (4) and (5). One may thus expect to have a smooth and reliable behavior of the well-trained network for c close\n3This phenomenon has been largely observed in random matrix theory and is referred to as “phase transition”(Baik et al., 2005).\nto 1, which is a noticeable advantage of gradient-based training compared to simple least-square method. This coincides with the conclusion of (Yao et al., 2007) in which the asymptotic behavior of solely n ! 1 is considered.\nIn Figure 4 we plot the generalization performance from simulation (blue line), the approximation from Taylor expansion of ft(x) as described in Section 5.1 (red dashed line), together with the performance of wLS (cyan dashed line). One observes a close match between the result from Taylor expansion and the true performance for t small, with the former being optimal at t = 100 and the latter slowly approaching the performance of wLS as t goes to infinity.\nIn Figure 5 we underline the case c = 1 by taking p = n = 512 with all other parameters unchanged from Figure 4. One observes that the simulation curve (blue line) increases much faster compared to Figure 4 and is supposed to end up at 0.5, which is the performance of wLS (cyan dashed line). This confirms a serious degradation of performance for c close to 1 of the classical least-squares solution.\n0 200 400 600 800 1,000 0\n0.1\n0.2\n0.3\n0.4\n0.5\nTraining time (t)\nM is\ncl as\nsi fic\nat io\nn ra\nte\nSimulation Approximation via Taylor expansion Performance of wLS\n0 200 400 600 800 1,000 0\n0.1\n0.2\n0.3\n0.4\n0.5\nTraining time (t)\nM is\ncl as\nsi fic\nat io\nn ra\nte\nSimulation Approximation via Taylor expansion Performance of wLS\nFigure 4. Generalization performance for µ = ⇥ 2;0p 1 ⇤ , p = 256, n = 512, c1 = c2 = 1/2, 2 = 0.1 and ↵ = 0.01. Simulation results obtained by averaging over 50 runs."
  }, {
    "heading": "5.3. Special case for c = 0",
    "text": "One major interest of random matrix analysis is that the ratio c appears constantly in the analysis. Taking c = 0 signifies that we have far more training data than their dimension. This results in both , + ! 1, s ! 1 + kµk2 and\nE ! kµk2 1 ft(1 + kµk 2)\n1 + kµk2\nV ! kµk2 ✓ 1 ft(1 + kµk2)\n1 + kµk2\n◆2 + 2f2t (1).\nAs a consequence, Ep V ! kµk if 2 = 0. This can be explained by the fact that with sufficient training data the\nclassifier learns to align perfectly to µ so that µ Tw(t)\nkw(t)k = kµk. On the other hand, with initialization 2 6= 0, one always has Ep\nV < kµk. But still, as t goes large, the network\nforgets the initialization exponentially fast and converges to the optimal w(t) that aligns to µ.\nIn particular, for 2 6= 0, we are interested in the optimal stopping time by taking the derivative with respect to t,\n@\n@t Ep V = ↵\n2kµk2\nV 3/2 kµk2ft(1 + kµk2) + 1 1 + kµk2 f 2 t (1) > 0\nshowing that when c = 0, the generalization performance continues to increase as t grows and there is in fact no “over-training” in this case.\n0 50 100 150 200 250 300 0\n0.1\n0.2\n0.3\n0.4\n0.5\nTraining time (t)\nM is\ncl as\nsi fic\nat io\nn ra\nte\nSimulation: training performance Theory: training performance Simulation: generalization performance Theory: generalization performance\n0 50 100 150 200 250 300 0\n0.1\n0.2\n0.3\n0.4\n0.5\nTraining time (t)\nM is\ncl as\nsi fic\nat io\nn ra\nte\nSimulation: training performance Theory: training performance Simulation: generalization performance Theory: generalization performance\nFigure 6. Training and generalization performance for MNIST data (number 1 and 7) with n = p = 784, c1 = c2 = 1/2, ↵ = 0.01 and 2 = 0.1. Results obtained by averaging over 100 runs."
  }, {
    "heading": "6. Numerical Validations",
    "text": "We close this article with experiments on the popular MNIST dataset (LeCun et al., 1998) (number 1 and 7). We randomly select training sets of size n = 784 vectorized images of dimension p = 784 and add artificially a Gaussian white noise of 10dB in order to be more compliant with our toy model setting. Empirical means and covariances of each class are estimated from the full set of 13 007 MNIST images (6 742 images of number 1 and 6 265 of number 7). The image vectors in each class are whitened by pre-multiplying C 1/2a and re-centered to have means of ±µ, with µ half of the difference between means from the two classes. We observe an extremely close fit between our results and the empirical simulations, as shown in Figure 6."
  }, {
    "heading": "7. Conclusion",
    "text": "In this article, we established a random matrix approach to the analysis of learning dynamics for gradient-based algorithms on data of simultaneously large dimension and size. With a toy model of Gaussian mixture data with ±µ means and identity covariance, we have shown that the training and generalization performances of the network have asymptotically deterministic behaviors that can be evaluated via so-called deterministic equivalents and computed with complex contour integrals (and even under the form of real integrals in the present setting). The article can be generalized in many ways: with more generic mixture models (with the Gaussian assumption relaxed), on more appropriate loss functions (logistic regression for example), and more advanced optimization methods.\nIn the present work, the analysis has been performed on the “full-batch” gradient descent system. However, the most popular method used today is in fact its “stochastic” version (Bottou, 2010) where only a fixed-size (nbatch) randomly selected subset (called a mini-batch) of the training data is used to compute the gradient and descend one step along with the opposite direction of this gradient in each iteration. In this scenario, one of major concern in practice lies in determining the optimal size of the mini-batch and its influence on the generalization performance of the network (Keskar et al., 2016). This can be naturally linked to the ratio nbatch/p in the random matrix analysis.\nDeep networks that are of more practical interests, however, need more efforts. As mentioned in (Saxe et al., 2013; Advani & Saxe, 2017), in the case of multi-layer networks, the learning dynamics depend, instead of each eigenmode separately, on the coupling of different eigenmodes from different layers. To handle this difficulty, one may add extra assumptions of independence between layers as in (Choromanska et al., 2015) so as to study each layer separately and then reassemble to retrieve the results of the whole network."
  }, {
    "heading": "Acknowledgments",
    "text": "We thank the anonymous reviewers for their comments and constructive suggestions. We would like to acknowledge this work is supported by the ANR Project RMT4GRAPH (ANR-14-CE28-0006) and the Project DeepRMT of La Fondation Supélec."
  }],
  "year": 2018,
  "references": [{
    "title": "High-dimensional dynamics of generalization error in neural networks",
    "authors": ["M.S. Advani", "A.M. Saxe"],
    "venue": "arXiv preprint arXiv:1710.03667,",
    "year": 2017
  }, {
    "title": "Spectral analysis of large dimensional random matrices, volume 20",
    "authors": ["Z. Bai", "J.W. Silverstein"],
    "year": 2010
  }, {
    "title": "No eigenvalues outside the support of the limiting spectral distribution of largedimensional sample covariance matrices",
    "authors": ["Bai", "Z.-D", "J.W. Silverstein"],
    "venue": "Annals of probability,",
    "year": 1998
  }, {
    "title": "CLT for linear spectral statistics of large-dimensional sample covariance matrices",
    "authors": ["Z.D. Bai", "J.W. Silverstein"],
    "venue": "In Advances In Statistics,",
    "year": 2008
  }, {
    "title": "Phase transition of the largest eigenvalue for nonnull complex sample covariance matrices",
    "authors": ["J. Baik", "G.B. Arous", "S Péché"],
    "venue": "The Annals of Probability,",
    "year": 2005
  }, {
    "title": "Rademacher and gaussian complexities: Risk bounds and structural results",
    "authors": ["P.L. Bartlett", "S. Mendelson"],
    "venue": "Journal of Machine Learning Research,",
    "year": 2002
  }, {
    "title": "Spectral analysis of the gram matrix of mixture models",
    "authors": ["F. Benaych-Georges", "R. Couillet"],
    "venue": "ESAIM: Probability and Statistics,",
    "year": 2016
  }, {
    "title": "The eigenvalues and eigenvectors of finite, low rank perturbations of large random matrices",
    "authors": ["F. Benaych-Georges", "R.R. Nadakuditi"],
    "venue": "Advances in Mathematics,",
    "year": 2011
  }, {
    "title": "Probability and measure",
    "authors": ["P. Billingsley"],
    "year": 2008
  }, {
    "title": "Pattern Recognition and Machine Learning",
    "authors": ["C.M. Bishop"],
    "year": 2007
  }, {
    "title": "Large-scale machine learning with stochastic gradient descent",
    "authors": ["L. Bottou"],
    "venue": "In Proceedings of COMPSTAT’2010,",
    "year": 2010
  }, {
    "title": "The loss surfaces of multilayer networks",
    "authors": ["A. Choromanska", "M. Henaff", "M. Mathieu", "G.B. Arous", "Y. LeCun"],
    "venue": "In Artificial Intelligence and Statistics,",
    "year": 2015
  }, {
    "title": "Random matrix methods for wireless communications",
    "authors": ["R. Couillet", "M. Debbah"],
    "year": 2011
  }, {
    "title": "Table of integrals, series, and products",
    "authors": ["I.S. Gradshteyn", "I.M. Ryzhik"],
    "venue": "Academic press,",
    "year": 2014
  }, {
    "title": "Deterministic equivalents for certain functionals of large random matrices",
    "authors": ["W. Hachem", "P. Loubaton", "J Najim"],
    "venue": "The Annals of Applied Probability,",
    "year": 2007
  }, {
    "title": "Batch normalization: Accelerating deep network training by reducing internal covariate shift",
    "authors": ["S. Ioffe", "C. Szegedy"],
    "venue": "In International conference on machine learning,",
    "year": 2015
  }, {
    "title": "On large-batch training for deep learning: Generalization gap and sharp minima",
    "authors": ["N.S. Keskar", "D. Mudigere", "J. Nocedal", "M. Smelyanskiy", "P.T.P. Tang"],
    "venue": "arXiv preprint arXiv:1609.04836,",
    "year": 2016
  }, {
    "title": "Imagenet classification with deep convolutional neural networks. In Advances in neural information processing",
    "authors": ["A. Krizhevsky", "I. Sutskever", "G.E. Hinton"],
    "year": 2012
  }, {
    "title": "Distribution of eigenvalues for some sets of random matrices",
    "authors": ["V.A. Marčenko", "L.A. Pastur"],
    "venue": "Mathematics of the USSR-Sbornik,",
    "year": 1967
  }, {
    "title": "General conditions for predictivity in learning",
    "authors": ["T. Poggio", "R. Rifkin", "S. Mukherjee", "P. Niyogi"],
    "venue": "theory. Nature,",
    "year": 2004
  }, {
    "title": "Exact solutions to the nonlinear dynamics of learning in deep linear neural networks",
    "authors": ["A.M. Saxe", "J.L. McClelland", "S. Ganguli"],
    "venue": "arXiv preprint arXiv:1312.6120,",
    "year": 2013
  }, {
    "title": "Deep learning in neural networks: An overview",
    "authors": ["J. Schmidhuber"],
    "venue": "Neural networks,",
    "year": 2015
  }, {
    "title": "Analysis of the limiting spectral distribution of large dimensional random matrices",
    "authors": ["J.W. Silverstein", "Choi", "S.-I"],
    "venue": "Journal of Multivariate Analysis,",
    "year": 1995
  }, {
    "title": "Dropout: A simple way to prevent neural networks from overfitting",
    "authors": ["N. Srivastava", "G. Hinton", "A. Krizhevsky", "I. Sutskever", "R. Salakhutdinov"],
    "venue": "The Journal of Machine Learning Research,",
    "year": 1929
  }, {
    "title": "The nature of statistical learning theory",
    "authors": ["V. Vapnik"],
    "venue": "Springer science & business media,",
    "year": 2013
  }, {
    "title": "On early stopping in gradient descent learning",
    "authors": ["Y. Yao", "L. Rosasco", "A. Caponnetto"],
    "venue": "Constructive Approximation,",
    "year": 2007
  }, {
    "title": "Understanding deep learning requires rethinking generalization",
    "authors": ["C. Zhang", "S. Bengio", "M. Hardt", "B. Recht", "O. Vinyals"],
    "venue": "arXiv preprint arXiv:1611.03530,",
    "year": 2016
  }],
  "id": "SP:4c611d79669dc84a93a1638dd42f80171b369683",
  "authors": [{
    "name": "Zhenyu Liao",
    "affiliations": []
  }, {
    "name": "Romain Couillet",
    "affiliations": []
  }],
  "abstractText": "Understanding the learning dynamics of neural networks is one of the key issues for the improvement of optimization algorithms as well as for the theoretical comprehension of why deep neural nets work so well today. In this paper, we introduce a random matrix-based framework to analyze the learning dynamics of a single-layer linear network on a binary classification problem, for data of simultaneously large dimension and size, trained by gradient descent. Our results provide rich insights into common questions in neural nets, such as overfitting, early stopping and the initialization of training, thereby opening the door for future studies of more elaborate structures and models appearing in today’s neural networks.",
  "title": "The Dynamics of Learning: A Random Matrix Approach"
}