{
  "sections": [{
    "heading": "1. Introduction",
    "text": "Deep neural networks have achieved state-of-the-art performance on many machine learning tasks in areas such as natural language processing (Wu et al., 2016), computer vision (Krizhevsky et al., 2012) and speech recognition (Hinton et al., 2012). Training of such networks is often successfully performed by minimizing a high-dimensional nonconvex objective function, using simple first-order methods such as stochastic gradient descent.\nNonetheless, the success of deep learning from an optimization perspective is poorly understood theoretically. Current results are mostly pessimistic, suggesting that even training a 3-node neural network is NP-hard (Blum & Rivest, 1993), and that the objective function of a single neuron can admit exponentially many local minima (Auer et al., 1996; Safran & Shamir, 2016). There have been re-\n1Tel Aviv University, Blavatnik School of Computer Science. Correspondence to: Alon Brutzkus <alonbrutzkus@mail.tau.ac.il>, Amir Globerson <gamir@cs.tau.ac.il>.\nProceedings of the 34 th International Conference on Machine Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017 by the author(s).\ncent attempts to bridge this gap between theory and practice. Several works focus on the geometric properties of loss functions that neural networks attempt to minimize. For some simplified architectures, such as linear activations, it can be shown that there are no bad local minima (Kawaguchi, 2016). Extension of these results to the nonlinear case currently requires very strong independence assumptions between the activations of the neurons and the inputs (Kawaguchi, 2016).\nSince gradient descent is the main “work-horse” of deep learning it is of key interest to understand its convergence properties. However, there are no results showing that gradient descent is globally optimal for non-linear models, except for the case of many hidden neurons (Andoni et al., 2014) and non-linear activation functions that are not widely used in practice (Zhang et al., 2017).1 Here we provide the first such result for a neural architecture that has two very common components: namely a ReLU activation function and a convolution layer.\nThe architecture considered in the current paper is shown in Figure 1. We refer to these models as no-overlap networks. A no-overlap network can be viewed as a simple convolution layer with non overlapping filters, followed by a ReLU activation function, and then average pooling. Formally, let w ∈ Rm denote the filter coefficients, and assume the input x is in Rd. Define k = d/m and assume that k is integral. Partition x into k non-overlapping parts and denote x[i] the ith part. Finally, define σ to be the ReLU activation function, namely σ (z) = max{0, z}. Then the output of the network in Figure 1 is given by:\nf(x;w) = 1\nk ∑ i σ (w · x[i]) (1)\nWe note that such architectures have been used in several works (Lin et al., 2013; Milletari et al., 2016), but we view them as important firstly because they capture key properties of general convolutional networks.\nWe address the realizable case, where training data is generated from a function as in Eq. 1 with weight vector w∗. Training data is then generated by sampling n training points x1, . . . ,xn from a distribution D, and assigning them labels using y = f(x;w∗). The learning problem is\n1See more related work in Section 2.\nthen to find a w that minimizes the squared loss. In other words, solve the optimization problem:\nmin w\n1\nn ∑ i (f(xi;w)− yi)2 (2)\nIn the limit n → ∞, this is equivalent to minimizing the population risk:\n`(w) = Ex∼D [ (f(x;w)− f(x;w∗))2 ] (3)\nLike several recent works (Hardt et al., 2016; Hardt & Ma, 2016) we focus on minimizing the population risk, leaving the finite sample case to future work. We believe the population risk captures the key characteristics of the problem, since the large data regime is the one of interest.\nOur key results are as follows:\n• Worst Case Hardness: Despite the simplicity of NoOverlap Networks, we show that learning them is in fact hard if D is unconstrained. Specifically, in Section 4, we show that learning No-Overlap Networks is NP complete via a reduction from a variant of the set splitting problem.\n• Distribution Dependent Tractability: When D corresponds to independent Gaussian variables with µ = 0, σ2 = 1, we show in Section 5 that No-Overlap Networks can be learned in polynomial time using gradient descent.\nThe above two results nicely demonstrate the gap between worst-case intractability and tractability under assumptions\non the data. We provide an empirical demonstration of this in Section 6 where gradient descent is shown to succeed in the Gaussian case and fail for a different distribution.\nTo further understand the role of overlap in the network, we consider networks that do have overlap between the filters. In Section 7.1 we show that in this case, even under Gaussian distributed inputs, there will be non-optimal local minima. Thus, gradient descent will no longer be optimal in the overlap case. In Section 7.2 we show empirically that these local optima may be overcome in practice by using gradient descent with multiple restarts.\nTaken together, our results are the first to demonstrate distribution dependent optimality of gradient descent for learning a neural network with a convolutional like architecture and a ReLU activation function."
  }, {
    "heading": "2. Related Work",
    "text": "Hardness of learning neural networks has been demonstrated for many different settings. For example, Blum & Rivest (1993) show that learning a neural network with one hidden layer with a sign activation function is NP-hard in the realizable case. Livni et al. (2014) extend this to other activation functions and bounded norm optimization. Hardness can also be shown for improper learning under certain cryptographic assumptions (e.g., see Daniely et al., 2014; Klivans, 2008; Livni et al., 2014). Note that these hardness results do not hold for the regression and tied parameter setting that we consider.\nDue to the above hardness results, it is clear that the success of deep-learning can only be explained by making additional assumptions about the data generating distribution. The classic algorithm by Baum (1990) shows that intersection of halfspaces (i.e., a specific instance of a one hidden layer network) is PAC learnable under any symmetric distribution. This was later extended in Klivans et al. (2009) to log-concave distributions.\nThe above works do not consider gradient descent as the optimization method, leaving open the question of which assumptions can lead to global optimality of gradient descent. Such results have been hard to obtain, and we survey some recent ones below. One instance when gradient descent can succeed is when there are enough hidden units such that random initialization of the first layer can lead to zero error even if only the second layer is trained. Such over-specified networks have been considered (Andoni et al., 2014; Livni et al., 2014) and it was shown that gradient descent can globally learn them in some cases (Andoni et al., 2014). However, the assumption of overspecification is very restrictive and limits generalization. In contrast, we show convergence of gradient descent to a global optimum for any network size and consider convo-\nlutional neural networks with shared parameters. Another interesting case is linear dynamical systems, where Hardt et al. (2016) show that under independence assumptions maximum likelihood is quasi-concave and hence solvable with gradient ascent.\nRecent work by Mei et al. (2016) shows that regression with a single neuron and certain non-linear activation functions, can be learned with gradient descent for subGaussian inputs. We note that their architecture is significantly simpler than ours, in that it uses a single neuron. In fact, their regression problem can also be solved via methods for generalized linear models (Kakade et al., 2011).\nShamir (2016) recently showed that there is a limit to what distribution dependent results can achieve. Namely, it was shown that for large enough one-hidden layer networks, no distributional assumption such as Gaussian inputs can make gradient descent tractable. Importantly, the construction in Shamir (2016) does not use parameter tying and thus is not applicable to the architecture we study here.\nSeveral works have focused on understanding the loss surface of neural network objectives, but without direct algorithmic implications. Kawaguchi (2016) show that linear neural networks do not suffer from bad local minima. Hardt & Ma (2016) consider objectives of linear residual networks and prove that there are no critical points other than the global optimum. Soudry & Carmon (2016) show that in the objective of over-parameterized neural networks with dropout-like noise, all differentiable local minima are global. Other works (Safran & Shamir, 2016; Haeffele & Vidal, 2015) give similar results for over-specified networks. All of these results are purely geometric and do not have direct implications on convergence of optimization algorithms. Janzamin et al. (2015) and Goel et al. (2016), suggest alternatives to gradient-based methods for learning neural networks. However, these algorithms are not widely used in practice. Finally, Choromanska et al. (2015) use spin glass models to argue that, under certain generative modelling and architectural constraints, local minima are likely to have low loss values.\nThe theory of non-convex optimization is closely related to the theory of neural networks. Recently, there has been substantial progress in proving convergence guarantees of simple first-order methods in various machine learning problems, that don’t correspond to typical neural nets. These include for example matrix completion (Ge et al., 2016) and tensor decompositions (Ge et al., 2015).\nFinally, recent work by Zhang et al. (2016) shows that neural nets can perfectly fit random labelings of the data. Understanding this from an optimization perspective is largely an open problem."
  }, {
    "heading": "3. Preliminaries",
    "text": "We use bold-faced letters for vectors and capital letters for matrices. The ith row of a matrix A is denoted by ai.\nIn our analysis in Section 5 and Section 7.1 we assume that the input feature x ∈ Rd is a vector of IID Gaussian random variables with zero mean and variance one.2 Denote this distribution by G. We consider networks with one hidden layer, and k hidden units. Our main focus will be on No-Overlap Networks, but we begin with a more general one-hidden-layer neural network with a fully-connected layer parameterized by W ∈ Rk,d followed by average pooling. The network output is then:\nf(x;W ) = 1\nk ∑ i σ (wi · x) (4)\nwhere σ () is the pointwise ReLU function.\nWe consider the realizable setting where there exists a true W ∗ using which the training data is generated. The population risk (see Eq. 3) is then:\n`(W ) = EG [ (f(x;W )− f(x;W ∗))2 ] , (5)\nAs we show next, `(W ) can be considerably simplified. First, define:\ng(u,v) = EG [σ (u · x)σ (v · x)] (6)\nSimple algebra then shows that:\n`(W ) = 1\nk2 ∑ i,j [ g(wi,wj)− 2g(wi,w∗j ) + g(w∗i ,w∗j ) ] (7)\nThe next Lemma from Cho & Saul (2009) shows that g(u,v) has a simple form.\nLemma 3.1. (Cho & Saul, 2009, Section 2) Given u,v ∈ Rd denote by θu,v the angle between u and v. Then:\ng(u,v) = 1\n2π ‖u‖ ‖v‖\n( sin θu,v + ( π−θu,v ) cos θu,v )\nThe gradient of g with respect to u also turns out to have a simple form, as stated in the lemma below. The proof is deferred to the supplementary material.\nLemma 3.2. Let g be as defined in Eq. 6. Then g is differentiable at all points u 6= 0 and\n∂g(u,v)\n∂u =\n1 2π ‖v‖ u ‖u‖ sin θu,v + 1 2π\n( π − θu,v ) v\n2The variance per variable can be arbitrary. We choose one for simplicity.\nWe conclude by special-casing the results above to NoOverlap Networks. In this case, the entire model is specified by a single filter vector w ∈ Rm. The rows wi are mostly zeros, except for the indices ((i − 1)m + 1, . . . , im) which take the values of w. Namely, wi =( 0(i−1)m,w,0d−im ) where 0l ∈ Rl is a zero vector. The same holds for the vectors w∗i with a weight vector w∗. This simplifies the loss considerably, since for all i: g(wi,wi) = 1 2 ‖w‖\n2, and for all i 6= j: g(wi,wj) = 1 2π ‖w‖ 2 and g(wi,w∗j ) = 1 2π ‖w‖ ‖w\n∗‖. Thus the loss `(w) for No-Overlap Networks yields (up to additive factors in w∗):\n`(w) = 1\nk2\n[ γ‖w‖2−2kg(w,w∗)−2β ‖w‖ ‖w∗‖ ] (8)\nwhere β = k 2−k 2π and γ = β + k 2 .\n4. Learning No-Overlap Networks is NP-Complete\nThe No-Overlap Networks architecture is a simplified convolutional layer with average pooling. However, as we show here, learning it is still a hard problem. This will motivate our exploration of distribution dependent results in Section 5.\nRecall that our focus is on minimizing the squared error in Eq. 3. For this section, we do not make any assumptions about D. Thus D can be a distribution with uniform mass on training points x1, . . . ,xn, recovering the empirical risk in Eq. 2. We know that `(w) in Eq. 3 can be minimized by setting w = w∗ and the corresponding squared loss `(w) will be zero. However, we of course do not know w∗, and the question is how difficult is it to minimize `(w). In what follows we show that this is hard. Namely, it is an NPcomplete problem to find a w that comes 0 close to the minimum of `(w), for some constant 0.\nWe begin by defining the Set-Splitting-by-k-Sets problem, which is a variant of the classic Set-Splitting problem (Garey & Johnson, 1990). After establishing the hardness of Set-Splitting-by-k-Sets, we will provide a reduction from it to learning No-Overlap Networks. Definition 1. The Set-Splitting-by-k-Sets decision problem is defined as follows: Given a finite set S of d elements and a collection C of at most (k− 1)d subsets Cj of S, do there exist disjoint sets S1, S2, ..., Sk such that ⋃ i Si = S and for all j and i, Cj 6⊆ Si?\nFor k = 2 and without the upper bound on |C| this is known as the Set-Splitting decision problem which is NPcomplete (Garey & Johnson, 1990). Next, we show that Set-Splitting-by-k-Sets is NP-complete. The proof is via a reduction from 3SAT and induction, and is provided in the supplementary material.\nProposition 4.1. Set-Splitting-by-k-Sets is NP-complete for all k ≥ 2.\nWe next formulate the No-Overlap Networks optimization problem.\nDefinition 2. The k-Non-Overlap-Opt problem is defined as follows. The input is a distribution DX,Y over inputoutput pairs x, y where x ∈ Rd. If the input is realizable by a no-overlap network with k hidden neurons, then the output is a vector w such that:\nEDX,Y [ (f(x;w)− y))2 ] < 1\n4k5d (9)\nOtherwise an arbitrary weight vector is returned.3\nThe above problem returns a w that minimizes the population-risk up to 14k5d accuracy. It is thus easier than minimizing the risk to an arbitrary precision (see Section 5, Theorem 5.2).\nWe prove the following theorem, which uses some ideas from Blum & Rivest (1993), but introduces additional constructions needed for the no overlap case.\nTheorem 4.2. For all k ≥ 2, the k-Non-Overlap-Opt problem is NP-complete.\nProof. We will show a reduction from Set-Splitting-by-ksets to k-Non-Overlap-Opt. Assume a given instance of the Set-Splitting-by-k-sets problem with a set S and collection of subsets C. Denote S = {1, 2, ..., d} and |C| ≤ (k − 1)d. Let 0d ∈ Rd be the all zeros vector. For a vector v ∈ Rd, define the vector di(v) ∈ Rkd to be the concatenation of i − 1 vectors 0d, followed by v and k − i vectors 0d, and let d(v) = (d1(v),d2(v), ...,dk(v)) ∈ Rk 2d.\nWe next define a training set for k-Non-Overlap-Opt. For each element i ∈ S define an input vector xi = d(ei), where ei is the standard basis of Rd. Assign the label yi = 1 k to this input. In addition, for each subset Cj ∈ C\ndefine the vector xd+j = d( ∑ i∈Cj ei) and label yd+j = 0. Thus we have |S|+ |C| data points in Rk2d. Let DX,Y be a uniform distribution over the training set points (i.e., each point with probability at least 1kd since |C| ≤ (k − 1)d).\nWe will now show that the given instance of Set-Splittingby-k-sets has a solution (i.e., there exist splitting sets) if and only if k-Non-Overlap-Opt returns a weight vector with low risk. First, assume there exist splitting sets S1, ..., Sk.4 For each 1 ≤ l ≤ k define the vector aSl ∈ Rd such that for all i ∈ Sl, aSli = 1 and a Sl i = −d otherwise. Define a No-Overlap Network with k2d inputs and weight vector\n3We assume that the population risk is efficiently computable. 4The sets are disjoint, their union is S and for all j and i,\nCj 6⊆ Si.\nw = (aS1 ,aS2 , ...,aSk) ∈ Rkd. Then for all 1 ≤ i ≤ d we have:\nf(xi;w) =\n∑k l=1 σ((a Sl)Tei)\nk =\n1 k = yi (10)\nand for all j:\nf(xd+j ;w) =\n∑k l=1 σ((a Sl)T ( ∑ i∈Cj ei))\nk = 0 = yd+j\n(11) where the last equality follows since for all l and j, Cj 6⊆ Sl. There thus exists a w for which the error in Eq. 9 is zero and k-Non-Overlap-Opt will return a weight vector with low risk.\nConversely, assume that k-Non-Overlap-Opt returned a w ∈ Rkd with risk less than 14k5d on DX,Y above. Denote by w = (w1,w2, ...,wk), where wl ∈ Rd. We will show that this implies that there exist k splitting sets. For all x′, y′ in the training set it holds that:5\n(f(x′;w)− y′)2\nkd ≤ EDX,Y [(f(x;w)− y)2] <\n1\n4k5d\nThis implies that for all i and j,\n|f(d(ei);w)− 1 k | < 1 2k2 , |f(d( ∑ i∈Cj ei);w)| < 1 2k2\n(12) Define sets Sl = {i | wTl ei > 12k} for 1 ≤ l ≤ k and WLOG assume they are disjoint by arbitrarily assigning points that belong to more than one set, to one of the sets they belong to. We will next show that these Sl are splitting. Namely, it holds that ⋃ l Sl = S and no subset Cj is a subset of some Sl.\nSince f(d(ei);w) = ∑k l=1 σ(w T l ei) k > 1 k − 1 2k2 > 1 2k for all i, it follows that for each i ∈ S there exists 1 ≤ l ≤ k such that wTl ei > 12k . Therefore, by the definition of Sl we deduce that ⋃ l Sl = S. To show the second property, assume by contradiction that for some j and m, Cj ⊆ Sm. Then wTm( ∑ i∈Cj ei) > |Cj | 2k , which im-\nplies that f(d( ∑ i∈Cj ei);w) = ∑k l=1 σ(w T l ( ∑ i∈Cj ei))\nk > |Cj | 2k2 ≥ 1 2k2 , a contradiction. This concludes our proof.\nTo conclude, we have shown that No-Overlap Networks are hard to learn if one does not make any assumptions about the training data. In fact we have shown that finding a w with loss at most 14k5d is hard. In the next section, we show that certain distributional assumptions make the problem tractable.\n5The LHS is true because for a non-negative random variable X , E[X] ≥ p(x)x for all x, and in our case p(x) ≥ 1\nkd .\n5. No-Overlap Networks can be Learned for Gaussian Inputs\nIn this section we assume that the input features x are generated via a Gaussian distribution G, as in Section 3. We will show that in this case, gradient descent will converge with high probability to the global optimum of `(w) (Eq. 8) in polynomial time.\nIn order to analyze convergence of gradient descent on `, we need a characterization of all the critical and non-differentiable points. We show that ` has a nondifferentiable point and a degenerate saddle point.6 Therefore, recent methods for showing global convergence of gradient-based optimizers on non-convex objectives (Lee et al., 2016; Ge et al., 2015) cannot be used in our case, because they assume all saddles are strict 7 and the objective function is continuously differentiable everywhere.\nThe characterization is given in the following proposition. The proof relies on the fact that `(w) depends only on ‖w‖,‖w∗‖ and θw,w∗ , and therefore w.l.o.g. it can be assumed that w∗ lies on one of the axes. Then by a symmetry argument, in order to prove properties of the gradient and the Hessian, it suffices to calculate partial derivatives with respect to at most three variables.\nProposition 5.1. Let `(w) be defined as in Eq. 8. Then the following holds:\n1. `(w) is differentiable if and only if w 6= 0.\n2. For k > 1, `(w) has three critical points:\n(a) A local maximum at w = 0. (b) A unique global minimum at w = w∗. (c) A degenerate saddle point at w = −( k\n2−k k2+(π−1)k )w ∗.\nFor k = 1, w = 0 is not a local maximum and the unique global minimum w∗ is the only differentiable critical point 8.\nWe next consider a simple gradient descent update rule for minimizing `(w) and analyze its convergence. Let λ > 0 denote the step size. Then the update at iteration t is simply:\nwt+1 = wt − λ∇`(wt) (13)\nOur main result, stated formally below, is that the above update is guaranteed to converge to an accurate solution after O( 1 2 ) iterations. We note that the dependence of the\n6A saddle point is degenerate if the Hessian at the point has only non-negative eigenvalues and at least one zero eigenvalue.\n7A saddle point is strict if the Hessian at the point has at least one negative eigenvalue.\n8See Figure 2.\nconvergence rate on is similar to standard results on convergence of gradient descent to stationary points (e.g., see discussion in Allen-Zhu & Hazan, 2016).\nTheorem 5.2. Assume ‖w∗‖ = 1.9 For any δ > 0 and 0 < < δ sinπδk , there exists 0 < λ < 1\n10 such that with probability at least 1− δ, gradient descent initialized randomly from the unit sphere with learning rate λ will get to a point w such that `(w) ≤ O( ) in O( 1 2 ) iterations. 11\nThe complete proof is provided in the supplementary material. Here we provide a high level overview. In particular, we first explain why gradient descent will stay away from the two bad points mentioned in Lemma 5.1.\nFirst we note that the gradient of `(w) at wt is given by:\n∇`(wt) = −c1(wt,w∗)wt − c2(wt,w∗)w∗ , (14)\nwhere c1 and c2 are two functions such that c1 ≥ −1, c2 ≥ 0 and c2 = 0 if and only if θwt,w∗ = π. Thus the gradient is a sum of a vector in the direction of wt and a vector in the direction of w∗. At iteration t+ 1 we have:\nwt+1 = (1 + λc1(wt,w ∗))wt + λc2(wt,w ∗)w∗ (15)\nIt follows that for λ < 1 and θwt,w∗ 6= π, we have θwt+1,w∗ < θwt,w∗ . Therefore, if θw0,w∗ 6= π , we will never converge to the saddle point in Lemma 5.1.\nNext, assuming ‖w0‖ > 0 and that θw0,w∗ ≤ (1 − δ)π (which occurs with probability 1− δ), it can be shown that the norm of wt is always bounded away from zero by a constant M = Ω̃(1).12 The proof is quite technical and\n9Assumed for simplicity, otherwise ‖w∗‖ is a constant factor. 10λ can be found explicitly. 11O(·) hides a linear factor in d. 12Ω̃ and Õ hide factors of ‖w∗‖, θw0,w∗ , k and δ.\nfollows from the fact that w = 0 is a local maximum.13\nThe fact that wt stays away from the problematic points allows us to show that `(w) has a Lipschitz continuous gradient on the line between wt and wt+1, with constant L = Õ(1).12 By standard optimization analysis (Nesterov, 2004) it follows that after T = O( 1 2 ) iterations we will have ‖∇l(wt)‖ ≤ O( ) for some 0 ≤ t ≤ T . This in turn can be used to show that wt is O( √ )-close to w∗. Finally, since `(w) ≤ d‖w −w∗‖2, it follows that wt approximates the global minimum to within O( ) accuracy.\nTheorem 5.2 implies that gradient descent converges to a point w such that `(w) ≤ 1d2 in time O(poly(d)) where d is the input dimension.14 The following corollary thus follows.\nCorollary 5.3. Gradient descent solves the k-NonOverlap-Opt problem under the Gaussian assumption on D with high probability and in polynomial time."
  }, {
    "heading": "6. Empirical Illustration of Tractability Gap",
    "text": "The results in the previous sections showed that NoOverlap Networks optimization is hard in the general case, but tractable for Gaussian inputs. Here we empirically demonstrate both the easy and hard cases. The training data for the two cases will be generated by using the same w∗ but different distributions over x.\nTo generate the “hard” case, we begin with a set splitting problem. In particular, we consider a set S with 40 elements and a collection C of 760 subsets of S, each of size 20. We choose Cj such that there exists subsets S1,S2 that split the subsets Cj . We use the reduction in Section 4 to convert this into a No-Overlap Networks optimization problem. This results in a training set of size 800.\nSince we know the w∗ that solves the set splitting problem, we can use it to label data from a different distribution. Motivated by Section 5 we use a Gaussian distribution G as defined earlier and generate a training set of the same size (namely 800) and labels given by the no-overlap network with weight w∗.\nFor these two learning problems we used AdaGrad (Duchi et al., 2011) to optimize the empirical risk (plain gradient descent also converges, but AdaGrad requires less tuning of step size). For both datasets we used a random normal initializer and for each we chose the best performing learning rate schedule. The training error for each setting as a function of the number of epochs is shown in Figure 3. It is clear that in the non-Gaussian case, AdaGrad gets trapped\n13The proof holds even for k = 1 where w = 0 is not a local maximum.\n14Note that the complexity of a gradient descent iteration is polynomial in d.\nat a sub-optimal point, whereas the Gaussian case is solved optimally.15 In the Gaussian case AdaGrad converged to w∗. Therefore, given the Gaussian dataset we were able to recover the true weight vector w∗, whereas given the data constructed via the reduction we were not, even though both datasets were of the same size. We conclude that these empirical findings are in line with our theoretical results."
  }, {
    "heading": "7. Networks with Overlapping Filters",
    "text": "Thus far we showed that the non-overlapping case becomes tractable under Gaussian inputs. A natural question is then what happens when overlaps are allowed (namely, the stride is smaller than the filter size). Will gradient descent still find a global optimum? Here we show that this is in fact not the case, and that with probability greater than 14 gradient descent will get stuck in a sub-optimal region. In Section 7.1 we analyze this setting for a two dimensional example and provide bounds on the level of suboptimality. In Section 7.2 we report on an empirical study of optimization for networks with overlapping filters. Our results suggest that by restarting gradient descent a constant number of times, it will converge to the global minimum with high probability. Complete proofs of the results are provided in the supplementary material."
  }, {
    "heading": "7.1. Suboptimality of Gradient Descent for R2",
    "text": "We consider an instance where there are k = d − 1 neurons and matrices W,W ∗ ∈ Rk×d correspond to an over-\n15We note that the value of 0.06 attained by the non-Gaussian case is quite high, since the zero weight vector in this case has loss of order 0.1.\nlapping filter of size 2 with stride 1, i.e., for all 1 ≤ i ≤ k wi = (0i−1,w,0d−i−1), w∗i = (0i−1,w\n∗,0d−i−1) where 0l = (0, 0, ..., 0) ∈ Rl, w = (w1, w2) is a vector of 2 parameters and w∗ = (−w∗, w∗) ∈ R2, w∗ > 0. Define the following vectors wr = (w1, w2, 0), wl = (0, w1, w2), w∗r = (−w∗, w∗, 0), w∗l = (0,−w∗, w∗) and denote by θw,v the angle between two vectors w and v.\nOne might wonder why the analysis of the overlapping case should be any different than the non-overlapping case. However, even for a filter of size two, as above, the loss function and consequently the gradient, are more complex in the overlapping case. Indeed, the loss function in this case is given by:\n`(w) = α(‖w‖2 + ‖w∗‖2)− βg(w,w∗) + (β − 2)(g(wr,wl)− g(wl,w∗r) − g(wr,w∗l ) + g(w∗r ,w∗l ))− γ ‖w‖ ‖w∗‖ (16)\nwhere α = 1k2 ( k 2 + k2−3k+2 2π ) , β = 2k and γ = k 2−3k+2 π .\nCompared to the objective in Eq. 8 which depends only on ‖w‖, ‖w‖ and θw,w∗ , we see that the objective in Eq. 16 has new terms such as g(wr,w∗l ) which has a more complicated dependence on the weight vectors w∗ and w. This does not only have implications on the analysis, but also on the geometric properties of the loss function and the dynamics of gradient descent. In particular, in Figure 4 we see that the objective has a large sub-optimal region which is not the case when the filters are non-overlapping.\nAs in the previous section we consider gradient descent updates as in Eq. 13. The following Proposition shows that if w is initialized in the interior of the fourth quadrant of R2, then it will stay there for all remaining iterations. The proof is a straightforward inspection of the components of the gradient, and is provided in the supplementary.\nProposition 7.1. For any λ ∈ (0, 13 ), if wt is in the interior of the fourth quadrant of R2 then so is wt+1.\nNote that in our example the global optimum w∗ is in the second quadrant (it’s easy to show that it is also unique). Hence, if initialized at the fourth quadrant, gradient descent will remain in a sub-optimal region. The sub-optimality can be clearly seen in Figure 4. In the proposition below we formalize this observation by giving a tight lower bound on the values of `(w) for w in the fourth quadrant. Specifically, we show that the sub-optimality scales with O( 1k2 ). The proof idea is to express all angles between all the vectors that appear in Eq. 16 via a single angle parameter θ between w in the fourth quadrant and the positive x-axis. Then it is possible to prove the relatively simpler one dimensional inequality that depends on θ.\nProposition 7.2. Let h(k) = k 2−3k+2 π + √ 3(k−1) π + 2(k−1) 3 , then for all w in the fourth quadrant l(w) ≥ 2h(k)+1 k2(2h(k)+2)‖w ∗‖2 and this lower bound is attained by w̃ = − h(k)h(k)+1w ∗.\nThe above two propositions result in the following characterization of the sub-optimality of gradient descent for w ∈ R2 and overlapping filters. Theorem 7.3. Define h(k) as in Proposition 7.2. Then with probability ≥ 14 , a randomly initialized gradient descent with learning rate λ ∈ (0, 13 ) will get stuck in a sub-optimal region, where each point in this region has loss at least\n2h(k)+1 k2(2h(k)+2)‖w ∗‖2 and this bound is tight."
  }, {
    "heading": "7.2. Empirical study of Gradient Descent for m > 2",
    "text": "In Section 7.1 we showed that already for m = 2, networks with w ∈ Rm and filter overlaps exhibit more complex behavior than those without overlap. This leaves open the question of what happens in the general case under the Gaussian assumption, for various values of d,m and overlaps. We leave the theoretical analysis of this question to future work, but here report on empirical findings that hint at what the solution should look like.\nWe experimented with a range of d,m and overlap values (see supplementary material for details of the experimental setup). For each value of d, m and overlap we sampled 90 values of w∗ from various uniform input distributions with different supports and several pre-defined deterministic values. This resulted in more than 1200 different sampled w∗. For each such w∗ we ran gradient descent multiple times, each initialized randomly from a different w0. Using the results from these runs, we could estimate the probability of sampling a w0 that would converge to the unique global minimum. Viewed differently, this is the probability mass of the basin of attraction of the global optimum. We note that the uniqueness of the global minimum\nfollows easily from equating the population risk (Eq. 3) to 0 and the full proof is deferred to the supplementary material.\nOur results are that across all values of d,m, overlap and w∗, the probability mass of the basin of attraction is at least 1 17 . The practical implication is that multiple restarts of gradient descent (in this case a few dozen) will find the global optimum with high probability. We leave formal analysis of this intriguing fact for future work."
  }, {
    "heading": "8. Discussion",
    "text": "The key theoretical question in deep learning is why it succeeds in finding good models despite the non-convexity of the training loss. It is clear that an answer must characterize specific settings where deep learning provably works. Despite considerable recent effort, such a case has not been shown. Here we provide the first analysis of a non-linear architecture where gradient descent is globally optimal, for a certain input distribution, namely Gaussian. Thus our specific characterization is both in terms of architecture (nooverlap networks, single hidden layer, and average pooling) and input distribution. We show that learning in nooverlap architectures is hard, so that some input distribution restriction is necessary for tractability. Note however, that it is certainly possible that other, non-Gaussian, distributions also result in tractability. Some candidates would be sub-Gaussian and log-concave distributions.\nOur derivation addressed the population risk, which for the Gaussian case can be calculated in closed form. In practice, one minimizes an empirical risk. Our experiments in Section 6 suggest that optimizing the empirical risk in the Gaussian case is tractable. It would be interesting to prove this formally. It is likely that measure concentration results can be used to get similar results to those we had for the population risk (e.g., see Mei et al., 2016; Xu et al., 2016, for use of such tools).\nConvolution layers are among the basic building block of neural networks. Our work is among the first to analyze optimization for these. The architecture we study is similar in structure to convolutional networks, in the sense of using parameter tying and pooling. However, most standard convolutional layers have overlap and use max pooling. In Section 7 we provide initial results for the case of overlap, showing there is hope for proving optimality for gradient descent with random restarts. Analyzing max pooling would be very interesting and is left for future work.\nFinally, we note that distribution dependent tractability has been shown for intersection of halfspaces (Klivans et al., 2009), which is a non-convolutional architecture. However, these results do not use gradient descent. It would be very interesting to use our techniques to try and understand gradient descent for the population risk in these settings."
  }, {
    "heading": "Acknowledgements",
    "text": "This work was supported by the Blavatnik Computer Science Research Fund, the Intel Collaborative Research Institute for Computational Intelligence (ICRI-CI), and an ISF Centers of Excellence grant."
  }],
  "year": 2017,
  "references": [{
    "title": "Variance reduction for faster non-convex optimization",
    "authors": ["Allen-Zhu", "Zeyuan", "Hazan", "Elad"],
    "venue": "arXiv preprint arXiv:1603.05643,",
    "year": 2016
  }, {
    "title": "Learning polynomials with neural networks",
    "authors": ["Andoni", "Alexandr", "Panigrahy", "Rina", "Valiant", "Gregory", "Zhang", "Li"],
    "venue": "In Proceedings of the 31th International Conference on Machine Learning,",
    "year": 1908
  }, {
    "title": "Exponentially many local minima for single neurons. Advances in neural information processing",
    "authors": ["Auer", "Peter", "Herbster", "Mark", "Warmuth", "Manfred K"],
    "year": 1996
  }, {
    "title": "A polynomial time algorithm that learns two hidden unit nets",
    "authors": ["Baum", "Eric B"],
    "venue": "Neural Computation,",
    "year": 1990
  }, {
    "title": "Training a 3-node neural network is np-complete",
    "authors": ["Blum", "Avrim L", "Rivest", "Ronald L"],
    "venue": "In Machine learning: From theory to applications,",
    "year": 1993
  }, {
    "title": "Kernel methods for deep learning",
    "authors": ["Cho", "Youngmin", "Saul", "Lawrence K"],
    "venue": "In Advances in neural information processing systems,",
    "year": 2009
  }, {
    "title": "The loss surfaces of multilayer networks",
    "authors": ["Choromanska", "Anna", "Henaff", "Mikael", "Mathieu", "Michael", "Arous", "Gérard Ben", "LeCun", "Yann"],
    "venue": "In AISTATS,",
    "year": 2015
  }, {
    "title": "From average case complexity to improper learning complexity",
    "authors": ["Daniely", "Amit", "Linial", "Nati", "Shalev-Shwartz", "Shai"],
    "venue": "In Proceedings of the 46th Annual ACM Symposium on Theory of Computing,",
    "year": 2014
  }, {
    "title": "Adaptive subgradient methods for online learning and stochastic optimization",
    "authors": ["Duchi", "John", "Hazan", "Elad", "Singer", "Yoram"],
    "venue": "Journal of Machine Learning Research,",
    "year": 2011
  }, {
    "title": "Computers and Intractability; A Guide to the Theory of NPCompleteness",
    "authors": ["Garey", "Michael R", "Johnson", "David S"],
    "year": 1990
  }, {
    "title": "Escaping from saddle points-online stochastic gradient for tensor decomposition",
    "authors": ["Ge", "Rong", "Huang", "Furong", "Jin", "Chi", "Yuan", "Yang"],
    "venue": "In COLT, pp",
    "year": 2015
  }, {
    "title": "Matrix completion has no spurious local minimum",
    "authors": ["Ge", "Rong", "Lee", "Jason D", "Ma", "Tengyu"],
    "venue": "In Advances in Neural Information Processing Systems,",
    "year": 2016
  }, {
    "title": "Reliably learning the ReLU in polynomial time",
    "authors": ["Goel", "Surbhi", "Kanade", "Varun", "Klivans", "Adam", "Thaler", "Justin"],
    "venue": "arXiv preprint arXiv:1611.10258,",
    "year": 2016
  }, {
    "title": "Global optimality in tensor factorization, deep learning, and beyond",
    "authors": ["Haeffele", "Benjamin D", "Vidal", "René"],
    "venue": "arXiv preprint arXiv:1506.07540,",
    "year": 2015
  }, {
    "title": "Identity matters in deep learning",
    "authors": ["Hardt", "Moritz", "Ma", "Tengyu"],
    "venue": "arXiv preprint arXiv:1611.04231,",
    "year": 2016
  }, {
    "title": "Gradient descent learns linear dynamical systems",
    "authors": ["Hardt", "Moritz", "Ma", "Tengyu", "Recht", "Benjamin"],
    "venue": "arXiv preprint arXiv:1609.05191,",
    "year": 2016
  }, {
    "title": "Beating the perils of non-convexity: Guaranteed training of neural networks using tensor methods",
    "authors": ["Janzamin", "Majid", "Sedghi", "Hanie", "Anandkumar", "Anima"],
    "venue": "arXiv preprint arXiv:1506.08473,",
    "year": 2015
  }, {
    "title": "Efficient learning of generalized linear and single index models with isotonic regression",
    "authors": ["Kakade", "Sham M", "Kanade", "Varun", "Shamir", "Ohad", "Kalai", "Adam"],
    "venue": "In Advances in Neural Information Processing Systems",
    "year": 2011
  }, {
    "title": "Deep learning without poor local minima",
    "authors": ["Kawaguchi", "Kenji"],
    "venue": "In Advances In Neural Information Processing Systems,",
    "year": 2016
  }, {
    "title": "Cryptographic hardness of learning",
    "authors": ["Klivans", "Adam"],
    "venue": "In Encyclopedia of Algorithms,",
    "year": 2008
  }, {
    "title": "Baums algorithm learns intersections of halfspaces with respect to log-concave distributions. In Approximation, Randomization, and Combinatorial Optimization",
    "authors": ["Klivans", "Adam R", "Long", "Philip M", "Tang", "Alex K"],
    "venue": "Algorithms and Techniques,",
    "year": 2009
  }, {
    "title": "Imagenet classification with deep convolutional neural networks. In Advances in neural information processing",
    "authors": ["Krizhevsky", "Alex", "Sutskever", "Ilya", "Hinton", "Geoffrey E"],
    "year": 2012
  }, {
    "title": "Gradient descent only converges to minimizers",
    "authors": ["Lee", "Jason D", "Simchowitz", "Max", "Jordan", "Michael I", "Recht", "Benjamin"],
    "venue": "In Proceedings of the 29th Conference on Learning Theory,",
    "year": 2016
  }, {
    "title": "On the computational efficiency of training neural networks",
    "authors": ["Livni", "Roi", "Shalev-Shwartz", "Shai", "Shamir", "Ohad"],
    "venue": "In Advances in Neural Information Processing Systems,",
    "year": 2014
  }, {
    "title": "The landscape of empirical risk for non-convex losses",
    "authors": ["Mei", "Song", "Bai", "Yu", "Montanari", "Andrea"],
    "venue": "arXiv preprint arXiv:1607.06534,",
    "year": 2016
  }, {
    "title": "V-net: Fully convolutional neural networks for volumetric medical image segmentation",
    "authors": ["Milletari", "Fausto", "Navab", "Nassir", "Ahmadi", "SeyedAhmad"],
    "venue": "In 3D Vision (3DV),",
    "year": 2016
  }, {
    "title": "Introductory lectures on convex optimization",
    "authors": ["Nesterov", "Yurii"],
    "venue": "pp. 22–29,",
    "year": 2004
  }, {
    "title": "On the quality of the initial basin in overspecified neural networks",
    "authors": ["Safran", "Itay", "Shamir", "Ohad"],
    "venue": "In Proceedings of the 33nd International Conference on Machine Learning,",
    "year": 2016
  }, {
    "title": "Distribution-specific hardness of learning neural networks",
    "authors": ["Shamir", "Ohad"],
    "venue": "arXiv preprint arXiv:1609.01037,",
    "year": 2016
  }, {
    "title": "No bad local minima: Data independent training error guarantees for multilayer neural networks",
    "authors": ["Soudry", "Daniel", "Carmon", "Yair"],
    "venue": "arXiv preprint arXiv:1605.08361,",
    "year": 2016
  }, {
    "title": "Global analysis of expectation maximization for mixtures of two gaussians",
    "authors": ["Xu", "Ji", "Hsu", "Daniel J", "Maleki", "Arian"],
    "venue": "In Advances in Neural Information Processing Systems,",
    "year": 2016
  }, {
    "title": "Understanding deep learning requires rethinking generalization",
    "authors": ["Zhang", "Chiyuan", "Bengio", "Samy", "Hardt", "Moritz", "Recht", "Benjamin", "Vinyals", "Oriol"],
    "venue": "CoRR, abs/1611.03530,",
    "year": 2016
  }, {
    "title": "Electron-proton dynamics in deep learning",
    "authors": ["Zhang", "Qiuyi", "Panigrahy", "Rina", "Sachdeva", "Sushant", "Rahimi", "Ali"],
    "venue": "arXiv preprint arXiv:1702.00458,",
    "year": 2017
  }],
  "id": "SP:fc756b45678ef7ffc1a796de62365013011b659e",
  "authors": [{
    "name": "Alon Brutzkus",
    "affiliations": []
  }, {
    "name": "Amir Globerson",
    "affiliations": []
  }],
  "abstractText": "Deep learning models are often successfully trained using gradient descent, despite the worst case hardness of the underlying non-convex optimization problem. The key question is then under what conditions can one prove that optimization will succeed. Here we provide a strong result of this kind. We consider a neural net with one hidden layer and a convolutional structure with no overlap, and a ReLU activation function. For this architecture we show that learning is NP-complete in the general case, but that when the input distribution is Gaussian, gradient descent converges to the global optimum in polynomial time. To the best of our knowledge, this is the first global optimality guarantee of gradient descent on a convolutional neural network with ReLU activations.",
  "title": "Globally Optimal Gradient Descent for a ConvNet with Gaussian Inputs"
}