{
  "sections": [{
    "text": "Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing, pages 1–11, Lisbon, Portugal, 17-21 September 2015. c©2015 Association for Computational Linguistics.\nIn this paper, we consider the task of learning control policies for text-based games. In these games, all interactions in the virtual world are through text and the underlying state is not observed. The resulting language barrier makes such environments challenging for automatic game players. We employ a deep reinforcement learning framework to jointly learn state representations and action policies using game rewards as feedback. This framework enables us to map text descriptions into vector representations that capture the semantics of the game states. We evaluate our approach on two game worlds, comparing against baselines using bag-ofwords and bag-of-bigrams for state representations. Our algorithm outperforms the baselines on both worlds demonstrating the importance of learning expressive representations. 1"
  }, {
    "heading": "1 Introduction",
    "text": "In this paper, we address the task of learning control policies for text-based strategy games. These games, predecessors to modern graphical ones, still enjoy a large following worldwide.2 They often involve complex worlds with rich interactions and elaborate textual descriptions of the underlying states (see Figure 1). Players read descriptions of the current world state and respond with natural language commands to take actions. Since the underlying state is not directly observable, the player has to understand the text in order to act, making it\n∗Both authors contributed equally to this work. 1Code is available at http://people.csail.mit.\nedu/karthikn/mud-play. 2http://mudstats.com/\nchallenging for existing AI programs to play these games (DePristo and Zubek, 2001).\nIn designing an autonomous game player, we have considerable latitude when selecting an adequate state representation to use. The simplest method is to use a bag-of-words representation derived from the text description. However, this scheme disregards the ordering of words and the finer nuances of meaning that evolve from composing words into sentences and paragraphs. For instance, in State 2 in Figure 1, the agent has to understand that going east will lead it to the castle whereas moving south will take it to the standing archway. An alternative approach is to convert text descriptions to pre-specified representations using annotated training data, commonly used in\n1\nlanguage grounding tasks (Matuszek et al., 2013; Kushman et al., 2014).\nIn contrast, our goal is to learn useful representations in conjunction with control policies. We adopt a reinforcement learning framework and formulate game sequences as Markov Decision Processes. An agent playing the game aims to maximize rewards that it obtains from the game engine upon the occurrence of certain events. The agent learns a policy in the form of an action-value function Q(s, a) which denotes the long-term merit of an action a in state s.\nThe action-value function is parametrized using a deep recurrent neural network, trained using the game feedback. The network contains two modules. The first one converts textual descriptions into vector representations that act as proxies for states. This component is implemented using Long Short-Term Memory (LSTM) networks (Hochreiter and Schmidhuber, 1997). The second module of the network scores the actions given the vector representation computed by the first.\nWe evaluate our model using two Multi-User Dungeon (MUD) games (Curtis, 1992; Amir and Doyle, 2002). The first game is designed to provide a controlled setup for the task, while the second is a publicly available one and contains human generated text descriptions with significant language variability. We compare our algorithm against baselines of a random player and models that use bag-of-words or bag-of-bigrams representations for a state. We demonstrate that our model LSTM-DQN significantly outperforms the baselines in terms of number of completed quests and accumulated rewards. For instance, on a fantasy MUD game, our model learns to complete 96% of the quests, while the bag-of-words model and a random baseline solve only 82% and 5% of the quests, respectively. Moreover, we show that the acquired representation can be reused across games, speeding up learning and leading to faster convergence of Q-values."
  }, {
    "heading": "2 Related Work",
    "text": "Learning control policies from text is gaining increasing interest in the NLP community. Example applications include interpreting help documentation for software (Branavan et al., 2010), navigating with directions (Vogel and Jurafsky, 2010; Kollar et al., 2010; Artzi and Zettlemoyer, 2013; Matuszek et al., 2013; Andreas and Klein, 2015)\nand playing computer games (Eisenstein et al., 2009; Branavan et al., 2011a).\nGames provide a rich domain for grounded language analysis. Prior work has assumed perfect knowledge of the underlying state of the game to learn policies. Gorniak and Roy (2005) developed a game character that can be controlled by spoken instructions adaptable to the game situation. The grounding of commands to actions is learned from a transcript manually annotated with actions and state attributes. Eisenstein et al. (2009) learn game rules by analyzing a collection of game-related documents and precompiled traces of the game. In contrast to the above work, our model combines text interpretation and strategy learning in a single framework. As a result, textual analysis is guided by the received control feedback, and the learned strategy directly builds on the text interpretation.\nOur work closely relates to an automatic game player that utilizes text manuals to learn strategies for Civilization (Branavan et al., 2011a). Similar to our approach, text analysis and control strategies are learned jointly using feedback provided by the game simulation. In their setup, states are fully observable, and the model learns a strategy by combining state/action features and features extracted from text. However, in our application, the state representation is not provided, but has to be inferred from a textual description. Therefore, it is not sufficient to extract features from text to supplement a simulation-based player.\nAnother related line of work consists of automatic video game players that infer state representations directly from raw pixels (Koutnı́k et al., 2013; Mnih et al., 2015). For instance, Mnih et al. (2015) learn control strategies using convolutional neural networks, trained with a variant of Q-learning (Watkins and Dayan, 1992). While both approaches use deep reinforcement learning for training, our work has important differences. In order to handle the sequential nature of text, we use Long Short-Term Memory networks to automatically learn useful representations for arbitrary text descriptions. Additionally, we show that decomposing the network into a representation layer and an action selector is useful for transferring the learnt representations to new game scenarios."
  }, {
    "heading": "3 Background",
    "text": "Game Representation We represent a game by the tuple 〈H,A, T,R,Ψ〉, where H is the set of\nall possible game states, A = {(a, o)} is the set of all commands (action-object pairs), T (h′ | h, a, o) is the stochastic transition function between states and R(h, a, o) is the reward function. The game state H is hidden from the player, who only receives a varying textual description, produced by a stochastic function Ψ : H → S. Specifically, the underlying state h in the game engine keeps track of attributes such as the player’s location, her health points, time of day, etc. The function Ψ (also part of the game framework) then converts this state into a textual description of the location the player is at or a message indicating low health. We do not assume access to either H or Ψ for our agent during both training and testing phases of our experiments. We denote the space of all possible text descriptions s to be S. Rewards are generated using R and are only given to the player upon completion of in-game quests.\nQ-Learning Reinforcement Learning is a commonly used framework for learning control policies in game environments (Silver et al., 2007; Amato and Shani, 2010; Branavan et al., 2011b; Szita, 2012). The game environment can be formulated as a sequence of state transitions (s, a, r, s′) of a Markov Decision Process (MDP). The agent takes an action a in state s by consulting a state-action value function Q(s, a), which is a measure of the action’s expected long-term reward. Q-Learning (Watkins and Dayan, 1992) is a model-free technique which is used to learn an optimal Q(s, a) for the agent. Starting from a random Q-function, the agent continuously updates its Q-values by playing the game and obtaining rewards. The iterative updates are derived from the Bellman equation (Sutton and Barto, 1998):\n(1)Qi+1(s, a) = E[r + γmax a′\nQi(s′, a′) | s, a]\nwhere γ is a discount factor for future rewards and the expectation is over all game transitions that involved the agent taking action a in state s.\nUsing these evolving Q-values, the agent chooses the action with the highest Q(s, a) to maximize its expected future rewards. In practice, the trade-off between exploration and exploitation can be achieved following an -greedy policy (Sutton and Barto, 1998), where the agent performs a random action with probability .\nDeep Q-Network In large games, it is often impractical to maintain the Q-value for all possible\nstate-action pairs. One solution to this problem is to approximate Q(s, a) using a parametrized function Q(s, a; θ), which can generalize over states and actions by considering higher-level attributes (Sutton and Barto, 1998; Branavan et al., 2011a). However, creating a good parametrization requires knowledge of the state and action spaces. One way to bypass this feature engineering is to use a Deep Q-Network (DQN) (Mnih et al., 2015). The DQN approximates the Q-value function with a deep neural network to predict Q(s, a) for all possible actions a simultaneously given the current state s. The non-linear function layers of the DQN also enable it to learn better value functions than linear approximators."
  }, {
    "heading": "4 Learning Representations and Control Policies",
    "text": "In this section, we describe our model (DQN) and describe its use in learning good Q-value approximations for games with stochastic textual descriptions. We divide our model into two parts. The first module is a representation generator that converts the textual description of the current state into a vector. This vector is then input into the second module which is an action scorer. Figure 2 shows the overall architecture of our model. We learn the parameters of both the representation generator and the action scorer jointly, using the in-game reward feedback.\nRepresentation Generator (φR) The representation generator reads raw text displayed to the agent and converts it to a vector representation vs. A bag-of-words (BOW) representation is not sufficient to capture higher-order structures of sentences and paragraphs. The need for a better semantic representation of the text is evident from the average performance of this representation in playing MUD-games (as we show in Section 6).\nIn order to assimilate better representations, we utilize a Long Short-Term Memory network (LSTM) (Hochreiter and Schmidhuber, 1997) as a representation generator. LSTMs are recurrent neural networks with the ability to connect and recognize long-range patterns between words in text. They are more robust than BOW to small variations in word usage and are able to capture underlying semantics of sentences to some extent. In recent work, LSTMs have been used successfully in NLP tasks such as machine translation (Sutskever et al., 2014) and sentiment analysis (Tai et al., 2015) to compose vector representations of sentences from word-level embeddings (Mikolov et al., 2013; Pennington et al., 2014). In our setup, the LSTM network takes in word embeddings wk from the words in a description s and produces output vectors xk at each step.\nTo get the final state representation vs, we add a mean pooling layer which computes the elementwise mean over the output vectors xk.3\n(2)vs = 1 n n∑ k=1 xk\nAction Scorer (φA) The action scorer module produces scores for the set of possible actions given the current state representation. We use a multi-layered neural network for this purpose (see Figure 2). The input to this module is the vector from the representation generator, vs = φR(s) and the outputs are scores for actions a ∈ A. Scores for all actions are predicted simultaneously, which is computationally more efficient than scoring each state-action pair separately. Thus, by combining the representation generator and action scorer, we can obtain the approximation for the Qfunction as Q(s, a) ≈ φA(φR(s))[a].\nAn additional complexity in playing MUDgames is that the actions taken by the player are\n3We also experimented with considering just the output vector of the LSTM after processing the last word. Empirically, we find that mean pooling leads to faster learning, so we use it in all our experiments.\nmulti-word natural language commands such as eat apple or go east. Due to computational constraints, in this work we limit ourselves to consider commands to consist of one action (e.g. eat) and one argument object (e.g. apple). This assumption holds for the majority of the commands in our worlds, with the exception of one class of commands that require two arguments (e.g. move red-root right, move blue-root up). We consider all possible actions and objects available in the game and predict both for each state using the same network (Figure 2). We consider the Q-value of the entire command (a, o) to be the average of the Qvalues of the action a and the object o. For the rest of this section, we only show equations forQ(s, a) but similar ones hold for Q(s, o).\nParameter Learning We learn the parameters θR of the representation generator and θA of the action scorer using stochastic gradient descent with RMSprop (Tieleman and Hinton, 2012). The complete training procedure is shown in Algorithm 1. In each iteration i, we update the parameters to reduce the discrepancy between the predicted value of the current state Q(st, at; θi) (where θi = [θR; θA]i) and the expected Q-value given the reward rt and the value of the next state maxa Q(st+1, a; θi−1).\nWe keep track of the agent’s previous experiences in a memory D.4 Instead of performing updates to the Q-value using transitions from the current episode, we sample a random transition (ŝ, â, s′, r) from D. Updating the parameters in this way avoids issues due to strong correlation when using transitions of the same episode (Mnih et al., 2015). Using the sampled transition and (1), we obtain the following loss function to minimize:\n(3)Li(θi) = Eŝ,â[(yi −Q(ŝ, â; θi))2] where yi = Eŝ,â[r + γmaxa′ Q(s′, a′; θi−1) | ŝ, â] is the target Q-value with parameters θi−1 fixed from the previous iteration.\nThe updates on the parameters θ can be performed using the following gradient of Li(θi): ∇θiLi(θi) = Eŝ,â[2(yi −Q(ŝ, â; θi))∇θiQ(ŝ, â; θi)]\nFor each epoch of training, the agent plays several episodes of the game, which is restarted after every terminal state.\n4The memory is limited and rewritten in a first-in-first-out (FIFO) fashion.\nAlgorithm 1 Training Procedure for DQN with prioritized sampling 1: Initialize experience memory D 2: Initialize parameters of representation generator (φR) and action scorer (φA) randomly 3: for episode = 1,M do 4: Initialize game and get start state description s1 5: for t = 1, T do 6: Convert st (text) to representation vst using φR 7: if random() < then 8: Select a random action at 9: else 10: Compute Q(st, a) for all actions using φA(vst) 11: Select at = argmax Q(st, a) 12: Execute action at and observe reward rt and new state st+1 13: Set priority pt = 1 if rt > 0, else pt = 0 14: Store transition (st, at, rt, st+1, pt) in D 15: Sample random mini batch of transitions (sj , aj , rj , sj+1, pj) from D,\nwith fraction ρ having pj = 1 16: Set yj = { rj if sj+1 is terminal rj + γ maxa′ Q(sj+1, a′; θ) if sj+1 is non-terminal 17: Perform gradient descent step on the loss L(θ) = (yj −Q(sj , aj ; θ))2\nMini-batch Sampling In practice, online updates to the parameters θ are performed over a mini batch of state transitions, instead of a single transition. This increases the number of experiences used per step and is also more efficient due to optimized matrix operations.\nThe simplest method to create these minibatches from the experience memory D is to sample uniformly at random. However, certain experiences are more valuable than others for the agent to learn from. For instance, rare transitions that provide positive rewards can be used more often to learn optimal Q-values faster. In our experiments, we consider such positive-reward transitions to have higher priority and keep track of them in D. We use prioritized sampling (inspired by Moore and Atkeson (1993)) to sample a fraction ρ of transitions from the higher priority pool and a fraction 1− ρ from the rest."
  }, {
    "heading": "5 Experimental Setup",
    "text": "Game Environment For our game environment, we modify Evennia,5 an open-source library for building online textual MUD games. Evennia is a Python-based framework that allows one to easily create new games by writing a batch file describing the environment with details of rooms,\n5http://www.evennia.com/\nobjects and actions. The game engine keeps track of the game state internally, presenting textual descriptions to the player and receiving text commands from the player. We conduct experiments on two worlds - a smaller Home world we created ourselves, and a larger, more complex Fantasy world created by Evennia’s developers. The motivation behind Home world is to abstract away high-level planning and focus on the language understanding requirements of the game.\nTable 1 provides statistics of the game worlds. We observe that the Fantasy world is moderately sized with a vocabulary of 1340 words and up to 100 different descriptions for a room. These descriptions were created manually by the game developers. These diverse, engaging descriptions are designed to make it interesting and exciting for human players. Several rooms have many alternative descriptions, invoked randomly on each visit by\nthe player. Comparatively, the Home world is smaller: it has a very restricted vocabulary of 84 words and the room descriptions are relatively structured. However, both the room descriptions (which are also varied and randomly provided to the agent) and the quest descriptions were adversarially created with negation and conjunction of facts to force an agent to actually understand the state in order to play well. Therefore, this domain provides an interesting challenge for language understanding.\nIn both worlds, the agent receives a positive reward on completing a quest, and negative rewards for getting into bad situations like falling off a bridge, or losing a battle. We also add small deterministic negative rewards for each nonterminating step. This incentivizes the agent to learn policies that solve quests in fewer steps. The supplementary material has details on the reward structure.\nHome World We created Home world to mimic the environment of a typical house.6 The world consists of four rooms - a living room, a bedroom, a kitchen and a garden with connecting pathways. Every room is reachable from every other room. Each room contains a representative object that the agent can interact with. For instance, the kitchen has an apple that the player can eat. Transitions between the rooms are deterministic. At the start of each game episode, the player is placed in a random room and provided with a randomly selected quest. The text provided to the player contains both the description of her current state and that of the quest. Thus, the player can begin in one of 16 different states (4 rooms × 4 quests), which adds to the world’s complexity.\nAn example of a quest given to the player in text is Not you are sleepy now but you are hungry now. To complete this quest and obtain a reward, the player has to navigate through the house to reach the kitchen and eat the apple (i.e type in the command eat apple). More importantly, the player should interpret that the quest does not require her to take a nap in the bedroom. We created such misguiding quests to make it hard for agents to succeed without having an adequate level of language understanding.\n6An illustration is provided in the supplementary material.\nFantasy World The Fantasy world is considerably more complex and involves quests such as navigating through a broken bridge or finding the secret tomb of an ancient hero. This game also has stochastic transitions in addition to varying state descriptions provided to the player. For instance, there is a possibility of the player falling from the bridge if she lingers too long on it.\nDue to the large command space in this game,7 we make use of cues provided by the game itself to narrow down the set of possible objects to consider in each state. For instance, in the MUD example in Figure 1, the game provides a list of possible exits. If the game does not provide such clues for the current state, we consider all objects in the game.\nEvaluation We use two metrics for measuring an agent’s performance: (1) the cumulative reward obtained per episode averaged over the episodes and (2) the fraction of quests completed by the agent. The evaluation procedure is as follows. In each epoch, we first train the agent on M episodes of T steps each. At the end of this training, we have a testing phase of running M episodes of the game for T steps. We useM = 50, T = 20 for the Home world and M = 20, T = 250 for the Fantasy world. For all evaluation episodes, we run the agent following an -greedy policy with = 0.05, which makes the agent choose the best action according to its Q-values 95% of the time. We report the agent’s performance at each epoch.\nBaselines We compare our LSTM-DQN model with three baselines. The first is a Random agent that chooses both actions and objects uniformly at random from all available choices.8 The other two are BOW-DQN and BI-DQN, which use a bagof-words and a bag-of-bigrams representation of the text, respectively, as input to the DQN action scorer. These baselines serve to illustrate the importance of having a good representation layer for the task.\nSettings For our DQN models, we used D = 100000, γ = 0.5. We use a learning rate of 0.0005 for RMSprop. We anneal the for -greedy from 1 to 0.2 over 100000 transitions. A mini-batch gradient update is performed every 4 steps of the gameplay. We roll out the LSTM (over words) for\n7We consider 222 possible command combinations of 6 actions and 37 object arguments.\n8In the case of the Fantasy world, the object choices are narrowed down using game clues as described earlier.\na maximum of 30 steps on the Home world and for 100 steps on the Fantasy world. For the prioritized sampling, we used ρ = 0.25 for both worlds. We employed a mini-batch size of 64 and word embedding size d = 20 in all experiments."
  }, {
    "heading": "6 Results",
    "text": "Home World Figure 3 illustrates the performance of LSTM-DQN compared to the baselines. We can observe that the Random baseline performs quite poorly, completing only around 10% of quests on average9 obtaining a low reward of around −1.58. The BOW-DQN model performs significantly better and is able to complete around 46% of the quests, with an average reward of 0.20. The improvement in reward is due to both greater quest success rate and a lower rate of issuing invalid commands (e.g. eat apple would be invalid in the bedroom since there is no apple). We notice that both the reward and quest completion graphs of this model are volatile. This is because the model fails to pick out differences between quests like Not you are hungry now but you are sleepy now and Not you are sleepy now but you\n9Averaged over the last 10 epochs.\nare hungry now. The BI-DQN model suffers from the same issue although it performs slightly better than BOW-DQN by completing 48% of quests. In contrast, the LSTM-DQN model does not suffer from this issue and is able to complete 100% of the quests after around 50 epochs of training, achieving close to the optimal reward possible.10 This demonstrates that having an expressive representation for text is crucial to understanding the game states and choosing intelligent actions.\nIn addition, we also investigated the impact of using a deep neural network for modeling the action scorer φA. Figure 4 illustrates the performance of the BOW-DQN and BI-DQN models along with their simpler versions BOW-LIN and BI-LIN, which use a single linear layer for φA. It can be seen that the DQN models clearly achieve better performance than their linear counterparts, which points to them modeling the control policy better.\nFantasy World We evaluate all the models on the Fantasy world in the same manner as before and report reward, quest completion rates and Q-\n10Note that since each step incurs a penalty of −0.01, the best reward (on average) a player can get is around 0.98.\nvalues. The quest we evaluate on involves crossing the broken bridge (which takes a minimum of five steps), with the possibility of falling off at random (a 5% chance) when the player is on the bridge. The game has an additional quest of reaching a secret tomb. However, this is a complex quest that requires the player to memorize game events and perform high-level planning which are beyond the scope of this current work. Therefore, we focus only on the first quest.\nFrom Figure 3 (bottom), we can see that the Random baseline does poorly in terms of both average per-episode reward11 and quest completion rates. BOW-DQN converges to a much higher average reward of −12.68 and achieves around 82% quest completion. Again, the BOW-DQN is often confused by varying (10 different) descriptions of the portions of the bridge, which reflects in its erratic performance on the quest. The BI-DQN performs very well on quest completion by finishing 97% of quests. However, this model tends to find sub-optimal solutions and gets an average reward of −26.68, even worse than BOW-DQN. One reason for this is the negative rewards the agent obtains after falling off the bridge. The LSTM-DQN model again performs best, achieving an average reward of −11.33 and completing 96% of quests on average. Though this world does not contain descriptions adversarial to BOW-DQN or BIDQN, the LSTM-DQN obtains higher average reward by completing the quest in fewer steps and showing more resilience to variations in the state descriptions.\nTransfer Learning We would like the representations learnt by φR to be generic enough and\n11Note that the rewards graph is in log scale.\ntransferable to new game worlds. To test this, we created a second Home world with the same rooms, but a completely different map, changing the locations of the rooms and the pathways between them. The main differentiating factor of this world from the original home world lies in the high-level planning required to complete quests.\nWe initialized the LSTM part of an LSTMDQN agent with parameters θR learnt from the original home world and trained it on the new world.12 Figure 3 (top right) demonstrates that the agent with transferred parameters is able to learn quicker than an agent starting from scratch initialized with random parameters (No Transfer), reaching the optimal policy almost 20 epochs earlier. This indicates that these simulated worlds can be used to learn good representations for language that transfer across worlds.\nPrioritized sampling We also investigate the effects of different minibatch sampling procedures on the parameter learning. From Figure 3 (bottom right), we observe that using prioritized sampling significantly speeds up learning, with the agent achieving the optimal policy around 50 epochs faster than using uniform sampling. This shows promise for further research into different schemes of assigning priority to transitions.\nRepresentation Analysis We analyzed the representations learnt by the LSTM-DQN model on the Home world. Figure 5 shows a visualization\n12The parameters for the Action Scorer (θA) are initialized randomly.\nof learnt word embeddings, reduced to two dimensions using t-SNE (Van der Maaten and Hinton, 2008). All the vectors were initialized randomly before training. We can see that semantically similar words appear close together to form coherent subspaces. In fact, we observe four different subspaces, each for one type of room along with its corresponding object(s) and quest words. For instance, food items like pizza and rooms like kitchen are very close to the word hungry which appears in a quest description. This shows that the agent learns to form meaningful associations between the semantics of the quest and the environment. Table 2 shows some examples of descriptions from Fantasy world and their nearest neighbors using cosine similarity between their corresponding vector representations produced by LSTM-DQN. The model is able to correlate descriptions of the same (or similar) underlying states and project them onto nearby points in the representation subspace."
  }, {
    "heading": "7 Conclusions",
    "text": "We address the task of end-to-end learning of control policies for text-based games. In these games, all interactions in the virtual world are through text and the underlying state is not observed. The resulting language variability makes such environments challenging for automatic game players. We employ a deep reinforcement learning framework to jointly learn state representations and action policies using game rewards as feedback. This framework enables us to map text descriptions into vector representations that capture the semantics of the game states. Our experiments demonstrate the importance of learning good representations of text in order to play these games well. Future directions include tackling high-level\nplanning and strategy learning to improve the performance of intelligent agents."
  }, {
    "heading": "Acknowledgements",
    "text": "We are grateful to the developers of Evennia, the game framework upon which this work is based. We also thank Nate Kushman, Clement Gehring, Gustavo Goretkin, members of MIT’s NLP group and the anonymous EMNLP reviewers for insightful comments and feedback. T. Kulkarni was graciously supported by the Leventhal Fellowship. We would also like to acknowledge MIT’s Center for Brains, Minds and Machines (CBMM) for support."
  }],
  "year": 2015,
  "references": [{
    "title": "High-level reinforcement learning in strategy games",
    "authors": ["Christopher Amato", "Guy Shani."],
    "venue": "Proceedings of the 9th International Conference on Autonomous Agents and Multiagent Systems: Volume 1, pages 75–82. International Foundation for Au-",
    "year": 2010
  }, {
    "title": "Adventure games: A challenge for cognitive robotics",
    "authors": ["Eyal Amir", "Patrick Doyle."],
    "venue": "Proc. Int. Cognitive Robotics Workshop, pages 148–155.",
    "year": 2002
  }, {
    "title": "Alignmentbased compositional semantics for instruction following",
    "authors": ["Jacob Andreas", "Dan Klein."],
    "venue": "Proceedings of the Conference on Empirical Methods in Natural Language Processing.",
    "year": 2015
  }, {
    "title": "Weakly supervised learning of semantic parsers for mapping instructions to actions",
    "authors": ["Yoav Artzi", "Luke Zettlemoyer."],
    "venue": "Transactions of the Association for Computational Linguistics, 1(1):49–62.",
    "year": 2013
  }, {
    "title": "Reading between the lines: Learning to map high-level instructions to commands",
    "authors": ["SRK Branavan", "Luke S Zettlemoyer", "Regina Barzilay."],
    "venue": "Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics, pages 1268–",
    "year": 2010
  }, {
    "title": "Learning to win by reading manuals in a monte-carlo framework",
    "authors": ["SRK Branavan", "David Silver", "Regina Barzilay."],
    "venue": "Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies-",
    "year": 2011
  }, {
    "title": "Non-linear monte-carlo search in Civilization II",
    "authors": ["SRK Branavan", "David Silver", "Regina Barzilay."],
    "venue": "AAAI Press/International Joint Conferences on Artificial Intelligence.",
    "year": 2011
  }, {
    "title": "Mudding: Social phenomena in text-based virtual realities",
    "authors": ["Pavel Curtis."],
    "venue": "High noon on the electronic frontier: Conceptual issues in cyberspace, pages 347–374.",
    "year": 1992
  }, {
    "title": "being-inthe-world",
    "authors": ["Mark A DePristo", "Robert Zubek."],
    "venue": "Proceedings of the 2001 AAAI Spring Symposium on Artificial Intelligence and Interactive Entertainment, pages 31–34.",
    "year": 2001
  }, {
    "title": "Reading to learn: Constructing features from semantic abstracts",
    "authors": ["Jacob Eisenstein", "James Clarke", "Dan Goldwasser", "Dan Roth."],
    "venue": "Proceedings of the Conference on Empirical Methods in Natural Language Processing, pages 958–967, Singapore,",
    "year": 2009
  }, {
    "title": "Speaking with your sidekick: Understanding situated speech in computer role playing games",
    "authors": ["Peter Gorniak", "Deb Roy."],
    "venue": "R. Michael Young and John E. Laird, editors, Proceedings of the First Artificial Intelligence and Interactive Digital Entertain-",
    "year": 2005
  }, {
    "title": "Long short-term memory",
    "authors": ["Sepp Hochreiter", "Jürgen Schmidhuber."],
    "venue": "Neural computation, 9(8):1735–1780.",
    "year": 1997
  }, {
    "title": "Toward understanding natural language directions",
    "authors": ["Thomas Kollar", "Stefanie Tellex", "Deb Roy", "Nicholas Roy."],
    "venue": "Human-Robot Interaction (HRI), 2010 5th ACM/IEEE International Conference on, pages 259–266. IEEE.",
    "year": 2010
  }, {
    "title": "Evolving largescale neural networks for vision-based reinforcement learning",
    "authors": ["Jan Koutnı́k", "Giuseppe Cuccu", "Jürgen Schmidhuber", "Faustino Gomez"],
    "venue": "In Proceedings of the 15th annual conference on Genetic and evolutionary computa-",
    "year": 2013
  }, {
    "title": "Learning to automatically solve algebra word problems",
    "authors": ["Nate Kushman", "Yoav Artzi", "Luke Zettlemoyer", "Regina Barzilay."],
    "venue": "ACL (1), pages 271– 281.",
    "year": 2014
  }, {
    "title": "Learning to parse natural language commands to a robot control system",
    "authors": ["Cynthia Matuszek", "Evan Herbst", "Luke Zettlemoyer", "Dieter Fox."],
    "venue": "Experimental Robotics, pages 403–415. Springer.",
    "year": 2013
  }, {
    "title": "Efficient estimation of word representations in vector space",
    "authors": ["Tomas Mikolov", "Kai Chen", "Greg Corrado", "Jeffrey Dean."],
    "venue": "arXiv preprint arXiv:1301.3781.",
    "year": 2013
  }, {
    "title": "Human-level control through deep reinforcement learning",
    "authors": ["Dharshan Kumaran", "Daan Wierstra", "Shane Legg", "Demis Hassabis."],
    "venue": "Nature, 518(7540):529–533, 02.",
    "year": 2015
  }, {
    "title": "Prioritized sweeping: Reinforcement learning with less data and less time",
    "authors": ["Andrew W Moore", "Christopher G Atkeson."],
    "venue": "Machine Learning, 13(1):103–130.",
    "year": 1993
  }, {
    "title": "Glove: Global vectors for word representation",
    "authors": ["Jeffrey Pennington", "Richard Socher", "Christopher D Manning."],
    "venue": "Proceedings of the Empiricial Methods in Natural Language Processing (EMNLP 2014), 12.",
    "year": 2014
  }, {
    "title": "Reinforcement learning of local shape in the game of go",
    "authors": ["David Silver", "Richard S Sutton", "Martin Müller."],
    "venue": "IJCAI, volume 7, pages 1053–1058.",
    "year": 2007
  }, {
    "title": "Sequence to sequence learning with neural networks",
    "authors": ["Ilya Sutskever", "Oriol Vinyals", "Quoc VV Le."],
    "venue": "Advances in Neural Information Processing Systems, pages 3104–3112.",
    "year": 2014
  }, {
    "title": "Introduction to reinforcement learning",
    "authors": ["Richard S Sutton", "Andrew G Barto."],
    "venue": "MIT Press.",
    "year": 1998
  }, {
    "title": "Reinforcement learning in games",
    "authors": ["István Szita."],
    "venue": "Reinforcement Learning, pages 539–577. Springer.",
    "year": 2012
  }, {
    "title": "Improved semantic representations from tree-structured long short-term memory networks",
    "authors": ["Kai Sheng Tai", "Richard Socher", "Christopher D. Manning."],
    "venue": "Proceedings of the 53rd Annual Meeting of the Association for Computational Linguistics",
    "year": 2015
  }, {
    "title": "Visualizing data using t-sne",
    "authors": ["Laurens Van der Maaten", "Geoffrey Hinton."],
    "venue": "Journal of Machine Learning Research, 9(2579-2605):85.",
    "year": 2008
  }, {
    "title": "Learning to follow navigational directions",
    "authors": ["Adam Vogel", "Dan Jurafsky."],
    "venue": "Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics, pages 806–814. Association for Computational Linguistics.",
    "year": 2010
  }, {
    "title": "Qlearning",
    "authors": ["Christopher JCH Watkins", "Peter Dayan."],
    "venue": "Machine learning, 8(3-4):279–292. 11",
    "year": 1992
  }],
  "id": "SP:0cbd80ad06a73087aa4976adf3556cd7f73f1534",
  "authors": [{
    "name": "Karthik Narasimhan",
    "affiliations": []
  }, {
    "name": "Tejas D Kulkarni",
    "affiliations": []
  }, {
    "name": "Regina Barzilay",
    "affiliations": []
  }],
  "abstractText": "In this paper, we consider the task of learning control policies for text-based games. In these games, all interactions in the virtual world are through text and the underlying state is not observed. The resulting language barrier makes such environments challenging for automatic game players. We employ a deep reinforcement learning framework to jointly learn state representations and action policies using game rewards as feedback. This framework enables us to map text descriptions into vector representations that capture the semantics of the game states. We evaluate our approach on two game worlds, comparing against baselines using bag-ofwords and bag-of-bigrams for state representations. Our algorithm outperforms the baselines on both worlds demonstrating the importance of learning expressive representations. 1",
  "title": "Language Understanding for Text-based Games using Deep Reinforcement Learning"
}