{
  "sections": [{
    "text": "Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (Short Papers), pages 740–745 Melbourne, Australia, July 15 - 20, 2018. c©2018 Association for Computational Linguistics\n740"
  }, {
    "heading": "1 Introduction",
    "text": "Recurrent Neural Network (RNNs) emerge as very strong learners of sequential data. A famous result by Siegelmann and Sontag (1992; 1994), and its extension in (Siegelmann, 1999), demonstrates that an Elman-RNN (Elman, 1990) with a sigmoid activation function, rational weights and infinite precision states can simulate a Turing-machine in real-time, making RNNs Turing-complete. Recently, Chen et al (2017) extended the result to the ReLU activation function. However, these constructions (a) assume reading the entire input into the RNN state and only then performing the computation, using unbounded time; and (b) rely on having infinite precision in the network states. As argued by Chen et al (2017), this is not the model of RNN computation used in NLP applications. Instead, RNNs are often used by feeding an input sequence into the RNN one\nitem at a time, each immediately returning a statevector that corresponds to a prefix of the sequence and which can be passed as input for a subsequent feed-forward prediction network operating in constant time. The amount of tape used by a Turing machine under this restriction is linear in the input length, reducing its power to recognition of context-sensitive language. More importantly, computation is often performed on GPUs with 32bit floating point computation, and there is increasing evidence that competitive performance can be achieved also for quantized networks with 4-bit weights or fixed-point arithmetics (Hubara et al., 2016). The construction of (Siegelmann, 1999) implements pushing 0 into a binary stack by the operation g ← g/4 + 1/4. This allows pushing roughly 15 zeros before reaching the limit of the 32bit floating point precision. Finally, RNN solutions that rely on carefully orchestrated mathematical constructions are unlikely to be found using backpropagation-based training.\nIn this work we restrict ourselves to inputbound recurrent neural networks with finiteprecision states (IBFP-RNN), trained using backpropagation. This class of networks is likely to coincide with the networks one can expect to obtain when training RNNs for NLP applications. An IBFP Elman-RNN is finite state. But what about other RNN variants? In particular, we consider the Elman RNN (SRNN) (Elman, 1990) with squashing and with ReLU activations, the Long ShortTerm Memory (LSTM) (Hochreiter and Schmidhuber, 1997) and the Gated Recurrent Unit (GRU) (Cho et al., 2014; Chung et al., 2014).\nThe common wisdom is that the LSTM and GRU introduce additional gating components that handle the vanishing gradients problem of training SRNNs, thus stabilizing training and making it more robust. The LSTM and GRU are often considered as almost equivalent variants of each other.\nWe show that in the input-bound, finiteprecision case, there is a real difference between the computational capacities of the LSTM and the GRU: the LSTM can easily perform unbounded counting, while the GRU (and the SRNN) cannot. This makes the LSTM a variant of a k-counter machine (Fischer et al., 1968), while the GRU remains finite-state. Interestingly, the SRNN with ReLU activation followed by an MLP classifier also has power similar to a k-counter machine.\nThese results suggest there is a class of formal languages that can be recognized by LSTMs but not by GRUs. In section 5, we demonstrate that for at least two such languages, the LSTM manages to learn the desired concept classes using backpropagation, while using the hypothesized control structure. Figure 1 shows the activations of 10- d LSTM and GRU trained to recognize the languages anbn and anbncn. It is clear that the LSTM learned to dedicate specific dimensions for counting, in contrast to the GRU.1\n1Is the ability to perform unbounded counting relevant to “real world” NLP tasks? In some cases it might be. For example, processing linearized parse trees (Vinyals et al., 2015; Choe and Charniak, 2016; Aharoni and Goldberg, 2017) requires counting brackets and nesting levels. Indeed, previous works that process linearized parse trees report using LSTMs"
  }, {
    "heading": "2 The RNN Models",
    "text": "An RNN is a parameterized function R that takes as input an input vector xt and a state vector ht−1 and returns a state vector ht:\nht = R(xt, ht−1) (1)\nThe RNN is applied to a sequence x1, ..., xn by starting with an initial vector h0 (often the 0 vector) and applying R repeatedly according to equation (1). Let Σ be an input vocabulary (alphabet), and assume a mapping E from every vocabulary item to a vector x (achieved through a 1-hot encoding, an embedding layer, or some other means). Let RNN(x1, ..., xn) denote the state vector h resulting from the application of R to the sequence E(x1), ..., E(xn). An RNN recognizer (or RNN acceptor) has an additional function f mapping states h to 0, 1. Typically, f is a log-linear classifier or multi-layer perceptron. We say that an RNN recognizes a language L⊆ Σ∗ if f(RNN(w)) returns 1 for all and only words w = x1, ..., xn ∈ L.\nElman-RNN (SRNN) In the Elman-RNN (Elman, 1990), also called the Simple RNN (SRNN),\nand not GRUs for this purpose. Our work here suggests that this may not be a coincidence.\nthe function R takes the form of an affine transform followed by a tanh nonlinearity:\nht = tanh(Wxt + Uht−1 + b) (2)\nElman-RNNs are known to be at-least finitestate. Siegelmann (1996) proved that the tanh can be replaced by any other squashing function without sacrificing computational power.\nIRNN The IRNN model, explored by (Le et al., 2015), replaces the tanh activation with a nonsquashing ReLU:\nht = max(0, (Wxt + Uht−1 + b)) (3)\nThe computational power of such RNNs (given infinite precision) is explored in (Chen et al., 2017).\nGated Recurrent Unit (GRU) In the GRU (Cho et al., 2014), the function R incorporates a gating mechanism, taking the form:\nzt = σ(W zxt + U zht−1 + b z) (4) rt = σ(W rxt + U rht−1 + b r) (5) h̃t = tanh(W hxt + U\nh(rt ◦ ht−1) + bh)(6) ht = zt ◦ ht−1 + (1− zt) ◦ h̃t (7)\nWhere σ is the sigmoid function and ◦ is the Hadamard product (element-wise product).\nLong Short Term Memory (LSTM) In the LSTM (Hochreiter and Schmidhuber, 1997), R uses a different gating component configuration:\nft = σ(W fxt + U fht−1 + b f ) (8) it = σ(W ixt + U iht−1 + b i) (9) ot = σ(W oxt + U oht−1 + b o) (10) c̃t = tanh(W cxt + U cht−1 + b c) (11) ct = ft ◦ ct−1 + it ◦ c̃t (12) ht = ot ◦ g(ct) (13)\nwhere g can be either tanh or the identity.\nEquivalences The GRU and LSTM are at least as strong as the SRNN: by setting the gates of the GRU to zt = 0 and rt = 1 we obtain the SRNN computation. Similarly by setting the LSTM gates to it = 1,ot = 1, and ft = 0. This is easily achieved by setting the matricesW andU to 0, and the biases b to the (constant) desired gate values.\nThus, all the above RNNs can recognize finitestate languages."
  }, {
    "heading": "3 Power of Counting",
    "text": "Power beyond finite state can be obtained by introducing counters. Counting languages and kcounter machines are discussed in depth in (Fischer et al., 1968). When unbounded computation is allowed, a 2-counter machine has Turing power. However, for computation bound by input length (real-time) there is a more interesting hierarchy. In particular, real-time counting languages cut across the traditional Chomsky hierarchy: real-time k-counter machines can recognize at least one context-free language (anbn), and at least one context-sensitive one (anbncn). However, they cannot recognize the context free language given by the grammar S → x|aSa|bSb (palindromes).\nSKCM For our purposes, we consider a simplified variant of k-counter machines (SKCM). A counter is a device which can be incremented by a fixed amount (INC), decremented by a fixed amount (DEC) or compared to 0 (COMP0). Informally,2 an SKCM is a finite-state automaton extended with k counters, where at each step of the computation each counter can be incremented, decremented or ignored in an input-dependent way, and state-transitions and accept/reject decisions can inspect the counters’ states using COMP0. The results for the three languages discussed above hold for the SKCM variant as well, with proofs provided in the supplementary material."
  }, {
    "heading": "4 RNNs as SKCMs",
    "text": "In what follows, we consider the effect on the state-update equations on a single dimension, ht[j]. We omit the index [j] for readability.\nLSTM The LSTM acts as an SKCM by designating k dimensions of the memory cell ct as counters. In non-counting steps, set it = 0, ft = 1 through equations (8-9). In counting steps, the counter direction (+1 or -1) is set in c̃t (equation 11) based on the input xt and state ht−1. The counting itself is performed in equation (12), after setting it = ft = 1. The counter can be reset to 0 by setting it = ft = 0.\nFinally, the counter values are exposed through ht = otg(ct), making it trivial to compare the\n2Formal definition is given in the supplementary material.\ncounter’s value to 0.3\nWe note that this implementation of the SKCM operations is achieved by saturating the activations to their boundaries, making it relatively easy to reach and maintain in practice.\nSRNN The finite-precision SRNN cannot designate unbounded counting dimensions.\nThe SRNN update equation is:\nht = tanh(Wx+ Uht−1 + b)\nht[i] = tanh( dx∑ j=1 Wijx[j]+ dh∑ j=1 Uijht−1[j]+b[i])\nBy properly setting U and W, one can get certain dimensions of h to update according to the value of x, by ht[i] = tanh(ht−1[i] +wix+ b[i]). However, this counting behavior is within a tanh activation. Theoretically, this means unbounded counting cannot be achieved without infinite precision. Practically, this makes the counting behavior inherently unstable, and bounded to a relatively narrow region. While the network could adapt to set w to be small enough such that counting works for the needed range seen in training without overflowing the tanh, attempting to count to larger n will quickly leave this safe region and diverge.\nIRNN Finite-precision IRNNs can perform unbounded counting conditioned on input symbols. This requires representing each counter as two dimensions, and implementing INC as incrementing one dimension, DEC as incrementing the other, and COMP0 as comparing their difference to 0. Indeed, Appendix A in (Chen et al., 2017) provides concrete IRNNs for recognizing the languages anbn and anbncn. This makes IBFP-RNN with\n3Some further remarks on the LSTM: LSTM supports both increment and decrement in a single dimension. The counting dimensions in ct are exposed through a function g. For both g(x) = x and g(x) = tanh(x), it is trivial to do compare 0. Another operation of interest is comparing two counters (for example, checking the difference between them). This cannot be reliably achieved with g(x) = tanh(x), due to the non-linearity and saturation properties of the tanh function, but is possible in the g(x) = x case. LSTM can also easily set the value of a counter to 0 in one step. The ability to set the counter to 0 gives slightly more power for real-time recognition, as discussed by Fischer et al. (1968).\nRelation to known architectural variants: Adding peephole connections (Gers and Schmidhuber, 2000) essentially sets g(x) = x and allows comparing counters in a stable way. Coupling the input and the forget gates (it = 1 − ft) (Greff et al., 2017) removes the single-dimension unbounded counting ability, as discussed for the GRU.\nReLU activation more powerful than IBFP-RNN with a squashing activation. Practically, ReLUactivated RNNs are known to be notoriously hard to train because of the exploding gradient problem.\nGRU Finite-precision GRUs cannot implement unbounded counting on a given dimension. The tanh in equation (6) combined with the interpolation (tying zt and 1 − zt) in equation (7) restricts the range of values in h to between -1 and 1, precluding unbounded counting with finite precision. Practically, the GRU can learn to count up to some bound m seen in training, but will not generalize well beyond that.4 Moreover, simulating forms of counting behavior in equation (7) require consistently setting the gates zt, rt and the proposal h̃t to precise, non-saturated values, making it much harder to find and maintain stable solutions.\nSummary We show that LSTM and IRNN can implement unbounded counting in dedicated counting dimensions, while the GRU and SRNN cannot. This makes the LSTM and IRNN at least as strong as SKCMs, and strictly stronger than the SRNN and the GRU.5"
  }, {
    "heading": "5 Experimental Results",
    "text": "Can the LSTM indeed learn to behave as a kcounter machine when trained using backpropagation? We show empirically that:\n1. LSTMs can be trained to recognize anbn and anbncn.\n2. These LSTMs generalize to much higher n than seen in the training set (though not infinitely so).\n3. The trained LSTM learn to use the perdimension counting mechanism.\n4. The GRU can also be trained to recognize anbn and anbncn, but they do not have clear\n4One such mechanism could be to divide a given dimension by k > 1 at each symbol encounter, by setting zt = 1/k and h̃t = 0. Note that the inverse operation would not be implementable, and counting down would have to be realized with a second counter.\n5One can argue that other counting mechanisms— involving several dimensions—are also possible. Intuitively, such mechanisms cannot be trained to perform unbounded counting based on a finite sample as the model has no means of generalizing the counting behavior to dimensions beyond those seen in training. We discuss this more in depth in the supplementary material, where we also prove that an SRNN cannot represent a binary counter.\ncounting dimensions, and they generalize to much smaller n than the LSTMs, often failing to generalize correctly even for n within their training domain.\n5. Trained LSTM networks outperform trained GRU networks on random test sets for the languages anbn and anbncn.\nSimilar empirical observations regarding the ability of the LSTM to learn to recognize anbn and anbncn are described also in (Gers and Schmidhuber, 2001).\nWe train 10-dimension, 1-layer LSTM and GRU networks to recognize anbn and anbncn. For anbn the training samples went up to n = 100 and for anbncn up to n = 50.6\nResults On anbn, the LSTM generalizes well up to n = 256, after which it accumulates a deviation making it reject anbn but recognize anbn+1 for a while, until the deviation grows.7 The GRU does not capture the desired concept even within its training domain: accepting anbn+1 for n > 38, and also accepting anbn+2 for n > 97. It stops accepting anbn for n > 198.\nOn anbncn the LSTM recognizes well until n = 100. It then starts accepting also anbn+1cn. At n > 120 it stops accepting anbncn and switches to accepting anbn+1cn, until at some point the deviation grows. The GRU accepts already a9b10c12, and stops accepting anbncn for n > 63.\nFigure 1a plots the activations of the 10 dimensions of the anbn-LSTM for the input a1000b1000. While the LSTM misclassifies this example, the use of the counting mechanism is clear. Figure 1b plots the activation for the anbncn LSTM on a100b100c100. Here, again, the two counting dimensions are clearly identified—indicating the LSTM learned the canonical 2-counter solution— although the slightly-imprecise counting also starts to show. In contrast, Figures 1c and 1d\n6Implementation in DyNet, using the SGD Optimizer. Positive examples are generated by sampling n in the desired range. For negative examples we sample 2 or 3 n values independently, and ensuring at least one of them differs from the others. We dedicate a portion of the examples as the dev set, and train up to 100% dev set accuracy.\n7These fluctuations occur as the networks do not fully saturate their gates, meaning the LSTM implements an imperfect counter that accumulates small deviations during computation, e.g.: increasing the counting dimension by 0.99 but decreasing only by 0.98. Despite this, we see that the its solution remains much more robust than that found by the GRU — the LSTM has learned the essence of the counting based solution, but its implementation is imprecise.\nshow the state values of the GRU-networks. The GRU behavior is much less interpretable than the LSTM. In the anbn case, some dimensions may be performing counting within a bounded range, but move to erratic behavior at around t = 1750 (the network starts to misclassify on sequences much shorter than that). The anbncn state dynamics are even less interpretable.\nFinally, we created 1000-sample test sets for each of the languages. For anbn we used words with the form an+ibn+j where n ∈ rand(0, 200) and i, j ∈ rand(−2, 2), and for anbncn we use words of the form an+ibn+jcn+k where n ∈ rand(0, 150) and i, j, k ∈ rand(−2, 2). The LSTM’s accuracy was 100% and 98.6% on anbn and anbncn respectively, as opposed to the GRU’s 87.0% and 86.9%, also respectively.\nAll of this empirically supports our result, showing that IBFP-LSTMs can not only theoretically implement “unbounded” counters, but also learn to do so in practice (although not perfectly), while IBFP-GRUs do not manage to learn proper counting behavior, even when allowing floating point computations."
  }, {
    "heading": "6 Conclusions",
    "text": "We show that the IBFP-LSTM can model a realtime SKCM, both in theory and in practice. This makes it more powerful than the IBFP-SRNN and the IBFP-GRU, which cannot implement unbounded counting and are hence restricted to recognizing regular languages. The IBFP-IRNN can also perform input-dependent counting, and is thus more powerful than the IBFP-SRNN.\nWe note that in addition to theoretical distinctions between architectures, it is important to consider also the practicality of different solutions: how easy it is for a given architecture to discover and maintain a stable behavior in practice. We leave further exploration of this question for future work."
  }, {
    "heading": "Acknowledgments",
    "text": "The research leading to the results presented in this paper is supported by the European Union’s Seventh Framework Programme (FP7) under grant agreement no. 615688 (PRIME), The Israeli Science Foundation (grant number 1555/15), and The Allen Institute for Artificial Intelligence."
  }],
  "year": 2018,
  "references": [{
    "title": "Towards string-to-tree neural machine translation",
    "authors": ["Roee Aharoni", "Yoav Goldberg."],
    "venue": "Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (Volume 2: Short Papers), pages 132–140, Vancouver, Canada. Asso-",
    "year": 2017
  }, {
    "title": "Recurrent neural networks as weighted language recognizers",
    "authors": ["Yining Chen", "Sorcha Gilroy", "Kevin Knight", "Jonathan May."],
    "venue": "CoRR, abs/1711.05408.",
    "year": 2017
  }, {
    "title": "Learning Phrase Representations using RNN Encoder–Decoder for Statistical Machine Translation",
    "authors": ["Kyunghyun Cho", "Bart van Merrienboer", "Caglar Gulcehre", "Dzmitry Bahdanau", "Fethi Bougares", "Holger Schwenk", "Yoshua Bengio"],
    "year": 2014
  }, {
    "title": "Parsing as language modeling",
    "authors": ["Do Kook Choe", "Eugene Charniak."],
    "venue": "Proceedings of the 2016 Conference on Empirical Methods in Natural Language Processing, pages 2331–2336, Austin, Texas. Association for Computational Linguistics.",
    "year": 2016
  }, {
    "title": "Empirical Evaluation of Gated Recurrent Neural Networks on Sequence Modeling",
    "authors": ["Junyoung Chung", "Caglar Gulcehre", "KyungHyun Cho", "Yoshua Bengio."],
    "venue": "arXiv:1412.3555 [cs].",
    "year": 2014
  }, {
    "title": "Finding Structure in Time",
    "authors": ["Jeffrey L. Elman."],
    "venue": "Cognitive Science, 14(2):179–211.",
    "year": 1990
  }, {
    "title": "Counter machines and counter languages",
    "authors": ["Patrick C. Fischer", "Albert R. Meyer", "Arnold L. Rosenberg."],
    "venue": "Mathematical systems theory, 2(3):265– 283.",
    "year": 1968
  }, {
    "title": "Lstm recurrent networks learn simple context-free and contextsensitive languages",
    "authors": ["F.A. Gers", "E. Schmidhuber."],
    "venue": "Transactions on Neural Networks, 12(6):1333–1340.",
    "year": 2001
  }, {
    "title": "Recurrent nets that time and count",
    "authors": ["F.A. Gers", "J. Schmidhuber."],
    "venue": "Proceedings of the IEEEINNS-ENNS International Joint Conference on Neural Networks. IJCNN 2000. Neural Computing: New Challenges and Perspectives for the New Millen-",
    "year": 2000
  }, {
    "title": "Lstm: A search space odyssey",
    "authors": ["K. Greff", "R.K. Srivastava", "J. Koutnk", "B.R. Steunebrink", "J. Schmidhuber."],
    "venue": "IEEE Transactions on Neural Networks and Learning Systems, 28(10):2222–2232.",
    "year": 2017
  }, {
    "title": "Long short-term memory",
    "authors": ["Sepp Hochreiter", "Jürgen Schmidhuber."],
    "venue": "Neural computation, 9(8):1735–1780.",
    "year": 1997
  }, {
    "title": "Binarized neural networks",
    "authors": ["Itay Hubara", "Matthieu Courbariaux", "Daniel Soudry", "Ran El-Yaniv", "Yoshua Bengio."],
    "venue": "D. D. Lee, M. Sugiyama, U. V. Luxburg, I. Guyon, and R. Garnett, editors, Advances in Neural Information Processing Systems",
    "year": 2016
  }, {
    "title": "A Simple Way to Initialize Recurrent Networks of Rectified Linear Units",
    "authors": ["Quoc V. Le", "Navdeep Jaitly", "Geoffrey E. Hinton."],
    "venue": "arXiv:1504.00941",
    "year": 2015
  }, {
    "title": "Neural Networks and Analog Computation: Beyond the Turing Limit, 1 edition",
    "authors": ["Hava Siegelmann."],
    "venue": "Birkhäuser Basel.",
    "year": 1999
  }, {
    "title": "Recurrent neural networks and finite automata",
    "authors": ["Hava T. Siegelmann."],
    "venue": "Computational Intelligence, 12:567–574.",
    "year": 1996
  }, {
    "title": "On the computational power of neural nets",
    "authors": ["Hava T. Siegelmann", "Eduardo D. Sontag."],
    "venue": "Proceedings of the Fifth Annual ACM Conference on Computational Learning Theory, COLT 1992, Pittsburgh, PA, USA, July 27-29, 1992., pages 440–449.",
    "year": 1992
  }, {
    "title": "Analog computation via neural networks",
    "authors": ["Hava T. Siegelmann", "Eduardo D. Sontag."],
    "venue": "Theor. Comput. Sci., 131(2):331–360.",
    "year": 1994
  }, {
    "title": "Grammar as a foreign language",
    "authors": ["Oriol Vinyals", "Lukasz Kaiser", "Terry Koo", "Slav Petrov", "Ilya Sutskever", "Geoffrey Hinton."],
    "venue": "Proceedings of the 28th International Conference on Neural Information Processing Systems - Volume 2, NIPS’15, pages",
    "year": 2015
  }],
  "id": "SP:afdc9c6c67e63cf942bd98e83059c135526451de",
  "authors": [{
    "name": "Gail Weiss",
    "affiliations": []
  }, {
    "name": "Eran Yahav",
    "affiliations": []
  }],
  "abstractText": "While Recurrent Neural Networks (RNNs) are famously known to be Turing complete, this relies on infinite precision in the states and unbounded computation time. We consider the case of RNNs with finite precision whose computation time is linear in the input length. Under these limitations, we show that different RNN variants have different computational power. In particular, we show that the LSTM and the Elman-RNN with ReLU activation are strictly stronger than the RNN with a squashing activation and the GRU. This is achieved because LSTMs and ReLU-RNNs can easily implement counting behavior. We show empirically that the LSTM does indeed learn to effectively use the counting mechanism.",
  "title": "On the Practical Computational Power of Finite Precision RNNs for Language Recognition"
}