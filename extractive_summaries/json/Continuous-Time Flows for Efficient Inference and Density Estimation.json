{
  "sections": [{
    "heading": "1. Introduction",
    "text": "Efficient inference and robust density estimation are two important goals in unsupervised learning. In fact, they can be unified from the perspective of learning desired target distributions. In inference problems, one targets to learn a tractable distribution for a latent variable that is close to a given unnormalized distribution (e.g., a posterior distribution in a Bayesian model). In density estimation, one tries to learn an unknown data distribution only based on the samples from it. It is also helpful to make a distinction between two types of representations for learning distributions: explicit and implicit methods (Mohamed & Lakshminarayanan, 2017). Explicit methods provide a prescribed parametric form for the distribution, while implicit methods\n1SUNY at Buffalo 2Duke University. Correspondence to: Changyou Chen <cchangyou@gmail.com>.\nProceedings of the 35 th International Conference on Machine Learning, Stockholm, Sweden, PMLR 80, 2018. Copyright 2018 by the author(s).\nlearn a stochastic procedure to directly generate samples from the unknown distribution.\nExisting deep generative models can easily be identified from this taxonomy. For example, the standard variational autoencoder (VAE) (Kingma & Welling, 2014; Rezende et al., 2014) is an important example of an explicit inference method. Within the inference arm (encoder) of a VAE, recent research has focused on improving the accuracy of the approximation to the posterior distribution on latent variables (codes) using normalizing flow (NF) (Rezende & Mohamed, 2015). NF is particularly interesting due to its ability to approximate the posterior distribution arbitrarily well, while maintaining explicit parametric forms. On the other hand, Stein VAE (Feng et al., 2017; Pu et al., 2017) is an implicit inference method, as it only learns to draw samples to approximate posteriors, without assuming an explicit form for the distribution.. For density estimation on observed data, the generative adversarial network (GAN) can be regarded as an implicit density estimation method (Ranganath et al., 2016; Huszár, 2017; Mohamed & Lakshminarayanan, 2017), in the sense that one may sample from the distribution (regarded as a representation of the unknown distribution), but an explicit form for the distribution is not estimated. GAN has recently been augmented by Flow-GAN (Grover et al., 2017) to incorporate a likelihood term for explicit density estimation. Further, the real-valued non-volume preserving (real NVP) transformations algorithm (Dinh et al., 2017) was proposed to perform inference within the implicit density estimation framework.\nSome aforementioned methods rely on the concept of flows. A flow defines a series of transformations for a random variable (RV), such that the distribution of the RV evolves from a simple distribution to a more complex distribution. When the sequence of transformations are indexed on a discrete-time domain (e.g., indexed with integers) with a finite number of transformations, this method is referred to as a normalizing flow (Rezende & Mohamed, 2015). Various efficient implementations of NFs have been proposed, such as the planar, radial (Rezende & Mohamed, 2015), Householder (Tomczak & Welling, 2016), and inverse autoregressive flows (Kingma et al., 2016). One theoretical limitation of existing normalizing flows is that there is no guarantee on the approximation accuracy due to the finite number of transformations.\nBy contrast, little work has explored the applicability of continuous-time flows (CTFs) in deep generative models, where a sequence of transformations are indexed on a continuous-time domain (e.g., indexed with real numbers). There are at least two reasons encouraging research in this direction: i) CTFs are more general than traditional normalizing flows in terms of modeling flexibility, due to the intrinsic infinite number of transformations; ii) CTFs are more theoretically grounded, in the sense that they are guaranteed to approach a target distribution asymptotically (details provided in Section 2.2).\nIn this paper, we propose efficient ways to apply CTFs for the two motivating tasks. Based on the CTF, our framework learns to drawn samples directly from desired distributions (e.g., the unknown posterior and data distributions) for both inference and density estimation tasks via amortization. In addition, we are able to learn an explicit form of the unknown data distribution for density estimation⇤. The core idea of our framework is the amortized learning, where knowledge in a CTF is distilled sequentially into another neural network (called inference network in the inference task, and generator in density estimation). The distillation relies on the distribution matching technique proposed recently via adversarial lerning (Li et al., 2017a). We conduct various experiments on both synthetic ad real datasets, demonstrating excellent performance of the proposed framework, relative to representative approaches."
  }, {
    "heading": "2. Preliminaries",
    "text": ""
  }, {
    "heading": "2.1. Efficient inference and density estimation",
    "text": "Efficient inference with normalizing flows Consider a probabilistic generative model with observation x 2 RD and latent variable z 2 RL such that x | z ⇠ p✓(x | z) with z ⇠ p(z). For efficient inference of z, the VAE (Kingma & Welling, 2014) introduces the concept of an inference network (recognition model or encoder), q (z |x), as a variational distribution in the VB framework. An inference network is typically a stochastic (nonlinear) mapping from the input x to the latent z, with associated parameters . For example, one of the simplest inference networks is defined as q (z |x) = N (z;µ (x), diag( 2 (x))), where the mean function µ (x) and the standard-derivation function (x) are specified via deep neural networks parameterized by . Parameters are learned by minimizing the negative evidence lower bound (ELBO), i.e., the KL divergence between p✓(x, z) and q (z |x): KL (q (z |x)kp✓(x, z)) , Eq (z |x) [log q (z |x) log p✓(x, z)], via stochastic gradient descent (Bottou, 2012).\nOne limitation of the VAE framework is that q (z |x) is ⇤Although the density is represented as an energy-based distribution with an intractable normalizer.\noften restricted to simple distributions for feasibility, e.g., the normal distribution discussed above, and thus the gap between q (z |x) and p✓(z |x) is typically large for complicated posterior distributions. NF is a recently proposed VB-based technique designed to mitigate this problem (Rezende & Mohamed, 2015). The idea is to augment z via a sequence of deterministic invertible transformations {Tk : RL ! RL}Kk=1, such that: z0 ⇠ q (·|x), z1 = T1(z0), · · · , zK = TK(zK 1). Note the transformations {Tk} are typically endowed with different parameters, and we absorb them into . Because the transformations are deterministic, the distribution of zK can be written as q(zK) = q (z0 |x) QK k=1 det @Tk@ zk 1\nvia the change of variable formula. As a result, the negative ELBO for normalizing flows becomes: KL (q (zK |x)kp✓(x, z)) = Eq (z0 |x) [log q (z0 |x)] (1)\nEq (z0 |x) [log p✓(x, zK)] Eq (z0 |x)[ KX\nk=1\nlog |det @Tk @ zk |].\nTypically, transformations Tk of a simple parametric form are employed to make the computations tractable (Rezende & Mohamed, 2015). Our method generalizes these discretetime transformations to continuous-time ones, ensuring convergence of the transformations to a target distribution. Related density-estimation methods There exist implicit and explicit density-estimation methods. Implicit density models such as GAN provide a flexible way to draw samples directly from unknown data distributions (via a deep neural network (DNN) called a generator with stochastic inputs) without explicitly modeling their density forms; whereas explicit models such as the pixel RNN/CNN (van den Oord et al., 2016) define and learn explicit forms of the unknown data distributions. This gives the advantage that the likelihood for a test data point can be explicitly evaluated. However, the generation of samples is typically time-consuming due to the sequential generation nature.\nSimilar to Wang & Liu (2017), our CTF-based approach in Section 4 provides an alternative way for this problem, by simultaneously learning an explicit energy-based data distribution (estimated density) and a generator whose generated samples match the learned data distribution. This not only gives us the advantage of explicit density modeling but also provides an efficient way to generate samples. Note that our technique differs from that of Wang & Liu (2017) in that distribution matching is adopted to learn an accurate generator, which is a key component in our framework."
  }, {
    "heading": "2.2. Continuous-time flows",
    "text": "We notice two potential limitations with traditional normalizing flows: i) given specified transformations {Tk}, there is no guarantee that the distribution of zK could exactly match p✓(x, z); ii) the randomness is only introduced in z0 (from the inference network), limiting the representation\npower. We specify CTFs where transformations are indexed by real numbers, thus they could be considered as consisting of infinite transformations. Further, we consider stochastic flows where randomness is injected in a continuous-time manner. In fact, the concept of CTFs (such as the Hamiltonian flow) has been introduced by Rezende & Mohamed (2015), without further development on efficient inference.\nWe consider a flow on RL, defined as the mapping† T : RL ⇥ R ! RL such that‡ we have T (Z, 0) = z and T (T (Z, t), s) = T (Z, s + t), for all Z 2 RL and s, t 2 R. A specific form consider here is defined as T (Z, t) = Zt, where Zt is driven by a diffusion of the form: dZt = F (Zt)dt + V (Zt)dW . (2) Here F : RL ! RL, V : RL⇥L ! RL are called the drift term and diffusion term, respectively; W is the standard L-dimensional Brownian motion. In the context of inference, we seek to make the stationary distribution of Zt approach p✓(z |x). One solution for this is to set F (Zt) = 1 2rz log p✓(x, z = Zt) and V (Zt) = IL with IL the L ⇥ L identity matrix. The resulting diffusion is called Langevin dynamics (Welling & Teh, 2011). Denoting the distribution of Zt as ⇢t, it is well known (Risken, 1989) that ⇢t is characterized by the Fokker-Planck (FP) equation:\n@t⇢t = rz · (⇢tF (Zt) +rz · (⇢tV (Zt)V >(Zt))) , (3)\nwhere a ·b , a> b for vectors a and b. For simplicity, we consider the flow defined by the Langevin dynamics specified above, though our results generalize to other stochastic flows (Dorogovtsev & Nishchenko, 2014). In fact, CTF has been applied for scalable Bayesian sampling (Ding et al., 2014; Li et al., 2016a; Chen et al., 2016; Li et al., 2016b; Zhang et al., 2017). In this paper, we generalize it by specifying an ELBO under a CTF, which can then be readily solved by a discretized numerical scheme, based on the results from Jordan et al. (1998). An approximation error bound for the scheme is also derived. We defer proofs of our theoretical results to the Supplementary Material (SM) for conciseness."
  }, {
    "heading": "3. Continuous-Time Flows for Inference",
    "text": "For this task, we adopt the VAE/normalizing-flow framework with an encoder-decoder structure. An important difference is that instead of feeding data to an encoder and sampling a latent representation in the output as in VAE, we concatenate the data with independent noise as input and directly generate output samples§, constituting an implicit\n†We reuse the notation T as transformations from the discrete case above for simplicity, and use Z instead of z (reserved for the discrete-time setting) to denote the random variable in the continuous-time setting.\n‡Note we define continuous-time flows in terms of latent variable Z in order to incorporate it into the setting of inference. However, the same description applies when we define the flow in data space, which is the setting of density estimation in Section 4.\n§Such structure can represent much more complex distributions than a parametric form, useful for the follow up procedures. In\nmodel. These outputs are then driven by the CTF to approach the true posterior distribution. In the following, we first show that directly optimizing the ELBO is infeasible. We then propose an amortized-learning process that sequentially distills the implicit transformations from the CTF an inference network by distribution matching in Section 3.2."
  }, {
    "heading": "3.1. The ELBO and discretized approximation",
    "text": "We first incorporate CTF into the NF framework by writing out the corresponding ELBO. Note that there are two steps in the inference process. First, an initial z0 is drawn from the inference network q (·|x); second, z0 is evolved via a diffusion such as (2) for time T (via the transformation ZT = T (z0, T )). Consequently, the negative ELBO for CTF can be written as\nF(x) = Eq (z0 |x)E⇢T [log ⇢T log p✓(x,ZT )\n+ log det @ ZT @ z0 , Eq (z0 |x) [F1(x, z0)] . (4)\nNote the term F1(x, z0) is intractable to calculate, in that i) ⇢T does not have an explicit form; ii) the Jacobian @ ZT@ z0 is generally infeasible. In the following, we propose an approximate solution for problem i). Learning by avoiding problem ii) is presented in Section 3.2 via amortization.\nFor problem i), a reformulation of the results from Jordan et al. (1998) leads to a nice way to approximate ⇢t in Lemma 1. Note in practice we adopt an implicit method which uses samples to approximate the solution in Lemma 1 for feasibility, detailed in (6).\nLemma 1 Assume that log p✓(x, z)  C1 is infinitely differentiable, and krz log p✓(x, z)k  C2 (1 + C1 log p✓(x, z)) (8x, z) for some constants {C1, C2}. Let T = hK (h is the stepsize and K is the number of transformations), ⇢0 , q (z0 |x), and {⇢̃k}Kk=1 be the solution of the functional optimization problem:\n⇢̃k = arg min ⇢2K\nKL (⇢kp✓(x, z)) + 1\n2h W\n2 2 (⇢̃k 1, ⇢) , (5)\nwith W 2 2 (µ1, µ2) , infp2P(µ1,µ2) R kx yk22 p(dx, dy) the square of 2nd-order Wasserstein distance, and P(µ1, µ2) the set of joint distributions on {µ1, µ2}. K is the space of distributions with finite 2nd-order moment. Then ⇢̃K converges to ⇢T in the limit of h ! 0, i.e., limh!0 ⇢̃K = ⇢T , where ⇢T is the solution of the FP equation (3) at time T .\nLemma 1 reveals an interesting way to compute ⇢T via a sequence of functional optimization problems. By comparing it with the objective of the traditional NF, which minimizes the KL-divergence between ⇢K and p✓(x, z), at each sub-optimization-problem in Lemma 1, it minimizes the KL-divergence between ⇢̃k and p✓(x, z), plus a regularization term as the Wasserstein distance between ⇢̃k 1\ncontrast, we will define an explicit energy-based distribution for the density in density-estimation tasks.\nand ⇢̃k. The extra Wasserstein-distance term arises naturally due to the fact that the Langevin diffusion can be explained as a gradient flow whose geometry is equipped with the Wasserstein distance (Otto, 1998).\nThe optimization problem in Lemma 1 is, however, difficult to deal with directly. In practice, we instead approximate the discretization in an equivalent way by simulation from the CTF. Starting from z0, each zk (k = 0, · · · , K 1) is fed into a transformation Tk (specified below), resulting in zk+1 whose distribution coincides with ⇢̃k+1 in Lemma 1. The discretization procedure is illustrated in Figure 1. We must specify the transformations Tk. For each k, let t = hk; we can conclude from Lemma 1 that limh!0 ⇢̃k = ⇢t. From FP theory, ⇢t is obtained by solving the diffusion (2) with initial condition Z0 = z0. It is thus reasonable to specify the transformation Tk as the k-th step of a numerical integrator for (2). Specifically, we specify Tk stochastically:\nzk = Tk(zk 1) , zk 1 +F (zk 1)h + V (zk 1)⇣k , (6)\nwhere ⇣k ⇠ N (0, hIL) is drawn from an isotropic normal. Note the transformation defined here is stochastic, thus we only get samples from ⇢̃K at the end. A natural way to approximate ⇢̃K is to use the empirical sample distribution, i.e., ⇢̃K ⇡ 1K PK k=1 zk , ⇢̄T with z a point mass at z. Afterwards, ⇢̃K (thus ⇢̄T ) will be used to approximate the true ⇢T from (3).\nBetter ways to approximate ⇢T might be possible, e.g., by assigning more weights to the more recent samples. However, the problem becomes more challenging in theoretical analysis, an interesting point left for future work. In the following, we study how well ⇢̄T approximates ⇢T . Following literature on numerical approximation for Itô diffusions (Vollmer et al., 2016; Chen et al., 2015), we consider a 1-Lipschitz test function : RL ! R, and use the mean square error (MSE) bound to measure the closeness of ⇢̄T and ⇢T , defined as: MSE(⇢̄T , ⇢T ; ) , E R (z)(⇢̃T ⇢T )(z)d z\n2, where the expectation is taken over all the randomness in the construction of ⇢̃T . Note that our goal is related but different from the standard setup as in (Vollmer et al., 2016; Chen et al., 2015), which studies the closeness of ⇢̄T to p✓(x, z). We need to adopt the assumptions from Vollmer et al. (2016); Chen et al. (2015), which are described in the SM. The assumptions are somewhat involved but essentially require\ncoefficients of the diffusion (2) to be well-behaved. We derive the following bound for the MSE of the sampled approximation, ⇢̄T , and the true distribution.\nTheorem 2 Under Assumption 1 in the SM, assume thatR ⇢T (z)p 1 ✓ (x, z)d z < 1 and there exists a constant C such that dW 22 (⇢T ,p✓(x,z))\ndt CW 2 2 (⇢T , p✓(x, z)), the MSE\nis bounded as\nMSE(⇢̄T , ⇢T ; ) = O\n✓ 1\nhK + h2 + e 2ChK\n◆ .\nThe last assumption in Theorem 2 requires ⇢T to evolve fast through the FP equation, which is a standard assumption used to establish convergence to equilibrium for FP equations (Bolley et al., 2012). The MSE bound consists of three terms, the first two terms come from numerical approximation of the continuous-time diffusion, whereas the third term comes from the convergence bound of the FP equation in terms of the Wasserstein distance (Bolley et al., 2012). When the time T = hK is large enough, the third term may be ignored due to its exponential-decay rate. Moreover, in the infinite-time limit, the bound endows a bias proportional to h; this, however, can be removed by adopting a decreasing-step-size scheme in the numerical method, as in standard stochastic gradient MCMC methods (Teh et al., 2016; Chen et al., 2015).\nRemark 3 To examine the optimal bound in Theorem 2, we drop out the term e 2ChK in the long-time case (when hK\nis large enough) for simplicity because it is in a much lower\norder term than the other terms. The optimal MSE bound\n(over h) decreases at a rate of O K 2/3 , meaning that O ✏ 3/2 steps of transformations in Figure 1 (right) are needed to reach an ✏-accurate approximation, i.e., MSE  ✏. This is computationally expensive. An efficient way for\ninference is thus imperative, developed in the next section."
  }, {
    "heading": "3.2. Efficient inference via amortization",
    "text": "Even though we approximate ⇢T with ⇢̄T , it is still infeasible to directly apply it to the ELBO in (4) as ⇢̄T is discrete. To deal with this problem, we adopt the idea of “amortized learning” (Gershman & Goodman, 2014) for inference, by alternatively optimizing the two sets of parameters and ✓.\nUpdating To explain the idea, first note that the negative ELBO can be equivalently written as F(x) = E⇢0,q (z0 |x)E⇢T [log ⇢0 log p✓(x,ZT )] . (7)\nWhen ⇢0 = ⇢T , it is easy to see that: F(x) = E⇢0 [log ⇢0 log p✓(ZT |x)]+log p(x) = log p(x), which essentially makes the gap between q (z0 |x) and p✓(ZT |x) vanished. As a result, our goal is to learn such that q (z0 |x) approaches p✓(ZT |x). This is a distribution matching problem (Li et al., 2017a). As mentioned previously, we will learn an implicit distribution of q (z0 |x)\n(i.e., learn how to draw samples from q (z0 |x) instead of its explicit form), as it allows us to chose a candidate distribution from a much larger distribution space, compared to explicitly defining q ¶. Consequently, q (z0 |x) is implemented by a stochastic generator (a DNN parameterized by ) Q (x,!) with input as the concatenation of x and !, where ! is a sample from an isotropic Gaussian distribution q0(!). Our goal is now translated to update the parameter of Q (x,!) to 0 such that the distribution of {z00 = Q 0(x,!)} with ! ⇠ q0(!) matches that of z1 in the original generating process with in Figure 1. In this way, the generating process of z1 via T1 is distilled into the parameterized generator Q (·), eliminating the need to do a specific transformation via T1 in testing, and thus is very efficient. Specifically, we update 0 such that\n0 = arg min D({z0(i)0 }, {z (i) 1 }) , (8)\nwhere {z0(i)0 }Si=1 are a set of samples generated from q 0(z00 |x) via Q (·), and {z (i) 1 }Si=1 are samples drawn by ! i ⇠ q0(!), z̃i0 = Q (x,!i), z (i) 1 ⇠ T1(z̃ i 0); D(·, ·) is a metric between samples specified below. We call this procedure distilling knowledge from T1 to Q (·). In practice, one can choose to distill knowledge for several steps (e.g., Tk) instead of one step (e.g., T1) to Q (·) each time. Note the distillation idea is related to Bayesian dark knowledge (Korattikara et al., 2015), but with different goal and approach.\nAfter distilling knowledge from T1, we apply the same procedure for other transformations Tk(k > 1) sequentially. The final inference network, represented by q (·|x), can then well approximate the CTF, e.g., the distribution of z0 ⇠ q (·|x) is close to ⇢T from the CTF. This concept is illustrated in Figure 2. We note choosing an appropriate D in (8) is important in order to make Theorem 2 applicable. Amortized SVGD (Wang & Liu, 2017) defines D as standard Euclidean distance between samples. We show in Proposition 4 that this would induce a large error in terms of approximation accuracy.\nProposition 4 Fix ✓. If D in (8) is defined as the summation of pairwise Euclidean distance between samples, then\nsamples generated from Q converge to local modes of log p✓(z |x). ¶This is distinct from our density-estimation framework described in the next section, where an explicit form is assumed at the beginning for practical needs.\nConsequently, it is crucial to impose more general distance for D. As GAN has been interpreted as distribution matching (Li et al., 2017a), we define D using the Wasserstein distance, implemented as a discriminator parameterized by a neural network. Specifically, we adopt the ALICE framework (Li et al., 2017a), and use {(x, z0(i)0 )} as fake data and {(z(i)1 ,xi ⇠ p✓(·| z (i) 1 ))} as real data to train a discriminator. More details are discussed in Section C of the SM.\nUpdating ✓ Given , ✓ can be updated by simply optimizing the ELBO in (7), where ⇢T is approximated by ⇢̄T from the discretized CTF. Specifically, the expectation w.r.t. ⇢T in (7) is approximated by a sample average from:\nz0 ⇠ q (z0 |x), z1 ⇠ T1(z0), z2 ⇠ T2(z1), · · · , zK ⇠ TK(zK 1)\nTo sum up, there are three steps to learn a CTF-based VAE:\n1. Generate (z0, · · · , zK) according to q (z0 |x) and the discretized flow with transformations {Tk}; 2. Update according to (8); 3. Optimize ✓ by minimizing the ELBO (7) with the gen-\nerated sample path.\nIn testing, we use only the finally learned q (z0 |x) for inference (into which the CTF has been distilled), and hence testing is like the standard VAE. Since the discretized-CTF model is essentially a Markov chain, we call our model Markov-chain-based VAE (MacVAE)."
  }, {
    "heading": "4. CTFs for Energy-based Density Estimation",
    "text": "We assume that the density of the observation x is characterized by a parametric Gibbsian-style probability model p✓(x) = 1 Z(✓) p̃✓(x) , 1Z(✓)eU(x;✓), where p̃✓(x) is an unnormalized version of p✓(x) with parameter ✓, U(x;✓) , log p̃✓(x) is called the energy function (Zhao et al., 2017), and Z(✓) , R p̃✓(x)dx is the normalizer. Note this form of distributions constitutes a very large class of distributions as long as the capacity of the energy function is large enough. This can be easily achieved by adopting a DNN to implement U(x;✓), the setting we considered in this paper. Note our model can be placed in between existing implicit and explicit density estimation methods, because we model the data density with an explicit distribution form up to an intractable normalizer. Such distributions have been proved to be useful in real applications, e.g., (Haarnoja et al., 2017) used them to model policies in deep reinforcement learning.\nThe optimization can be achieved by standard stochastic gradient descent (SGD), with the following gradient formula:\n@M @✓ = 1 N\nNX\ni=1\n@U(xi;✓) @✓ Ep✓(x)  @U(x;✓) @✓\n(9)\nThe above formula requires an integration over the model distribution p✓(x), which can be approximated by Monte Carlo integration with samples. Here we adopt the idea of CTFs and propose to use a DNN guided by a CTF, which we call a generator, to generate approximate samples from the original model p✓(x). Specifically, we require that samples from the generator should well approximate the target p✓(x). This can be done by adopting the CTF idea above, i.e., distilling knowledge of a CTF (which approaches p✓(x)) to the generator. In testing, instead of generating samples from p✓(x) via MCMC (which is complicated and time consuming), we generate samples from the generator directly. Furthermore, when evaluating the likelihood for test data, the constant Z(✓) can also be approximated by Monte Carlo integration with samples drawn from the generator.\nNote the first term on the RHS of (9) is a model fit to observed data, and the second term is a model fit to synthetic data drawn from p✓(x); this is similar to the discriminator in GANs (Arjovsky et al., 2017), but derived directly from the MLE. More connections are discussed below."
  }, {
    "heading": "4.1. Learning via Amortization",
    "text": "Our goal is to learn a generator whose generated samples match those from the original model p✓(x).Similar to inference setting, the generator is learned implicitly. However, we also learn an explicit density model for the data by SGD, with samples from the implicit generator to estimate gradients in (9). Note that in this case, the CTF is performed directly on the data space, instead of on latent-variable space as in previous sections. Specifically, the sampling procedure from the generator plus a CTF are written as:\nx0 ⇠ q (x0),xT ⇠ T (x0, T ) .\nHere T (·, ·) is the continuous-time flow; a sample x0 from q (·) is implemented by a deep neural network (generator) G (!) with input ! ⇠ q0(!), where q0 is a simple distribution for a noise random variable, e.g., the isotropic normal distribution. The procedure is illustrated in Figure 3.\nSpecifically, denote the parameters in the k-th step with subscript “(k)”. For efficient sample generation, in the k-th step, we again adopt the amortization idea from Section 3.2 to update (k 1) of the generator network G (·), such that samples from the updated generator match those from the current generator followed by a one-step transformation T1(·). After that, ✓ is updated by drawing samples from q (·) to estimate the expectation in (9). The algorithm is presented in Algorithm 1 in Section E of the SM."
  }, {
    "heading": "4.2. Connections to WGAN and MLE",
    "text": "There is an interesting relation between our model and the WGAN framework (Arjovsky et al., 2017). To see this, let pr be the data distribution. Substituting p✓(x) with q (x) for the expectation in the gradient formula (9) and integrating out ✓, we have that our objective is\nmaxEx⇠pr [U(x;✓)] Ex⇠q [U(x;✓)] (10)\nThis is an instance of the integral probability metrics (Arjovsky & Bottou, 2017). When U is chosen to be 1-Lipschitz functions, it recovers WGAN. This connection motivates us to introduce weight clipping (Arjovsky et al., 2017) or alternative regularizers (Gulrajani et al., 2017) when updating ✓ for a better theoretical property. For this reason, we call our model Markov-chain-based GAN (MacGAN).\nFurthermore, it can be shown by Jensen’s inequality that the MLE is bounded by (detailed derivations are provided in Section F of the SM)\nmax 1 N\nNX\ni=1\nlog p✓(xi) (11)\n maxEx⇠pr [U(x;✓)] Ex⇠q [U(x;✓)] Ex⇠q [log q ] .\nBy inspecting (10) and (11), it is clear that: i) when learning the energy-based model parameters ✓, the objective can be interpreted as maximizing an upper bound of the MLE shown in (11); ii) when optimizing the parameter of the inference network, we adopt the amortized learning procedure presented in Algorithm 1, whose objective is min KL (q kp✓), coinciding with the last two terms in (11). In other words, both ✓ and are optimized by maximizing the same upper bound of the MLE, guaranteeing convergence of the algorithm, although previous work has pointed out maximizing an upper bound is not a well-posed problem in general (Salakhutdinov & Hinton, 2012).\nProposition 5 The optimal solution of MacGAN is the max-\nimum likelihood estimator.\nNote another difference between MacGAN and standard GAN framework is the way of learning the generator q .\nWe adopt the amortization idea, which directly guides q to approach p✓; whereas in GAN, the generator is optimized via a min-max procedure to make it approach the empirical data distribution pr. By explicitly learning p✓ , MacGAN is able to evaluate likelihood for test data up to a constant."
  }, {
    "heading": "5. Related Work",
    "text": "Our framework extends the idea of normalizing flows (Rezende & Mohamed, 2015) and gradient flows (Altieri & Duvenaud, 2015) to continuous-time flows, by developing theoretical properties on the convergence behavior. Inference based on CTFs has been studied in (Sohl-Dickstein et al., 2015) based on maximum likelihood and (Salimans et al., 2015) based on the auxiliary-variable technique. However, they directly uses discrete approximations for the flow, and the approximation accuracy is unclear. Moreover, the inference network requires simulating a long Markov chain for the auxiliary model, thus is less efficient than ours. Finally, the inference network is implemented as a parametric distribution (e.g., the Gaussian distribution), limiting the representation power, a common setting in existing auxiliaryvariable based models (Tran et al., 2016). The idea of amortization (Gershman & Goodman, 2014) has recently been explored in various research topics for Bayesian inference such as in variational inference (Kingma & Welling, 2014; Rezende et al., 2014) and Markov chain Monte Carlo (Wang & Liu, 2017; Li et al., 2017b; Pu et al., 2017). Both (Wang & Liu, 2017) and (Pu et al., 2017) extend the idea of Stein variational gradient descent (Liu & Wang, 2016) with amortized inference for a GAN-based and a VAE-based model, respectively, which resemble our proposed MacVAE and MacGAN in concept. Li et al. (2017b) applies amortization to distill knowledge from MCMC to learn a student network. The ideas in (Li et al., 2017b) are similar to ours, but the motivation and underlying theory are different from that developed here. Remarkably, the authors endowed standard Euclidean distance in (8) for distribution matching, which is inappropriate as will be shown in our experiments."
  }, {
    "heading": "6. Experiments",
    "text": "We conduct experiments to test our CTF-based framework for efficient inference and density estimation problems, and compared them with related methods. Some experiments are based on the excellent code for SteinGANk (Wang & Liu, 2017), where their default parameter setting are adopted. The discretization stepsize h is robust as long as it is set in a reasonable range, e.g., we set it the same as the stepsize in SGD. More experimental results are given in the SM, including a sensitiveness experiment on model parameters in Section G.4.\nkhttps://github.com/DartML/SteinGAN"
  }, {
    "heading": "6.1. CTFs for inference",
    "text": "Synthetic experiment We examine our amortized learning framework with three toy experiments. Particularly, we want to verify the necessity of distribution matching defined in (8), i.e., we test D implemented as a discriminator for Wasserstein distance (adversarial-CTF) against that implemented with standard Euclidean distance (`2-CTF), which can be considered as an instance of the amortized MCMC (Li et al., 2017b) with a Langevin-dynamic transition function and a Euclidean-distance-based divergence measure for samples. Two 2D distributions similar to (Rezende & Mohamed, 2015) are considered, defined in Section D of the SM. The inference network q is defined to be a 2-layer MLP with isotropic normal random variables as input. Figure 4 plots the densities estimated with the samples from transformations {TK=100} (before optimizing ), as well as with samples generated directly from q (after optimizing ). It is clear that the amortized learning with Wasserstein distance is able to distill knowledge from the CTF to the inference network, while the algorithm fails when Euclidean distance is adopted.\nNext, we test MacVAE on a VAE setting on a simple synthetic dataset containing 4 data points, each is a 4D one-hot vector, with the non-zero elements at different positions. The prior of latent code is a 2D standard Normal. Figure 5 plots the distribution of the learned latent code for VAE, adversarial-CTF and `2-CTF. Each color means the codes for one particular observation. It is observed that VAE divides the space into a mixture of 4 Gaussians (consistent with VAE theory), the adversarial-CTF learns complex posteriors, while the `2-CTF converges to the mode of each posterior (consistent with Proposition 4).\nMacVAE on MNIST Following (Rezende & Mohamed, 2015; Tomczak & Welling, 2016), we define the inference network as a deep neural network with two fully connected layers of size 300 with softplus activation functions. We compare MacVAE with the standard VAE and the VAE with normalizing flow, where testing ELBOs are reported (Section G.1 of the SM describes how to calculate the ELBO). We do not compare with other state-of-the-art methods such as the inverse autoregressive flow (Kingma et al., 2016), because they typically endowed more complicated inference networks (with more parameters), unfair for comparison. We use the same inference network architecture for all the models. Figure 7 (left) plots the testing ELBO versus training epochs. MacVAE outperforms VAE and normalizing flows with a better ELBO (around -85.62)."
  }, {
    "heading": "6.2. CTFs for density estimation",
    "text": "We test MacGAN on three datasets: MNIST, CIFAR-10 and CelabA. Following GAN-related methods, the model is evaluated by observing its ability to draw samples from the learned data distribution. Inspiring by (Wang & Liu, 2017),\n(a) Standard VAE (b) Adversarial CTF (c) L2 CTFFigure 5. Comparison of the learned latent space with standard VAE (left), adversarial-CTF (middle) and `2-CTF (right).\nwe define a parametric form of the energy-based model as p✓(x) / exp{ kx DEC✓ (ENC✓(x))k2}, where ENC✓(·) and DEC✓(·) are encoder and decoder defined by using deep convolutional neural networks and deconvolutional neural networks, respectively, parameterized by ✓. For simplicity, we adopt the popular DCGAN architecture (Radford et al., 2016) for the encoder and decoder. The generator G is defined as a 3-layer CNN with the ReLU activation function (except for the top layer which uses tanh as the activation function, see SM G for details). Following (Wang & Liu, 2017), the stepsizes are set to (me e)⇥lrme 50 , where e indexes the epoch, me is the total number of epochs, lr = 1e-4 when updating ✓, and lr = 1e-3 when updating . The stepsize in L1 is set to 1e-3.\nWe compare MacGAN with DCGAN (Radford et al., 2016), the improved WGAN (WGAN-I) (Gulrajani et al., 2017) and SteinGAN (Wang & Liu, 2017). We plot images generated with MacGAN and its most related method SteinGAN in Figure 6 for CelebA and CIFAR-10 datasets. More results are provided in SM Section G. We observe that visually MacGAN is able to generate clear-looking images. Following (Wang & Liu, 2017), we also plot the images generated by a random walk in the ! space in Figure 6.\nQualitatively evaluating a GAN-like model is challenging. We follow literature and use the inception score (Salimans et al., 2016) to measure the quantity of the generated images. Figure 7 (right) plots inception scores vs epochs for different models. MacGAN obtains competitive inception scores with the popular DCGAN model. Quantitatively, we get a final inception score of 6.49 for MacGAN, compared to 6.35 for\nSteinGAN, 6.25 for WGAN-I and 6.58 for DCGAN."
  }, {
    "heading": "7. Conclusion",
    "text": "We study the problem of applying CTFs for efficient inference and explicit density estimation in deep generative models, two important tasks in unsupervised learning. Compared to discrete-time NFs, CTFs are more general and flexible due to the fact that their stationary distributions can be controlled without extra flow parameters. We develop theory on the approximation accuracy when adopting a CTF to approximate a target distribution. We apply CTFs on two classes of deep generative models, a variational autoencoder for efficient inference, and a GAN-like density estimator for explicit density estimation and efficient data generation. Experiments show encouraging results of our framework in both models compared to existing techniques. One interesting direction of future work is to explore more efficient learning algorithms for the proposed CTF-based framework."
  }, {
    "heading": "Acknowledgements",
    "text": "We thank the anonymous reviewers for their useful comments. This research was supported in part by DARPA, DOE, NIH, ONR and NSF."
  }],
  "year": 2018,
  "references": [{
    "title": "Variational inference with gradient flows",
    "authors": ["N. Altieri", "D. Duvenaud"],
    "venue": "In NIPS workshop on Advances in Approximate Bayesian Inference,",
    "year": 2015
  }, {
    "title": "Towards principled methods for training generative adversarial networks",
    "authors": ["M. Arjovsky", "L. Bottou"],
    "venue": "In ICLR,",
    "year": 2017
  }, {
    "title": "Convergence to equilibrium in wasserstein distance for fokker–planck equations",
    "authors": ["F. Bolley", "I. Gentil", "A. Guillin"],
    "venue": "Journal of Functional Analysis,",
    "year": 2012
  }, {
    "title": "Stochastic gradient descent tricks",
    "authors": ["L. Bottou"],
    "venue": "Technical report,",
    "year": 2012
  }, {
    "title": "On the convergence of stochastic gradient MCMC algorithms with high-order integrators",
    "authors": ["C. Chen", "N. Ding", "L. Carin"],
    "venue": "In NIPS,",
    "year": 2015
  }, {
    "title": "Bridging the gap between stochastic gradient MCMC and stochastic optimization",
    "authors": ["C. Chen", "D. Carlson", "Z. Gan", "C. Li", "L. Carin"],
    "year": 2016
  }, {
    "title": "Bayesian sampling using stochastic gradient thermostats",
    "authors": ["N. Ding", "Y. Fang", "R. Babbush", "C. Chen", "R.D. Skeel", "H. Neven"],
    "venue": "In NIPS,",
    "year": 2014
  }, {
    "title": "Density estimation using real NVP",
    "authors": ["L. Dinh", "J. Sohl-Dickstein", "S. Bengio"],
    "venue": "In ICLR,",
    "year": 2017
  }, {
    "title": "An analysis of stochastic flows",
    "authors": ["A.A. Dorogovtsev", "I.I. Nishchenko"],
    "venue": "Communications on Stochastic Analysis,",
    "year": 2014
  }, {
    "title": "Learning to draw samples with amortized Stein variational gradient descent",
    "authors": ["Y. Feng", "D. Wang", "Q. Liu"],
    "venue": "In UAI,",
    "year": 2017
  }, {
    "title": "Amortized inference in probabilistic reasoning",
    "authors": ["S.J. Gershman", "N.D. Goodman"],
    "venue": "In Annual Conference of the Cognitive Science Society,",
    "year": 2014
  }, {
    "title": "A class of wasserstein metrics for probability distributions",
    "authors": ["C.R. Givens", "R.M. Shortt"],
    "venue": "Michigan Math. J.,",
    "year": 1984
  }, {
    "title": "Flow-GAN: Bridging implicit and prescribed learning in generative models",
    "authors": ["A. Grover", "M. Dhar", "S. Ermon"],
    "venue": "Technical Report",
    "year": 2017
  }, {
    "title": "Improved training of Wasserstein GAN",
    "authors": ["I. Gulrajani", "F. Ahmed", "M. Arjovsky", "V. Dumoulin", "A. Courville"],
    "venue": "In NIPS,",
    "year": 2017
  }, {
    "title": "Reinforcement learning with deep energy-based policies",
    "authors": ["T. Haarnoja", "H. Tang", "P. Abbeel", "S. Levine"],
    "venue": "In ICML,",
    "year": 2017
  }, {
    "title": "Variational inference using implicit distributions",
    "authors": ["F. Huszár"],
    "venue": "Technical Report",
    "year": 2017
  }, {
    "title": "The variational formulation of the Fokker-Planck equation",
    "authors": ["R. Jordan", "D. Kinderlehrer", "F. Otto"],
    "venue": "SIAM J. MATH. ANAL.,",
    "year": 1998
  }, {
    "title": "Improving variational inference with inverse autoregressive flow",
    "authors": ["D. Kingma", "T.P. Salimans", "M. Welling"],
    "venue": "In NIPS,",
    "year": 2016
  }, {
    "title": "Auto-encoding variational Bayes",
    "authors": ["D.P. Kingma", "M. Welling"],
    "venue": "In ICLR,",
    "year": 2014
  }, {
    "title": "Bayesian dark knowledge",
    "authors": ["A. Korattikara", "V. Rathod", "K. Murphy", "M. Welling"],
    "venue": "In NIPS,",
    "year": 2015
  }, {
    "title": "Preconditioned stochastic gradient Langevin dynamics for deep neural networks",
    "authors": ["C. Li", "C. Chen", "D. Carlson", "L. Carin"],
    "venue": "In AAAI,",
    "year": 2016
  }, {
    "title": "Learning weight uncertainty with stochastic gradient MCMC for shape classification",
    "authors": ["C. Li", "A. Steven", "C. Chen", "L. Carin"],
    "venue": "In CVPR,",
    "year": 2016
  }, {
    "title": "ALICE: Towards understanding adversarial learning for joint distribution matching",
    "authors": ["C. Li", "H. Liu", "C. Chen", "Y. Pu", "L. Chen", "R. Henao", "L. Carin"],
    "venue": "In NIPS,",
    "year": 2017
  }, {
    "title": "Approximate inference with amortised MCMC",
    "authors": ["Y. Li", "R.E. Turner", "Q. Liu"],
    "venue": "Technical Report arXiv:1702.08343,",
    "year": 2017
  }, {
    "title": "Stein variational gradient descent: A general purpose Bayesian inference algorithm",
    "authors": ["Q. Liu", "D. Wang"],
    "venue": "In NIPS,",
    "year": 2016
  }, {
    "title": "Construction of numerical time-average and stationary measures via Poisson equations",
    "authors": ["J.C. Mattingly", "A.M. Stuart", "M.V. Tretyakov"],
    "venue": "SIAM Journal on Numerical Analysis,",
    "year": 2010
  }, {
    "title": "Learning in implicit generative models",
    "authors": ["S. Mohamed", "B. Lakshminarayanan"],
    "venue": "Technical Report",
    "year": 2017
  }, {
    "title": "Dynamics of Labyrinthine pattern formation in magnetic fluids: A mean-field theory",
    "authors": ["F. Otto"],
    "venue": "Arch. Rational Mech. Anal., pp",
    "year": 1998
  }, {
    "title": "VAE learning via Stein variational gradient descent",
    "authors": ["Y. Pu", "Z. Gan", "R. Henao", "C. Li", "S. Han", "L. Carin"],
    "year": 2017
  }, {
    "title": "Unsupervised representation learning with deep convolutional generative adversarial networks",
    "authors": ["A. Radford", "L. Metz", "S. Chintala"],
    "venue": "Technical Report arXiv:1511.06434,",
    "year": 2016
  }, {
    "title": "Operator variational inference",
    "authors": ["R. Ranganath", "J. Altosaar", "D. Tran", "D.M. Blei"],
    "venue": "In NIPS,",
    "year": 2016
  }, {
    "title": "Variational inference with normalizing flows",
    "authors": ["D.J. Rezende", "S. Mohamed"],
    "venue": "In ICML,",
    "year": 2015
  }, {
    "title": "Stochastic backpropagation and approximate inference in deep generative models",
    "authors": ["D.J. Rezende", "S. Mohamed", "D. Wierstra"],
    "venue": "In ICML,",
    "year": 2014
  }, {
    "title": "The Fokker-Planck equation",
    "authors": ["H. Risken"],
    "year": 1989
  }, {
    "title": "An efficient learning procedure for deep machines",
    "authors": ["R. Salakhutdinov", "G. Hinton"],
    "venue": "Neural Computation,",
    "year": 1967
  }, {
    "title": "Markov chain Monte Carlo and variational inference: Bridging the gap",
    "authors": ["T. Salimans", "D.P. Kingma", "M. Welling"],
    "venue": "In ICML,",
    "year": 2015
  }, {
    "title": "Improved techniques for training GANs",
    "authors": ["T. Salimans", "I. Goodfellow", "W. Zaremba", "V. Cheung", "A. Radford", "X. Chen"],
    "venue": "In NIPS,",
    "year": 2016
  }, {
    "title": "Deep unsupervised learning using nonequilibrium thermodynamics",
    "authors": ["J. Sohl-Dickstein", "E.A. Weiss", "N. Maheswaranathan", "S. Ganguli"],
    "venue": "In ICML,",
    "year": 2015
  }, {
    "title": "Consistency and fluctuations for stochastic gradient",
    "authors": ["Y.W. Teh", "A.H. Thiery", "S.J. Vollmer"],
    "venue": "Langevin dynamics. JMLR,",
    "year": 2016
  }, {
    "title": "Improving variational auto-encoders using Householder flow",
    "authors": ["J.M. Tomczak", "M. Welling"],
    "venue": "Technical Report",
    "year": 2016
  }, {
    "title": "The variational Gaussian process",
    "authors": ["D. Tran", "R. Ranganath", "D.M. Blei"],
    "venue": "In ICLR,",
    "year": 2016
  }, {
    "title": "Pixel recurrent neural networks",
    "authors": ["A. van den Oord", "N. Kalchbrenner", "K. Kavukcuoglu"],
    "venue": "In ICML,",
    "year": 2016
  }, {
    "title": "Exploration of the (Non-)asymptotic bias and variance of stochastic gradient",
    "authors": ["S.J. Vollmer", "K.C. Zygalakis", "Y.W. Teh"],
    "venue": "Langevin dynamics. JMLR,",
    "year": 2016
  }, {
    "title": "Learning to draw samples: With application to amortized MLE for generative adversarial learning",
    "authors": ["D. Wang", "Q. Liu"],
    "venue": "In ICLR workshop,",
    "year": 2017
  }, {
    "title": "Bayesian learning via stochastic gradient Langevin dynamics",
    "authors": ["M. Welling", "Y.W. Teh"],
    "venue": "In ICML,",
    "year": 2011
  }, {
    "title": "Stochastic gradient monomial Gamma sampler",
    "authors": ["Y. Zhang", "C. Chen", "Z. Gan", "R. Henao", "L. Carin"],
    "venue": "In ICML,",
    "year": 2017
  }, {
    "title": "Energy-based generative adversarial networks",
    "authors": ["J. Zhao", "M. Mathieu", "Y. LeCun"],
    "venue": "In ICLR,",
    "year": 2017
  }],
  "id": "SP:94e67a0845a548e44f690fddb771371ab81f55c0",
  "authors": [{
    "name": "Changyou Chen",
    "affiliations": []
  }, {
    "name": "Chunyuan Li",
    "affiliations": []
  }, {
    "name": "Liqun Chen",
    "affiliations": []
  }, {
    "name": "Wenlin Wang",
    "affiliations": []
  }, {
    "name": "Yunchen Pu",
    "affiliations": []
  }, {
    "name": "Lawrence Carin",
    "affiliations": []
  }],
  "abstractText": "Two fundamental problems in unsupervised learning are efficient inference for latent-variable models and robust density estimation based on large amounts of unlabeled data. Algorithms for the two tasks, such as normalizing flows and generative adversarial networks (GANs), are often developed independently. In this paper, we propose the concept of continuous-time flows (CTFs), a family of diffusion-based methods that are able to asymptotically approach a target distribution. Distinct from normalizing flows and GANs, CTFs can be adopted to achieve the above two goals in one framework, with theoretical guarantees. Our framework includes distilling knowledge from a CTF for efficient inference, and learning an explicit energy-based distribution with CTFs for density estimation. Both tasks rely on a new technique for distribution matching within amortized learning. Experiments on various tasks demonstrate promising performance of the proposed CTF framework, compared to related techniques.",
  "title": "Continuous-Time Flows for Efficient Inference and Density Estimation"
}