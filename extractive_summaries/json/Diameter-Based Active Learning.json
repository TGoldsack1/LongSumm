{
  "sections": [{
    "heading": "1. Introduction",
    "text": "In many situations where a classifier is to be learned, it is easy to collect unlabeled data but costly to obtain labels. This has motivated the pool-based active learning model, in which a learner has access to a collection of unlabeled data points and is allowed to ask for individual labels in an adaptive manner. The hope is that choosing these queries intelligently will rapidly yield a low-error classifier, much more quickly than with random querying. A central focus of active learning is developing efficient querying strategies and understanding their label complexity.\nOver the past decade or two, there has been substantial progress in developing such rigorously-justified active learning schemes for general concept classes. For the most part, these schemes can be described as mellow: rather than focusing upon maximally informative points, they query any point whose label cannot reasonably be inferred from the information received so far. It is of interest to develop more aggressive strategies with better label complexity.\nAn exception to this general trend is the aggressive strategy of (Dasgupta, 2005), whose label complexity is known to be optimal in its dependence on a key parameter called the splitting index. However, this strategy has been primarily of theoretical interest because it is difficult to implement algorithmically. In this paper, we introduce a variant of the methodology that yields efficient algorithms. We show that\n1Department of Computer Science and Engineering, UC San Diego, La Jolla, CA, USA. Correspondence to: Christopher Tosh <ctosh@cs.ucsd.edu>, Sanjoy Dasgupta <dasgupta@cs.ucsd.edu>.\nProceedings of the 34 th International Conference on Machine Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017 by the author(s).\nit admits roughly the same label complexity bounds as well as having promising experimental performance.\nAs with the original splitting index result, we operate in the realizable setting, where data can be perfectly classified by some function h⇤ in the hypothesis class H. At any given time during the active learning process, the remaining candidates—that is, the elements of H consistent with the data so far—are called the version space. The goal of aggressive active learners is typically to pick queries that are likely to shrink this version space rapidly. But what is the right notion of size? Dasgupta (2005) pointed out that the diameter of the version space is what matters, where the distance between two classifiers is taken to be the fraction of points on which they make different predictions. Unfortunately, the diameter is a difficult measure to work with because it cannot, in general, be decreased at a steady rate. Thus the earlier work used a procedure that has quantifiable label complexity but is not conducive to implementation.\nWe take a fresh perspective on this earlier result. We start by suggesting an alternative, but closely related, notion of the size of a version space: the average pairwise distance between hypotheses in the version space, with respect to some underlying probability distribution ⇡ on H. This distribution ⇡ can be arbitrary—that is, there is no requirement that the target h⇤ is chosen from it—but should be chosen so that it is easy to sample from. When H consists of linear separators, for instance, a good choice would be a log-concave density, such as a Gaussian.\nAt any given time, the next query x is chosen roughly as follows:\n• Sample a collection of classifiers h 1 , h 2 , . . . , h m\nfrom ⇡ restricted to the current version space V .\n• Compute the distances between them; this can be done using just the unlabeled points.\n• Any candidate query x partitions the classifiers {h i } into two groups: those that assign it a + label (call these V +\nx ) and those that assign it a label (call these V x\n). Estimate the average-diameter after labeling x by the sum of the distances between classifiers h\ni\nwithin V + x , or those within V x , whichever is larger.\n• Out of the pool of unlabeled data, pick the x for which\nthis diameter-estimate is smallest.\nThis is repeated until the version space has small enough average diameter that a random sample from it is very likely to have error less than a user-specified threshold ✏. We show how all these steps can be achieved efficiently, as long as there is a sampler for ⇡.\nDasgupta (2005) pointed out that the label complexity of active learning depends on the underlying distribution, the amount of unlabeled data (since more data means greater potential for highly-informative points), and also the target classifier h⇤. That paper identifies a parameter called the splitting index ⇢ that captures the relevant geometry, and gives upper bounds on label complexity that are proportional to 1/⇢, as well as showing that this dependence is inevitable. For our modified notion of diameter, a different averaged splitting index is needed. However, we show that it can be bounded by the original splitting index, with an extra multiplicative factor of log(1/✏); thus all previouslyobtained label complexity results translate immediately for our new algorithm."
  }, {
    "heading": "2. Related Work",
    "text": "The theory of active learning has developed along several fronts.\nOne of these is nonparametric active learning, where the learner starts with a pool of unlabeled points, adaptively queries a few of them, and then fills in the remaining labels. The goal is to do this with as few errors as possible. (In particular, the learner does not return a classifier from some predefined parametrized class.) One scheme begins by building a neighborhood graph on the unlabeled data, and propagating queried labels along the edges of this graph (Zhu et al., 2003; Cesa-Bianchi et al., 2009; Dasarathy et al., 2015). Another starts with a hierarchical clustering of the data and moves down the tree, sampling at random until it finds clusters that are relatively pure in their labels (Dasgupta & Hsu, 2008). The label complexity of such methods have typically be given in terms of smoothness properties of the underlying data distribution (Castro & Nowak, 2008; Kpotufe et al., 2015).\nAnother line of work has focused on active learning of linear separators, by querying points close to the current guess at the decision boundary (Balcan et al., 2007; Dasgupta et al., 2009; Balcan & Long, 2013). Such algorithms are close in spirit to those used in practice, but their analysis to date has required fairly strong assumptions to the effect that the underlying distribution on the unlabeled points is logconcave. Interestingly, regret guarantees for online algorithms of this sort can be shown under far weaker conditions (Cesa-Bianchi et al., 2006).\nThe third category of results, to which the present paper belongs, considers active learning strategies for general concept classes H. Some of these schemes (Cohn et al., 1994; Dasgupta et al., 2007; Beygelzimer et al., 2009; Balcan et al., 2009; Zhang & Chaudhuri, 2014) are fairly mellow in the sense described earlier, using generalization bounds to gauge which labels can be inferred from those obtained so far. The label complexity of these methods can be bounded in terms of a quantity known as the disagreement coefficient (Hanneke, 2007). In the realizable case, the canonical such algorithm is that of (Cohn et al., 1994), henceforth referred to as CAL. Other methods use a prior distribution ⇡ over the hypothesis class, sometimes assuming that the target classifier is a random draw from this prior. These methods typically aim to shrink the mass of the version space under ⇡, either greedily and explicitly (Dasgupta, 2004; Guillory & Bilmes, 2009; Golovin et al., 2010) or implicitly (Freund et al., 1997). Perhaps the most widely-used of these methods is the latter, query-by-committee, henceforth QBC. As mentioned earlier, shrinking ⇡-mass is not an optimal strategy if low misclassification error is the ultimate goal. In particular, what matters is not the prior mass of the remaining version space, but rather how different these candidate classifiers are from each other. This motivates using the diameter of the version space as a yardstick, which was first proposed in (Dasgupta, 2005) and is taken up again here."
  }, {
    "heading": "3. Preliminaries",
    "text": "Consider a binary hypothesis class H, a data space X , and a distribution D over X . For mathematical convenience, we will restrict ourselves to finite hypothesis classes. (We can do this without loss of generality when H has finite VC dimension, since we only use the predictions of hypotheses on a pool of unlabeled points; however, we do not spell out the details of this reduction here.) The hypothesis distance induced by D over H is the pseudometric\nd(h, h0) := Pr x⇠D(h(x) 6= h0(x)).\nGiven a point x 2 X and a subset V ⇢ H, denote V + x\n= {h 2 V : h(x) = 1} and V\nx = V \\ V + x\n. Given a sequence of data points x 1 , . . . , x n\nand a target hypothesis h⇤, the induced version space is the set of hypotheses that are consistent with the target hypotheses on the sequence, i.e.\n{h 2 H : h(x i ) = h⇤(x i ) for all i = 1, . . . , n}."
  }, {
    "heading": "3.1. Diameter and the Splitting Index",
    "text": "The diameter of a set of hypotheses V ⇢ H is the maximal distance between any two hypotheses in V , i.e.\ndiam(V ) := max h,h 02V d(h, h0).\nWithout any prior information, any hypothesis in the version space could be the target. Thus the worst case error of any hypothesis in the version space is the diameter of the version space. The splitting index roughly characterizes the number of queries required for an active learning algorithm to reduce the diameter of the version space below ✏.\nWhile reducing the diameter of a version space V ⇢ H, we will sometimes identify pairs of hypotheses h, h0 2 V that are far apart and therefore need to be separated. We will refer to {h, h0} as an edge. Given a set of edges E = {{h\n1 , h0 1 }, . . . , {h n , h0 n }} ⇢ H 2 , we say a data point x ⇢- splits E if querying x separates at least a ⇢ fraction of the pairs, that is, if\nmax E+ x |, |E x  (1 ⇢)|E|\nwhere E+ x = E \\ H+x 2 and similarly for E x\n. When attempting to get accuracy ✏ > 0, we need to only eliminate edge of length greater than ✏. Define\nE ✏\n= {{h, h0} 2 E : d(h, h0) > ✏}.\nThe splitting index of a set V ⇢ H is a tuple (⇢, ✏, ⌧) such that for all finite edge-sets E ⇢ V\n2\n,\nPr x⇠D(x ⇢-splits E✏) ⌧.\nThe following theorem, due to Dasgupta (2005), bounds the sample complexity of active learning in terms of the splitting index. The ˜O notation hides polylogarithmic factors in d, ⇢, ⌧ , log 1/✏, and the failure probability .\nTheorem 1 (Dasgupta 2005). Suppose H is a hypothesis class with splitting index (⇢, ✏, ⌧). Then to learn a hypothesis with error ✏,\n(a) any active learning algorithm with  1/⌧ unlabeled samples must request at least 1/⇢ labels, and\n(b) if H has VC-dimension d, there is an active learning algorithm that draws\n˜O(d/(⇢⌧) log2(1/✏)) unlabeled data points and requests ˜O((d/⇢) log2(1/✏)) labels.\nUnfortunately, the only known algorithm satisfying (b) above is intractable for all but the simplest hypothesis classes: it constructs an ✏-covering of the hypothesis space and queries points which whittle away at the diameter of this covering. To overcome this intractability, we consider a slightly more benign setting in which we have a samplable prior distribution ⇡ over our hypothesis space H."
  }, {
    "heading": "3.2. An Average Notion of Diameter",
    "text": "With a prior distribution, it makes sense to shift away from the worst-case to the average-case. We define the average\ndiameter of a subset V ⇢ H as the expected distance between two hypotheses in V randomly drawn from ⇡, i.e.\n(V ) := E h,h 0⇠⇡| V\n[d(h, h0)]\nwhere ⇡| V\nis the conditional distribution induced by restricting ⇡ to V , that is, ⇡|\nV (h) = ⇡(h)/⇡(V ) for h 2 V . Intuitively, a version space with very small average diameter ought to put high weight on hypotheses that are close to the true hypothesis. Indeed, given a version space V with h⇤ 2 V , the following lemma shows that if (V ) is small enough, then a low error hypothesis can be found by two popular heuristics: random sampling and MAP estimation.\nLemma 2. Suppose V ⇢ H contains h⇤. Pick ✏ > 0.\n(a) (Random sampling) If (V )  ✏ ⇡| V (h⇤) then E h⇠⇡|\nV [d(h⇤, h)]  ✏. (b) (MAP estimation) Write p\nmap\n= max h2V ⇡|V (h). Pick 0 < ↵ < p\nmap\n. If\n(V )  2✏ (min{⇡| V (h⇤), p map ↵})2 ,\nthen d(h⇤, h)  ✏ for any h with ⇡| V (h) p map ↵.\nProof. Part (a) follows from\n(V ) = E h,h 0⇠⇡| V [d(h, h0)] ⇡| V (h⇤)E h⇠⇡| V [d(h⇤, h)].\nFor (b), take = min(⇡| V (h⇤), p map\n↵) and define V ⇡, = {h 2 V : ⇡| V (h) }. Note that V ⇡,\ncontains h⇤ as well as any h 2 V with ⇡|\nV (h) p map ↵. We claim diam(V\n⇡, ) is at most ✏. Suppose not. Then there exist h\n1 , h 2 2 V ⇡, satisfying d(h 1 , h 2 ) > ✏, implying\n(V ) = E h,h 0⇠⇡| V\n[d(h, h0)]\n2 · ⇡| V (h 1 ) · ⇡| V (h 2 ) · d(h 1 , h 2 ) > 2 2✏.\nBut this contradicts our assumption on (V ). Since both h, h⇤ 2 V\n⇡,\n, we have (b)."
  }, {
    "heading": "3.3. An Average Notion of Splitting",
    "text": "We now turn to defining an average notion of splitting. A data point x ⇢-average splits V if\nmax\n⇢ ⇡(V +\nx\n)\n2\n⇡(V )2 (V + x\n), ⇡(V x ) 2\n⇡(V )2 (V x )\n (1 ⇢) (V ).\nAnd we say a set S ⇢ H has average splitting index (⇢, ✏, ⌧) if for any subset V ⇢ S such that (V ) > ✏,\nPr x⇠D (x ⇢-average splits V ) ⌧.\nIntuitively, average splitting refers to the ability to significantly decrease the potential function\n⇡(V )2 (V ) = E h,h 0⇠⇡[ (h, h0 2 V ) d(h, h0)] with a single query.\nWhile this potential function may seem strange at first glance, it is closely related to the original splitting index. The following lemma, whose proof is deferred to Section 5, shows the splitting index bounds the average splitting index for any hypothesis class. Lemma 3. Let ⇡ be a probability measure over a hypothesis class H. If H has splitting index (⇢, ✏, ⌧), then it has average splitting index ( ⇢\n4dlog(1/✏)e , 2✏, ⌧).\nDasgupta (2005) derived the splitting indices for several hypothesis classes, including intervals and homogeneous linear separators. Lemma 3 implies average splitting indices within a log(1/✏) factor in these settings.\nMoreover, given access to samples from ⇡| V\n, we can easily estimate the quantities appearing in the definition of average splitting. For an edge sequence E = ({h\n1 , h0 1 }, . . . , {h n , h0 n }), define\n(E) := nX\ni=1\nd(h i , h0 i ).\nWhen h i , h0 i are i.i.d. draws from ⇡| V\nfor all i = 1, . . . , n, which we denote E ⇠ (⇡|\nV\n) 2⇥n, the random variables (E), (E\nx ), and (E+ x ) are unbiased estimators of the quantities appearing in the definition of average splitting. Lemma 4. Given E ⇠ (⇡|\nV\n) 2⇥n , we have\nE  1\nn (E)\n= (V ) and E\n 1\nn (E+ x ) =\n⇡(V + x ) 2\n⇡(V )2 (V + x )\nfor any x 2 X . Similarly for E x and V x .\nProof. From definitions and linearity of expectations, it is easy to observe E[ (E)] = n (V ). By the independence of h\ni , h0 i , we additionally have\nE  1\nn (E+ x ) =\n1 n E\n2 4 X\n{h i ,h 0 i }2E+ x\nd(h i , h0 i )\n3\n5\n=\n1 n E\n2 4 X\n{h i ,h 0 i\n}2E [h i\n2 V + x ] [h0 i 2 V + x ] d(h i , h0 i )\n3\n5\n=\n1\nn\nX\n{h i ,h 0 i }2E\n✓ ⇡(V +\nx\n)\n⇡(V )\n◆ 2\nE ⇥ d(h\ni , h0 i ) |h i , h0 i 2 V + x\n⇤\n=\n✓ ⇡(V +\nx\n)\n⇡(V )\n◆ 2\n(V + x ).\nRemark: It is tempting to define average splitting in terms of the average diameter as\nmax{ (V + x ), (V x )}  (1 ⇢) (V ). However, this definition does not satisfy a nice relationship with the splitting index. Indeed, there exist hypothesis classes V for which there are many points which 1/4-split E for any E ⇢ V\n2\nbut for which every x 2 X satisfies\nmax{ (V + x ), (V x )} ⇡ (V ). This observation is formally proven in the appendix."
  }, {
    "heading": "4. An Average Splitting Index Algorithm",
    "text": "Suppose we are given a version space V with average splitting index (⇢, ✏, ⌧). If we draw ˜O(1/⌧) points from the data distribution then, with high probability, one of these will ⇢- average split V . Querying that point will result in a version space V 0 with significantly smaller potential ⇡(V 0)2 (V 0).\nIf we knew the value ⇢ a priori, then Lemma 4 combined with standard concentration bounds (Hoeffding, 1963; Angluin & Valiant, 1977) would give us a relatively straightforward procedure to find a good query point:\n1. Draw E0 ⇠ (⇡| V ) 2⇥M and compute the empirical estimate b (V ) = 1\nM\n(E0).\n2. Draw E ⇠ (⇡| V ) 2⇥N for N depending on ⇢ and b .\n3. For suitable M and N , it will be the case that with high probability, for some x,\n1\nN max\n(E+\nx ), (E x )\n⇡ (1 ⇢)b .\nQuerying that point will decrease the potential.\nHowever, we typically would not know the average splitting index ahead of time. Moreover, it is possible that the average splitting index may change from one version space to the next. In the next section, we describe a query selection procedure that adapts to the splittability of the current version space."
  }, {
    "heading": "4.1. Finding a Good Query Point",
    "text": "Algorithm 2, which we term SELECT, is our query selection procedure. It takes as input a sequence of data points x 1 , . . . , x m\n, at least one of which ⇢-average splits the current version space, and with high probability finds a data point that ⇢/8-average splits the version space.\nSELECT proceeds by positing an optimistic estimate of ⇢, which we denote b⇢\nt\n, and successively halving it until we are\nAlgorithm 1 DBAL Input: Hypothesis class H, prior distribution ⇡ Initialize V = H while 1\nn (E) 3✏ 4\nfor E ⇠ (⇡| V ) 2⇥n do Draw m data points x = (x\n1 , . . . , x m )\nQuery point x i = SELECT(V,x) and set V to be consistent with the result end while return Current version space V in the form of the queried points (x\n1 , h⇤(x 1 )), . . . , (x K , h⇤(x K ))\nAlgorithm 2 SELECT Input: Version space V , prior ⇡, data x = (x\n1 , . . . , x m )\nSet b⇢ 1 = 1/2 for t = 1, 2, . . . do\nDraw E0 ⇠ (⇡| V ) 2⇥m t and compute b t = 1\nm\nt (E0) Draw E ⇠ (⇡|\nV\n)\n2⇥n t\nIf 9x i s.t. 1 n\nt\nmax (E+\nx\ni\n), (E x\ni\n)  (1 b⇢ t ) b t\n, then halt and return x\ni\nOtherwise, let b⇢ t+1 = b⇢ t /2 end for\nconfident that we have found a point that b⇢ t -average splits the version space. In order for this algorithm to succeed, we need to choose n\nt and m t such that with high probability (1) b\nt is an accurate estimate of (V ) and (2) our halting condition will be true if b⇢\nt is within a constant factor of ⇢ and false otherwise. The following lemma, whose proof is in the appendix, provides such choices for n\nt and m t .\nLemma 5. Let ⇢, ✏, 0 > 0 be given. Suppose that version space V satisfies (V ) > ✏. In SELECT, fix a round t and data point x 2 X that exactly ⇢-average splits V (that is, max{⇡|\nV (V + x ) 2 (V + x ), ⇡| V (V x ) 2 (V x )} = (1 ⇢) (V )). If\nm t 48b⇢2 t ✏ log 4 0 and n t\nmax ( 32\nb⇢2 t\nb\nt\n, 40\nb 2\nt\n) log 4\n0\nthen with probability 1 0 ,\nb\nt (1 b⇢ t /4) (V ) and\n(a) if ⇢  b⇢ t /2, then\n1\nn t\nmax (E+\nx ), (E x )\n> (1 b⇢\nt\n)\nb\nt\n.\n(b) If ⇢ 2b⇢ t , then\n1\nn t\nmax (E+\nx ), (E x )  (1 b⇢ t ) b t .\nGiven the above lemma, we can establish a bound on the number of rounds and the total number of hypotheses SELECT needs to find a data point that ⇢/8-average splits the version space.\nTheorem 6. Suppose that SELECT is called with a version space V with (V ) ✏ and a collection of points x 1 , . . . , x m such that at least one of x i\n⇢-average splits V . If\n0  /(2m(2 + log(1/⇢))), then with probability at least 1 , SELECT returns a point x\ni that (⇢/8)-average splits V , finishing in less than dlog(1/⇢)e + 1 rounds and sampling O ⇣⇣ 1\n✏⇢\n2 + log(1/⇢)\n(V )\n2\n⌘ log 1\n0\n⌘ hypotheses in total.\nRemark 1: It is possible to modify SELECT to find a point x i\nthat (c⇢)-average splits V for any constant c < 1 while only having to draw O(1) more hypotheses in total. First note that by halving b⇢\nt at each step, we immediately give up a factor of two in our approximation. This can be made smaller by taking narrower steps. Additionally, with a constant factor increase in m\nt and n t , the approximation ratios in Lemma 5 can be set to any constant.\nRemark 2: At first glance, it appears that SELECT requires us to know ⇢ in order to calculate\n0 . However, a crude lower bound on ⇢ suffices. Such a bound can always be found in terms of ✏. This is because any version space is (✏/2, ✏, ✏/2)-splittable (Dasgupta, 2005, Lemma 1). By Lemma 3, so long as ⌧ is less than ✏/4, we can substitute\n✏ 8dlog(2/✏)e for ⇢ in when we compute 0.\nProof of Theorem 6. Let T := dlog(1/⇢)e + 1. By Lemma 5, we know that for rounds t = 1, . . . , T , we don’t return any point which does worse than b⇢\nt /2-average splits V with probability 1 /2. Moreover, in the T -th round, it will be the case that ⇢/4  b⇢\nT  ⇢/2, and therefore, with probability 1 /2, we will select a point which does no worse than b⇢\nT /2-average split V , which in turn does no worse than ⇢/8-average split V .\nNote that we draw m t + n t hypotheses at each round. By Lemma 5, for each round b\nt\n3 (V )/4 3✏/4. Thus\n# of hypotheses drawn = TX\nt=1\nm t + n t\n=\nTX\nt=1\n48\nb⇢2 t ✏ +\n32\nb⇢2 t\nb\nt\n+\n40 b 2\nt\n! log 4\n0\n TX\nt=1\n✓ 96\n✏b⇢2 t\n+\n72\n(V )2\n◆ log 4\n0\nGiven b⇢ t = 1/2t and T  2 + log 1/⇢, we have TX\nt=1\n1\nb⇢2 t\n=\nTX\nt=1\n2 2t \nTX\nt=1\n2\nt\n! 2\n ⇣ 2 2+log 1/⇢ ⌘ 2 = 16\n⇢2 .\nPlugging in 0  2m(2+log(1/⇢))\n, we recover the theorem statement."
  }, {
    "heading": "4.2. Active Learning Strategy",
    "text": "Using the SELECT procedure as a subroutine, Algorithm 1, henceforth DBAL for Diameter-based Active Learning, is our active learning strategy. Given a hypothesis class with average splitting index (⇢, ✏/2, ⌧), DBAL queries data points provided by SELECT until it is confident (V ) < ✏.\nDenote by V t the version space in the t-th round of DBAL. The following lemma, which is proven in the appendix, demonstrates that the halting condition (that is, (E) < 3✏n/4, where E consists of n pairs sampled from (⇡|\nV\n) 2) guarantees that with high probability DBAL stops when (V\nt\n) is small.\nLemma 7. The following holds for DBAL:\n(a) Suppose that for all t = 1, 2, . . . ,K that (V t ) > ✏. Then the probability that the termination condition is\never true for any of those rounds is bounded above by\nK exp ✏n\n32\n.\n(b) Suppose that for some t = 1, 2, . . . ,K that (V t )  ✏/2. Then the probability that the termination condition is not true in that round is bounded above by\nK exp ✏n\n48\n.\nGiven the guarantees on the SELECT procedure in Theorem 6 and on the termination condition provided by Lemma 7, we get the following theorem.\nTheorem 8. Suppose that H has average splitting index (⇢, ✏/2, ⌧). Then DBAL returns a version space V satisfying (V )  ✏ with probability at least 1 while using the following resources:\n(a) K  8 ⇢\n⇣ log 2\n✏\n+ 2 log\n1\n⇡(h ⇤ )\n⌘ rounds, with one label\nper round,\n(b) m  1 ⌧ log 2K unlabeled data points sampled per\nround, and\n(c) n  O ⇣⇣ 1\n✏⇢\n2 + log(1/⇢)\n✏\n2\n⌘ log mK + log log 1\n✏\n⌘ hy-\npotheses sampled per round.\nProof. From definition of the average splitting index, if we draw m = 1\n⌧\nlog\n2K unlabeled points per round, then with probability 1 /2, each of the first K rounds will have at least one data point that ⇢-average splits the current version space. In each such round, if the version space has average diameter at least ✏/2, then with probability 1 /4 SELECT will return a data point that ⇢/8-average splits the current version space while sampling no more\nthan n = O ⇣⇣ 1\n✏⇢\n2 + 1\n✏\n2 log 1\n⇢\n⌘ log mK log 1 ✏ ⌘ hypotheses\nper round by Theorem 6.\nBy Lemma 7, if the termination check uses n0 = O 1\n✏\nlog\n1 hypotheses per round, then with probability\n1 /4 in the first K rounds the termination condition will never be true when the current version space has average diameter greater than ✏ and will certainly be true if the current version space has diameter less than ✏/2.\nThus it suffices to bound the number of rounds in which we can ⇢/8-average split the version space before encountering a version space with ✏/2.\nSince the version space is always consistent with the true hypothesis h⇤, we will always have ⇡(V\nt ) ⇡(h⇤). After K = 8\n⇢\n⇣ log 2\n✏\n+ 2 log\n1\n⇡(h ⇤ )\n⌘ rounds of ⇢/8-average split-\nting, we have\n⇡(h⇤)2 (V K )  ⇡(V K ) 2 (V K )\n ⇣ 1 ⇢\n8\n⌘ K\n⇡(V 0 ) 2 (V 0 )\n ⇡(h ⇤ ) 2✏\n2\nThus in the first K rounds, we must terminate with a version space with average diameter less than ✏."
  }, {
    "heading": "5. Proof of Lemma 3",
    "text": "In this section, we give the proof of the following relationship between the original splitting index and our average splitting index.\nLemma 3. Let ⇡ be a probability measure over a hypothesis class H. If H has splitting index (⇢, ✏, ⌧), then it has average splitting index ( ⇢\n4dlog(1/✏)e , 2✏, ⌧).\nThe first step in proving Lemma 3 is to relate the splitting index to our estimator (·). Intuitively, splittability says that for any set of large edges there are many data points which remove a significant fraction of them. One may suspect this should imply that if a set of edges is large on average, then there should be many data points which remove a significant fraction of their weight. The following lemma confirms this suspicion.\nLemma 9. Suppose that V ⇢ H has splitting index (⇢, ✏, ⌧), and say E = ({h\n1 , h0 1 }, . . . , {h n , h0 n }) is a sequence of hypothesis pairs from V satisfying 1\nn (E) > 2✏. Then if x ⇠ D, we have with probability at least ⌧ ,\nmax (E+\nx ), (E x )\n ✓ 1 ⇢ 4dlog(1/✏)e ◆ (E).\nProof. Consider partitioning E as\nE 0 = {{h, h0} 2 E : d(h, h0) < ✏} and E\nk = {{h, h0} 2 E : d(h, h0) 2 [2k 1✏, 2k✏) for k = 1, . . . ,K with K = dlog 1\n✏\ne. Then E 0 , . . . , E K\nare all disjoint and their union is E. Define E\n1:K = [K k=1 E k .\nWe first claim that (E 1:K ) > (E 0 ). This follows from the observation that because (E) 2n✏ and each edge in E\n0\nhas length less than ✏, we must have\n(E 1:K ) = (E) (E 0 ) > 2n✏ n✏ > (E 0 ).\nNext, observe that because each edge {h, h0} 2 E k\nwith k 1 satisfies d(h, h0) 2 [2k 1✏, 2k✏), we have\n(E 1:K ) =\nKX\nk=1\nX\n{h,h0}2E k\nd(h, h0)  KX\nk=1\n2 k✏|E k |.\nSince there are only K summands on the right, at least one of these must be larger than (E\n1:K )/K. Let k denote that index and let x be a point which ⇢-splits E\nk\n. Then we have\n((E 1:K ) +\nx\n)  (E 1:K ) (E k \\ (E k ) +\nx\n)\n (E 1:K ) ⇢2k 1✏|E k |  ⇣ 1 ⇢\n2K\n⌘ (E\n1:K\n).\nSince (E 1:K ) (E 0 ), we have\n(E+ x )  (E 0 ) +\n⇣ 1 ⇢\n2K\n⌘ (E\n1:K\n)\n ⇣ 1 ⇢\n4K\n⌘ (E).\nSymmetric arguments show the same holds for E x .\nFinally, by the definition of splitting, the probability of drawing a point x which ⇢-splits E\nk is at least ⌧ , giving us the lemma.\nWith Lemma 9 in hand, we are now ready to prove Lemma 3.\nProof of Lemma 3. Let V ⇢ H such that (V ) > 2✏. Suppose that we draw n edges E i.i.d. from ⇡|\nV and draw a data point x ⇠ D. Then Hoeffding’s inequality (Hoeffding, 1963), combined with Lemma 4, tells us that there exist sequences ✏\nn , n & 0 such that with probability at least 1 3\nn\n, the following hold simultaneously:\n• (V ) ✏ n  1 n (E)  (V ) + ✏ n ,\n• 1 n (E+ x ) ⇡(V +x )2 ⇡(V ) 2 (V + x ) ✏ n , and\n• 1 n (E x ) ⇡(V x )2 ⇡(V ) 2 (V x ) ✏ n .\nFor ✏ n small enough, we have that (V ) ✏ n > 2✏. Combining the above with Lemma 9, we have with probability at least ⌧ 3\nn\n,\nmax\n⇢ ⇡(V +\nx\n)\n2\n⇡(V )2 (V + x\n), ⇡(V x ) 2\n⇡(V )2 (V x )\n✏\nn\n 1 n max{ (E+ x ), (E x )}  ✓ 1 ⇢\n4dlog(1/✏)e ◆ (E) n\n ✓ 1 ⇢ 4dlog(1/✏)e ◆ ( (V ) + ✏ n )\nBy taking n ! 1, we have ✏ n , n & 0, giving us the lemma."
  }, {
    "heading": "6. Simulations",
    "text": "We compared DBAL against the baseline passive learner as well as two other generic active learning strategies: CAL\nand QBC. CAL proceeds by randomly sampling a data point and querying it if its label cannot be inferred from previously queried data points. QBC uses a prior distribution ⇡ and maintains a version space V . Given a randomly sampled data point x, QBC samples two hypotheses h, h0 ⇠ ⇡|\nV and queries x if h(x) 6= h0(x). We tested on two hypothesis classes: homogeneous, or through-the-origin, linear separators and k-sparse monotone disjunctions. In each of our simulations, we drew our target h⇤ from the prior distribution. After each query, we estimated the average diameter of the version space. We repeated each simulation several times and plotted the average performance of each algorithm.\nHomogeneous linear separators The class of ddimensional homogeneous linear separators can be identified with elements of the d-dimensional unit sphere. That is, a hypothesis h 2 Sd 1 acts on a data point x 2 Rd via the sign of their inner product:\nh(x) := sign(hh, xi).\nIn our simulations, both the prior distribution and the data distribution are uniform over the unit sphere. Although there is no known method to exactly sample uniformly from the version space, Gilad-Bachrach et al. (2005) demonstrated that using samples generated by the hit-andrun Markov chain works well in practice. We adopted this approach for our sampling tasks.\nFigure 1 shows the results of our simulations on homogeneous linear separators.\nSparse monotone disjunctions A k-sparse monotone disjunction is a disjunction of k positive literals. Given a Boolean vector x 2 {0, 1}n, a monotone disjunction h classifies x as positive if and only if x\ni = 1 for some positive literal i in h.\nIn our simulations, each data point is a vector whose coordinates are i.i.d. Bernoulli random variables with parameter p. The prior distribution is uniform over all k-sparse monotone disjunctions. When k is constant, it is possible to sample from the prior restricted to the version space in expected polynomial time using rejection sampling.\nThe results of our simulations on k-sparse monotone disjunctions are in Figure 2."
  }, {
    "heading": "Acknowledgments",
    "text": "The authors are grateful to the reviewers for their feedback and to the NSF for support under grants IIS-1162581 and DGE-1144086. Part of this work was done at the Simons Institute for Theoretical Computer Science, Berkeley, as part of a program on the foundations of machine learning. CT additionally thanks Daniel Hsu and Stefanos Poulis for helpful discussions."
  }],
  "year": 2017,
  "references": [{
    "title": "Fast probabilistic algorithms for hamiltonian circuits and matchings",
    "authors": ["Angluin", "Dana", "Valiant", "Leslie G"],
    "venue": "In Proceedings of the ninth annual ACM symposium on Theory of computing,",
    "year": 1977
  }, {
    "title": "Margin based active learning",
    "authors": ["Balcan", "Maria-Florina", "Broder", "Andrei", "Zhang", "Tong"],
    "venue": "In International Conference on Computational Learning Theory,",
    "year": 2007
  }, {
    "title": "Agnostic active learning",
    "authors": ["Balcan", "Maria-Florina", "Beygelzimer", "Alina", "Langford", "John"],
    "venue": "Journal of Computer and System Sciences,",
    "year": 2009
  }, {
    "title": "Minimax bounds for active learning",
    "authors": ["Castro", "Rui M", "Nowak", "Robert D"],
    "venue": "IEEE Transactions on Information Theory,",
    "year": 2008
  }, {
    "title": "Worst-case analysis of selective sampling for linear classification",
    "authors": ["Cesa-Bianchi", "Nicolo", "Gentile", "Claudio", "Zaniboni", "Luca"],
    "venue": "Journal of Machine Learning Research,",
    "year": 2006
  }, {
    "title": "Learning unknown graphs",
    "authors": ["Cesa-Bianchi", "Nicolo", "Gentile", "Claudio", "Vitale", "Fabio"],
    "venue": "In International Conference on Algorithmic Learning Theory,",
    "year": 2009
  }, {
    "title": "Improving generalization with active learning",
    "authors": ["Cohn", "David", "Atlas", "Les", "Ladner", "Richard"],
    "venue": "Machine learning,",
    "year": 1994
  }, {
    "title": "An efficient graph based active learning algorithm with application to nonparametric classification",
    "authors": ["Dasarathy", "Gautam", "Nowak", "Robert", "Zhu", "Xiaojin"],
    "venue": "In Proceedings of The 28th Conference on Learning Theory, pp",
    "year": 2015
  }, {
    "title": "Analysis of a greedy active learning strategy",
    "authors": ["Dasgupta", "Sanjoy"],
    "venue": "In Advances in neural information processing systems,",
    "year": 2004
  }, {
    "title": "Coarse sample complexity bounds for active learning",
    "authors": ["Dasgupta", "Sanjoy"],
    "venue": "In Advances in neural information processing systems,",
    "year": 2005
  }, {
    "title": "Hierarchical sampling for active learning",
    "authors": ["Dasgupta", "Sanjoy", "Hsu", "Daniel"],
    "venue": "In Proceedings of the 25th international conference on Machine learning,",
    "year": 2008
  }, {
    "title": "A general agnostic active learning algorithm",
    "authors": ["Dasgupta", "Sanjoy", "Monteleoni", "Claire", "Hsu", "Daniel J"],
    "venue": "In Advances in neural information processing systems,",
    "year": 2007
  }, {
    "title": "Analysis of perceptron-based active learning",
    "authors": ["Dasgupta", "Sanjoy", "Kalai", "Adam Tauman", "Monteleoni", "Claire"],
    "venue": "Journal of Machine Learning Research,",
    "year": 2009
  }, {
    "title": "Selective sampling using the query by committee algorithm",
    "authors": ["Freund", "Yoav", "Seung", "H Sebastian", "Shamir", "Eli", "Tishby", "Naftali"],
    "venue": "Machine learning,",
    "year": 1997
  }, {
    "title": "Near-optimal bayesian active learning with noisy observations",
    "authors": ["Golovin", "Daniel", "Krause", "Andreas", "Ray", "Debajyoti"],
    "venue": "In Advances in Neural Information Processing Systems,",
    "year": 2010
  }, {
    "title": "Average-case active learning with costs",
    "authors": ["Guillory", "Andrew", "Bilmes", "Jeff"],
    "venue": "In International Conference on Algorithmic Learning Theory,",
    "year": 2009
  }, {
    "title": "A bound on the label complexity of agnostic active learning",
    "authors": ["Hanneke", "Steve"],
    "venue": "In Proceedings of the 24th international conference on Machine learning,",
    "year": 2007
  }, {
    "title": "Probability inequalities for sums of bounded random variables",
    "authors": ["Hoeffding", "Wassily"],
    "venue": "Journal of the American statistical association,",
    "year": 1963
  }, {
    "title": "Beyond disagreement-based agnostic active learning",
    "authors": ["Zhang", "Chicheng", "Chaudhuri", "Kamalika"],
    "venue": "In Advances in Neural Information Processing Systems,",
    "year": 2014
  }, {
    "title": "Semi-supervised learning using gaussian fields and harmonic functions",
    "authors": ["Zhu", "Xiaojin", "Ghahramani", "Zoubin", "Lafferty", "John"],
    "venue": "In Proceedings of the 20th International Conference on Machine Learning,",
    "year": 2003
  }],
  "id": "SP:61d8996dc416b1966bfa8e713584bbabc5dee47e",
  "authors": [{
    "name": "Christopher Tosh",
    "affiliations": []
  }, {
    "name": "Sanjoy Dasgupta",
    "affiliations": []
  }],
  "abstractText": "In many situations where a classifier is to be learned, it is easy to collect unlabeled data but costly to obtain labels. This has motivated the pool-based active learning model, in which a learner has access to a collection of unlabeled data points and is allowed to ask for individual labels in an adaptive manner. The hope is that choosing these queries intelligently will rapidly yield a low-error classifier, much more quickly than with random querying. A central focus of active learning is developing efficient querying strategies and understanding their label complexity.",
  "title": "Diameter-Based Active Learning"
}