{
  "sections": [{
    "heading": "1. Introduction",
    "text": "Increasing use of machine learning in adversarial settings has motivated a series of efforts investigating the extent to which learning approaches can be subverted by malicious parties. An important class of such attacks involves adversaries changing their behaviors, or features of the environment, to effect an incorrect prediction. Most previous efforts study this problem as an interaction between a single learner and a single attacker (Brückner & Scheffer, 2011; Dalvi et al., 2004; Li & Vorobeychik, 2014; Zhou et al., 2012). However, in reality attackers often target a broad array of potential victim organizations. For example, they craft generic spam templates and generic malware, and then disseminate these widely to maximize impact. The resulting\n*Equal contribution 1Department of EECS, Vanderbilt University, Nashville, TN, USA 2Computer Science Department, Amherst College, Amherst, MA, USA. Correspondence to: Yevgeniy Vorobeychik <eug.vorobey@gmail.com>.\nProceedings of the 35 th International Conference on Machine Learning, Stockholm, Sweden, PMLR 80, 2018. Copyright 2018 by the author(s).\necology of attack targets reflects not a single learner, but many such learners, all making autonomous decisions about how to detect malicious content, although these decisions often rely on similar training datasets.\nWe model the resulting game as an interaction between multiple learners, who simultaneously learn linear regression models, and an attacker, who observes the learned models (as in white-box attacks (Šrndic & Laskov, 2014)), and modifies the original feature vectors at test time in order to induce incorrect predictions. Crucially, rather than customizing the attack to each learner (as in typical models), the attacker chooses a single attack for all learners. We term the resulting game a Multi-Learner Stackelberg Game, to allude to its two stages, with learners jointly acting as Stackelberg leaders, and the attacker being the follower. Our first contribution is the formal model of this game. Our second contribution is to approximate this game by deriving upper bounds on the learner loss functions. The resulting approximation yields a game in which there always exists a symmetric equilibrium, and this equilibrium is unique. In addition, we prove that this unique equilibrium can be computed by solving a convex optimization problem. Our third contribution is to show that the equilibrium of the approximate game is robust, both theoretically (by showing it to be equivalent to a particular robust optimization problem), and through extensive experiments, which demonstrate it to be much more robust to attacks than standard regularization approaches.\nRelated Work Both attacks on and defenses of machine learning approaches have been studied within the literature on adversarial machine learning (Brückner & Scheffer, 2011; Dalvi et al., 2004; Li & Vorobeychik, 2014; Zhou et al., 2012; Lowd & Meek, 2005). These approaches commonly assume a single learner, and consider either the problem of finding evasions against a fixed model (Dalvi et al., 2004; Lowd & Meek, 2005; Šrndic & Laskov, 2014), or algorithmic approaches for making learning more robust to attacks (Russu et al., 2016; Brückner & Scheffer, 2011; Dalvi et al., 2004; Li & Vorobeychik, 2014; 2015). Most of these efforts deal specifically with classification learning, but several consider adversarial tampering with regression models (Alfeld et al., 2016; Grosshans et al., 2013), although still within a single-learner and single-attacker framework. Stevens & Lowd (2013) study the algorithmic problem of\nattacking multiple linear classifiers, but did not consider the associated game among classifiers.\nOur work also has a connection to the literature on security games with multiple defenders (Laszka et al., 2016; Smith et al., 2017; Vorobeychik et al., 2011). The key distinction with our paper is that in multi-learner games, the learner strategy space is the space of possible models in a given model class, whereas prior research has focused on significantly simpler strategies (such as protecting a finite collection of attack targets)."
  }, {
    "heading": "2. Model",
    "text": "We investigate the interactions between a collection of learners N = {1, 2, ..., n} and an attacker in regression problems, modeled as a Multi-Learner Stackelberg Game (MLSG). At the high level, this game involves two stages: first, all learners choose (train) their models from data, and second, the attacker transforms test data (such as features of the environment, at prediction time) to achieve malicious goals. Below, we first formalize the model of the learners and the attacker, and then formally describe the full game."
  }, {
    "heading": "2.1. Modeling the Players",
    "text": "At training time, a set of training data (X,y) is drawn from an unknown distribution D. X 2 Rm⇥d is the training sample and y 2 Rm⇥1 is a vector of values of each data in X. We let xj 2 Rd⇥1 denote the jth instance in the training sample, associated with a corresponding value yj 2 R from y. Hence, X = [x1, ...,xm]> and y = [y1, y2, ..., ym]>. On the other hand, test data can be generated either from D, the same distribution as the training data, or from D0 , a modification of D generated by an attacker. The nature of such malicious modifications is described below. We let (0   1) represent the probability that a test instance is drawn from D0 (i.e., the malicious distribution), and 1 be the probability that it is generated from D.\nThe action of the ith learner is to select a d⇥ 1 vector ✓i as the parameter of the linear regression function ˆyi = X✓i, where ˆyi is the predicted values for data X. The expected cost function of the ith learner at test time is then\nci(✓i,D 0 ) = E(X0 ,y)⇠D0 [`(X 0 ✓i,y)]\n+ (1 )E(X,y)⇠D[`(X✓i,y)]. (1)\nwhere `(ˆy,y) = ||ˆy y||22. That is, the cost function of a learner i is a combination of its expected cost from both the attacker and the honest source.\nEvery instance (x, y) generated according to D is, with probability , maliciously modified by the attacker into another, (x0, y), as follows. We assume that the attacker has an instance-specific target z(x), and wishes that the\nprediction made by each learner i on the modified instance, ŷ = ✓>i x 0 , is close to this target. We measure this objective for the attacker by `(ˆy, z) = ||ˆy z||22 for a vector of predicted and target values ˆy and z, respectively. In addition, the attacker incurs a cost of transforming a distribution D into D0 , denoted by R(D0 ,D).\nAfter a dataset (X 0 ,y) is generated in this way by the attacker, it is used simultaneously against all the learners. This is natural in most real attacks: for example, spam templates are commonly generated to be used broadly, against many individuals and organizations, and, similarly, malware executables are often produced to be generally effective, rather than custom made for each target. The expected cost function of the attacker is then a sum of its total expected cost for all learners plus the cost of transforming D into D0 with coefficient > 0:\nca({✓i}ni=1,D 0 ) =\nnX\ni=1\nE(X0 ,y)⇠D0 [`(X 0 ✓i, z)]+ R(D 0 ,D).\n(2)\nAs is typical, we estimate the cost functions of the learners and the attacker using training data (X,y), which is also used to simulate attacks. Consequently, the cost functions of each learner and the attacker are estimated by\nci(✓i,X 0 ) = `(X 0 ✓i,y) + (1 )`(X✓i,y) (3)\nand\nca({✓i}ni=1,X 0 ) =\nnX\ni=1\n`(X 0 ✓i, z) + R(X 0 ,X) (4)\nwhere the attacker’s modification cost is measured by R(X\n0 ,X) = ||X0 X||2F , the squared Frobenius norm."
  }, {
    "heading": "2.2. The Multi-Learner Stackerlberg Game",
    "text": "We are now ready to formally define the game between the n learners and the attacker. The MLSG has two stages: in the first stage, learners simultaneously select their model parameters ✓i, and in the second stage, the attacker makes its decision (manipulating X 0 ) after observing the learners’ model choices {✓i}ni=1. We assume that the proposed game satisfies the following assumptions:\n1. The learners have complete information about parameters , and z. This is a strong assumption, and we relax it in our experimental evaluation (Section 6), providing guidance on how to deal with uncertainty about these parameters.\n2. Each learner has the same action (model parameter) space ⇥ ✓ Rd⇥1 which is nonempty, compact and convex. The action space of the attacker is Rm⇥d.\n3. The columns of the training data X are linearly independent.\nWe use Multi-Learner Stackelberg Equilibrium (MLSE) as the solution for the MLSG, defined as follows. Definition 1 (Multi-Learner Stackelberg Equilibrium (MLSE)). An action profile ({✓⇤i }ni=1,X⇤) is an MLSE if it satisfies\n✓⇤i = argmin ✓i2⇥ ci(✓i,X ⇤ (✓)), 8i 2 N\ns.t. X⇤(✓) = argmin X02Rm⇥d ca({✓i}ni=1,X 0 ).\n(5)\nwhere ✓ = {✓i}ni=1 constitutes the joint actions of the learners.\nAt the high level, the MLSE is a blend between a Nash equilibrium (among all learners) and a Stackelberg equilibrium (between the learners and the attacker), in which the attacker plays a best response to the observed models ✓ chosen by the learners, and given this behavior by the attacker, all learners’ models ✓i are mutually optimal.\nThe following lemma characterizes the best response of the attacker to arbitrary model choices {✓i}ni=1 by the learners. Lemma 1 (Best Response of the Attacker). Given {✓i}ni=1, the best response of the attacker is\nX ⇤ = ( X+ z\nnX\ni=1\n✓>i )( I+ nX\ni=1\n✓i✓ > i ) 1. (6)\nProof. We derive the best response of the attacker by using the first order condition. The details are included in the supplementary material.\nLemma 1 shows that the best response of the attacker, X⇤, has a closed form solution, as a function of learner model parameters {✓i}ni=1. Let ✓ i = {✓j}j 6=i, then ci(✓i,X⇤) in Eq. (5) can be rewritten as\nci(✓i,✓ i) = `(X ⇤ (✓i,✓ i)✓i,y) + (1 )`(X✓i,y).\n(7) Using Eq. (7), we can then define a Multi-Learner Nash Game (MLNG): Definition 2 (Multi-Learner Nash Game (MLNG)). A static game, denoted as hN ,⇥, (ci)i is a Multi-Learner Nash Game if\n1. The set of players is the set of learners N , 2. the cost function of each learner i is ci(✓i,✓ i) defined\nin Eq. (7), 3. all learners simultaneously select ✓i 2 ⇥.\nWe can then define Multi-Learner Nash Equilibrium (MLNE) of the game hN ,⇥, (ci)i: Definition 3 (Multi-Learner Nash Equilibrium (MLNE)). An action profile ✓⇤ = {✓⇤i }ni=1 is a Multi-Learner Nash Equilibrium of the MLNG hN ,⇥, (ci)i if it is the solution of the following set of coupled optimization problem:\nmin ✓i2⇥ ci(✓i,✓ i), 8i 2 N . (8)\nCombining the results above, the following result is immediate. Theorem 1. An action profile ({✓⇤i }ni=1,X⇤) is an MLSE of the multi-learner Stackelberg game if and only if {✓⇤i }ni=1 is a MLNE of the multi-learner Nash game hN ,⇥, (ci)i, with X\n⇤ defined in Eq. (6) for ✓i = ✓⇤i , 8i 2 N .\nTheorem 1 shows that we can reduce the original (n+ 1)- player Stackelberg game to an n-player simultaneous-move game hN ,⇥, (ci)i. In the remaining sections, we focus on analyzing the Nash equilibrium of this multi-learner Nash game."
  }, {
    "heading": "3. Theoretical Analysis",
    "text": "In this section, we analyze the game hN ,⇥, (ci)i. As presented in Eq. (6), there is an inverse of a complicated matrix to compute the best response of the attacker. Hence, the cost function ci(✓i,✓ i) shown in Eq. (7) is intractable. To address this challenge, we first derive a new game, hN ,⇥, (eci)i with tractable cost function for its players, to approximate hN ,⇥, (ci)i. Afterward, we analyze existence and uniqueness of the Nash Equilibirum of hN ,⇥, (eci)i.\n3.1. Approximation of hN ,⇥, (ci)i We start our analysis by computing ( I + Pn\ni=1 ✓i✓ > i ) 1\npresented in Eq. (6). Let matrix An = I + Pn i=1 ✓i✓ > i ,\nand A i = I+ P j 6=i ✓j✓ > j . Then, An = A i + ✓i✓>i . Similarly, let matrix Bn = X+ z Pn i=1 ✓ > i , and B i =\nX + z P\nj 6=i ✓ > j , which implies that Bn = B i + z✓>i\nThe best response of the attacker can then be rewritten as X ⇤ = BnA 1 n . We then obtain the following results.\nLemma 2. An and A i satisfy\n1. An and A i are invertible, and the corresponding invertible matrices, A 1n and A 1 i , are positive definite.\n2. A 1n = A 1 i\nA 1 i✓i✓ > i A 1 i\n1+✓>i A 1 i✓i\n.\n3. ✓>i A 1 i✓i  1 ✓ > i ✓i.\nProof. The proof is included in the supplementary document.\nLemma 2 allows us to relax `(X⇤(✓i,✓ i)✓i,y) as follows: Lemma 3.\n`(X⇤(✓i,✓ i)✓i,y)  `(B iA 1 i✓i,y)\n+\n1 2 ||z y||22(✓>i ✓i)2. (9)\nProof. Firstly, by using Sherman-Morrison formula we have\nX ⇤✓i = BnA 1 n ✓i\n= (B i + z✓ > i )(A 1 i A\n1 i✓i✓ > i A 1 i 1 + ✓>i A 1 i✓i )✓i\n= B iA 1 i✓i +\nz✓>i A 1 i✓i B iA 1 i✓i✓ > i A 1 i✓i\n1 + ✓>i A 1 i✓i\n=\n(B i + z✓>i )A 1 i✓i\n1 + ✓>i A 1 i✓i\n=\nBnA 1 i✓i\n1 + ✓>i A 1 i✓i\n.\nThen,\n`(X⇤✓i,y) = || BnA\n1 i✓i\n1 + ✓>i A 1 i✓i\ny||22\n= || BnA\n1 i✓i y ✓>i A 1 i✓iy\n1 + ✓>i A 1 i✓i\n||22\n ||BnA 1 i✓i y ✓ > i A 1 i✓iy|| 2 2 = ||(B i + z✓>i )A 1 i✓i y ✓ > i A 1 i✓iy|| 2 2 = ||B iA 1 i✓i y + (z y)✓ > i A 1 i✓i|| 2 2  `(B iA 1 i✓i,y) + ||z y|| 2 2(✓ > i A 1 i✓i) 2\nBy using Lemma 2, we have (✓>i A 1 i✓i) 2  1 2 (✓ > i ✓i) 2 which completes the proof.\nNote that in Eq. (9), B i and A i only depend on {✓j}j 6=i. Hence, the RHS of Eq. (9) is a strictly convex function with respect to ✓i. Lemma 3 shows that `(X⇤(✓i,✓ i)✓i,y) can be relaxed by moving ✓i out of X⇤(✓i,✓ i) and adding a regularizer (✓>i ✓i)2 with its coefficient ||z y||22 2 . Motivated by this method, we iteratively relax `(X⇤(✓i,✓ i)✓i,y) by adding corresponding regularizers. We now identify a tractable upper bound function for ci(✓i,✓ i). Theorem 2.\nci(✓i,✓ i)  c̄i(✓i,✓ i)\n= `(X✓i,y) + 2 ||z y||22\nnX\nj=1\n(✓>j ✓i) 2 + ✏,\n(10)\nwhere ✏ is a positive constant and ✏ < +1.\nProof. We prove by extending the results in Lemma 3 and iteratively relaxing the cost function. The details are included in the supplementary material.\nAs represented in Eq. (10), c̄i(✓i,✓ i) is strictly convex with respect to ✓i and ✓j(8j 6= i). We then use the game hN ,⇥, (c̄i)i as an approximation of hN ,⇥, (ci)i. Let\neci(✓i,✓ i) = c̄i(✓i,✓ i) ✏\n= `(X✓i,y) + 2 ||z y||22\nnX\nj=1\n(✓>j ✓i) 2,\n(11)\nthen hN ,⇥, (eci)i has the same Nash equilibrium with hN ,⇥, (c̄i)i if one exists, as adding or deleting a constant term does not affect the optimal solution. Hence, we use hN ,⇥, (eci)i to approximate hN ,⇥, (ci)i, and analyze the Nash equilibrium of hN ,⇥, (eci)i in the remaining sections."
  }, {
    "heading": "3.2. Existence of Nash Equilibrium",
    "text": "As introduced in Section 2, each learner has identical action spaces, and they are trained with the same dataset. We exploit this symmetry to analyze the existence of a Nash equilibrium of the approximation game hN ,⇥, (eci)i.\nWe first define a Symmetric Game (Cheng et al., 2004): Definition 4 (Symmetric Game). An n-player game is symmetric if the players have the same action space, and their cost functions ci(✓i,✓ i) satisfy\nci(✓i,✓ i) = cj(✓j ,✓ j), 8i, j 2 N (12)\nif ✓i = ✓j and ✓ i = ✓ j .\nIn a symmetric game hN ,⇥, (eci)i it is natural to consider a Symmetric Equilibrium: Definition 5 (Symmetric Equilibrium). An action profile {✓⇤i }ni=1 of hN ,⇥, (eci)i is a symmetric equilibrium if it is a Nash equilibrium and ✓⇤i = ✓⇤j , 8i, j 2 N .\nWe now show that our approximate game is symmetric, and always has a symmetric Nash equilibrium. Theorem 3 (Existence of Nash Equilibrium). hN ,⇥, (eci)i is a symmetric game and it has at least one symmetric equilibrium.\nProof. As described above, the players of hN ,⇥, (eci)i use the same action space and complete information of others. Hence, the cost function ci is symmetric, making hN ,⇥, (eci)i a symmetric game. As hN ,⇥, (eci)i has nonempty, compact and convex action space, and the cost function eci is continuous in {✓i}ni=1 and convex in ✓i, according to Theorem 3 in Cheng et al. (2004), hN ,⇥, (eci)i has at least one symmetric Nash equilibrium."
  }, {
    "heading": "3.3. Uniqueness of Nash Equilibrium",
    "text": "While we showed that the approximate game always admits a symmetric Nash equilibrium, it leaves open the possibility that there may be multiple symmetric equilibria, as well as equilibria which are not symmetric. We now demonstrate that this game in fact has a unique equilibrium (which must therefore be symmetric). Theorem 4 (Uniqueness of Nash Equilibrium). hN ,⇥, (eci)i has a unique Nash equilibrium, and this unique NE is symmetric.\nProof. We have known that hN ,⇥, (eci)i has at least one NE, and each learner has an nonempty, compact and convex action space ⇥. Hence, we can apply Theorem 2 and Theorem 6 of Rosen (1965). That is, for some fixed {ri}ni (0 < ri < 1, Pn i=1 ri = 1), if the matrix in Eq. (13) is positive definite, then hN ,⇥, (eci)i has a unique NE.\nJr(✓) =\n2 64 r1r✓1,✓1ec1(✓) . . . r1r✓1,✓nec1(✓) ... ...\nrnr✓n,✓1ecn(✓) . . . rnr✓n,✓necn(✓)\n3\n75\n(13) We first let r1 = r2 = ... = rn = 1n and decompose Jr(✓) as follows,\nJr(✓) = 2\nn P+ 2 ||z y||22 2n (Q+ S+T), (14)\nwhere P and Q are block diagonal matrices such that Pii = X\n> X, Pij = 0, Qii = 4✓i✓>i + ✓>i ✓iI and Qij = 0, 8i, j 2 N , j 6= i. S and T are block symmetric matrices such that Sii = ✓>i ✓iI, Sij = ✓>i ✓jI, Tii = P j 6=i ✓j✓ > j and Tij = ✓j✓>i , 8i, j 2 N , j 6= i.\nNext, we prove that P is positive definite, and Q, S and T are positive semi-definite. Hence, Jr(✓) is positive definite, which indicates that hN ,⇥, (eci)i has a unique NE. As Theorem 3 points out, the game has at least one symmetric NE. Therefore, the NE is unique and must be symmetric. Due to space limitation the details of this proof are included in the supplementary material."
  }, {
    "heading": "4. Computing the Equilibrium",
    "text": "Having shown that hN ,⇥, (eci)i has a unique symmetric Nash equilibrium, we now consider computing its solution. We exploit the symmetry of the game which enables to reduce the search space of the game to only symmetric solutions. Particularly, we derive the symmetric Nash equilibrium of hN ,⇥, (eci)i by solving a single convex optimization problem. We obtain the following result. Theorem 5. Let\nf(✓) = `(X✓,y) + (n+ 1)\n2 2 ||z y||22(✓>✓)2, (15)\nThen, the unique symmetric NE of hN ,⇥, (eci)i, {✓⇤i }ni=1, can be derived by solving the following convex optimization problem\nmin ✓2⇥ f(✓) (16)\nand then letting ✓⇤i = ✓⇤, 8i 2 N , where ✓⇤ is the solution of Eq. (16).\nProof. We prove this theorem by characterizing the firstorder optimality conditions of each learner’s minimization problem in Eq. (8) with ci being replaced with its approximation eci. Let {✓⇤i }ni=1 be the NE, then it satisfies\n(⌘ ✓⇤i )>r✓ieci(✓⇤i ,✓⇤ i) 0, 8⌘ 2 ⇥, 8i 2 N (17)\nwhere r✓ieci(✓⇤i ,✓⇤ i) is the gradient of eci(✓i,✓ i) with respect to ✓i and is evaluated at {✓⇤i }ni=1. Then, Eq. (17) is equivalent to the equations as follows:\n( (⌘ ✓⇤1)>r✓1ec1(✓⇤1 ,✓⇤ 1) 0, 8⌘ 2 ⇥, ✓⇤1 = ✓ ⇤ j , 8j 2 N \\ {1}\n(18)\nThe reasons are: first, any solution of Eq. (17) satisfies Eq. (18), as {✓⇤i }ni=1 is symmetric; Second, any solution of Eq. (18) also satisfies Eq. (17). By definition of symmetric game, if ✓⇤1 = ✓⇤j , then r✓1ec1(✓⇤1 ,✓⇤ 1) = r✓jecj(✓⇤j ,✓⇤ j), and we have\n(⌘ ✓⇤j )>r✓jecj(✓⇤j ,✓⇤ j), 8⌘ 2 ⇥, 8j 2 N \\ {1}\nHence, Eq. (17) and Eq. (18) are equivalent. Eq. (18) can be further rewritten as\n(⌘ ✓⇤1)>r✓1ec1(✓⇤1 ,✓⇤ 1)|✓⇤1=...=✓⇤n 0, 8⌘ 2 ⇥. (19)\nWe then let F (✓⇤1) = r✓1ec1(✓⇤1 ,✓⇤ 1)|✓⇤1=...=✓⇤n\n= 2X > (X✓⇤1 y) +\n2 (n+ 1)\n2 ||z y||22✓⇤1 >✓⇤1✓ ⇤ 1 .\n(20)\nThen, F (✓⇤1) = r✓1f(✓⇤1) where f(·) is defined in Eq. (15). Hence, we have\n(⌘ ✓⇤1)>r✓1f(✓⇤1) 0, 8⌘ 2 ⇥, (21)\nThis means that ✓⇤1 is the solution of the optimization problem in Eq.(16) which finally completes the proof.\nA deeper look at Eq. (15) reveals that the Nash equilibrium can be obtained by each learner independently, without knowing others’ actions. This means that the Nash equilibrium can be computed in a distributed manner while the convergence is still guaranteed. Hence, our proposed approach is highly scalable, as increasing the number of learners does not impact the complexity of finding the Nash equilibrium. We investigate the robustness of this equilibrium both using theoretical analysis and experiments in the remaining sections."
  }, {
    "heading": "5. Robustness Analysis",
    "text": "We now draw a connection between the multi-learner equilibrium in the adversarial setting, derived above, and robustness, in the spirit of the analysis by Xu et al. (2009). Specifically, we prove the equivalence between Eq. (16) and a robust linear regression problem where data is maliciously corrupted by some disturbance 4. Formally, a robust linear regression solves the following problem:\nmin ✓2⇥ max 42U ||y (X+4)✓||22, (22)\nwhere the uncertainty set U = {4 2 Rm⇥d |4T4 = G : |Gij |  c|✓i✓j | 8i, j}, with c = (n+1)2 2 ||z y|| 2 2. Note that ✓ is a vector and ✓i is the i-th element of ✓.\nFrom a game-theoretic point of view, in training phase the defender is simulating an attacker. The attacker maximizes the training error by adding disturbance to X. The magnitude of the disturbance is controlled by a parameter c = (n+1)2 2 ||z y|| 2 2. Consequently, the robustness of Eq. (22) is guaranteed if and only if the magnitude reflects the uncertainty interval. This sheds some light on how to choose , and z in practice. One strategy is to overestimate the attacker’s strength, which amounts to choosing small values of , large values of and exaggerated target z. The intuition of this strategy is to enlarge the uncertainty set so as to cover potential adversarial behavior. In Experiments section we will show this strategy works well in practice. Another insight from Eq. (22) is that the fundamental reason MLSG is robust is because it proactively takes adversarial behavior into account. Theorem 6. The optimal solution ✓⇤ of the problem in Eq. (16) is an optimal solution to the robust optimization problem in Eq. (22).\nProof. Fix ✓⇤, we show that\nmax 42U ||y (X+4)✓⇤||22 = ||y X✓⇤||22 + c(✓⇤ T✓⇤) 2 .\nThe left-hand side can be expanded as:\nmax 42U ||y (X+4)✓⇤||22\n=max 42U ||y X✓⇤ 4✓⇤||22\nmax 42U ||y X✓⇤||22 + max42U ||4✓ ⇤||22\n=max 42U ||y X✓⇤||22 + max42U ✓ ⇤T4T4✓⇤\n(substitute 4T4 = G) =||y X✓⇤||22 +max\nG ✓⇤TG✓⇤\n=||y X✓⇤||22 +max G\ndX\ni=1\n|✓⇤i | 2 Gii + 2\ndX\nj=1\nj 1X\ni=1\n✓⇤i ✓ ⇤ jGij\n||y X✓⇤||22 + c dX\ni=1\n|✓⇤i | 4 + 2c\ndX\nj=1\nj 1X\ni=1\n(✓⇤i ✓ ⇤ j ) 2\n=||y X✓⇤||22 + c dX\ni=1\n|✓⇤i |2 2\n=||y X✓⇤||22 + c(✓⇤ T✓⇤) 2 .\nNow we define 4⇤ = [pc✓⇤1u, · · · , p c✓⇤nu], where ✓⇤i is the i-th element of ✓⇤ and u is defined as:\nu , ( y X✓⇤ ||y X✓⇤||2 , if y 6= X✓ ⇤\nany vector with unit L2 norm, otherwise (23)\nThen we have:\nmax 42U ky (X+4)✓⇤k22\n||y (X+4⇤)✓⇤||22 =||y X✓⇤ 4⇤✓⇤||22\n=||y X✓⇤ dX\ni=1\np c|✓⇤i |2u||22\n(u is in the same direction as y X✓⇤ )\n=||y X✓⇤||22 + || dX\ni=1\np c|✓⇤i |2u||22\n=||y X✓⇤||22 + c(✓⇤ T✓⇤)\n2\n(24)"
  }, {
    "heading": "6. Experiments",
    "text": "As previously discussed, a dataset is represented by (X,y), where X is the feature matrix and y is the vector of labels. We use (xj ,yj) to denote the j-th instance and its corresponding label. The dataset is equally divided into a training set (Xtrain,ytrain) and a testing set (Xtest,ytest). We conducted experiments on three datasets: Wine Quality (redwine),PDF malware (PDF), and Boston Housing Market (boston). The number of learners is set to 5. Due to space limitation the experimental results for the boston dataset are included in supplement.\nThe Wine Quality dataset (Cortez et al., 2009) contains 1599 instances and each instance has 11 features. Those features are physicochemical and sensory measurements for wine. The response variables are quality scores ranging from 0 to 10, where 10 represents for best quality and 0 for least quality. The PDF malware dataset consists of 18658 PDF files collected from the internet. We employed an opensourced tool mimicus1 to extract 135 real-valued features\n1https://github.com/srndic/mimicus\nfrom PDF files (Šrndic & Laskov, 2014). We then applied peepdf 2 to score each PDF between 0 and 10, with a higher score indicating greater likelihood of being malicious.\nThroughout, we abbreviate our proposed approach as MLSG, and compare it to three other algorithms: ordinary least squares (OLS) regression, as well as Lasso, and Ridge regression (Ridge). Lasso and Ridge are ordinary least square with L1 and L2 regularizations. In our evaluation, we simulate the attacker for different values of (the probability that a given instance is maliciously manipulated). The specific attack targets z vary depending on the dataset; we discuss these below. For our evaluation, we compute model parameters (for the equilibrium, in the case of MLSG) on training data. We then use test data to compute optimal attacks, characterized by Eq. (6). Let X\n0 test be the test feature matrix after adversarial manipulation, ˆyAtest the associated predicted labels on manipulated test data, ˆytest predicted labels on untainted test data, and ytest the ground truth labels for test data. We use root expected mean square error (RMSE) as an evaluation metric, where the expectation is with respect to the probability of a particular instance being maliciously manipulated:q\n(ŷAtest ytest) T (ŷAtest ytest)+(1 )(ŷtest ytest)T (ŷtest ytest)\nN , where N is the size of the test data.\nThe redwine dataset: Recall that the response variables in redwine dataset are quality scores ranging from 0 to 10. We simulated an attacker whose target is to increase the overall scores of testing data. In practice this could correspond to the scenario that wine sellers try to manipulate the evaluation of third-party organizations. We formally define the attacker’s target as z = y + , where y is the ground-truth response variables and is a real-valued vector representing the difference between the attacker’s target and the ground-truth. Since the maximum score is 10, any element of z that is greater than 10 is clipped to 10. We define to be homogeneous (all elements are the same); generalization to heterogeneous values is direct. The mean and standard deviation of y are µr = 5.64 and r = 0.81. We let = 5 r ⇥ 1, where 1 is a vector with all elements equal to one. The intuition for this definition is to simulate the generating process of adversarial data. Specifically, by setting the attacker’s target to an unrealistic value (i.e. in current case outside the 3 r of µr), the generated adversarial data X 0 is supposed to be intrinsically different from X. For ease of exposition we use the term defender to refer to MLSG.\nRemember that in Eq.(11) there are three hyper-parameters in the defender’s loss function: , , and z. is the regularization coefficient in the attacker’s loss function shown in Eq.(4). It is negatively proportional to the attacker’s strength.\n2https://github.com/rohit-dua/peePDF\nis the probability of a test data being malicious. z is the predication targets of the attacker. In practice these three hyper-parameters are externally set by the attacker. In the first experiment below we assume the defender knows the values of these three hyper-parameters, which corresponds to the best case. The result is shown in Figure 1. Each bar is averaged over 50 runs, where at each run we randomly sampled training and test data. The regularization parameters of Lasso and Ridge were selected by cross-validation. Figure 1 demonstrates that MLSG approximate equilibrium solution is significantly more robust than conventional linear regression learning, with and without regularization.\nIn the second experiment we relaxed the assumption that the defender knows , and z, and instead simulated the practical scenario that the defender obtains estimates for these (for example, from historical attack data), but the estimates have error. We denote by ˆ = 0.5 and ˆ = 0.8 the defender’s estimates of the true and .3 Remember that is the probability of an instance being malicious and is negatively proportional to the attacker’s strength. So the estimation characterizes a pessimistic defender that is expecting very strong attacks. We experimented with two kinds of estimation about z: 1) the defender overestimates z: ˆz = y + t1, where t is a random variable sampled from a uniform distribution over [5 r, 10]; and 2) the defender underestimates z: ˆz = y + t1, where t is sampled from [0, 5 r]. Due to space limitations we only present the results for the latter; the former can be found in the supplementary materials. In Figure 2 the y-axis represents the actual values of , and the x-axis represents the actual values of . The color bar on the right of each figure visualizes the average RMSE. Each cell is averaged over 50 runs. The result shows that even if there is a discrepancy between the defender’s\n3We tried alternative values of ̂ and ̂, and the results are consistent. Due to space limitations we include them in supplemental materials.\nestimation and the actual adversarial behavior, MLSG is consistently more robust than the other approaches.\nThe PDF dataset: The response variables of this dataset are malicious scores ranging between 0 and 10. The mean and standard deviation of y are µp = 5.56 and p = 2.66. Instead of letting the be non-negative as in previous two datasets, the attacker’s target is to descrease the scores of malicious PDFs. Consequently, we define = 2 p⇥1M, where M is the set of indices of malicious PDF and 1M is a vector with only those elements indexed by M being one and others being zero. Our experiments were conducted on a subset (3000 malicious PDF and 3000 benign PDF) randomly sampled from the original dataset. We evenly divided the subset into training and testing sets. We applied PCA to reduce dimensionality of the data and selected the top-10 principal components as features. The result for best case is displayed in Figure 3. Notice that when = 0, MLSG is less robust than Lasso. This is to be expected, as = 0 corresponds to non-adversarial data.\nSimilarly as before we relaxed the assumption that the defender knows , and z and let the defender’s estimation of the true and be ˆ = 1.5 and ˆ = 0.5. We also experimented with both overestimation and underestimation of z. The defender’s estimation is ˆz = y t1M. For overestimation setting t is sampled from [2 p, 3 p], and for underestimation setting it is sampled from [ p, 2 p]. The result for underestimated ˆz is showed in Figure 4. Notice that in the upper left plot of Figure 4 the area inside the blue rectangle corresponds to those cases where ˆ and ˆ are overestimated and they are more robust than the remaining underestimated cases. Similar patterns can be observed in Figure 2. This further supports our claim that it is advantageous to overestimate adversarial behavior."
  }, {
    "heading": "7. Conclusion",
    "text": "We study the problem of linear regression in adversarial settings involving multiple learners learning from the same or similar data. In our model, learners first simultaneously decide on their models (i.e., learn), and an attacker then modifies test instances to cause predictions to err towards the attacker’s target. We first derive an upper bound on the cost functions of all learners, and the resulting approximate game. We then show that this game has a unique symmetric equilibrium, and present an approach for computing this equilibrium by solving a convex optimization problem. Finally, we show that the equilibrium is robust, both theoretically, and through an extensive experimental evaluation."
  }, {
    "heading": "Acknowledgements",
    "text": "We would like to thank Shiying Li in the Department of Mathematics at Vanderbilt University for her valuable and constructive suggestions for the proof of Theorem 4. This work was partially supported by the National Science Foundation (CNS-1640624, IIS-1526860, IIS-1649972), Office of Naval Research (N00014-15-1-2621), Army Research Office (W911NF-16-1-0069), and National Institutes of Health (R01HG006844-05)."
  }],
  "year": 2018,
  "references": [{
    "title": "Data poisoning attacks against autoregressive models",
    "authors": ["S. Alfeld", "X. Zhu", "P. Barford"],
    "venue": "In AAAI Conference on Artificial Intelligence,",
    "year": 2016
  }, {
    "title": "Stackelberg games for adversarial prediction problems",
    "authors": ["M. Brückner", "T. Scheffer"],
    "venue": "In ACM SIGKDD International Conference on Knowledge Discovery and Data Mining,",
    "year": 2011
  }, {
    "title": "Notes on equilibria in symmetric games",
    "authors": ["Cheng", "S.-F", "D.M. Reeves", "Y. Vorobeychik", "M.P. Wellman"],
    "venue": "In International Workshop on Game Theoretic and Decision Theoretic Agents, pp",
    "year": 2004
  }, {
    "title": "Modeling wine preferences by data mining from physicochemical properties",
    "authors": ["P. Cortez", "A. Cerdeira", "F. Almeida", "T. Matos", "J. Reis"],
    "venue": "Decision Support Systems,",
    "year": 2009
  }, {
    "title": "Adversarial classification",
    "authors": ["N. Dalvi", "P. Domingos", "Mausam", "S. Sanghai", "D. Verma"],
    "venue": "In SIGKDD International Conference on Knowledge Discovery and Data Mining, pp",
    "year": 2004
  }, {
    "title": "Bayesian games for adversarial regression problems",
    "authors": ["M. Grosshans", "C. Sawade", "M. Brückner", "T. Scheffer"],
    "venue": "In International Conference on International Conference on Machine Learning,",
    "year": 2013
  }, {
    "title": "Multi-defender strategic filtering against spear-phishing attacks",
    "authors": ["A. Laszka", "J. Lou", "Y. Vorobeychik"],
    "venue": "In AAAI Conference on Artificial Intelligence,",
    "year": 2016
  }, {
    "title": "Feature cross-substitution in adversarial classification",
    "authors": ["B. Li", "Y. Vorobeychik"],
    "venue": "In Advances in Neural Information Processing Systems, pp. 2087–2095,",
    "year": 2014
  }, {
    "title": "Scalable optimization of randomized operational decisions in adversarial classification settings",
    "authors": ["B. Li", "Y. Vorobeychik"],
    "venue": "In Conference on Artificial Intelligence and Statistics,",
    "year": 2015
  }, {
    "title": "Adversarial learning",
    "authors": ["D. Lowd", "C. Meek"],
    "venue": "In ACM SIGKDD International Conference on Knowledge Discovery in Data Mining,",
    "year": 2005
  }, {
    "title": "Existence and uniqueness of equilibrium points for concave n-person games",
    "authors": ["J.B. Rosen"],
    "year": 1965
  }, {
    "title": "Secure kernel machines against evasion attacks",
    "authors": ["P. Russu", "A. Demontis", "B. Biggio", "G. Fumera", "F. Roli"],
    "venue": "In ACM Workshop on Artificial Intelligence and Security,",
    "year": 2016
  }, {
    "title": "Multidefender security games",
    "authors": ["A. Smith", "J. Lou", "Y. Vorobeychik"],
    "venue": "IEEE Intelligent Systems,",
    "year": 2017
  }, {
    "title": "Practical evasion of a learningbased classifier: A case study",
    "authors": ["N. Šrndic", "P. Laskov"],
    "venue": "In 2014 IEEE Symposium on Security and Privacy,",
    "year": 2014
  }, {
    "title": "On the hardness of evading combinations of linear classifiers",
    "authors": ["D. Stevens", "D. Lowd"],
    "venue": "In ACM Workshop on Artificial Intelligence and Security,",
    "year": 2013
  }, {
    "title": "Noncooperatively optimized tolerance: Decentralized strategic optimization in complex systems",
    "authors": ["Y. Vorobeychik", "J.R. Mayo", "R.C. Armstrong", "J. Ruthruff"],
    "venue": "Physical Review Letters,",
    "year": 2011
  }, {
    "title": "Robust regression and lasso",
    "authors": ["H. Xu", "C. Caramanis", "S. Mannor"],
    "venue": "In Advances in Neural Information Processing Systems,",
    "year": 2009
  }, {
    "title": "Adversarial support vector machine learning",
    "authors": ["Y. Zhou", "M. Kantarcioglu", "B.M. Thuraisingham", "B. Xi"],
    "venue": "In ACM SIGKDD International Conference on Knowledge Discovery and Data Mining,",
    "year": 2012
  }],
  "id": "SP:3fba730850e918ed80692ba8350ffeb647d51120",
  "authors": [{
    "name": "Liang Tong",
    "affiliations": []
  }, {
    "name": "Sixie Yu",
    "affiliations": []
  }, {
    "name": "Scott Alfeld",
    "affiliations": []
  }, {
    "name": "Yevgeniy Vorobeychik",
    "affiliations": []
  }],
  "abstractText": "Despite the considerable success enjoyed by machine learning techniques in practice, numerous studies demonstrated that many approaches are vulnerable to attacks. An important class of such attacks involves adversaries changing features at test time to cause incorrect predictions. Previous investigations of this problem pit a single learner against an adversary. However, in many situations an adversary’s decision is aimed at a collection of learners, rather than specifically targeted at each independently. We study the problem of adversarial linear regression with multiple learners. We approximate the resulting game by exhibiting an upper bound on learner loss functions, and show that the resulting game has a unique symmetric equilibrium. We present an algorithm for computing this equilibrium, and show through extensive experiments that equilibrium models are significantly more robust than conventional regularized linear regression.",
  "title": "Adversarial Regression with Multiple Learners"
}