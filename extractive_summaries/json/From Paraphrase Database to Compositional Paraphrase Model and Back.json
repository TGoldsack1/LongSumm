{
  "sections": [{
    "text": "The Paraphrase Database (PPDB; Ganitkevitch et al., 2013) is an extensive semantic resource, consisting of a list of phrase pairs with (heuristic) confidence estimates. However, it is still unclear how it can best be used, due to the heuristic nature of the confidences and its necessarily incomplete coverage. We propose models to leverage the phrase pairs from the PPDB to build parametric paraphrase models that score paraphrase pairs more accurately than the PPDB’s internal scores while simultaneously improving its coverage. They allow for learning phrase embeddings as well as improved word embeddings. Moreover, we introduce two new, manually annotated datasets to evaluate short-phrase paraphrasing models. Using our paraphrase model trained using PPDB, we achieve state-of-the-art results on standard word and bigram similarity tasks and beat strong baselines on our new short phrase paraphrase tasks.1"
  }, {
    "heading": "1 Introduction",
    "text": "Paraphrase detection2 is the task of analyzing two segments of text and determining if they have the same meaning despite differences in structure and wording. It is useful for a variety of NLP tasks like question answering (Rinaldi et al., 2003; Fader et al., 2013), semantic parsing (Berant and Liang, 2014), textual entailment (Bosma and CallisonBurch, 2007), and machine translation (Marton et al., 2009).\n1We release our datasets, code, and trained models at http://web.engr.illinois.edu/˜wieting2/.\n2See Androutsopoulos and Malakasiotis (2010) for a survey on approaches for detecting paraphrases.\nOne component of many such systems is a paraphrase table containing pairs of text snippets, usually automatically generated, that have the same meaning. The most recent work in this area is the Paraphrase Database (PPDB; Ganitkevitch et al., 2013), a collection of confidence-rated paraphrases created using the pivoting technique of Bannard and Callison-Burch (2005) over large parallel corpora. The PPDB is a massive resource, containing 220 million paraphrase pairs. It captures many short paraphrases that would be difficult to obtain using any other resource. For example, the pair {we must do our utmost, we must make every effort} has little lexical overlap but is present in PPDB. The PPDB has recently been used for monolingual alignment (Yao et al., 2013), for predicting sentence similarity (Bjerva et al., 2014), and to improve the coverage of FrameNet (Rastogi and Van Durme, 2014).\nThough already effective for multiple NLP tasks, we note some drawbacks of PPDB. The first is lack of coverage: to use the PPDB to compare two phrases, both must be in the database. The second is that PPDB is a nonparametric paraphrase model; the number of parameters (phrase pairs) grows with the size of the dataset used to build it. In practice, it can become unwieldy to work with as the size of the database increases. A third concern is that the confidence estimates in PPDB are a heuristic combination of features, and their quality is unclear.\nWe address these issues in this work by introducing ways to use PPDB to construct parametric paraphrase models. First we show that initial skip-gram word vectors (Mikolov et al., 2013a) can be finetuned for the paraphrase task by training on word pairs from PPDB. We call them PARAGRAM word vectors. We find additive composition of PARAGRAM vectors to be a simple but effective way to\n345\nTransactions of the Association for Computational Linguistics, vol. 3, pp. 345–358, 2015. Action Editor: Hal Daumeé III. Submission batch: 1/2015; Revision batch 4/2015; Published 6/2015.\nc©2015 Association for Computational Linguistics. Distributed under a CC-BY-NC-SA 4.0 license.\nembed phrases for short-phrase paraphrase tasks. We find improved performance by training a recursive neural network (RNN; Socher et al., 2010) directly on phrase pairs from PPDB.\nWe show that our resulting word and phrase representations are effective on a wide variety of tasks, including two new datasets that we introduce. The first, Annotated-PPDB, contains pairs from PPDB that were scored by human annotators. It can be used to evaluate paraphrase models for short phrases. We use it to show that the phrase embeddings produced by our methods are significantly more indicative of paraphrasability than the original heuristic scoring used by Ganitkevitch et al. (2013). Thus we use the power of PPDB to improve its contents.\nOur second dataset, ML-Paraphrase, is a reannotation of the bigram similarity corpus from Mitchell and Lapata (2010). The task was originally developed to measure semantic similarity of bigrams, but some annotations are not congruent with the functional similarity central to paraphrase relationships. Our re-annotation can be used to assess paraphrasing capability of bigram compositional models. In summary, we make the following contributions:\nProvide new PARAGRAM word vectors, learned using PPDB, that achieve state-of-the-art performance on the SimLex-999 lexical similarity task (Hill et al., 2014b) and lead to improved performance in sentiment analysis.\nProvide ways to use PPDB to embed phrases. We compare additive and RNN composition of PARAGRAM vectors. Both can improve PPDB by reranking the paraphrases in PPDB to improve correlations with human judgments. They can be used as concise parameterizations of PPDB, thereby vastly increasing its coverage. We also perform a qualitative analysis of the differences between additive and RNN composition.\nIntroduce two new datasets. The first contains PPDB phrase pairs and evaluates how well models can measure the quality of short paraphrases. The second is a new annotation of the bigram similarity task in Mitchell and Lapata (2010) that makes it suitable for evaluating bigram paraphrases.\nWe release the new datasets, complete with annotation instructions and raw annotations, as well as\nour code and the trained models.3"
  }, {
    "heading": "2 Related Work",
    "text": "There is a vast literature on representing words as vectors. The intuition of most methods to create these vectors (or embeddings) is that similar words have similar contexts (Firth, 1957). Earlier models made use of latent semantic analysis (LSA) (Deerwester et al., 1990). Recently, more sophisticated neural models, work originating with (Bengio et al., 2003), have been gaining popularity (Mikolov et al., 2013a; Pennington et al., 2014). These embeddings are now being used in new ways as they are being tailored to specific downstream tasks (Bansal et al., 2014).\nPhrase representations can be created from word vectors using compositional models. Simple but effective compositional models were studied by Mitchell and Lapata (2008; 2010) and Blacoe and Lapata (2012). They compared a variety of binary operations on word vectors and found that simple point-wise multiplication of explicit vector representations performed very well. Other works like Zanzotto et al. (2010) and Baroni and Zamparelli (2010) also explored composition using models based on operations of vectors and matrices.\nMore recent work has shown that the extremely efficient neural embeddings of Mikolov et al. (2013a) also do well on compositional tasks simply by adding the word vectors (Mikolov et al., 2013b). Hashimoto et al. (2014) introduced an alternative word embedding and compositional model based on predicate-argument structures that does well on two simple composition tasks, including the one introduced by Mitchell and Lapata (2010).\nAn alternative approach to composition, used by Socher et al. (2011), is to train a recursive neural network (RNN) whose structure is defined by a binarized parse tree. In particular, they trained their RNN as an unsupervised autoencoder. The RNN captures the latent structure of composition. Recent work has shown that this model struggles in tasks involving compositionality (Blacoe and Lapata, 2012; Hashimoto et al., 2014).4 However, we found suc-\n3http://web.engr.illinois.edu/˜wieting2/ 4We also replicated this approach and found training to be\ntime-consuming even using low-dimensional word vectors.\ncess using RNNs in a supervised setting, similar to Socher et al. (2014), who used RNNs to learn representations for image descriptions. The objective function we used in this work was motivated by their multimodal objective function for learning joint image-sentence representations.\nLastly, the PPDB has been used along with other resources to learn word embeddings for several tasks, including semantic similarity, language modeling, predicting human judgments, and classification (Yu and Dredze, 2014; Faruqui et al., 2015). Concurrently with our work, it has also been used to construct paraphrase models for short phrases (Yu and Dredze, 2015)."
  }, {
    "heading": "3 New Paraphrase Datasets",
    "text": "We created two novel datasets: (1) AnnotatedPPDB, a subset of phrase pairs from PPDB which are annotated according to how strongly they represent a paraphrase relationship, and (2) MLParaphrase, a re-annotation of the bigram similarity dataset from Mitchell and Lapata (2010), again annotated for strength of paraphrase relationship."
  }, {
    "heading": "3.1 Annotated-PPDB",
    "text": "Our motivation for creating Annotated-PPDB was to establish a way to evaluate compositional paraphrase models on short phrases. Most existing paraphrase tasks focus on words, like SimLex-999 (Hill et al., 2014b), or entire sentences, such as the Microsoft Research Paraphrase Corpus (Dolan et al., 2004; Quirk et al., 2004). To our knowledge, there are no datasets that focus on the paraphrasability of short phrases. Thus, we created Annotated-PPDB so that researchers can focus on local compositional phenomena and measure the performance of models directly—avoiding the need to do so indirectly in a sentence-level task. Models that have strong performance on Annotated-PPDB can be used to provide more accurate confidence scores for the paraphrases in the PPDB as well as reduce the need for large paraphrase tables altogether.\nAnnotated-PPDB was created in a multi-step process (outlined below) involving various automatic filtering steps followed by crowdsourced human annotation. One of the aims for our dataset was to collect a variety of paraphrase types—we wanted to in-\nclude pairs that were non-trivial to recognize as well as those with a range of similarity and length. We focused on phrase pairs with limited lexical overlap to avoid including those with only trivial differences.\nWe started with candidate phrases extracted from the first 10M pairs in the XXL version of the PPDB and then executed the following steps.5\nFilter phrases for quality: Only those phrases whose tokens were in our vocabulary were retained.6 Next, all duplicate paraphrase pairs were removed; in PPDB, these are distinct pairs that contain the same two phrases with the order swapped. Filter by lexical overlap: Next, we calculated the word overlap score in each phrase pair and then retained only those pairs that had a score of less than 0.5. By word overlap score, we mean the fraction of tokens in the smaller of the phrases with Levenshtein distance ≤ 1 to a token in the larger of the phrases. This was done to exclude less interesting phrase pairs like 〈my dad had, my father had〉 or 〈ballistic missiles, of ballistic missiles〉 that only differ in a synonym or the addition of a single word. Select range of paraphrasabilities: To balance our dataset with both clear paraphrases and erroneous pairs in PPDB, we sampled 5,000 examples from ten chunks of the first 10M initial phrase pairs where a chunk is defined as 1M phrase pairs. Select range of phrase lengths: We then selected 1,500 phrases from each 5000-example sample that encompassed a wide range of phrase lengths. To do this, we first binned the phrase pairs by their effective size. Let n1 be the number of tokens of length greater than one character in the first phrase and n2 the same for the second phrase. Then the effective size is defined as max(n1, n2). The bins contained pairs of effective size of 3, 4, and 5 or more, and 500 pairs were selected from each bin. This gave us a total of 15,000 phrase pairs. Prune to 3,000: 3,000 phrase pairs were then selected randomly from the 15,000 remaining pairs to\n5Note that the confidence scores for phrase pairs in PPDB are based on a weighted combination of features with weights determined heuristically. The confidence scores were used to place the phrase pairs into their respective sets (S, M, L, XL, XXL, etc.), where each larger set subsumes all smaller ones.\n6Throughout, our vocabulary is defined as the most common 100K word types in English Wikipedia, following tokenization and lowercasing (see §5).\nform an initial dataset, Annotated-PPDB-3K. The phrases were selected so that every phrase in the dataset was unique. Annotate with Mechanical Turk: The dataset was then rated on a scale from 1-5 using Amazon Mechanical Turk, where a score of 5 denoted phrases that are equivalent in a large number of contexts, 3 meant that the phrases had some overlap in meaning, and 1 indicated that the phrases were dissimilar or contradictory in some way (e.g., can not adopt and is able to accept).\nWe only permitted workers whose location was in the United States and who had done at least 1,000 HITS with a 99% acceptance rate. Each example was labeled by 5 annotators and their scores were averaged to produce the final rating. Table 1 shows some statistics of the data. Overall, the annotated data had a mean deviation (MD)7 of 0.80. Table 1 shows that overall, workers found the phrases to be of high quality, as more than two-thirds of the pairs had an average score of at least 3. Also from the Table, we can see that workers had stronger agreement on very low and very high quality pairs and were less certain in the middle of the range. Prune to 1,260: To create our final dataset, Annotated-PPDB, we selected 1,260 phrase pairs from the 3,000 annotations. We did this by first binning the phrases into 3 categories: those with scores in the interval [1, 2.5), those with scores in the interval [2.5, 3.5], and those with scores in the interval (3.5, 5]. We took the 420 phrase pairs with the lowest MD in each bin, as these have the most agreement about their label, to form Annotated-PPDB.\nThese 1,260 examples were then randomly split into a development set of 260 examples and a test set of 1,000 examples. The development set had an MD of 0.61 and the test set had an MD of 0.60, indicating the final dataset had pairs of higher agreement than the initial 3,000."
  }, {
    "heading": "3.2 ML-Paraphrase",
    "text": "Our second newly-annotated dataset, MLParaphrase, is based on the bigram similarity task originally introduced by Mitchell and Lapata\n7MD is similar to standard deviation, but uses absolute value instead of squared value and thus is both more intuitive and less sensitive to outliers.\n(2010); we refer to the original annotations as the ML dataset.\nThe ML dataset consists of human similarity ratings for three types of bigrams: adjective-noun (JN), noun-noun (NN), and verb-noun (VN). Through manual inspection, we found that the annotations were not consistent with the notion of similarity central to paraphrase tasks. For instance, television set and television programme were the highest rated phrases in the NN section (based on average annotator score). Similarly, one of the highest ranked JN pairs was older man and elderly woman. This indicates that the annotations reflect topical similarity in addition to capturing functional or definitional similarity.\nTherefore, we had the data re-annotated by two authors of this paper who are native English speakers.8 The bigrams were labeled on a scale from 1- 5 where 5 denotes phrases that are equivalent in a large number of contexts, 3 indicates the phrases are roughly equivalent in a narrow set of contexts, and 1 means the phrases are not at all equivalent in any context. Following annotation, we collapsed the rating scale by merging 4s and 5s together and 1s and 2s together.\n8We tried using Mechanical Turk here, but due to such short phrases, with few having the paraphrase relationship, workers did not perform well on the task.\nStatistics for the data are shown in Table 2. We show inter-annotator Spearman ρ and Cohen’s κ in columns 2 and 3, indicating substantial agreement on the JN and VN portions but only moderate agreement on NN. In fact, when evaluating our NN annotations against those from the original ML data (column 4), we find ρ to be 0.38, well below the average human correlation of 0.49 (final column) reported by Mitchell and Lapata and also surpassed by pointwise multiplication (Mitchell and Lapata, 2010). This suggests that the original NN portion, more so than the others, favored a notion of similarity more related to association than paraphrase."
  }, {
    "heading": "4 Paraphrase Models",
    "text": "We now present parametric paraphrase models and discuss training. Our goal is to embed phrases into a low-dimensional space such that cosine similarity in the space corresponds to the strength of the paraphrase relationship between phrases.\nWe use a recursive neural network (RNN) similar to that used by Socher et al. (2014). We first use a constituent parser to obtain a binarized parse of a phrase. For phrase p, we compute its vector g(p) through recursive computation on the parse. That is, if phrase p is the yield of a parent node in a parse tree, and phrases c1 and c2 are the yields of its two child nodes, we define g(p) recursively as follows:\ng(p) = f(W [g(c1); g(c2)] + b)\nwhere f is an element-wise activation function (tanh), [g(c1); g(c2)] ∈ R2n is the concatenation of the child vectors, W ∈ Rn×2n is the composition matrix, b ∈ Rn is the offset, and n is the dimensionality of the word embeddings. If node p has no children (i.e., it is a single token), we define g(p) = W (p) w , where Ww is the word embedding matrix in which particular word vectors are indexed using superscripts. The trainable parameters of the model are W , b, and Ww."
  }, {
    "heading": "4.1 Objective Functions",
    "text": "We now present objective functions for training on pairs extracted from PPDB. The training data consists of (possibly noisy) pairs taken directly from the original PPDB. In subsequent sections, we discuss how we extract training pairs for particular tasks.\nWe assume our training data consists of a setX of phrase pairs 〈x1, x2〉, where x1 and x2 are assumed to be paraphrases. To learn the model parameters (W, b,Ww), we minimize our objective function over the data using AdaGrad (Duchi et al., 2011) with mini-batches. The objective function follows:\nmin W,b,Ww\n1\n|X|\n( ∑\n〈x1,x2〉∈X\nmax(0, δ − g(x1) · g(x2) + g(x1) · g(t1))\n+ max(0, δ − g(x1) · g(x2) + g(x2) · g(t2)) )\n+ λW (‖W‖2 + ‖b‖2) + λWw ‖Wwinitial −Ww‖2 (1)\nwhere λW and λWw are regularization parameters, Wwinitial is the initial word embedding matrix, δ is the margin (set to 1 in all of our experiments), and t1 and t2 are carefully-selected negative examples taken from a mini-batch during optimization.\nThe intuition for this objective is that we want the two phrases to be more similar to each other (g(x1) · g(x2)) than either is to their respective negative examples t1 and t2, by a margin of at least δ.\nSelecting Negative Examples To select t1 and t2 in Eq. 1, we simply chose the most similar phrase in the mini-batch (other than those in the given phrase pair). E.g., for choosing t1 for a given 〈x1, x2〉:\nt1 = argmax t:〈t,·〉∈Xb\\{〈x1,x2〉}\ng(x1) · g(t)\nwhere Xb ⊆ X is the current mini-batch. That is, we want to choose a negative example ti that is similar to xi according to the current model parameters. The downside of this approach is that we may occasionally choose a phrase ti that is actually a true paraphrase of xi. We also tried a strategy in which we selected the least similar phrase that would trigger an update (i.e., g(ti) ·g(xi) > g(x1) ·g(x2)−δ), but we found the simpler strategy above to work better and used it for all experiments reported below.\nDiscussion The objective in Eq. 1 is similar to one used by Socher et al. (2014), but with several differences. Their objective compared text and projected images. They also did not update the underlying word embeddings; we do so here, and in a way such\nthat they are penalized from deviating from their initialization. Also for a given 〈x1, x2〉, they do not select a single t1 and t2 as we do, but use the entire training set, which can be very expensive with a large training dataset.\nWe also experimented with a simpler objective that sought to directly minimize the squared L2norm between g(x1) and g(x2) in each pair, along with the same regularization terms as in Eq. 1. One problem with this objective function is that the global minimum is 0 and is achieved simply by driving the parameters to 0. We obtained much better results using the objective in Eq. 1.\nTraining Word Paraphrase Models To train just word vectors on word paraphrase pairs (again from PPDB), we used the same objective function as above, but simply dropped the composition terms. This gave us an objective that bears some similarity to the skip-gram objective with negative sampling in word2vec (Mikolov et al., 2013a). Both seek to maximize the dot products of certain word pairs while minimizing the dot products of others. This objective function is:\nmin Ww\n1\n|X|\n( ∑\n〈x1,x2〉∈X max(0, δ −W (x1)w ·W (x2)w\n+W (x1)w ·W (t1)w ) + max(0, δ −W (x1)w ·W (x2)w +\nW (x2)w ·W (t2)w ) ) + λWw ‖Wwinitial −Ww‖2 (2)\nIt is like Eq. 1 except with word vectors replacing the RNN composition function and with the regularization terms on the W and b removed.\nWe further found we could improve this model by incorporating constraints. From our training pairs, for a given word w, we assembled all other words that were paired with it in PPDB and all of their lemmas. These were then used as constraints during the pairing process: a word t could only be paired with w if it was not in its list of assembled words."
  }, {
    "heading": "5 Experiments – Word Paraphrasing",
    "text": "We first present experiments on learning lexical paraphrasability. We train on word pairs from PPDB and evaluate on the SimLex-999 dataset (Hill et al., 2014b), achieving the best results reported to date."
  }, {
    "heading": "5.1 Training Procedure",
    "text": "To learn word vectors that reflect paraphrasability, we optimized Eq. 2. There are many tunable hyperparameters with this objective, so to make training tractable we fixed the initial learning rates for the word embeddings to 0.5 and the margin δ to 1. Then we did a coarse grid search over a parameter space for λWw and the mini-batch size. We considered λWw values in {10−2, 10−3, ..., 10−7, 0} and minibatch sizes in {100, 250, 500, 1000}. We trained for 20 epochs for each set of hyperparameters using AdaGrad (Duchi et al., 2011).\nFor all experiments, we initialized our word vectors with skip-gram vectors trained using word2vec (Mikolov et al., 2013a). The vectors were trained on English Wikipedia (tokenized and lowercased, yielding 1.8B tokens).9 We used a window size of 5 and a minimum count cut-off of 60, producing vectors for approximately 270K word types. We retained vectors for only the 100K most frequent words, averaging the rest to obtain a single vector for unknown words. We will refer to this set of the 100K most frequent words as our vocabulary."
  }, {
    "heading": "5.2 Extracting Training Data",
    "text": "For training, we extracted word pairs from the lexical XL section of PPDB. We used the XL data for all experiments, including those for phrases. We used XL instead of XXL because XL has better quality overall while still being large enough so that we could be selective in choosing training pairs. There are a total of 548,085 pairs. We removed 174,766 that either contained numerical digits or words not in our vocabulary. We then removed 260,425 redundant pairs, leaving us with a final training set of 112,894 word pairs."
  }, {
    "heading": "5.3 Tuning and Evaluation",
    "text": "Hyperparameters were tuned using the wordsim-353 (WS353) dataset (Finkelstein et al., 2001), specifically its similarity (WS-S) and relatedness (WS-R) partitions (Agirre et al., 2009). In particular, we tuned to maximize 2×WS-S correlation minus the WS-R correlation. The idea was to reward vectors with high similarity and relatively low relatedness, in order to target the paraphrase relationship.\n9We used the December 2, 2013 snapshot.\nAfter tuning, we evaluated the best hyperparameters on the SimLex-999 (SL999) dataset (Hill et al., 2014b). We chose SL999 as our primary test set as it most closely evaluates the paraphrase relationship. Even though WS-S is a close approximation to this relationship, it does not include pairs that are merely associated and assigned low scores, which SL999 does (see discussion in Hill et al., 2014b).\nNote that for all experiments we used cosine similarity as our similarity metric and evaluated the statistical significance of dependent correlations using the one-tailed method of (Steiger, 1980)."
  }, {
    "heading": "5.4 Results",
    "text": "Table 3 shows results on SL999 when improving the initial word vectors by training on word pairs from PPDB, both with and without constraints. The “PARAGRAM WS” rows show results when tuning to maximize 2×WS-S − WS-R. We also show results for strong skip-gram baselines and the best results from the literature, including the state-of-the-art results from Hill et al. (2014a) as well as the interannotator agreement from Hill et al. (2014b).10\nThe table illustrates that, by training on PPDB, we can surpass the previous best correlations on SL999 by 4-6% absolute, achieving the best results reported to date. We also find that we can train low-dimensional word vectors that exceed the performance of much larger vectors. This is very useful as using large vectors can increase both time and memory consumption in NLP applications.\nTo generate word vectors to use for downstream 10Hill et al. (2014a) did not report the dimensionality of the\nvectors that led to their state-of-the-art results.\napplications, we chose hyperparameters so as to maximize performance on SL999.11 These word vectors, which we refer to as PARAGRAM vectors, had a ρ of 0.57 on SL999. We use them as initial word vectors for the remainder of the paper."
  }, {
    "heading": "5.5 Sentiment Analysis",
    "text": "As an extrinsic evaluation of our PARAGRAM word vectors, we used them in a convolutional neural network (CNN) for sentiment analysis. We used the simple CNN from Kim (2014) and the binary sentence-level sentiment analysis task from Socher et al. (2013). We used the standard data splits, removing examples with a neutral rating. We trained on all constituents in the training set while only using full sentences from development and test, giving us train/development/test sizes of 67,349/872/1,821.\nThe CNN usesm-gram filters, each of which is an m×n vector. The CNN computes the inner product between an m-gram filter and each m-gram in an example, retaining the maximum match (so-called “max-pooling”). The score of the match is a single dimension in a feature vector for the example, which is then associated with a weight in a linear classifier used to predict positive or negative sentiment.\nWhile Kim (2014) used m-gram filters of several lengths, we only used unigram filters. We also fixed the word vectors during learning (called “static” by Kim). After learning, the unigram filters correspond to locations in the fixed word vector space. The learned classifier weights represent how strongly each location corresponds to positive or negative sentiment. We expect this static CNN to be more effective if the word vector space separates positive and negative sentiment.\nIn our experiments, we compared baseline skipgram embeddings to our PARAGRAM vectors. We used AdaGrad learning rate of 0.1, mini-batches of size 10, and a dropout rate of 0.5. We used 200 unigram filters and rectified linear units as the activation (applied to the filter output + filter bias). We trained for 30 epochs, predicting labels on the development set after each set of 3,000 examples. We recorded the highest development accuracy and used those parameters to predict labels on the test set.\nResults are shown in Table 4. We see improve-\n11We did not use constraints during training.\nments over the baselines when using PARAGRAM vectors, even exceeding the performance of higherdimensional skip-gram vectors."
  }, {
    "heading": "6 Experiments – Compositional Paraphrasing",
    "text": "In this section, we describe experiments on a variety of compositional phrase-based paraphrasing tasks. We start with the simplest case of bigrams, and then proceed to short phrases. For all tasks, we again train on appropriate data from PPDB and test on various evaluation datasets, including our two novel datasets (Annotated-PPDB and ML-Paraphrase)."
  }, {
    "heading": "6.1 Training Procedure",
    "text": "We trained our models by optimizing Eq. 1 using AdaGrad (Duchi et al., 2011). We fixed the initial learning rates to 0.5 for the word embeddings and 0.05 for the composition parameters, and the margin to 1. Then we did a coarse grid search over a parameter space for λWw , λW , and mini-batch size.\nFor λWw , our search space again consisted of {10−2, 10−3, ..., 10−7, 0}, for λW it was {10−1, 10−2, 10−3, 0}, and we explored batch sizes of {100, 250, 500, 1000, 2000}. When initializing with PARAGRAM vectors, the search space for λWw was shifted upwards to be {10, 1, 10−1, 10−3, ..., 10−6} to reflect our increased confidence in the initial vectors. We trained only for 5 epochs for each set of parameters. For baselines, we used the same initial skip-gram vectors as in Section 5."
  }, {
    "heading": "6.2 Evaluation and Baselines",
    "text": "For all experiments, we again used cosine similarity as our similarity metric and evaluated the statistical significance using the method of (Steiger, 1980).\nA baseline used in all compositional experiments is vector addition of skip-gram (or PARAGRAM) word vectors. Unlike explicit word vectors, where\npoint-wise multiplication acts as a conjunction of features and performs well on composition tasks (Mitchell and Lapata, 2008), using addition with skip-gram vectors (Mikolov et al., 2013b) gives better performance than multiplication."
  }, {
    "heading": "6.3 Bigram Paraphrasability",
    "text": "To evaluate our ability to paraphrase bigrams, we consider the original bigram similarity task from Mitchell and Lapata (2010) as well as our newlyannotated version of it: ML-Paraphrase.\nExtracting Training Data Training data for these tasks was extracted from the XL portion of PPDB. The bigram similarity task from Mitchell and Lapata (2010) contains three types of bigrams: adjectivenoun (JN), noun-noun (NN), and verb-noun (VN). We aimed to collect pairs from PPDB that mirrored these three types of bigrams.\nWe found parsing to be unreliable on such short segments of text, so we used a POS tagger (Manning et al., 2014) to tag the tokens in each phrase. We then used the word alignments in PPDB to extract bigrams for training. For JN and NN, we extracted pairs containing aligned, adjacent tokens in the two phrases with the appropriate part-of-speech tag. Thus we extracted pairs like 〈easy job, simple task〉 for the JN section and 〈town meeting, town council〉 for the NN section. We used a different strategy for extracting training data for the VN subset: we took aligned VN tokens and took the closest noun after the verb. This was done to approximate the direct object that would have been ideally extracted with a dependency parse. An example from this section is 〈achieve goal, achieve aim〉.\nWe removed phrase pairs that (1) contained words not in our vocabulary, (2) were redundant with others, (3) contained brackets, or (4) had Levenshtein distance ≤ 1. The final criterion helps to ensure that we train on phrase pairs with non-trivial differences. The final training data consisted of 133,997 JN pairs, 62,640 VN pairs and 35,601 NN pairs.\nBaselines In addition to RNN models, we report baselines that use vector addition as the composition function, both with our skip-gram embeddings and PARAGRAM embeddings from Section 5.\nWe also compare to several results from prior work. When doing so, we took their best correla-\ntions for each data subset. That is, the JN and NN results from Mitchell and Lapata (2010) use their multiplicative model and the VN results use their dilation model. From Hashimoto et al. (2014) we used their PAS-CLBLM Addl and PAS-CLBLM Addnl models. We note that their vector dimensionalities are larger than ours, using n = 2000 and 50 respectively.\nResults Results are shown in Table 5. We report results on the test portion of the original Mitchell and Lapata (2010) dataset (ML) as well as the entirety of our newly-annotated dataset (MLParaphrase). RNN results on ML were tuned on the respective development sections and RNN results on ML-Paraphrase were tuned on the entire ML dataset.\nOur RNN model outperforms results from the literature on most sections in both datasets and its average correlations are among the highest.12 The one subset of the data that posed difficulty was the NN section of the ML dataset. We suspect this is due to the reasons discussed in Section 3.2; for our MLParaphrase dataset, by contrast, we do see gains on the NN section.\nWe also outperform the strong baseline of adding 1000-dimensional skip-gram embeddings, a model with 40 times the number of parameters, on our MLParaphrase dataset. This baseline had correlations of 0.45, 0.43, and 0.47 on the JN, NN, and VN partitions, with an average of 0.45—below the average ρ of the RNN (0.52) and even the {PARAGRAM, +} model (0.46).\n12The results obtained here differ from those reported in Hashimoto et al. (2014) as we scored their vectors with a newer Python implementation of Spearman ρ that handles ties (Hashimoto, P.C.).\nInterestingly, the type of vectors used to initialize the RNN has a significant effect on performance. If we initialize using the 25-dimensional skip-gram vectors, the average ρ on ML-Paraphrase drops to 0.43, below even the {PARAGRAM, +} model."
  }, {
    "heading": "6.4 Phrase Paraphrasability",
    "text": "In this section we show that by training a model based on filtered phrase pairs in PPDB, we can actually distinguish between quality paraphrases and poor paraphrases in PPDB better than the original heuristic scoring scheme from Ganitkevitch et al. (2013).\nExtracting Training Data As before, training data was extracted from the XL section of PPDB. Similar to the procedure to create our AnnotatedPPDB dataset, phrases were filtered such that only those with a word overlap score of less than 0.5 were kept. We also removed redundant phrases and phrases that contained tokens not in our vocabulary. The phrases were then binned according to their effective size and 20,000 examples were selected from bins of effective sizes of 3, 4, and more than 5, creating a training set of 60,000 examples. Care was taken to ensure that none of our training pairs was also present in our development and test sets.\nBaselines We compare our models with strong lexical baselines. The first, strict word overlap, is the percentage of words in the smaller phrase that are also in the larger phrase. We also include a version where the words are lemmatized prior to the calculation.\nWe also train a support vector regression model (epsilon-SVR) (Chang and Lin, 2011) on the 33 features that are included for each phrase pair in PPDB.\nWe scaled the features such that each lies in the interval [−1, 1] and tuned the parameters using 5-fold cross validation on our dev set.13 We then trained on the entire dev set after finding the best performing C and combination and evaluated on the test set of Annotated-PPDB.\nResults We evaluated on our Annotated-PPDB dataset described in §3.1. Table 6 shows the Spearman correlations on the 1000-example test set. RNN models were tuned on the development set of 260 examples. All other methods had no hyperparameters and therefore required no tuning.\nWe note that the confidence estimates from Ganitkevitch et al. (2013) reach a ρ of 0.25 on the test set, similar to the results of strict overlap. While 25- dimensional skip-gram embeddings only reach 0.20, we can improve this to 0.32 by fine-tuning them using PPDB (thereby obtaining our PARAGRAM vectors). By using the PARAGRAM vectors to initialize the RNN, we reach a correlation of 0.40, which is better than the PPDB confidence estimates by 15% absolute.\nWe again consider addition of 1000-dimensional skip-gram embeddings as a baseline, and they continue to perform strongly (ρ = 0.37). The RNN initialized with PARAGRAM vectors does reach a higher ρ (0.40), but the difference is not statistically significant (p = 0.16). Thus we can achieve similarlystrong results with far fewer parameters.\nThis task also illustrates the importance of initializing our RNN model with appropriate word embeddings. An RNN initialized with skip-gram vectors\n13We tuned both parameters over {2−10, 2−9, ..., 210}.\nhas a modest ρ of 0.22, well below the ρ of the RNN initialized with PARAGRAM vectors. Clearly, initialization is important when optimizing non-convex objectives like ours, but it is noteworthy that our best results came from first improving the word vectors and then learning the composition model, rather than jointly learning both from scratch."
  }, {
    "heading": "7 Qualitative Analysis",
    "text": "We performed a qualitative analysis to uncover sources of error and determine differences between adding PARAGRAM vectors and using an RNN initialized with them. To do so, we took the output of both systems on Annotated-PPDB and mapped their cosine similarities to the interval [1, 5]. We then computed their absolute error as compared to the gold ratings.\nTable 7 shows how the average of these absolute errors changes with the magnitude of the gold ratings. The RNN performs better (has lower average absolute error) for less similar pairs. Vector addition only does better on the most similar pairs. This is presumably because the most positive pairs have high word overlap and so can be represented effectively with a simpler model.\nTo further investigate the differences between these models, we removed those pairs with gold scores in [2, 4], in order to focus on pairs with extreme scores. We identified two factors that distinguished the performance between the two models: length ratio and the amount of lexical overlap. We did not find evidence that non-compositional phrases, such as idioms, were a source of error as these were not found in ML-Paraphrase and only appear rarely in Annotated-PPDB.\nWe define length ratio as simply the number of tokens in the smaller phrase divided by the number of tokens in the larger phrase. Overlap ratio is the number of equivalent tokens in the phrase pair di-\nvided by the number of tokens in the smaller of the two phrases. Equivalent tokens are defined as tokens that are either exact matches or are paired up in the lexical portion of PPDB used to train the PARAGRAM vectors.\nTable 9 shows how the performance of the models changes under different values of length ratio and overlap ratio.14 The values in this table are the percentage changes in absolute error when using the RNN over the PARAGRAM vector addition model. So negative values indicate superior performance by the RNN.\nA few trends emerge from this table. One is that as the length ratio increases (i.e., the phrase pairs are closer in length), addition surpasses the RNN for positive examples. For negative examples, the\n14The bin delimiters were chosen to be uniform over the range of output values of the length ratio ([0.4,1] with one outlier data point removed) and overlap ratio ([0,1]).\ntrend is reversed. The same trend appears for overlap ratio. Examples from Annotated-PPDB illustrating these trends on positive examples are shown in Table 8.\nWhen considering both positive and negative examples (“Both”), we see that the RNN excels on the most difficult examples (large differences in phrase length and less lexical overlap). For easier examples, the two fare similarly overall (-2.0 to 0.0% change), but the RNN does much better on negative examples. This aligns with the intuition that addition should perform well when two paraphrastic phrases have high lexical overlap and similar length. But when they are not paraphrases, simple addition is misled and the RNN’s learned composition function better captures the relationship. This may suggest new architectures for modeling compositionality differently depending on differences in length and amount of overlap."
  }, {
    "heading": "8 Conclusion",
    "text": "We have shown how to leverage PPDB to learn state-of-the-art word embeddings and compositional models for paraphrase tasks. Since PPDB was created automatically from parallel corpora, our models are also built automatically. Only small amounts of annotated data are used to tune hyperparameters.\nWe also introduced two new datasets to evaluate compositional models of short paraphrases15, filling a gap in the NLP community, as currently there are no datasets created for this purpose. Successful models on these datasets can then be used to extend the coverage of, or provide an alternative to, PPDB.\n15http://web.engr.illinois.edu/˜wieting2/\nThere remains a great deal of work to be done in developing new composition models, whether with new network architectures or distance functions. In this work, we based our composition function on constituent parse trees, but this may not be the best approach—especially for short phrases. Dependency syntax may be a better alternative (Socher et al., 2014). Besides improving composition, another direction to explore is how to use models for short phrases in sentence-level paraphrase recognition and other downstream tasks."
  }, {
    "heading": "Acknowledgements",
    "text": "We thank the editor and the anonymous reviewers as well as Juri Ganitkevitch, Dan Roth, Weiran Wang, and Kazuma Hashimoto for their valuable comments and technical assistance. We also thank Chris Callison-Burch, Dipanjan Das, Kuzman Ganchev, Ellie Pavlick, Slav Petrov, Owen Rambow, David Sontag, Oscar Täckström, Kapil Thadani, Lyle Ungar, Benjamin Van Durme, and Mo Yu for helpful conversations."
  }],
  "year": 2015,
  "references": [{
    "title": "A study on similarity and relatedness using distributional and wordnet-based approaches",
    "authors": ["Eneko Agirre", "Enrique Alfonseca", "Keith Hall", "Jana Kravalova", "Marius Paşca", "Aitor Soroa."],
    "venue": "Proceedings of Human Language Technologies: The 2009 Annual Con-",
    "year": 2009
  }, {
    "title": "A survey of paraphrasing and textual entailment methods",
    "authors": ["Ion Androutsopoulos", "Prodromos Malakasiotis."],
    "venue": "Journal of Artificial Intelligence Research, pages 135–187.",
    "year": 2010
  }, {
    "title": "Paraphrasing with bilingual parallel corpora",
    "authors": ["Colin Bannard", "Chris Callison-Burch."],
    "venue": "Proceedings of the 43rd Annual Meeting on Association for Computational Linguistics, pages 597–604. Association for Computational Linguistics.",
    "year": 2005
  }, {
    "title": "Tailoring continuous word representations for dependency parsing",
    "authors": ["Mohit Bansal", "Kevin Gimpel", "Karen Livescu."],
    "venue": "Proceedings of the Annual Meeting of the Association for Computational Linguistics.",
    "year": 2014
  }, {
    "title": "Nouns are vectors, adjectives are matrices: Representing adjective-noun constructions in semantic space",
    "authors": ["Marco Baroni", "Roberto Zamparelli."],
    "venue": "In",
    "year": 2010
  }, {
    "title": "A neural probabilistic language model",
    "authors": ["Yoshua Bengio", "Réjean Ducharme", "Pascal Vincent", "Christian Janvin."],
    "venue": "The Journal of Machine Learning Research, 3:1137–1155.",
    "year": 2003
  }, {
    "title": "Semantic parsing via paraphrasing",
    "authors": ["Jonathan Berant", "Percy Liang."],
    "venue": "Proceedings of ACL.",
    "year": 2014
  }, {
    "title": "The meaning factory: Formal semantics for recognizing textual entailment and determining semantic similarity",
    "authors": ["Johannes Bjerva", "Johan Bos", "Rob van der Goot", "Malvina Nissim."],
    "venue": "SemEval 2014, page 642.",
    "year": 2014
  }, {
    "title": "A comparison of vector-based representations for semantic composition",
    "authors": ["William Blacoe", "Mirella Lapata."],
    "venue": "Proceedings of the 2012 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learn-",
    "year": 2012
  }, {
    "title": "Paraphrase substitution for recognizing textual entailment",
    "authors": ["Wauter Bosma", "Chris Callison-Burch."],
    "venue": "Proceedings of the 7th International Conference on Cross-Language Evaluation Forum: Evaluation of Multilingual and Multi-modal Information Re-",
    "year": 2007
  }, {
    "title": "Libsvm: a library for support vector machines",
    "authors": ["Chih-Chung Chang", "Chih-Jen Lin."],
    "venue": "ACM Transactions on Intelligent Systems and Technology (TIST), 2(3):27.",
    "year": 2011
  }, {
    "title": "Indexing by latent semantic analysis",
    "authors": ["Scott C. Deerwester", "Susan T Dumais", "Thomas K. Landauer", "George W. Furnas", "Richard A. Harshman."],
    "venue": "JAsIs, 41(6):391–407.",
    "year": 1990
  }, {
    "title": "Unsupervised construction of large paraphrase corpora: Exploiting massively parallel news sources",
    "authors": ["Bill Dolan", "Chris Quirk", "Chris Brockett."],
    "venue": "Proceedings of Coling 2004, pages 350–356, Geneva, Switzerland, Aug 23–Aug 27. COLING.",
    "year": 2004
  }, {
    "title": "Adaptive subgradient methods for online learning and stochastic optimization",
    "authors": ["John Duchi", "Elad Hazan", "Yoram Singer."],
    "venue": "J. Mach. Learn. Res., 12:2121–2159, July.",
    "year": 2011
  }, {
    "title": "Paraphrase-driven learning for open question answering",
    "authors": ["Anthony Fader", "Luke Zettlemoyer", "Oren Etzioni."],
    "venue": "Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pages 1608–1618, Sofia, Bul-",
    "year": 2013
  }, {
    "title": "Retrofitting word vectors to semantic lexicons",
    "authors": ["Manaal Faruqui", "Jesse Dodge", "Sujay Kumar Jauhar", "Chris Dyer", "Eduard Hovy", "Noah A. Smith."],
    "venue": "Proceedings of the 2015 Conference of the North American Chapter of the Association for Computational Lin-",
    "year": 2015
  }, {
    "title": "Placing search in context: The concept revisited",
    "authors": ["Lev Finkelstein", "Evgeniy Gabrilovich", "Yossi Matias", "Ehud Rivlin", "Zach Solan", "Gadi Wolfman", "Eytan Ruppin."],
    "venue": "Proceedings of the 10th international conference on World Wide Web, pages 406–414. ACM.",
    "year": 2001
  }, {
    "title": "A Synopsis of Linguistic Theory, 19301955",
    "authors": ["J.R. Firth"],
    "year": 1957
  }, {
    "title": "Ppdb: The paraphrase database",
    "authors": ["Juri Ganitkevitch", "Benjamin Van Durme", "Chris Callison-Burch."],
    "venue": "HLT-NAACL, pages 758–764. The Association for Computational Linguistics.",
    "year": 2013
  }, {
    "title": "Jointly learning word representations and composition functions using predicate-argument structures",
    "authors": ["Kazuma Hashimoto", "Pontus Stenetorp", "Makoto Miwa", "Yoshimasa Tsuruoka."],
    "venue": "Proceedings of the 2014 Conference on Empirical Methods in Natural",
    "year": 2014
  }, {
    "title": "Not all neural embeddings are born equal",
    "authors": ["Felix Hill", "KyungHyun Cho", "Sebastien Jean", "Coline Devin", "Yoshua Bengio."],
    "venue": "arXiv preprint arXiv:1410.0718.",
    "year": 2014
  }, {
    "title": "Simlex-999: Evaluating semantic models with (genuine) similarity estimation",
    "authors": ["Felix Hill", "Roi Reichart", "Anna Korhonen."],
    "venue": "CoRR, abs/1408.3456.",
    "year": 2014
  }, {
    "title": "Convolutional neural networks for sentence classification",
    "authors": ["Yoon Kim."],
    "venue": "Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 1746–1751, Doha, Qatar, October. Association for Computational Linguistics.",
    "year": 2014
  }, {
    "title": "The Stanford CoreNLP natural language processing toolkit",
    "authors": ["Christopher D. Manning", "Mihai Surdeanu", "John Bauer", "Jenny Finkel", "Steven J. Bethard", "David McClosky."],
    "venue": "Proceedings of 52nd Annual Meeting of the Association for Computational Linguistics:",
    "year": 2014
  }, {
    "title": "Improved statistical machine translation using monolingually-derived paraphrases",
    "authors": ["Yuval Marton", "Chris Callison-Burch", "Philip Resnik."],
    "venue": "Proceedings of the 2009 Conference on Empirical Methods in Natural Language Processing, pages 381–390, Singapore, Au-",
    "year": 2009
  }, {
    "title": "Efficient estimation of word representations in vector space",
    "authors": ["Tomas Mikolov", "Kai Chen", "Greg Corrado", "Jeffrey Dean."],
    "venue": "arXiv preprint arXiv:1301.3781.",
    "year": 2013
  }, {
    "title": "Distributed representations of words and phrases and their compositionality",
    "authors": ["Tomas Mikolov", "Ilya Sutskever", "Kai Chen", "Greg S Corrado", "Jeff Dean."],
    "venue": "Advances in Neural Information Processing Systems, pages 3111–3119.",
    "year": 2013
  }, {
    "title": "Vector-based models of semantic composition",
    "authors": ["Jeff Mitchell", "Mirella Lapata."],
    "venue": "ACL, pages 236– 244. Citeseer.",
    "year": 2008
  }, {
    "title": "Composition in distributional models of semantics",
    "authors": ["Jeff Mitchell", "Mirella Lapata."],
    "venue": "Cognitive Science, 34(8):1388–1439.",
    "year": 2010
  }, {
    "title": "Glove: Global vectors for word representation",
    "authors": ["Jeffrey Pennington", "Richard Socher", "Christopher D Manning."],
    "venue": "Proceedings of the Empiricial Methods in Natural Language Processing (EMNLP 2014), 12.",
    "year": 2014
  }, {
    "title": "Monolingual machine translation for paraphrase generation",
    "authors": ["Chris Quirk", "Chris Brockett", "William Dolan."],
    "venue": "Dekang Lin and Dekai Wu, editors, Proceedings of EMNLP 2004, pages 142–149, Barcelona, Spain, July. Association for Computational Linguis-",
    "year": 2004
  }, {
    "title": "Augmenting FrameNet via PPDB",
    "authors": ["Pushpendre Rastogi", "Benjamin Van Durme."],
    "venue": "Proceedings of the Second Workshop on EVENTS: Definition, Detection, Coreference, and Representation, pages 1–5, Baltimore, Maryland, USA, June. Association for Compu-",
    "year": 2014
  }, {
    "title": "Exploiting paraphrases in a question answering system",
    "authors": ["Fabio Rinaldi", "James Dowdall", "Kaarel Kaljurand", "Michael Hess", "Diego Mollá."],
    "venue": "Proceedings of the Second International Workshop on Paraphrasing, pages 25–32, Sapporo, Japan, July. As-",
    "year": 2003
  }, {
    "title": "Learning continuous phrase representations and syntactic parsing with recursive neural networks",
    "authors": ["Richard Socher", "Christopher D Manning", "Andrew Y Ng."],
    "venue": "Proceedings of the NIPS-2010 Deep Learning and Unsupervised Feature Learning Workshop,",
    "year": 2010
  }, {
    "title": "Dynamic pooling and unfolding recursive autoencoders for paraphrase detection",
    "authors": ["Richard Socher", "Eric H Huang", "Jeffrey Pennin", "Christopher D Manning", "Andrew Y Ng."],
    "venue": "Advances in Neural Information Processing Systems, pages 801–809.",
    "year": 2011
  }, {
    "title": "Recursive deep models for semantic compositionality over a sentiment treebank",
    "authors": ["Richard Socher", "Alex Perelygin", "Jean Wu", "Jason Chuang", "Christopher D. Manning", "Andrew Ng", "Christopher Potts."],
    "venue": "Proceedings of the 2013 Conference on Empirical Meth-",
    "year": 2013
  }, {
    "title": "Tests for comparing elements of a correlation matrix",
    "authors": ["James H Steiger."],
    "venue": "Psychological Bulletin, 87(2):245.",
    "year": 1980
  }, {
    "title": "Semi-markov phrasebased monolingual alignment",
    "authors": ["Xuchen Yao", "Benjamin Van Durme", "Chris CallisonBurch", "Peter Clark."],
    "venue": "EMNLP, pages 590– 600.",
    "year": 2013
  }, {
    "title": "Improving lexical embeddings with semantic knowledge",
    "authors": ["Mo Yu", "Mark Dredze."],
    "venue": "Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics (Volume 2: Short Papers), pages 545–550, Baltimore, Maryland, June. Association for",
    "year": 2014
  }, {
    "title": "Learning composition models for phrase embeddings",
    "authors": ["Mo Yu", "Mark Dredze."],
    "venue": "Transactions of the Association for Computational Linguistics, 3:227– 242.",
    "year": 2015
  }, {
    "title": "Estimating linear models for compositional distributional semantics",
    "authors": ["Fabio Massimo Zanzotto", "Ioannis Korkontzelos", "Francesca Fallucchi", "Suresh Manandhar."],
    "venue": "Proceedings of the 23rd International Conference on Computational Linguis-",
    "year": 2010
  }],
  "id": "SP:b130b6387b105ecd9b4718b179b1e128157f9516",
  "authors": [{
    "name": "John Wieting",
    "affiliations": []
  }, {
    "name": "Mohit Bansal",
    "affiliations": []
  }, {
    "name": "Kevin Gimpel",
    "affiliations": []
  }, {
    "name": "Karen Livescu",
    "affiliations": []
  }],
  "abstractText": "The Paraphrase Database (PPDB; Ganitkevitch et al., 2013) is an extensive semantic resource, consisting of a list of phrase pairs with (heuristic) confidence estimates. However, it is still unclear how it can best be used, due to the heuristic nature of the confidences and its necessarily incomplete coverage. We propose models to leverage the phrase pairs from the PPDB to build parametric paraphrase models that score paraphrase pairs more accurately than the PPDB’s internal scores while simultaneously improving its coverage. They allow for learning phrase embeddings as well as improved word embeddings. Moreover, we introduce two new, manually annotated datasets to evaluate short-phrase paraphrasing models. Using our paraphrase model trained using PPDB, we achieve state-of-the-art results on standard word and bigram similarity tasks and beat strong baselines on our new short phrase paraphrase tasks.1",
  "title": "From Paraphrase Database to Compositional Paraphrase Model and Back"
}