{
  "sections": [{
    "heading": "1. Introduction",
    "text": "Reasoning is a key concept in artificial intelligence. A host of applications such as search engines, question-answering systems, conversational dialogue systems, and social networks require reasoning over underlying structured knowledge. Effective representation and learning over such knowledge has come to the fore as a very important task. In particular, Knowledge Graphs have gained much attention as an important model for studying complex multi-relational settings. Traditionally, knowledge graphs are considered to be static snapshot of multi-relational data. However, recent availability of large amount of event based interaction data that exhibits complex temporal dynamics in addition to its multi-relational nature has created the need for approaches that can characterize and reason over tempo-\n1College of Computing, Georgia Institute of Technology. Correspondence to: Rakshit Trivedi <rstrivedi@gatech.edu>, Le Song <lsong@cc.gatech.edu>.\nProceedings of the 34 th International Conference on Machine Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017 by the author(s).\nrally evolving systems. For instance, GDELT (Leetaru & Schrodt, 2013) and ICEWS (Boschee et al., 2017) are two popular event based data repository that contains evolving knowledge about entity interactions across the globe.\nThus traditional knowledge graphs need to be augmented into Temporal Knowledge Graphs, where facts occur, recur or evolve over time in these graphs, and each edge in the graphs have temporal information associated with it. Figure 1 shows a subgraph snapshot of such temporal knowledge graph. Static knowledge graphs suffer from incompleteness resulting in their limited reasoning ability. Most work on static graphs have therefore focussed on advancing entity-relationship representation learning to infer missing facts based on available knowledge. But these methods lack ability to use rich temporal dynamics available in underlying data represented by temporal knowledge graphs.\nEffectively capturing temporal dependencies across facts in addition to the relational (structural) dependencies can help improve the understanding on behavior of entities and how they contribute to generation of facts over time. For example, one can precisely answer questions like:\n• Object prediction. (Who) will Donald Trump mention next?\n• Subject prediction. (Which country) will provide material support to US next month?\n• Time prediction. (When) will Bob visit Burger King?\n”People (entities) change over time and so do relationships.” When two entities forge a relationship, the newly formed edge drives their preferences and behavior. This change is effected by combination of their own historical factors (temporal evolution) and their compatibility with the historical factors of the other entity (mutual evolution).\nFor instance, if two countries have tense relationships, they are more likely to engage in conflicts. On the other hand, two countries forging an alliance are most likely to take confrontational stands against enemies of each other. Finally, time plays a vital role in this process. A country that was once peaceful may not have same characteristics 10 years in future due to various facts (events) that may occur during that period. Being able to capture this temporal and evolutionary effects can help us reason better about future relationship of an entity. We term this combined phenomenon of evolving entities and their dynamically changing relationships over time as “knowledge evolution”.\nIn this paper, we propose an elegant framework to model knowledge evolution and reason over complex non-linear interactions between entities in a multi-relational setting. The key idea of our work is to model the occurrence of a fact as multidimensional temporal point process whose conditional intensity function is modulated by the relationship score for that fact. The relationship score further depends on the dynamically evolving entity embeddings. Specifically, our work makes the following contributions:\n• We propose a novel deep learning architecture that evolves over time based on availability of new facts. The dynamically evolving network will ingest the incoming new facts, learn from them and update the embeddings of involved entities based on their recent relationships and temporal behavior. • Besides predicting the occurrence of a fact, our architecture has ability to predict time when the fact may potentially occur which is not possible by any prior relational learning approaches to the best of our knowledge. • Our model supports Open World Assumption as missing links are not considered to be false and may potentially occur in future. It further supports prediction over unseen entities due to its novel dynamic embedding process. • The large-scale experiments on two real world datasets show that our framework has consistently and significantly better performance for link prediction than stateof-arts that do not account for temporal and evolving non-linear dynamics. • Our work aims to introduce the use of powerful mathematical tool of temporal point process framework for temporal reasoning over dynamically evolving knowledge graphs. It has potential to open a new research direction in reasoning over time for various multi-relational settings with underlying spatio-temporal dynamics."
  }, {
    "heading": "2. Preliminaries",
    "text": ""
  }, {
    "heading": "2.1. Temporal Point Process",
    "text": "A temporal point process (Cox & Lewis, 2006) is a random process whose realization consists of a list of events localized in time, {ti} with ti ∈ R+. Equivalently, a given temporal point process can be represented as a counting process, N(t), which records the number of events before time t.\nAn important way to characterize temporal point processes is via the conditional intensity function λ(t), a stochastic model for the time of the next event given all the previous events. Formally, λ(t)dt is the conditional probability of observing an event in a small window [t, t+ dt) given the history T (t) := {tk|tk < t} up to t, i.e.,\nλ(t)dt := P {event in [t, t+ dt)|T (t)} = E[dN(t)|T (t)]\n(1)\nwhere one typically assumes that only one event can happen in a small window of size dt, i.e., dN(t) ∈ {0, 1}.\nFrom the survival analysis theory (Aalen et al., 2008), given the history T = {t1, . . . , tn}, for any t > tn, we characterize the conditional probability that no event happens during [tn, t) as S(t|T ) = exp ( − ∫ t tn λ(τ) dτ ) . Moreover, the conditional density that an event occurs at time t is defined as : f(t) = λ(t)S(t) (2)\nThe functional form of the intensity λ(t) is often designed to capture the phenomena of interests. Some Common forms include: Poisson Process, Hawkes processes (Hawkes, 1971), Self-Correcting Process (Isham & Westcott, 1979), Power Law and Rayleigh Process.\nRayleigh Process is a non-monotonic process and is welladapted to modeling fads, where event likelihood drops rapidly after rising to a peak. Its intensity function is λ(t) = α · (t), where α > 0 is the weight parameter, and the log survival function is logS(t|α) = −α · (t)2/2."
  }, {
    "heading": "2.2. Temporal Knowledge Graph representation",
    "text": "We define a Temporal Knowledge Graph (TKG) as a multirelational directed graph with timestamped edges between any pair of nodes. In a TKG, each edge between two nodes represent an event in the real world and edge type (relationship) represent the corresponding event type. Further an edge may be available multiple times (recurrence). We do not allow duplicate edges and self-loops in graph. Hence, all recurrent edges will have different time points and every edge will have distinct subject and object entities.\nGiven ne entities and nr relationships, we extend traditional triplet representation for knowledge graphs to introduce time dimension and represent each fact in TKG as a quadruplet (es, r, eo, t), where es, eo ∈ {1, . . . , ne}, es 6= eo,\nr ∈ {1, . . . , nr}, t ∈ R+. It represents the creation of relationship edge r between subject entity es, and object entity eo at time t. The complete TKG can therefore be represented as an ne × ne × nr × T - dimensional tensor where T is the total number of available time points. Consider a TKG comprising of N edges and denote the globally ordered set of corresponding N observed events as D = {(es, r, eo, t)n}Nn=1, where 0 ≤ t1 ≤ t2 . . . ≤ T ."
  }, {
    "heading": "3. Evolutionary Knowledge Network",
    "text": "We present our unified knowledge evolution framework (Know-Evolve) for reasoning over temporal knowledge graphs. The reasoning power of Know-Evolve stems from the following three major components:\n1. A powerful mathematical tool of temporal point process that models occurrence of a fact.\n2. A bilinear relationship score that captures multirelational interactions between entities and modulates the intensity function of above point process.\n3. A novel deep recurrent network that learns non-linearly and mutually evolving latent representations of entities based on their interactions with other entities in multirelational space over time."
  }, {
    "heading": "3.1. Temporal Process",
    "text": "Large scale temporal knowledge graphs exhibit highly heterogeneous temporal patterns of events between entities. Discrete epoch based methods to model such temporal behavior fail to capture the underlying intricate temporal dependencies. We therefore model time as a random variable and use temporal point process to model occurrence of fact.\nMore concretely, given a set of observed events O corresponding to a TKG, we construct a relationship-modulated multidimensional point process to model occurrence of these events. We characterize this point process with the following conditional intensity function:\nλe s,eo r (t|t̄) = f(ge s,eo r (t̄)) ∗ (t− t̄) (3)\nwhere t > t̄, t is the time of the current event and t̄ = max(te\ns−, teo−) is the most recent time point when either subject or object entity was involved in an event before time t. Thus, λe s,eo\nr (t|t̄) represents intensity of event involving triplet (es, r, ej) at time t given previous time point t̄ when either es or eo was involved in an event. This modulates the intensity of current event based on most recent activity on either entities’ timeline and allows to capture scenarios like non-periodic events and previously unseen events. f(·) = exp(·) ensures that intensity is positive and well defined."
  }, {
    "heading": "3.2. Relational Score Function",
    "text": "The first term in (3) modulates the intensity function by the relational compatibility score between the involved enti-\nties in that specific relationship. Specifically, for an event (es, r, eo, t) ∈ D occurring at time t, the score term ges,eor is computed using a bilinear formulation as follows:\nge s,eo r (t) = v es(t−)T ·Rr · ve o (t−) (4)\nwhere ve s , ve s ∈ Rd represent latent feature embeddings of entities appearing in subject and object position respectively. Rr ∈ Rd×d represents relationship weight matrix which attempts to capture interaction between two entities in the specific relationship space r. This matrix is unique for each relation in dataset and is learned during training. t is time of current event and t− represent time point just before time t. ve s\n(t−) and veo(t−), therefore represent most recently updated vector embeddings of subject and object entities respectively before time t. As these entity embeddings evolve and update over time, ge s,eo\nr (t) is able to capture cumulative knowledge learned about the entities over the history of events that have affected their embeddings."
  }, {
    "heading": "3.3. Dynamically Evolving Entity Representations",
    "text": "We represent latent feature embedding of an entity e at time t with a low-dimensional vector ve(t). We add superscript s and o as shown in Eq. (4) to indicate if the embedding corresponds to entity in subject or object position respectively. We also use relationship-specific low-dimensional representation for each relation type.\nThe latent representations of entities change over time as entities forge relationships with each other. We design novel deep recurrent neural network based update functions to capture mutually evolving and nonlinear dynamics of entities in their vector space representations. We consider an event m = (es, r, eo, t)m ∈ D occurring at time t. Also, consider that event m is entity es’s p-th event while it is entity eo’s q-th event. As entities participate in events in a heterogeneous pattern, it is less likely that p = q although not impossible. Having observed this event, we update the embeddings of two involved entities as follows:\nSubject Embedding:\nve s\n(tp) = σ(W s t(tp − tp−1) + Whh · he\ns\n(tp−)) he s (tp−) = σ(Wh · [ve s (tp−1)⊕ ve o (tp−)⊕ re s p−1])\n(5)\nObject Embedding:\nve o\n(tq) = σ(W o t (tq − tq−1) + Whh · he\no\n(tq−)) he o (tq−) = σ(Wh · [ve o (tq−1)⊕ ve s (tq−)⊕ re o q−1])\n(6)\nwhere, ve s , ve o ∈ Rd. tp = tq = tm is the time of observed event. For subject embedding update in Eq. (5), tp−1 is the time point of the previous event in which entity es was\ninvolved. tp− is the timepoint just before time tp. Hence, ve s\n(tp−1) represents latest embedding for entity es that was updated after (p − 1)-th event for that entity. veo(tp−) represents latest embedding for entity eo that was updated any time just before tp = tm. This accounts for the fact that entity eo may have been involved in some other event during the interval between current (p) and previous (p− 1) event of entity es. re s\np−1 ∈ Rc represent relationship embedding that corresponds to relationship type of the (p− 1)-th event of entity es. Note that the relationship vectors are static and do not evolve over time. he s\n(tp−) ∈ Rd is the hidden layer. The semantics of notations apply similarly to object embedding update in Eq. (6).\nWst,W o t ∈ Rd×1, Whh ∈ Rd×l and Wh ∈ Rl×(2d+c) are weight parameters in network learned during training. Wst,W o t captures variation in temporal drift for subject and object respectively. Whh is shared parameter that captures recurrent participation effect for each entity. Wh is a shared projection matrix applied to consider the compatibility of entities in their previous relationships. ⊕ represent simple concatenation operator. σ(·) denotes nonlinear activation function (tanh in our case). Our formulations use simple RNN units but it can be replaced with more expressive\nunits like LSTM or GRU in straightforward manner. In our experiments, we choose d = l and d 6= c but they can be chosen differently. Below we explain the rationales of our deep recurrent architecture that captures nonlinear evolutionary dynamics of entities over time.\nReasoning Based on Structural Dependency: The hidden layer (he s\n) reasons for an event by capturing the compatibility of most recent subject embedding with most recent object embedding in previous relationship of subject entity. This accounts for the behavior that within a short period of time, entities tend to form relationships with other entities that have similar recent actions and goals. This layer thereby uses historical information of the two nodes involved in current event and the edges they both created before this event. This holds symmetrically for hidden layer (he o ).\nReasoning based on Temporal Dependency: The recurrent layer uses hidden layer information to model the intertwined evolution of entity embeddings over time. Specifically this layer has two main components:\n• Drift over time: The first term captures the temporal difference between consecutive events on respective dimension of each entity. This captures the external influences\nthat entities may have experienced between events and allows to smoothly drift their features over time. This term will not contribute anything in case when multiple events happen for an entity at same time point (e.g. within a day in our dataset). While tp − tp−1 may exhibit high variation, the corresponding weight parameter will capture these variations and along with the second recurrent term, it will prevent ve s (tp) to collapse.\n• Relation-specific Mutual Evolution: The latent features of both subject and object entities influence each other. In multi-relational setting, this is further affected by the relationship they form. Recurrent update to entity embedding with the information from the hidden layer allows to capture the intricate non-linear and evolutionary dynamics of an entity with respect to itself and the other entity in a specific relationship space."
  }, {
    "heading": "3.4. Understanding Unified View of Know-Evolve",
    "text": "Figure (2) and Figure (3) shows the architecture of knowledge evolution framework and one step of our model.\nThe updates to the entity representations in Eq. (5) and (6) are driven by the events involving those entities which makes the embeddings piecewise constant i.e. an entity embedding remains unchanged in the duration between two events involving that entity and updates only when an event happens on its dimension. This is justifiable as an entity’s features may update only when it forges a relationship with other entity within the graph. Note that the first term in Eq. (5) and (6) already accounts for any external influences.\nHaving observed an event at time t, Know-Evolve considers it as an incoming fact that brings new knowledge about the entities involved in that event. It computes the intensity of that event in Eq. (3) which is based on relational compatibility score in Eq. (4) between most recent latent embeddings of involved entities. As these embeddings are piecewise constant, we use time interval term (t− t̄) in Eq. (3) to make the overall intensity piecewise linear which is standard mathematical choice for efficient computation in point process framework. This formulation naturally leads to Rayleigh distribution which models time interval between current event and most recent event on either entities’ dimension. Rayleigh distribution has an added benefit of having a simple analytic form of likelihood which can be further used to find entity for which the likelihood reaches maximum value and thereby make precise entity predictions."
  }, {
    "heading": "4. Efficient Training Procedure",
    "text": "The complete parameter space for the above model is: Ω = {{Ve}e=1:ne , {Rr}r=1:nr ,We,Wst,Wot ,Wh, Whh,Wr}. Although Know-Evolve gains expressive power from deep architecture, Table 4 (Appendix D) shows that the memory footprint of our model is comparable to\nsimpler relational models. The intensity function in (3) allows to use maximum likelihood estimation over all the facts as our objective function. Concretely, given a collection of facts recorded in a temporal window [0, T ), we learn the model by minimizing the joint negative log likelihood of intensity function (Daley & Vere-Jones, 2007) written as:\nL = − N∑ p=1 log ( λe s,eo r (tp|t̄p) )\n︸ ︷︷ ︸ happened events\n+ nr∑ r=1 ne∑ es=1 ne∑ eo=1 ∫ T 0 λe s,eo\nr (τ |τ̄) dτ︸ ︷︷ ︸ survival term\n(7)\nThe first term maximizes the probability of specific type of event between two entities; the second term penalizes non-presence of all possible types of events between all possible entity pairs in a given observation window. We use Back Propagation Through Time (BPTT) algorithm to train our model. Previous techniques (Du et al., 2016; Hidasi et al., 2016) that use BPTT algorithm decompose data into independent sequences and train on mini-batches of those sequences. But there exists intricate relational and temporal dependencies between data points in our setting which limits our ability to efficiently train by decomposing events into independent sequences. To address this challenge, we design an efficient Global BPTT algorithm (Algorithm 2, Appendix A) that creates mini-batches of events over global timeline in sliding window fashion and allows to capture dependencies across batches while retaining efficiency.\nIntractable Survival Term. To compute the second survival term in (7), since our intensity function is modulated by relation-specific parameter, for each relationship we need to compute survival probability over all pairs of entities. Next, given a relation r and entity pair (es, eo), we denote P(es,eo) as total number of events of type r involving either es or eo in window [T0, T ). As our intensity function is piecewise-linear, we can decompose the integration term − ∫ T T0 λe s,eo\nr (τ |τ̄)dτ into multiple time intervals where intensity is constant:∫ T\nT0\nλe s,eo\nr (τ |τ̄)dτ\n= P(es,eo)−1∑ p=1 ∫ tp+1 tp λe s,eo r (τ |τ̄)dτ\n= P(es,eo)−1∑ p=1 (t2p+1 − t2p) · exp(ve s (tp) T ·Rr · ve o (tp))\n(8)\nThe integral calculations in (8) for all possible triplets requiresO(n2r) computations (n is number of entities and r is the number of relations). This is computationally intractable\nAlgorithm 1 Survival Loss Computation in mini-batch Input: Minibatch E , size s, Batch Entity List bl loss = 0.0 for p = 0 to s− 1 do\nsubj feat = Ep → ve s\n(t−) obj feat = Ep → ve o\n(t−) rel weight = Ep → Rr t end = Ep → t subj surv = 0, obj surv = 0, total surv = 0 for i = 0 to bl.size do\nobj other = bl[i] if obj other == Ep → es then\ncontinue end if t̄ = max(te\ns−, teo−) subj surv += (t end2 − t̄2) · exp(subj featT · rel weight · obj other feat)\nend for for j = 0 to bl.size do\nsubj other = bl[i] if subj other == Ep → eo then\ncontinue end if t̄ = max(te\ns−, teo−) obj surv += (t end2 − t̄2) · exp(subj other featT · rel weight · obj feat)\nend for loss += subj surv + obj surv\nend for\nand also unnecessary. Knowledge tensors are inherently sparse and hence it is plausible to approximate the survival loss in a stochastic setting. We take inspiration from techniques like noise contrastive (Gutmann & Hyvärinen, 2012) estimation and adopt a random sampling strategy to compute survival loss: Given a mini-batch of events, for each relation in the mini-batch, we compute dyadic survival term across all entities in that batch. Algorithm 1 presents the survival loss computation procedure. While this procedure may randomly avoid penalizing some dimensions in a relationship, it still includes all dimensions that had events on them. The computational complexity for this procedure will be O(2n′r′m) where m is size of mini-batch and n′ and r′ represent number of entities and relations in the mini-batch."
  }, {
    "heading": "5. Experiments",
    "text": ""
  }, {
    "heading": "5.1. Temporal Knowledge Graph Data",
    "text": "We use two datasets: Global Database of Events, Language, and Tone (GDELT) (Leetaru & Schrodt, 2013) and Integrated Crisis Early Warning System (ICEWS) (Boschee et al., 2017) which has recently gained attention in learning community (Schein et al., 2016) as useful temporal KGs. GDELT data is collected from April 1, 2015 to Mar 31,\n2016 (temporal granularity of 15 mins). ICEWS dataset is collected from Jan 1, 2014 to Dec 31, 2014 (temporal granularity of 24 hrs). Both datasets contain records of events that include two actors, action type and timestamp of event. We use different hierarchy of actions in two datasets - (top level 20 relations for GDELT while last level 260 relations for ICEWS) - to test on variety of knowledge tensor configurations. Note that this does not filter any record from the dataset. We process both datasets to remove any duplicate quadruples, any mono-actor events (i.e., we use only dyadic events), and self-loops. We report our main results on full versions of each dataset. We create smaller version of both datasets for exploration purposes. Table 1 (Appendix B) provide statistics about the data and Table 2 (Appendix B) demonstrates the sparsity of knowledge tensor."
  }, {
    "heading": "5.2. Competitors",
    "text": "We compare the performance of our method with following relational learning methods: RESCAL, Neural Tensor Network (NTN), Multiway Neural Network (ER-MLP), TransE and TransR. To the best of our knowledge, there are no existing relational learning approaches that can predict time for a new fact. Hence we devised two baseline methods for evaluating time prediction performance — (i) Multi-dimensional Hawkes process (MHP): We model dyadic entity interactions as multi-dimensional Hawkes process similar to (Du et al., 2015). Here, an entity pair constitutes a dimension and for each pair we collect sequence of events on its dimension and train and test on that sequence. Relationship is not modeled in this setup. (ii) Recurrent Temporal Point Process (RTPP): We implement a simplified version of RMTPP (Du et al., 2016) where we do not predict the marker. For training, we concatenate static entity and relationship embeddings and augment the resulting vector with temporal feature. This augmented unit is used as input to global RNN which produces output vector ht. During test time, for a given triplet, we use this vector ht to compute conditional intensity of the event given history which is further used to predict next event time. Appendix C provides implementation details of our method and competitors."
  }, {
    "heading": "5.3. Evaluation Protocol",
    "text": "We report experimental results on two tasks: Link prediction and Time prediction.\nLink prediction: Given a test quadruplet (es, r, eo, t), we replace eo with all the entities in the dataset and compute the conditional density de s,eo\nr = λ es,eo r (t)S es,eo\nr (t) for the resulting quadruplets including the ground truth. We then sort all the quadruplets in the descending order of this density to rank the correct entity for object position. We also conduct testing after applying the filtering techniques described in (Bordes et al., 2013) - we only rank against the entities that do not generate a true triplet (seen in train) when it replaces\nground truth object. We report Mean Absolute Rank (MAR), Standard Deviation for MAR and HITS@10 (correct entity in top 10 predictions) for both Raw and Filtered Versions.\nTime prediction: Give a test triplet (es, r, eo), we predict the expected value of next time the fact (es, r, eo) can occur. This expectation is defined by: Ees,eor (t) =√\nπ\n2 exp(ge s,eo r (t)) , where ge\ns,eo\nr (t) is computed using equa-\ntion (4). We report Mean Absolute Error (MAE) between the predicted time and true time in hours.\nSliding Window Evaluation. As our work concentrates on temporal knowledge graphs, it is more interesting to see the performance of methods over time span of test set as compared to single rank value. This evaluation method can help to realize the effect of modeling temporal and evolutionary knowledge. We therefore partition our test set in 12 different slides and report results in each window. For both datasets, each slide included 2 weeks of time."
  }, {
    "heading": "5.4. Quantitative Analysis",
    "text": "Link Prediction Results. Figure (4, 5, 6) demonstrate link prediction performance comparison on both datasets. Know-Evolve significantly and consistently outperforms all competitors in terms of prediction rank without any dete-\nrioration over time. Neural Tensor Network’s second best performance compared to other baselines demonstrate its rich expressive power but it fails to capture the evolving dynamics of intricate dependencies over time. This is further substantiated by its decreasing performance as we move test window further in time.\nThe second row represents deviation error for MAR across samples in a given test window. Our method achieves significantly low deviation error compared to competitors making it most stable. Finally, high performance on HITS@10 metric demonstrates extensive discriminative ability of KnowEvolve. For instance, GDELT has only 20 relations but 32M events where many entities interact with each other in multiple relationships. In this complex setting, other methods depend only on static entity embeddings to perform prediction unlike our method which does effectively infers new knowledge using powerful evolutionary network and provides accurate prediction results.\nTime Prediction Results. Figure 7 demonstrates that Know-Evolve performs significantly better than other point process based methods for predicting time. MHP uses a specific parametric form of the intensity function which limits its expressiveness. Further, each entity pair interaction is modeled as an independent dimension and does not take\ninto account relational feature which fails to capture the intricate influence of different entities on each other. On the other hand, RTPP uses relational features as part of input, but it sees all events globally and cannot model the intricate evolutionary dependencies on past events. We observe that our method effectively captures such non-linear relational and temporal dynamics.\nIn addition to the superior quantitative performance, we demonstrate the effectiveness of our method by providing extensive exploratory analysis in Appendix E."
  }, {
    "heading": "6. Related Work",
    "text": "In this section, we discuss relevant works in relational learning and temporal modeling techniques."
  }, {
    "heading": "6.1. Relational Learning",
    "text": "Among various relational learning techniques, neural embedding models that focus on learning low-dimensional representations of entities and relations have shown stateof-the-art performance. These methods compute a score for the fact based on different operations on these latent representations. Such models can be mainly categorized into two variants:\nCompositional Models. RESCAL (Nickel et al., 2011) uses a relation specific weight matrix to explain triplets via pairwise interactions of latent features. Neural Tensor Network (NTN) (Socher et al., 2013) is more expressive model as it combines a standard NN layer with a bilinear tensor layer. (Dong et al., 2014) employs a concatenationprojection method to project entities and relations to lower dimensional space. Other sophisticated models include Holographic Embeddings (HoLE) (Nickel et al., 2016b) that employs circular correlation on entity embeddings and Neural Association Models (NAM) (Liu et al., 2016), a deep network used for probabilistic reasoning.\nTranslation Based Models. (Bordes et al., 2011) uses two relation-specific matrices to project subject and object entities and computes L1 distance to score a fact between two entity vectors. (Bordes et al., 2013) proposed TransE model that computes score as a distance between relation-specific translations of entity embeddings. (Wang et al., 2014) improved TransE by allowing entities to have distributed representations on relation specific hyperplane where distance\nbetween them is computed. TransR (Lin et al., 2015) extends this model to use separate semantic spaces for entities and relations and does translation in the relationship space.\n(Nickel et al., 2016a) and (Yang et al., 2015; Toutanova & Chen, 2015) contains comprehensive reviews and empirical comparison of relational learning techniques respectively. All these methods consider knowledge graphs as static models and lack ability to capture temporally evolving dynamics."
  }, {
    "heading": "6.2. Temporal Modeling",
    "text": "Temporal point processes have been shown as very effective tool to model various intricate temporal behaviors in networks (Yang & Zha, 2013; Farajtabar et al., 2014; 2015; Du et al., 2015; 2016; Wang et al., 2016a;b;c; 2017a;b). Recently, (Wang et al., 2016a; Dai et al., 2016b) proposed novel co-evolutionary feature embedding process that captures self-evolution and co-evolution dynamics of users and items interacting in a recommendation system. In relational setting, (Loglisci et al., 2015) proposed relational mining approach to discover changes in structure of dynamic network over time. (Loglisci & Malerba, 2017) proposes method to capture temporal autocorrelation in data to improve predictive performance. (Sharan & Neville, 2008) proposes summarization techniques to model evolving relational-temporal domains. Recently, (Esteban et al., 2016) proposed multiway neural network architecture for modeling event based relational graph. The authors draw a synergistic relation between a static knowledge graph and an event set wherein the knowledge graph provide information about entities participating in events and new events in turn contribute to enhancement of knowledge graph. They do not capture the evolving dynamics of entities and model time as discrete points which limits its capacity to model complex temporal dynamics. (Jiang et al., 2016) models dependence of relationship on time to facilitate time-aware link prediction but do not capture evolving entity dynamics."
  }, {
    "heading": "7. Conclusion",
    "text": "We propose a novel deep evolutionary knowledge network that efficiently learns non-linearly evolving entity representations over time in multi-relational setting. Evolutionary dynamics of both subject and object entities are captured by deep recurrent architecture that models historical evolution of entity embeddings in a specific relationship space. The occurrence of a fact is then modeled by multivariate point process that captures temporal dependencies across facts. The superior performance and high scalability of our method on large real-world temporal knowledge graphs demonstrate the importance of supporting temporal reasoning in dynamically evolving relational systems. Our work establishes previously unexplored connection between relational processes and temporal point processes with a potential to open a new direction of research on reasoning over time."
  }, {
    "heading": "Acknowledgement",
    "text": "This project was supported in part by NSF IIS-1218749, NIH BIGDATA 1R01GM108341, NSF CAREER IIS1350983, NSF IIS-1639792 EAGER, ONR N00014-15-12340, NVIDIA, Intel and Amazon AWS."
  }],
  "year": 2017,
  "references": [{
    "title": "Survival and event history analysis: a process point of view",
    "authors": ["Aalen", "Odd", "Borgan", "Ornulf", "Gjessing", "Hakon"],
    "year": 2008
  }, {
    "title": "Learning structured embeddings of knowledge bases",
    "authors": ["Bordes", "Antoine", "Weston", "Jason", "Collobert", "Ronan", "Bengio", "Yoshua"],
    "venue": "In Conference on Artificial Intelligence, number EPFL-CONF-192344,",
    "year": 2011
  }, {
    "title": "Translating embeddings for modeling multi-relational data",
    "authors": ["Bordes", "Antoine", "Usunier", "Nicolas", "Garcia-Duran", "Alberto", "Weston", "Jason", "Yakhnenko", "Oksana"],
    "venue": "In Advances in neural information processing systems,",
    "year": 2013
  }, {
    "title": "Multivariate point processes. Selected Statistical Papers of Sir David Cox: Volume 1, Design of Investigations",
    "authors": ["D.R. Cox", "P.A.W. Lewis"],
    "venue": "Statistical Methods and Applications,",
    "year": 2006
  }, {
    "title": "Discriminative embeddings of latent variable models for structured data",
    "authors": ["Dai", "Hanjun", "Bo", "Song", "Le"],
    "venue": "In ICML,",
    "year": 2016
  }, {
    "title": "Deep coevolutionary network: Embedding user and item features for recommendation",
    "authors": ["Dai", "Hanjun", "Wang", "Yichen", "Trivedi", "Rakshit", "Song", "Le"],
    "venue": "arXiv preprint arXiv:1609.03675,",
    "year": 2016
  }, {
    "title": "An introduction to the theory of point processes: volume II: general theory and structure, volume",
    "authors": ["D.J. Daley", "D. Vere-Jones"],
    "year": 2007
  }, {
    "title": "Time sensitive recommendation from recurrent user activities",
    "authors": ["Du", "Nan", "Wang", "Yichen", "He", "Niao", "Song", "Le"],
    "venue": "In NIPS,",
    "year": 2015
  }, {
    "title": "Recurrent marked temporal point processes: Embedding event history to vector",
    "authors": ["Du", "Nan", "Dai", "Hanjun", "Trivedi", "Rakshit", "Upadhyay", "Utkarsh", "Gomez-Rodriguez", "Manuel", "Song", "Le"],
    "year": 2016
  }, {
    "title": "Predicting the co-evolution of event and knowledge graphs",
    "authors": ["Esteban", "Cristobal", "Tresp", "Volker", "Yang", "Yinchong", "Baier", "Stephan", "Krompa", "Denis"],
    "venue": "In 2016 19th International Conference on Information Fusion (FUSION),",
    "year": 2016
  }, {
    "title": "Shaping social activity by incentivizing users",
    "authors": ["Farajtabar", "Mehrdad", "Du", "Nan", "Gomez-Rodriguez", "Manuel", "Valera", "Isabel", "Zha", "Hongyuan", "Song", "Le"],
    "venue": "In NIPS,",
    "year": 2014
  }, {
    "title": "Coevolve: A joint point process model for information diffusion and network co-evolution",
    "authors": ["Farajtabar", "Mehrdad", "Wang", "Yichen", "Gomez-Rodriguez", "Manuel", "Li", "Shuang", "Zha", "Hongyuan", "Song", "Le"],
    "venue": "In NIPS,",
    "year": 2015
  }, {
    "title": "Noisecontrastive estimation of unnormalized statistical models, with applications to natural image statistics",
    "authors": ["Gutmann", "Michael U", "Hyvärinen", "Aapo"],
    "venue": "Journal of Machine Learning Research,",
    "year": 2012
  }, {
    "title": "Spectra of some self-exciting and mutually exciting point processes",
    "authors": ["Hawkes", "Alan G"],
    "year": 1971
  }, {
    "title": "Session-based recommendations with recurrent neural networks",
    "authors": ["Hidasi", "Balazs", "Karatzoglou", "Alexandros", "Baltrunas", "Linas", "Tikk", "Domonkos"],
    "venue": "In ICLR,",
    "year": 2016
  }, {
    "title": "A self-correcting pint process",
    "authors": ["V. Isham", "M. Westcott"],
    "venue": "Advances in Applied Probability,",
    "year": 1979
  }, {
    "title": "Encoding temporal information for time-aware link",
    "authors": ["Jiang", "Tingsong", "Liu", "Tianyu", "Ge", "Tao", "Lei", "Sha", "Li", "Suijan", "Chang", "Baobao", "Sui", "Zhifang"],
    "year": 2016
  }, {
    "title": "Gdelt: Global data on events, location, and tone",
    "authors": ["Leetaru", "Kalev", "Schrodt", "Philip A"],
    "venue": "ISA Annual Convention,",
    "year": 2013
  }, {
    "title": "Learning entity and relation embeddings for knowledge graph completion",
    "authors": ["Lin", "Yankai", "Liu", "Zhiyuan", "Sun", "Maosong", "Zhu", "Xuan"],
    "year": 2015
  }, {
    "title": "Probabilistic reasoning via deep learning: Neural association models",
    "authors": ["Liu", "Quan", "Jiang", "Hui", "Evdokimov", "Andrew", "Ling", "ZhenHua", "Zhu", "Xiaodan", "Wei", "Si", "Hu", "Yu"],
    "year": 2016
  }, {
    "title": "Leveraging temporal autocorrelation of historical data for improving accuracy in network regression. Statistical Analysis and Data Mining: The ASA Data",
    "authors": ["Loglisci", "Corrado", "Malerba", "Donato"],
    "venue": "Science Journal,",
    "year": 2017
  }, {
    "title": "Relational mining for discovering changes in evolving networks",
    "authors": ["Loglisci", "Corrado", "Ceci", "Michelangelo", "Malerba", "Donato"],
    "venue": "Part A:265–288,",
    "year": 2015
  }, {
    "title": "A three-way model for collective learning on multirelational data",
    "authors": ["Nickel", "Maximilian", "Tresp", "Volker", "Kriegel", "HansPeter"],
    "venue": "In Proceedings of the 28th International Conference on Machine Learning",
    "year": 2011
  }, {
    "title": "A review of relational machine learning for knowledge graphs",
    "authors": ["Nickel", "Maximilian", "Murphy", "Kevin", "Tresp", "Volker", "Gabrilovich", "Evgeniy"],
    "venue": "Proceedings of the IEEE,",
    "year": 2016
  }, {
    "title": "Holographic embeddings of knowledge graphs. 2016b",
    "authors": ["Nickel", "Maximilian", "Rosasco", "Lorenzo", "Poggio", "Tomaso"],
    "year": 2016
  }, {
    "title": "Bayesian poisson tucker decomposition for learning the structure of international relations",
    "authors": ["Schein", "Aaron", "Zhou", "Mingyuan", "Blei", "David", "Wallach", "Hanna"],
    "year": 2016
  }, {
    "title": "Temporal-relational classifiers for prediction in evolving domains",
    "authors": ["Sharan", "Umang", "Neville", "Jennifer"],
    "venue": "Eighth IEEE International Conference on Data Mining,",
    "year": 2008
  }, {
    "title": "Reasoning with neural tensor networks for knowledge base completion",
    "authors": ["Socher", "Richard", "Chen", "Danqi", "Manning", "Christopher D", "Ng", "Andrew"],
    "venue": "In Advances in Neural Information Processing Systems,",
    "year": 2013
  }, {
    "title": "Observed versus latent features for knowledge base and text inference",
    "authors": ["Toutanova", "Kristina", "Chen", "Danqi"],
    "year": 2015
  }, {
    "title": "Coevolutionary latent feature processes for continuoustime user-item interactions",
    "authors": ["Wang", "Yichen", "Du", "Nan", "Trivedi", "Rakshit", "Song", "Le"],
    "venue": "In NIPS,",
    "year": 2016
  }, {
    "title": "A stochastic differential equation framework for guiding online user activities in closed loop",
    "authors": ["Wang", "Yichen", "Theodorou", "Evangelos", "Verma", "Apurv", "Song", "Le"],
    "venue": "arXiv preprint arXiv:1603.09021,",
    "year": 2016
  }, {
    "title": "Isotonic hawkes processes",
    "authors": ["Wang", "Yichen", "Xie", "Bo", "Du", "Nan", "Song", "Le"],
    "venue": "In ICML,",
    "year": 2016
  }, {
    "title": "Variational policy for guiding point processes",
    "authors": ["Wang", "Yichen", "Williams", "Grady", "Theodorou", "Evangelos", "Song", "Le"],
    "venue": "In ICML,",
    "year": 2017
  }, {
    "title": "Linking micro event history to macro prediction in point process models",
    "authors": ["Wang", "Yichen", "Ye", "Xiaojing", "Zhou", "Haomin", "Zha", "Hongyuan", "Song", "Le"],
    "venue": "AISTAT,",
    "year": 2017
  }, {
    "title": "Knowledge graph embedding by translating on hyperplanes",
    "authors": ["Wang", "Zhen", "Zhang", "Jianwen", "Feng", "Jianlin", "Chen", "Zheng"],
    "year": 2014
  }, {
    "title": "Embedding entities and relations for learning and inference in knowledge bases",
    "authors": ["Yang", "Bishan", "Yih", "Wen-tau", "He", "Xiaodong", "Gao", "Jianfeng", "Deng", "Li"],
    "year": 2015
  }, {
    "title": "Mixture of mutually exciting processes for viral diffusion",
    "authors": ["Yang", "Shuang-Hong", "Zha", "Hongyuan"],
    "venue": "In ICML, pp",
    "year": 2013
  }],
  "id": "SP:b1d1189bc46d72633e3dd5f25157b6016a856c2c",
  "authors": [{
    "name": "Rakshit Trivedi",
    "affiliations": []
  }, {
    "name": "Hanjun Dai",
    "affiliations": []
  }, {
    "name": "Yichen Wang",
    "affiliations": []
  }, {
    "name": "Le Song",
    "affiliations": []
  }],
  "abstractText": "The availability of large scale event data with time stamps has given rise to dynamically evolving knowledge graphs that contain temporal information for each edge. Reasoning over time in such dynamic knowledge graphs is not yet well understood. To this end, we present Know-Evolve, a novel deep evolutionary knowledge network that learns non-linearly evolving entity representations over time. The occurrence of a fact (edge) is modeled as a multivariate point process whose intensity function is modulated by the score for that fact computed based on the learned entity embeddings. We demonstrate significantly improved performance over various relational learning approaches on two large scale real-world datasets. Further, our method effectively predicts occurrence or recurrence time of a fact which is novel compared to prior reasoning approaches in multirelational setting.",
  "title": "Know-Evolve: Deep Temporal Reasoning for Dynamic Knowledge Graphs"
}