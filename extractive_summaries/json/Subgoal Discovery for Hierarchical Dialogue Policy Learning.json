{
  "sections": [{
    "text": "Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing, pages 2298–2309 Brussels, Belgium, October 31 - November 4, 2018. c©2018 Association for Computational Linguistics\n2298"
  }, {
    "heading": "1 Introduction",
    "text": "Consider we want to plan a trip to a distant city using a dialogue agent. The agent must make choices at each leg, e.g., whether to fly or to drive, whether to book a hotel. Each of these steps in turn involves making a sequence of decisions all the way down to lower-level actions. For example, to book a hotel involves identifying the location, specifying the check-in date and time, and negotiating the price etc.\nThe above process of the agent has a natural hierarchy: a top-level process selects which subgoal to complete, and a low-level process chooses primitive actions to accomplish the selected subgoal. Within the reinforcement learning (RL) paradigm, such a hierarchical decision making process can be formulated in the options framework (Sutton et al., 1999), where subgoals with\ntheir own reward functions are used to learn policies for achieving these subgoals. These learned policies are then used as temporally extended actions, or options, for solving the entire task.\nBased on the options framework, researchers have developed dialogue agents for complex tasks, such as travel planning, using hierarchical reinforcement learning (HRL) (Cuayáhuitl et al., 2010). Recently, Peng et al. (2017b) showed that the use of subgoals mitigates the reward sparsity and leads to more effective exploration for dialogue policy learning. However, these subgoals need to be human-defined which limits the applicability of the approach in practice because the domain knowledge required to properly define subgoals is often not available in many cases.\nIn this paper, we propose a simple yet effective Subgoal Discovery Network (SDN) that discovers useful subgoals automatically for an RL-based dialogue agent. The SDN takes as input a collection of successful conversations, and identifies “hub” states as subgoals. Intuitively, a hub state is a region in the agent’s state space that the agent tends to visit frequently on successful paths to a goal but not on unsuccessful paths. Given the discovered subgoals, HRL can be applied to learn a hierarchical dialogue policy which consists of (1) a toplevel policy that selects among subgoals, and (2) a low-level policy that chooses primitive actions to achieve selected subgoals.\nWe present the first study of learning dialogue agents with automatically discovered subgoals. We demonstrate the effectiveness of our approach by building a composite task-completion dialogue agent for travel planning. Experiments with both simulated and real users show that an agent learned with discovered subgoals performs competitively against an agent learned using expertdefined subgoals, and significantly outperforms an agent learned without subgoals. We also find that\nthe subgoals discovered by SDN are often human comprehensible."
  }, {
    "heading": "2 Background",
    "text": "A goal-oriented dialogue can be formulated as a Markov decision process, or MDP (Levin et al., 2000), in which the agent interacts with its environment over a sequence of discrete steps. At each step t ∈ {0, 1, . . .}, the agent observes the current state st of the conversation (Henderson, 2015; Mrkšić et al., 2017; Li et al., 2017), and chooses action at according to a policy π. Here, the action may be a natural-language sentence or a speech act, among others. Then, the agent receives a numerical reward rt and switches to next state st+1. The process repeats until the dialogue terminates. The agent is to learn to choose optimal actions {at}t=1,2,... so as to maximize the total discounted reward r0 + γr1 + γ2r2 + · · · , where γ ∈ [0, 1] is a discount factor. This learning paradigm is known as reinforcement learning, or RL (Sutton and Barto, 1998).\nWhen facing a complex task, it is often more efficient to divide it into multiple simpler subtasks, solve them, and combine the partial solutions into a full solution for the original task. Such an approach may be formalized as hierarchical RL (HRL) in the options framework (Sutton et al., 1999). An option can be understood as a subgoal, which consists of an initiation condition (when the subgoal can be triggered), an option policy to solve the subgoal, and a termination condition (when the subgoal is considered finished).\nWhen subgoals are given, there exist effective RL algorithms to learn a hierarchical policy. A major open challenge is the automatic discovery of subgoals from data, the main innovation of this work is covered in the next section."
  }, {
    "heading": "3 Subgoal Discovery for HRL",
    "text": "Figure 1 shows the overall workflow of our proposed method of using automatic subgoal discovery for HRL. First a dialogue session is divided into several segments. Then at the end of those segments (subgoals), we equip an intrinsic or extrinsic reward for the HRL algorithm to learn a hierarchical dialogue policy. Note that only the last segment has an extrinsic reward. The details of the segmentation algorithm and how to use subgoals for HRL are presented in Section 3.1 and Section 3.3."
  }, {
    "heading": "3.1 Subgoal Discovery Network",
    "text": "Assume that we have collected a set of successful state trajectories of a task, as shown in Figure 2. We want to find subgoal states, such as the three red states s4, s9 and s13, which form the “hubs” of these trajectories. These hub states indicate the subgoals, and thus divide a state trajectory into several segments, each for an option1.\nThus, discovering subgoals by identifying hubs in state trajectories is equivalent to segmenting state trajectories into options. In this work, we formulate subgoal discovery as a state trajectory segmentation problem, and address it using the Subgoal Discovery Network (SDN), inspired by the sequence segmentation model (Wang et al., 2017).\nThe SDN architecture. SDN repeats a twostage process of generating a state trajectory segment, until a trajectory termination symbol is generated: first it uses an initial segment hidden state\n1There are many ways of creating a new option 〈I, π, β〉 for a discovered subgoal state. For example, when a subgoal state is identified at time step t, we add to I the set of states visited by the agent from time t− n to t, where n is a pre-set parameter. I is therefore the union of all such states over all the state trajectories. The termination condition β is set to 1 when the subgoal is reached or when the agent is no longer in I , and to 0 otherwise. In the deep RL setting where states are represented by continuous vectors, β is a probability whose value is proportional to the vector distance e.g., between current state and subgoal state.\nto start a new segment, or a trajectory termination symbol to terminate the trajectory, given all previous states; if the trajectory is not terminated, then keep generating the next state in this trajectory segment given previous states until a segment termination symbol is generated. We illustrated this process in Figure 3.\nWe model the likelihood of each segment using an RNN, denoted as RNN1. During the training, at each time step, RNN1 predicts the next state with the current state as input, until it reaches the option termination symbol #. Since different options are under different conditions, it is not plausible to apply a fixed initial input to each segment. Therefore, we use another RNN (RNN2) to encode all previous states to provide relevant information and we transform these information to low dimensional representations as the initial inputs for the RNN1 instances. This is based on the causality assumption of the options framework (Sutton et al., 1999) — the agent should be able to determine the next option given all previous information, and this should not depend on information related to any later state. The low dimensional representations are obtained via a global subgoal embedding matrix M ∈ Rd×D, where d and D are the dimensionality of RNN1’s input layer and RNN2’s output layer, respectively. Mathematically, if the\noutput of RNN2 at time step t is ot, then from time t the RNN1 instance has M · softmax(ot) as its initial input2. D is the number of subgoals we aim to learn. Ideally, the vector softmax(ot) in a well-trained SDN is close to an one-hot vector. Therefore,M ·softmax(ot) should be close to one column in M and we can view that M provides at most D different “embedding vectors” for RNN1 as inputs, indicating at most D different subgoals. Even in the case where softmax(ot) is not close to any one-hot vector, choosing a small D helps avoid overfitting.\nSegmentation likelihood. Given the state trajectory (s0, . . . , s5), assuming that s2, s4 and s5 are the discovered subgoal states, we model the conditional likelihood of a proposed segmentation σ = ((s0, s1, s2), (s2, s3, s4), (s4, s5)) as p(σ|s0) = p((s0, s1, s2)|s0) · p((s2, s3, s4)|s0:2) · p((s4, s5)|s0:4), where each probability term p(·|s0:i) is based on an RNN1 instance. And for the whole trajectory (s0, . . . , s5), its likelihood is the sum over all possible segmentations.\nGenerally, for state trajectory s = (s0, . . . , sT ), we model its likelihood as follows3:\nLS(s) = ∑\nσ⊆S(s),length(σ)≤S length(σ)∏ i=1 p(σi|τ(σ1:i)),\n(1) where S(s) is the set of all possible segmentations for the trajectory s, σi denotes the ith segment in the segmentation σ, and τ is the concatenation operator. S is an upper limit on the maximal number of segments. This parameter is important for learning subgoals in our setting since we usually prefer a small number of subgoals. This is different from Wang et al. (2017), where a maximum segment length is enforced.\nWe use maximum likelihood estimation with Eq. (1) for training. However, the number of possible segmentations is exponential in S(s) and the naive enumeration is intractable. Here, dynamic programming is employed to compute the likelihood in Eq. (1) efficiently: for a trajectory s = (s0, . . . , sT ), if we denote the sub-trajectory (si, . . . , st) of s as si:t, then its likelihood follows\n2softmax(ot)i = exp(ot,i)/ D∑ i′=1 exp(ot,i′) ∈ RD for ot = (ot,1, . . . , ot,D). 3For notation convenience, we include s0 into the observational sequence, though s0 is always conditioned upon.\nthe below recursion:\nLm(s0:t) =  t−1∑ i=0 Lm−1(s0:i)p(si:t|s0:i), m > 0,\nI[t = 0], m = 0.\nHere, Lm(s0:t) denotes the likelihood of subtrajectory s0:t with no more than m segments and I[·] is an indicator function. p(si:t|s0:i) is the likelihood segment si:t given the previous history, where RNN1 models the segment and RNN2 models the history as shown in Figure 3. With this recursion, we can compute the likelihood LS(s) for the trajectory s = (s0, . . . , sT ) in O(ST 2) time.\nLearning algorithm. We denote θs as the model parameter including the parameters of the embedding matrix M , RNN1 and RNN2. We then parameterize the segment likelihood function as p(si:t|s0:i) = p(si:t|s0:i; θs), and the trajectory likelihood function as Lm(s0:t) = Lm(s0:t; θs).\nGiven a set of N state trajectories (s(1), . . . , s(N)), we optimize θs by minimizing the negative mean log-likelihood with L2 regularization term 12λ||θ\ns||2 where λ > 0, using stochastic gradient descent:\nLS(θs, λ) = − 1\nN N∑ i=1 logLS(s (i), θs) + 1 2 λ||θs||2. (2)\nAlgorithm 1 outlines the training procedure for SDN using stochastic gradient descent.\nAlgorithm 1 Learning SDN Input: A set of state trajectories (s1, . . . sN ), the number of\nsegments limit S, initial learning rate η > 0. 1: Initialize the SDN parameter θs. 2: while not converged do 3: Compute the gradient ∇θsLS(θs, λ) of the loss LS(θs, λ) as in Eq. (2). 4: Update θs ← θs − η∇θsLS(θs, λ). 5: Update the learning rate η. 6: end while"
  }, {
    "heading": "3.2 Hierarchical Dialogue Policy Learning",
    "text": "Before describing how we use a trained SDN model for HRL, we first present a short review of HRL for a task-oriented dialogue system. Following the options framework (Sutton et al., 1999), assume that we have a state set S , an option set G and a finite primitive action set A.\nThe HRL approach we take learns two Qfunctions (Peng et al., 2017b), parameterized by θe and θi, respectively:\n• The top-level Q∗(s, g; θe) measures the maximum total discounted extrinsic reward received by choosing subgoal g in state s and then following an optimal policy. These extrinsic rewards are the objective to be maximized by the entire dialogue policy. • The low-level Q∗(s, a, g; θi) measures the max-\nimum total discounted intrinsic reward received to achieve a given subgoal g, by choosing action a in state s and then following an optimal option policy. These intrinsic rewards are used to learn an option policy to achieve a given subgoal.\nSuppose we have a dialogue session of T turns: τ = (s0, a0, r0, . . . , sT ), which is segmented into a sequence of subgoals g0, g1, . . . ∈ G. Consider one of these subgoals g which starts and ends in steps t0 and t1, respectively.\nThe top-level Q-function is learned using Qlearning, by treating subgoals as temporally extended actions:\nθe ← θe+α · (q −Q(st, g; θe)) ·∇θeQ(st, g; θe) ,\nwhere\nq = t1−1∑ t=t0 γt−t0ret + γ t1−t0 max g′∈G Q(st1 , g ′; θe) ,\nand α is the step-size parameter, γ ∈ [0, 1] is a discount factor. In the above expression of q, the first term refers to the total discounted reward during fulfillment of subgoal g, and the second to the maximum total discounted after g is fulfilled.\nThe low-level Q-function is learned in a similar way, and follows the standard Q-learning update, except that intrinsic rewards for subgoal g are used. Specifically, for t = t0, t0 + 1, . . . , t1 − 1:\nθi ← θi + α · (qt −Q(st, at, g; θe)) · ∇θiQ(st, at, g; θi) ,\nwhere\nqt = r i t + γmax\na′∈A Q(st+1, a\n′, g; θi) .\nHere, the intrinsic reward rit is provided by the internal critic of dialogue manager. More details are in Appendix A.\nIn hierarchical policy learning, the combination of the extrinsic and intrinsic rewards is expected to help the agent to successfully accomplish a composite task as fast as possible while trying to avoid unnecessary subtask switches. Hence, we define the extrinsic and intrinsic rewards as follows:\nExtrinsic Reward. Let L be the maximum number of turns of a dialogue, and K the number of subgoals. At the end of a dialogue, the agent receives a positive extrinsic reward of 2L for a success dialogue, or −L for a failure dialogue; for each turn, the agent receives an extrinsic reward of −1 to encourage shorter dialogues.\nIntrinsic Reward. When a subgoal terminates, the agent receives a positive intrinsic reward of 2L/K if a subgoal is completed successfully, or a negative intrinsic reward of −1 otherwise; for each turn, the agent receives an intrinsic reward −1 to encourage shorter dialogues."
  }, {
    "heading": "3.3 Hierarchical Policy Learning with SDN",
    "text": "We use a trained SDN in HRL as follows. The agent starts from the initial state s0, keeps sampling the output from the distribution related to the top-level RNN (RNN1) until a termination symbol # is generated, which indicates the agent reaches a subgoal. In this process, intrinsic rewards are generated as specified in the previous subsection. After # is generated, the agent selects a new option, and repeats this process.\nThis type of naive sampling may allow the option to terminate at some places with a low probability. To stabilize the HRL training, we introduce a threshold p ∈ (0, 1), which directs the agent to terminate an option if and only if the probability of outputting # is at least p. We found this modification leads to better behavior of the HRL agent than the naive sampling method, since it normally has a smaller variance.\nIn the HRL training, the agent only uses the probability of outputting # to decide subgoal termination. Algorithm 2 outlines the full procedure of one episode for hierarchical dialogue policies with a trained SDN in the composite taskcompletion dialogue system."
  }, {
    "heading": "4 Experiments and Results",
    "text": "We evaluate the proposed model on a travel planning scenario for composite task-oriented dialogues (Peng et al., 2017b). Over the exchange of a conversation, the agent gathers information about the user’s intent before booking a trip. The environment then assesses a binary outcome (success or failure) at the end of the conversation, based on (1) whether a trip is booked, and (2) whether the trip satisfies the user’s constraints.\nAlgorithm 2 HRL episode with a trained SDN Input: A trained SDN M, initial state s0 of an episode,\nthreshold p, the HRL agent A. 1: Initialize an RNN2 instanceR2 with parameters fromM\nand s0 as the initial input. 2: Initialize an RNN1 instanceR1 with parameters fromM\nand M · softmax(oRNN20 ) as the initial input, where M is the embedding matrix (fromM) and oRNN20 is the initial output of R2. 3: Current state s← s0. 4: Select an option o using the agent A. 5: while Not reached the final goal do 6: Select an action a according to s and o using the agent\nA. Get the reward r and the next state s′ from the environment.\n7: Place s′ to R2, denote oRNN2t as R2’s latest output and take M · softmax(oRNN2t ) as the R1’s new input. Let ps′ be the probability of outputting the termination symbol #. 8: if ps′ ≥ p then 9: Select a new option o using the agent A. 10: Re-initialize R1 using the latest output from R2 and the embedding matrix M . 11: end if 12: end while\nDataset. The raw dataset in our experiments is from a publicly available multi-domain dialogue corpus (El Asri et al., 2017). Following Peng et al. (2017b), a few changes were made to introduce dependencies among subtasks. For example, the hotel check-in date should be the same with the departure flight arrival date. The data was mainly used to create simulated users, and to build the knowledge bases for the subtasks of booking flights and reserving hotels.\nUser Simulator. In order to learn good policies, RL algorithms typically need an environment to interact with. In the dialogue research community, it is common to use simulated users for this purpose (Schatzmann et al., 2007; Li et al., 2017; Liu and Lane, 2017). In this work, we adapted a publicly available user simulator (Li et al., 2016) to the composite task-completion dialogue setting with the dataset described above. During training, the simulator provides the agent with an (extrinsic) reward signal at the end of the dialogue. A dialogue is considered to be successful only when a travel plan is booked successfully, and the information provided by the agent satisfies user’s constraints.\nBaseline Agents. We benchmarked the proposed agent (referred to as the m-HRL Agent) against three baseline agents: • A Rule Agent uses a sophisticated, hand-crafted\ndialogue policy, which requests and informs a hand-picked subset of necessary slots, and then\nconfirms with the user about the reserved trip before booking the flight and hotel. • A flat RL Agent is trained with a standard deep\nreinforcement learning method, DQN (Mnih et al., 2015), which learns a flat dialogue policy using extrinsic rewards only. • A h-HRL Agent is trained with hierarchical deep\nreinforcement learning (HDQN), which learns a hierarchical dialogue policy based on humandefined subgoals (Peng et al., 2017b).\nCollecting State Trajectories. Recall that our subgoal discovery approach takes as input a set of state trajectories which lead to successful outcomes. In practice, one can collect a large set of successful state trajectories, either by asking human experts to demonstrate (e.g., in a call center), or by rolling out a reasonably good policy (e.g., a policy designed by human experts). In this paper, we obtain dialogue state trajectories from a rulebased agent which is handcrafted by a domain expert, the performance of this rule-based agent can achieve success rate of 32.2% as shown in Figure 4 and Table 1. We only collect the successful dialogue sessions from the roll-outs of the rule-based agent, and try to learn the subgoals from these dialogue state trajectories.\nExperiment Settings. To train SDN, we use RMSProp (Tieleman and Hinton, 2012) to optimize the model parameters. For both RNN1 and RNN2, we use LSTM (Hochreiter and Schmidhuber, 1997) as hidden units and set the hidden size to 50. We set embedding matrix M with D = 4 columns. As we discussed in Section 3.1, D captures the maximum number of subgoals that the model is expected to learn. Again, to avoid SDN from learning many unnecessary subgoals, we only allow segmentation with at most S = 4 segments during subgoal training. The values for D and S are usually set to be a little bit larger than the expected number of subgoals (e.g., 2 or 3 for this task) since we expect a great proportion of the subgoals that SDN learns are useful, but not necessary for all of them. As long as SDN discovers useful subgoals that guide the agent to learn policies faster, it is beneficial for HRL training, even if some non-perfect subgoals are found. During the HRL training, we use the learned SDN to propose subgoal-completion queries. In our experiment, we set the maximum turn L = 60.\nWe collected N = 1634 successful, but imper-\nfect, dialogue episodes from the rule-based agent in Table 1 and randomly choose 80% of these dialogue state trajectories for training SDN. The remaining 20% were used as a validation set.\nAs illustrated in Section 3.3, SDN starts a new RNN1 instance and issues a subgoal-completion query when the probability of outputting the termination symbol # is above a certain threshold p (as in Algorithm 2). In our experiment, p is set to be 0.2, which was manually picked according to the termination probability during SDN training.\nIn dialogue policy learning, for the baseline RL agent, we set the size of the hidden layer to 80. For the HRL agents, both top-level and low-level dialogue policies have a hidden layer size of 80. RMSprop was applied to optimize the parameters. We set the batch size to be 16. During training, we used -greedy strategy for exploration with annealing and set γ = 0.95. For each simulation epoch, we simulated 100 dialogues and stored these state transition tuples in the experience replay buffers. At the end of each simulation epoch, the model was updated with all the transition tuples in the buffers in a batch manner."
  }, {
    "heading": "4.1 Simulated User Evaluation",
    "text": "In the composite task-completion dialogue scenario, we compared the proposed m-HRL agent\nwith three baseline agents in terms of three metrics: success rate4, average rewards and average turns per dialogue session.\nFigure 4 shows the learning curves of all four agents trained against the simulated user. Each learning curve was averaged over 5 runs. Table 1 shows the test performance where each number was averaged over 5 runs and each run generated 2000 simulated dialogues. We find that the HRL agents generated higher success rates and needed fewer conversation turns to achieve the users’ goals than the rule-based agent and the flat RL agent. The performance of the m-HRL agent is tied with that of the h-HRL agent, even though the latter requires high-quality subgoals designed by human experts."
  }, {
    "heading": "4.2 Human Evaluation",
    "text": "We further evaluated the agents that were trained on simulated users against real users, who were recruited from the authors’ organization. We conducted a study using the one RL agent and two HRL agents {RL, h-HRL, m-HRL}, and compared two pairs: {RL, m-HRL} and {h-HRL, mHRL}. In each dialogue session, one agent was randomly selected from the pool to interact with a user. The user was not aware of which agent was selected to avoid systematic bias. The user was presented with a goal sampled from a usergoal corpus, then was instructed to converse with the agent to complete the given task. At the end of each dialogue session, the user was asked to give a rating on a scale from 1 to 5 based on the natural-\n4Success rate is the fraction of dialogues which accomplished the task successfully within the maximum turns.\nness and coherence of the dialogue; here, 1 is the worst rating and 5 the best. In total, we collected 196 dialogue sessions from 10 human users.\nFigure 5 summarizes the performances of these agents against real users in terms of success rate. Figure 6 shows the distribution of user ratings for each agent. For these two metrics, both HRL agents were significantly better than the flat RL agent. Another interesting observation is that the m-HRL agent performs similarly to the h-HRL agent in terms of success rate in the real user study as shown on Figure 5. Meanwhile in Figure 6, the h-HRL agent is significantly better than m-HRL agent in terms of real user ratings. This may be caused by the probabilistic termination of subgoals: we used a threshold strategy to decide whether to terminate a subgoal. This could introduce variance so the agent might not behave reasonably compared with human-defined subgoals which terminate deterministically."
  }, {
    "heading": "4.3 Subgoal Visualization",
    "text": "Table 2 shows the subgoals discovered by SDN in a sample dialogue by a rule-based agent interacting with the simulated user. The rule-based agent is equipped with a human-defined subtask structure, which always solves subtask flight (turns 1– 15) before hotel (turns 16–23), as shown in the first column. At turn 10, the user starts to talk about hotel while the rule-based agent is still working on the pre-defined, unfinished flight subtask until subtask flight is finished at turn 15. At turn 16, the user switches to hotel, and so does the rule-based agent until the end of the dialogue. For this rulebased agent, the human-defined subgoal (flight) terminates at turn 15. Meanwhile, our SDN model detected two subgoals (except for the final goal):\none terminating at turn 9 (Subgoal 1), and another terminating at turn 15 (Subgoal 2). Subgoal 2 is consistent with the human-defined subgoal. Subgoal 1 is also reasonable since the user tries to switch to hotel at turn 10. In Appendix B, Table 3 shows a sample dialogue session by m-HRL agent interacting with a real user."
  }, {
    "heading": "5 Related Work",
    "text": "Task-completion dialogue systems have attracted numerous research efforts, and there is growing interest in leveraging reinforcement learning for policy learning. One line of research is on single-domain task-completion dialogues with flat deep reinforcement learning algorithms such as DQN (Zhao and Eskenazi, 2016; Li et al., 2017; Peng et al., 2018), actor-critic (Peng et al., 2017a; Liu and Lane, 2017) and policy gradients (Williams et al., 2017; Liu et al., 2017). Another line of research addresses multi-domain dialogues where each domain is handled by a separate agent (Gašić et al., 2015; Gašić et al., 2015; Cuayáhuitl et al., 2016). Recently, Peng et al. (2017b) presented a composite task-completion dialogue system. Unlike multi-domain dialogue systems, composite tasks introduce inter-subtask constraints. As a result, the completion of a set\nof individual subtasks does not guarantee the solution of the entire task.\nCuayáhuitl et al. (2010) applied HRL to dialogue policy learning, although they focus on problems with a small state space. Later, Budzianowski et al. (2017) used HRL in multidomain dialogue systems. Peng et al. (2017b) first presented an HRL agent with a global state tracker to learn the dialogue policy in the composite taskcompletion dialogue systems. All these works are built based on subgoals that were pre-defined with human domain knowledge for the specific tasks. The only job of the policy learner is to learn a hierarchical dialogue policy, which leaves the subgoal discovery problem unsolved. In addition to the applications in dialogue systems, subgoal is also widely studied in the linguistics research community (Allwood, 2000; Linell, 2009).\nIn the literature, researchers have proposed algorithms to automatically discovery subgoals for hierarchical RL. One large body of work is based on analyzing the spatial structure of the state transition graphs, by identifying bottleneck states or clusters, among others (Stolle and Precup, 2002; McGovern and Barto, 2001; Mannor et al., 2004; Şimşek et al., 2005; Entezari et al., 2011; Bacon, 2013). Another family of algorithms identifies commonalities of policies and extracts these partial policies as useful skills (Thrun and Schwartz, 1994; Pickett and Barto, 2002; Brunskill and Li, 2014). While similar in spirit to ours, these methods do not easily scale to continuous problems as in dialogue systems. More recently, researchers have proposed deep learning models to discover subgoals in continuous-state MDPs (Bacon et al., 2017; Machado et al., 2017; Vezhnevets et al., 2017). It would be interesting to see how effective they are for dialogue management.\nSegmental structures are common in human languages. In the NLP community, some related research on segmentation includes word segmentation (Gao et al., 2005; Zhang et al., 2016) to divide the words into meaningful units. Alternatively, topic detection and tracking (Allan et al., 1998; Sun et al., 2007) segment a stream of data and identify stories or events in news or social text. In this work, we formulate subgoal discovery as a trajectory segmentation problem. Section 3.1 presents our approach to subgoal discovery which is inspired by a probabilistic sequence segmentation model (Wang et al., 2017)."
  }, {
    "heading": "6 Discussion and Conclusion",
    "text": "We have proposed the Subgoal Discovery Network to learn subgoals automatically in an unsupervised fashion without human domain knowledge. Based on the discovered subgoals, we learn the dialogue policy for complex task-completion dialogue agents using HRL. Our experiments with both simulated and real users on a composite task of travel planning, show that an agent trained with automatically discovered subgoals performs competitively against an agent with human-defined subgoals, and significantly outperforms an agent without subgoals. Through visualization, we find that SDN discovers reasonable, comprehensible subgoals given only a small amount of suboptimal but successful dialogue state trajectories.\nThese promising results suggest several directions for future research. First, we want to integrate subgoal discovery into dialogue policy learning rather than treat them as two separate processes. Second, we would like to extend SDN to identify multi-level hierarchical structures among subgoals so that we can handle more complex tasks than those studied in this paper. Third, we would like to generalize SDN to a wide range of complex goal-oriented tasks beyond dialogue, such as the particularly challenging Atari game of Montezuma’s Revenge (Kulkarni et al., 2016)."
  }, {
    "heading": "Acknowledgments",
    "text": "We would like to thank the anonymous reviewers, members of the xlab at the University of Washington, and Chris Brockett, Michel Galley for their insightful comments on the work. Most of this work was done while DT, CW & LL were with Microsoft."
  }, {
    "heading": "A Hierarchical Dialogue Policy Learning",
    "text": "This section provides more algorithmic details for Section 3.2. Again, assume a conversation of length T :\nτ = (s0, a0, r0, . . . , sT−1, aT−1, rT−1, sT ) .\nSuppose an HRL agent segments the trajectory into a sequence of subgoals as g0, g1, . . . ∈ G, and the corresponding subgoal termination time steps as tg0 , tg1 , . . . ∈ N∗. Furthermore, denote the intrinsic reward at time step t by rit. The toplevel and low-level Q-functions satisfy the following Bellman equations:\nQ∗(s, g) = E [ tgj+1−1∑\ni=tgj\nγi−tgj ret+1\n+ γtgj+1−tgj ·max g′∈G Q∗(stgj+1 , g ′)\n|stgj = s, gj = g ]\nand Q∗(s, a, g) = E [ rit + γ ·max\na′∈A Q∗i (st+1, gj , a ′)\n|st = s, gj = g, at = a, t ∈ [tgj , tgj+1) ] .\nHere γ ∈ [0, 1] is a discount factor, and the expectations are taken over the randomness of the reward and the state transition,\nWe use deep neural networks to approximate the two Q-value functions as Q∗(s, a, g) ≈ Q(s, a, g; θi) and Q∗(s, g) ≈ Q(s, g; θe). The parameters θi and θe are optimized to minimize the following quadratic loss functions:\nLi(θi) = 1 2|Di| ∑\n(s,a,g,s′,ri)∈Di [(yi −Q(s, a, g; θi))2]\nyi =ri + γ ·max a′∈A Qi(s ′, a′, g; θi)\n(3) and\nLe(θe) = 1 2|De| ∑\n(s,g,s′,re)∈De [(ye −Q(s, g; θe))2]\nye =re + γ ·max g′∈G Q(s′, g′; θe) .\n(4) Here, De, Di are the replay buffers storing dialogue experience for training top-level and lowlevel policies.\nOptimization of parameters θi and θe can be done by stochastic gradient descent on the two loss functions in Equations (3) and (4). The gradients of the two loss functions w.r.t their parameters are\n∇θiLi = 1 |Di| ∑\n(s,a,g,s′,ri)∈Di\n[ ∇θiQ(s, a, g; θi)· (yi −Qi(s, a, g; θi)) ]\nand\n∇θeLe = 1 |De| ∑\n(s,g,s′,re)∈De\n[ ∇θeQ(s, g; θe)· (ye −Qe(s, g; θe)) ] .\nTo avoid overfitting, we also addL2-regularization to the objective functions above."
  }, {
    "heading": "B Sample Dialogue",
    "text": ""
  }],
  "year": 2018,
  "references": [{
    "title": "Topic detection and tracking pilot study final report",
    "authors": ["James Allan", "Jaime G Carbonell", "George Doddington", "Jonathan Yamron", "Yiming Yang"],
    "year": 1998
  }, {
    "title": "An activity based approach to pragmatics",
    "authors": ["Jens Allwood."],
    "venue": "Abduction, belief and context in dialogue: Studies in computational pragmatics, pages 47–80.",
    "year": 2000
  }, {
    "title": "On the bottleneck concept for options discovery: Theoretical underpinnings and extension in continuous state spaces",
    "authors": ["Pierre-Luc Bacon."],
    "venue": "Master’s thesis, McGill University.",
    "year": 2013
  }, {
    "title": "The option-critic architecture",
    "authors": ["Pierre-Luc Bacon", "Jean Harb", "Doina Precup."],
    "venue": "Proceedings of the 31st AAAI Conference on Artificial Intelligence (AAAI), pages 1726–1734.",
    "year": 2017
  }, {
    "title": "PAC-inspired option discovery in lifelong reinforcement learning",
    "authors": ["Emma Brunskill", "Lihong Li."],
    "venue": "Proceedings of the 31st International Conference on Machine Learning (ICML), pages 316–324.",
    "year": 2014
  }, {
    "title": "Subdomain modelling for dialogue management with hierarchical reinforcement learning",
    "authors": ["Pawel Budzianowski", "Stefan Ultes", "Pei-Hao Su", "Nikola Mrksic", "Tsung-Hsien Wen", "Inigo Casanueva", "Lina Rojas-Barahona", "Milica Gasic."],
    "venue": "arXiv preprint",
    "year": 2017
  }, {
    "title": "Evaluation of a hierarchical reinforcement learning spoken dialogue system",
    "authors": ["Heriberto Cuayáhuitl", "Steve Renals", "Oliver Lemon", "Hiroshi Shimodaira."],
    "venue": "Computer Speech and Language, 24(2):395– 429.",
    "year": 2010
  }, {
    "title": "Deep reinforcement learning for multi-domain dialogue systems",
    "authors": ["Heriberto Cuayáhuitl", "Seunghak Yu", "Ashley Williamson", "Jacob Carse."],
    "venue": "arXiv preprint arXiv:1611.08675.",
    "year": 2016
  }, {
    "title": "Frames: A corpus for adding memory to goaloriented dialogue systems",
    "authors": ["Layla El Asri", "Hannes Schulz", "Shikhar Sharma", "Jeremie Zumer", "Justin Harris", "Emery Fine", "Rahul Mehrotra", "Kaheer Suleman."],
    "venue": "arXiv:1704.00057.",
    "year": 2017
  }, {
    "title": "Subgoal discovery in reinforcement learning using local graph clustering",
    "authors": ["Negin Entezari", "Mohammad Ebrahim Shiri", "Parham Moradi"],
    "year": 2011
  }, {
    "title": "Chinese word segmentation and named entity recognition: A pragmatic approach",
    "authors": ["Jianfeng Gao", "Mu Li", "Andi Wu", "Chang-Ning Huang."],
    "venue": "Computational Linguistics, 31(4):531–574.",
    "year": 2005
  }, {
    "title": "Distributed dialogue policies for multi-domain statistical dialogue management",
    "authors": ["Milica Gašić", "Dongho Kim", "Pirros Tsiakoulis", "Steve Young."],
    "venue": "ICASSP 2015, pages 5371–5375.",
    "year": 2015
  }, {
    "title": "Policy committee for adaptation in multidomain spoken dialogue systems",
    "authors": ["Milica Gašić", "Nikola Mrkšić", "Pei hao Su", "David Vandyke", "Tsung-Hsien Wen", "Steve J. Young."],
    "venue": "ASRU, pages 806–812. IEEE.",
    "year": 2015
  }, {
    "title": "Machine learning for dialog state tracking: A review",
    "authors": ["Matthew Henderson."],
    "venue": "Proceedings of the 1st International Workshop on Machine Learning in Spoken Language Processing.",
    "year": 2015
  }, {
    "title": "Long short-term memory",
    "authors": ["Sepp Hochreiter", "Jürgen Schmidhuber."],
    "venue": "Neural computation, 9(8):1735–1780.",
    "year": 1997
  }, {
    "title": "Hierarchical deep reinforcement learning: Integrating temporal abstraction and intrinsic motivation",
    "authors": ["Tejas D Kulkarni", "Karthik Narasimhan", "Ardavan Saeedi", "Josh Tenenbaum."],
    "venue": "Advances in Neural Information Processing Systems, pages",
    "year": 2016
  }, {
    "title": "A stochastic model of human-machine interaction for learning dialog strategies",
    "authors": ["Esther Levin", "Roberto Pieraccini", "Wieland Eckert."],
    "venue": "IEEE Transactions on Speech and Audio Processing, 8(1):11–23.",
    "year": 2000
  }, {
    "title": "A user simulator for task-completion dialogues",
    "authors": ["Xiujun Li", "Zachary C Lipton", "Bhuwan Dhingra", "Lihong Li", "Jianfeng Gao", "Yun-Nung Chen."],
    "venue": "arXiv preprint arXiv:1612.05688.",
    "year": 2016
  }, {
    "title": "End-to-end task-completion neural dialogue systems",
    "authors": ["Xuijun Li", "Yun-Nung Chen", "Lihong Li", "Jianfeng Gao."],
    "venue": "arXiv preprint arXiv:1703.01008.",
    "year": 2017
  }, {
    "title": "Rethinking Language, Mind, and World Dialogically",
    "authors": ["Per Linell."],
    "venue": "Information Age Publishing.",
    "year": 2009
  }, {
    "title": "Iterative policy learning in end-to-end trainable task-oriented neural dialog models",
    "authors": ["Bing Liu", "Ian Lane."],
    "venue": "arXiv preprint arXiv:1709.06136.",
    "year": 2017
  }, {
    "title": "End-to-end optimization of task-oriented dialogue model with deep reinforcement learning",
    "authors": ["Bing Liu", "Gokhan Tur", "Dilek Hakkani-Tur", "Pararth Shah", "Larry Heck."],
    "venue": "arXiv preprint arXiv:1711.10712.",
    "year": 2017
  }, {
    "title": "A Laplacian framework for option discovery in reinforcement learning",
    "authors": ["Marlos C. Machado", "Marc G. Bellemare", "Michael H. Bowling."],
    "venue": "Proceedings of the 34th International Conference on Machine Learning (ICML), pages 2295–2304.",
    "year": 2017
  }, {
    "title": "Dynamic abstraction in reinforcement learning via clustering",
    "authors": ["Shie Mannor", "Ishai Menache", "Amit Hoze", "Uri Klein."],
    "venue": "Proceedings of the 21st International Conference on Machine learning (ICML), pages 560–567. ACM.",
    "year": 2004
  }, {
    "title": "Automatic discovery of subgoals in reinforcement learning using diverse density",
    "authors": ["Amy McGovern", "Andrew G Barto."],
    "venue": "Proceedings of the 18th International Conference on Machine Learning, pages 361–368.",
    "year": 2001
  }, {
    "title": "Human-level control through deep reinforcement learning",
    "authors": ["Volodymyr Mnih", "Koray Kavukcuoglu", "David Silver", "Andrei A Rusu", "Joel Veness", "Marc G Bellemare", "Alex Graves", "Martin Riedmiller", "Andreas K Fidjeland", "Georg Ostrovski"],
    "year": 2015
  }, {
    "title": "Neural belief tracker: Data-driven dialogue state tracking",
    "authors": ["Nikola Mrkšić", "Diarmuid Ó Séaghdha", "Tsung-Hsien Wen", "Blaise Thomson", "Steve J. Young."],
    "venue": "Proceedings of the 55th Annual Meeting of the Association for Computational Linguis-",
    "year": 2017
  }, {
    "title": "Adversarial advantage actor-critic model for taskcompletion dialogue policy learning",
    "authors": ["Baolin Peng", "Xiujun Li", "Jianfeng Gao", "Jingjing Liu", "Yun-Nung Chen", "Kam-Fai Wong."],
    "venue": "arXiv preprint arXiv:1710.11277.",
    "year": 2017
  }, {
    "title": "Integrating planning for task-completion dialogue policy learning",
    "authors": ["Baolin Peng", "Xiujun Li", "Jianfeng Gao", "Jingjing Liu", "Kam-Fai Wong."],
    "venue": "arXiv preprint arXiv:1801.06176.",
    "year": 2018
  }, {
    "title": "Composite task-completion dialogue policy learning via hierarchical deep reinforcement learning",
    "authors": ["Baolin Peng", "Xiujun Li", "Lihong Li", "Jianfeng Gao", "Asli Celikyilmaz", "Sungjin Lee", "Kam-Fai Wong."],
    "venue": "Proceedings of the 2017 Conference on Em-",
    "year": 2017
  }, {
    "title": "PolicyBlocks: An algorithm for creating useful macroactions in reinforcement learning",
    "authors": ["Marc Pickett", "Andrew G. Barto."],
    "venue": "Proceedings of the 19th International Conference on Machine Learning (ICML), pages 506–513.",
    "year": 2002
  }, {
    "title": "Agenda-based user simulation for bootstrapping a pomdp dialogue system",
    "authors": ["Jost Schatzmann", "Blaise Thomson", "Karl Weilhammer", "Hui Ye", "Steve Young."],
    "venue": "NAACL 2007; Companion Volume, Short Papers, pages 149–152. Association for Computa-",
    "year": 2007
  }, {
    "title": "Identifying useful subgoals in reinforcement learning by local graph partitioning",
    "authors": ["Özgür Şimşek", "Alicia P. Wolfe", "Andrew G. Barto."],
    "venue": "Proceedings of the 22nd International Conference on Machine Learning (ICML), pages 816–823.",
    "year": 2005
  }, {
    "title": "Learning options in reinforcement learning",
    "authors": ["Martin Stolle", "Doina Precup."],
    "venue": "International Symposium on Abstraction, Reformulation, and Approximation, pages 212–223. Springer.",
    "year": 2002
  }, {
    "title": "Topic segmentation with shared topic detection and alignment of multiple documents",
    "authors": ["Bingjun Sun", "Prasenjit Mitra", "C Lee Giles", "John Yen", "Hongyuan Zha."],
    "venue": "SIGIR 2007, pages 199–206. ACM.",
    "year": 2007
  }, {
    "title": "Reinforcement Learning: An Introduction",
    "authors": ["Richard S. Sutton", "Andrew G. Barto."],
    "venue": "MIT Press, Cambridge, MA.",
    "year": 1998
  }, {
    "title": "Between MDPs and semi-MDPs: A framework for temporal abstraction in reinforcement learning",
    "authors": ["Richard S Sutton", "Doina Precup", "Satinder Singh."],
    "venue": "Artificial intelligence, 112(1-2):181–211.",
    "year": 1999
  }, {
    "title": "Finding structure in reinforcement learning",
    "authors": ["Sebastian Thrun", "Anton Schwartz."],
    "venue": "Advances in Neural Information Processing Systems 7 (NIPS), pages 385–392.",
    "year": 1994
  }, {
    "title": "FeUdal Networks for hierarchical reinforcement learning",
    "authors": ["Alexander Sasha Vezhnevets", "Simon Osindero", "Tom Schaul", "Nicolas Heess", "Max Jaderberg", "David Silver", "Koray Kavukcuoglu."],
    "venue": "Proceedings of the 34th International Conference on",
    "year": 2017
  }, {
    "title": "Sequence modeling via segmentations",
    "authors": ["Chong Wang", "Yining Wang", "Po-Sen Huang", "Abdelrahman Mohamed", "Dengyong Zhou", "Li Deng."],
    "venue": "arXiv preprint arXiv:1702.07463.",
    "year": 2017
  }, {
    "title": "Hybrid code networks: Practical and efficient end-to-end dialog control with supervised and reinforcement learning",
    "authors": ["Jason D Williams", "Kavosh Asadi", "Geoffrey Zweig."],
    "venue": "Proceedings of the 55th Annual Meeting of the Association for Computational",
    "year": 2017
  }, {
    "title": "Transition-based neural word segmentation",
    "authors": ["Meishan Zhang", "Yue Zhang", "Guohong Fu."],
    "venue": "ACL (1).",
    "year": 2016
  }, {
    "title": "Towards end-to-end learning for dialog state tracking and management using deep reinforcement learning",
    "authors": ["Tiancheng Zhao", "Maxine Eskenazi."],
    "venue": "arXiv preprint arXiv:1606.02560.",
    "year": 2016
  }],
  "id": "SP:a15dd977b1962328d972b9db132f1e6777441c5c",
  "authors": [{
    "name": "Da Tang",
    "affiliations": []
  }, {
    "name": "Xiujun Li",
    "affiliations": []
  }, {
    "name": "Jianfeng Gao",
    "affiliations": []
  }, {
    "name": "Chong Wang",
    "affiliations": []
  }, {
    "name": "Lihong Li",
    "affiliations": []
  }, {
    "name": "Tony Jebara",
    "affiliations": []
  }],
  "abstractText": "Developing agents to engage in complex goaloriented dialogues is challenging partly because the main learning signals are very sparse in long conversations. In this paper, we propose a divide-and-conquer approach that discovers and exploits the hidden structure of the task to enable efficient policy learning. First, given successful example dialogues, we propose the Subgoal Discovery Network (SDN) to divide a complex goal-oriented task into a set of simpler subgoals in an unsupervised fashion. We then use these subgoals to learn a multi-level policy by hierarchical reinforcement learning. We demonstrate our method by building a dialogue agent for the composite task of travel planning. Experiments with simulated and real users show that our approach performs competitively against a state-of-theart method that requires human-defined subgoals. Moreover, we show that the learned subgoals are often human comprehensible.",
  "title": "Subgoal Discovery for Hierarchical Dialogue Policy Learning"
}