{
  "sections": [{
    "heading": "1. Introduction",
    "text": "Problem Definition and Motivation. We consider the matrix completion problem, in which we are given a matrix M (over some field that we also refer to as the domain of the matrix) with missing entries, and the goal is to complete the entries of M so that to optimize a certain measure. There is a wealth of research on this fundamental problem (Candès & Plan, 2010; Candès & Recht, 2009; Candès & Tao, 2010; Elhamifar & Vidal, 2013; Hardt et al., 2014; Fazel, 2002; Keshavan et al., 2010a;b; Recht, 2011; Saunderson et al., 2016) due to its ubiquitous applications in recommender systems, machine learning, sensing, computer vision, data science, and predictive analytics, among others. In these areas, the matrix completion problem naturally arises after\n*Equal contribution 1Algorithms and Complexity Group, TU Wien, Vienna, Austria 2School of Computing, DePaul University, Chicago, USA 3Algorithms Group, University of Sheffield, Sheffield, UK. Correspondence to: Robert Ganian <rganian@gmail.com>, Iyad Kanj <ikanj@cdm.depaul.edu>, Sebastian Ordyniak <sordyniak@gmail.com>, Stefan Szeider <stefan@szeider.net>.\nProceedings of the 35 th International Conference on Machine Learning, Stockholm, Sweden, PMLR 80, 2018. Copyright 2018 by the author(s).\nobserving a sample from the set of entries of a low-rank matrix, and attempting to recover the missing entries with the goal of optimizing a certain measure. In this paper, we focus our study on matrix completion with respect to two measures (considered separately): (1) minimizing the rank of the completed matrix, and (2) minimizing the number of distinct rows of the completed matrix.\nThe first problem we consider—matrix completion w.r.t. rank minimization—has been extensively studied, and is often referred to as the low-rank matrix completion problem (Candès & Plan, 2010; Candès & Recht, 2009; Candès & Tao, 2010; Hardt et al., 2014; Fazel, 2002; Keshavan et al., 2010a;b; Recht, 2011; Saunderson et al., 2016). A celebrated application of this problem lies in the recommender systems area, where it is known as the Netflix problem (net). In this user-profiling application, an entry of the input matrix represents the rating of a movie by a user, where some entries could be missing. The goal is to predict the missing entries so that the rank of the complete matrix is minimized.\nThe low-rank matrix completion problem is known to be NP-hard, even when the matrix is over the field GF(2) (i.e., each entry is 0 or 1), and the goal is to complete the matrix into one of rank 3 (Peeters, 1996). A significant body of work on the low-rank matrix completion problem has centered around proving that, under some feasibility assumptions, the matrix completion problem can be solved efficiently with high probability (Candès & Recht, 2009; Recht, 2011). These feasibility assumptions are: (1) low rank; (2) incoherence; and (3) randomness (Hardt et al., 2014). Hardt et al. (2014) argue that feasibility assumption (3), which states that the subset of determined entries in the matrix is selected uniformly at random and has a large (sampling) density, is very demanding. In particular, they justify that in many applications, such as the Netflix problem, it is not possible to arbitrarily choose which matrix entries are determined and which are not, as those may be dictated by outside factors. The low-rank matrix completion problem also has other applications in the area of wireless sensor networks. In one such application, the goal is to reconstruct a low-dimensional geometry describing the locations of the sensors based on local distances sensed by each sensor; this problem is referred to as TRIANGULATION FROM INCOMPLETE DATA (Candès & Recht, 2009). Due to its inherent hardness, the low-rank matrix completion problem has also\nbeen studied with respect to various notions of approximation (Candès & Recht, 2009; Candès & Tao, 2010; Frieze et al., 2004; Hardt et al., 2014; Keshavan et al., 2010a;b; Recht, 2011).\nThe second problem we consider is the matrix completion problem w.r.t. minimizing the number of distinct rows. Although this problem has not received as much attention as low-rank-matrix completion, it certainly warrants studying. In fact, minimizing the number of distinct rows represents a special case of the SPARSE SUBSPACE CLUSTERING problem (Elhamifar & Vidal, 2013), where the goal is to complete a matrix in such a way that its rows can be partitioned into the minimum number of subspaces. The problem we consider corresponds to the special case of SPARSE SUBSPACE CLUSTERING where the matrix is over GF(2) and the desired rank of each subspace is 1. Furthermore, one can see the relevance of this problem to the area of recommender systems; in this context, one seeks to complete the matrix in such a way that the profile of each user is identical to a member of a known (possibly small) group of users.\nIn this paper, we study the two aforementioned problems through the lens of parameterized complexity (Downey & Fellows, 2013). In this paradigm, one measures the complexity of problems not only in terms of their input size n but also by a certain parameter k ∈ N, and seeks—among other things—fixed-parameter algorithms, i.e., algorithms that run in time f(k)·nO(1) for some function f . Problems admitting such algorithms are said to be fixed-parameter tractable (or contained in the parameterized complexity class FPT). The motivation is that the parameter of choice—usually describing some structural properties of the instance—can be small in some instances of interest, even when the input size is large. Therefore, by confining the combinatorial explosion to this parameter, one can obtain efficient algorithms for problem instances with a small parameter value for NP-hard problems. Problems that are not (or unlikely to be) fixedparameter tractable can still be solvable in polynomial-time for every fixed parameter value, i.e., they can be solved in time nf(k) for some function f . Problems of this kind are contained in the parameterized complexity class XP. We also consider randomized versions of FPT and XP, denoted by FPTR and XPR, containing all problems that can be solved by a randomized algorithm with a run-time of f(k)nO(1) and O(nf(k)), respectively, with a constant one-sided error-probability. Finally, problems that remain NP-hard for some fixed value of the parameter are hard for the parameterized complexity class paraNP. We refer to the respective textbooks for a detailed introduction to parameterized complexity (Downey & Fellows, 2013; Cygan et al., 2015). Parameterized Complexity is a rapidly growing field with various applications in many areas of Computer Science, including Artificial Intelligence (Bäckström et al., 2015; van Bevern et al., 2016; Bessiere et al., 2008; Endriss\net al., 2015; Ganian & Ordyniak, 2018; Gaspers & Szeider, 2014; Gottlob & Szeider, 2006).\nParameterizations. The parameters that we consider in this paper are: The number of (matrix) rows that cover all missing entries (row); the number of columns that cover all missing entries (col); and the minimum number of rows and columns which together cover all missing entries (comb). Although we do discuss and provide results for the unbounded domain case, i.e, the case that the domain (field size) is part of the input, we focus on the case when the matrix is over a bounded domain: This case is the most relevant from a practical perspective, and most of the related works focus on this case. It is easy to see that, when stated over any bounded domain, both problems under consideration are in FPT when parameterized by the number of missing entries, since an algorithm can brute-force through all possible solutions. On the other hand, parameterizing by row (resp. col) is very interesting from a practical perspective, as rows (resp. columns) with missing entries represent the newlyadded elements (e.g., newly-added users/movies/sensors, etc.); here, the above brute-force approach naturally fails, since the number of missing entries is no longer bounded by the parameter alone. Finally, the parameterization by comb is interesting because this parameter subsumes (i.e., is smaller than) the other two parameters (i.e., row and col). In particular, any fixed-parameter algorithm w.r.t. this parameter implies a fixed-parameter algorithm w.r.t. the other two parameters, but can also be efficient in cases where the number of rows or columns with missing entries is large.\nResults and Techniques. We start in Section 3 by considering the BOUNDED RANK MATRIX COMPLETION problem over GF(p) (denoted p-RMC), in which the goal is to complete the missing entries in the input matrix so that the rank of the completed matrix is at most t, where t ∈ N is given as input. We present a (randomized) fixed-parameter algorithm for this problem parameterized by comb. This result is obtained by applying a branch-and-bound algorithm combined with algebra techniques, allowing us to reduce the problem to a system of quadratic equations in which only few (bounded by some function of the parameter) equations contain non-linear terms. We then use a result by Miura et al. (2014) (improving an earlier result by Courtois et al. (2002)) in combination with reduction techniques to show that solving such a system of equations is in FPTR parameterized by the number of equations containing nonlinear terms. In the case where the domain is unbounded, we show that RMC is in XP parameterized by either row or col and in XPR parameterized by comb.\nIn Section 4, we turn our attention to the BOUNDED DISTINCT ROW MATRIX COMPLETION problem over both bounded domain (p-DRMC) and unbounded domain (DRMC); here, the goal is to complete the input matrix so\nthat the number of distinct rows in the completed matrix is at most t. We start by showing that p-DRMC parameterized by comb is fixed-parameter tractable. We obtain this result as a special case of a more general result showing that both DRMC and p-DRMC are fixed-parameter tractable parameterized by the treewidth (Robertson & Seymour, 1986; Downey & Fellows, 2013) of the compatibility graph, i.e., the graph having one vertex for every row and an edge between two vertices if the associated rows can be made identical. This result also allows us to show that DRMC is fixed-parameter tractable parameterized by row. Surprisingly, DRMC behaves very differently when parameterized by col, as we show that, for this parameterization, the problem becomes paraNP-hard.\nWe chart our results in Table 1. Interestingly, in the unbounded domain case, both considered problems exhibit wildly different behaviors: While RMC admits XP algorithms regardless of whether we parameterize by row or col, using these two parameterizations for DRMC results in the problem being FPT and paraNP-hard, respectively. On the other hand, in the (more studied) bounded domain case, we show that both problems are in FPT (resp. FPTR) w.r.t. all parameters under consideration. Finally, we prove that 2-DRMC remains NP-hard even if every column and row contains (1) a bounded number of missing entries, or (2) a bounded number of determined entries. This effectively rules out FPT algorithms w.r.t. the parameters: maximum number of missing/determined entries per row or column."
  }, {
    "heading": "2. Preliminaries",
    "text": "For a prime number p, let GF(p) be a field of order p; recall that each such field can be equivalently represented as the set of integers modulo p. For positive integers i and j > i, we write [i] for the set {1, 2, . . . , i}, and i : j for the set {i, i+ 1, . . . , j}.\nFor an m × n matrix M (i.e., a matrix with m rows and n columns), and for i ∈ [m] and j ∈ [n], M[i, j] denotes the element in the i-th row and j-th column of M. Similarly, for a vector d, we write d[i] for the i-th coordinate of d. We write M[∗, j] for the column-vector (M[1, j],M[2, j], . . . ,M[m, j]), and M[i, ∗] for the row-\nvector (M[i, 1],M[i, 2], . . . ,M[i, n]). We will also need to refer to submatrices obtained by omitting certain rows or columns from M. We do so by using sets of indices to specify which rows and columns the matrix contains. For instance, the matrix M[[i], ∗] is the matrix consisting of the first i rows and all columns of M, and M[2 : m, 1 : n− 1] is the matrix obtained by omitting the first row and the last column from M.\nThe row-rank (resp. column-rank) of a matrix M is the maximum number of linearly-independent rows (resp. columns) in M. It is well known that the row-rank of a matrix is equal to its column-rank, and this number is referred to as the rank of the matrix. We let rk(M) and dr(M) denote the rank and the number of distinct rows of a matrix M, respectively. If M is a matrix over GF(p), we call GF(p) the domain of M.\nAn incomplete matrix over GF(p) is a matrix which may contain not only elements from GF(p) but also the special symbol •. An entry is a missing entry if it contains •, and is a determined entry otherwise. A (possibly incomplete) m×n matrix M′ is consistent with anm×nmatrix M if and only if, for each i ∈ [m] and j ∈ [n], either M′[i, j] = M[i, j] or M′[i, j] = •."
  }, {
    "heading": "2.1. Problem Formulation",
    "text": "We formally define the problems under consideration below.\nBOUNDED RANK MATRIX COMPLETION (p-RMC)\nInput: An incomplete matrix M over GF(p) for a fixed prime number p, and an integer t. Task: Find a matrix M′ consistent with M such that rk(M′) ≤ t.\nBOUNDED DISTINCT ROW MATRIX COMPLETION (p-DRMC)\nInput: An incomplete matrix M over GF(p) for a fixed prime number p, and an integer t. Task: Find a matrix M′ consistent with M such that dr(M′) ≤ t.\nAside from the problem variants where p is a fixed prime number, we also study the case where matrix entries range over a domain that is provided as part of the input. In particular, the problems RMC and DRMC are defined analogously to p-RMC and p-DRMC, respectively, with the sole distinction that the prime number p is provided as part of the input. We note that 2-RMC is NP-hard even for t = 3 (Peeters, 1996), and the same holds for 2-DRMC (see Theorem 14). Without loss of generality, we assume that the rows of the input matrix are pairwise distinct."
  }, {
    "heading": "2.2. Treewidth",
    "text": "Treewidth (Robertson & Seymour, 1986) is one of the most prominent decompositional parameters for graphs and has found numerous applications in computer science. A treedecomposition T of a graph G = (V,E) is a pair (T, χ),\nwhere T is a tree and χ is a function that assigns each tree node t a set χ(t) ⊆ V of vertices such that the following conditions hold: (TD1) for every edge uv ∈ E(G) there is a tree node t such that u, v ∈ χ(t); and (TD2) for every vertex v ∈ V (G), the set of tree nodes t with v ∈ χ(t) forms a non-empty subtree of T . The width of a tree-decomposition (T, χ) is the size of a largest bag minus 1. A tree-decomposition of minimum width is called optimal. The treewidth of a graph G, denoted by tw(G), is the width of an optimal tree decomposition of G. We will assume that the tree T of a tree-decomposition is rooted and we will denote by Tt the subtree of T rooted at t and write χ(Tt) for the set ⋃ t′∈V (Tt) χ(t ′)."
  }, {
    "heading": "2.3. Problem Parameterizations",
    "text": "One advantage of the parameterized complexity paradigm is that it allows us to study the complexity of a problem w.r.t. several parameterizations of interest/relevance. To provide a concise description of the parameters under consideration, we introduce the following terminology: We say that a • entry at position [i, j] in an incomplete matrix M is covered by row i and by column j. In this paper, we study RMC and DRMC w.r.t. the following parameterizations (see Figure 1 for illustration):\nFor instance, the aforementiond problem TRIANGULATION FROM INCOMPLETE DATA, where a small number of distance-sensors are faulty, would result in matrix completion instances where col and row are both small.\nWe denote the parameter under consideration in brackets after the problem name (e.g., DRMC[comb]). As mentioned in Section 1, both p-RMC and p-DRMC are trivially in FPT when parameterized by the number of missing entries, and hence this parameterization is not discussed further.\nGiven an incomplete matrix M, computing the parameter values for col and row is trivial. Furthermore, the parameter values satisfy comb ≤ row and comb ≤ col. The parameter\nvalue for comb can also be computed in polynomial time by reducing the problem to finding a vertex cover in a bipartite graph: Proposition 1. Given an incomplete matrix M over GF(p), we can compute the parameter value for comb, along with sets R and C of total cardinality comb containing the indices of covering rows and columns, respectively, in time O((n ·m)1.5)."
  }, {
    "heading": "3. Rank Minimization",
    "text": "In this section we present our results for BOUNDED RANK MATRIX COMPLETION under various parameterizations.\n3.1. Bounded Domain: Parameterization by row\nAs our first result, we present an algorithm for solving p-RMC[row]. This will serve as a gentle introduction to the techniques used in the more complex result for pRMC[comb], and will also be used to give an XP algorithm for RMC[row]. Theorem 2. p-RMC[row] is in FPT.\nProof Sketch. Let R be the (minimum) set of rows that cover all occurrences of • in the input matrix M. Since the existence of a solution does not change if we permute the rows of M, we permute the rows of M so that the rows in R have indices 1, . . . , k. We now proceed in three steps.\nFor the first step, we will define the notion of signature: A signature S is a tuple (I,D), where I ⊆ R and D is a mapping from R \\ I to (I → GF(p)). Intuitively, a signature S specifies a subset I of R which is expected to be independent in M [k + 1 : m, ∗] ∪ I (i.e., adding the rows in I to M [k + 1 : m, ∗] is expected to increase the rank of M [k + 1 : m, ∗] by |I|); and for each remaining row of R, S specifies how that row should depend on I . The latter is carried out using D: For each row in R\\ I , D provides a set of coefficients expressing the dependency of that row on the rows in I . Formally, we say that a matrix M′ that is compatible with the incomplete matrix M matches a signature (I,D) if and only if, for each row (i.e., vector) d ∈ R \\ I , there exist coefficients adk+1, . . . , a d m ∈ GF(p) such that\nd = adk+1M[k+1, ∗]+· · ·+admM[m, ∗]+ ∑ i∈I D(d)(i)·i. The first step of the algorithm branches through all possible signatures S. Clearly, the number of distinct signatures is upper-bounded by 2k · pk2 .\nFor the second step, we fix an enumerated signature S. The algorithm will verify whether S is valid, i.e., whether there exists a matrix M′ compatible with M that matches S. To do so, the algorithm will construct a system of |R \\ I| equations over vectors of size n, and then transform this into a system ΥS of |R\\I| ·n equations over GF(p) (one equation for each vector coordinate). For each d ∈ R\\I , ΥS contains\none variable for each coefficient adk+1, . . . , a d m and one variable for each occurrence of • in the rows of R. For instance, the first equation in ΥS has the following form: d[1] = adk+1M[k+1, 1]+ · · ·+admM[m, 1]+ ∑ i∈I D(d)(i) · i[1], where adk+1, . . . , a d m are variables, and d[1] as well as each i[1] in the sum could be a variable or a fixed number. Crucially, ΥS is a system of at most (k ·n) linear equations over GF(p) with at most m+ kn variables, and can be solved in time O((m+ kn)3) by Gaussian elimination. Constructing the equations takes time O(m · n).\nDuring the second step, the algorithm determines whether a signature S is valid or not, and in the end, after going through all signatures, selects an arbitrary valid signature S = (I,D) with minimum |I|. For the final third step, the algorithm checks whether |I|+rk(M[k+1 : m, ∗]) ≤ t. We note that computing rk(M[k + 1 : m, ∗]) can be carried out in time O(nm1.4) (Ibarra et al., 1982). If the above inequality does not hold, the algorithm rejects; otherwise it recomputes a solution to ΥS and outputs the matrix M′ obtained from M by replacing each occurrence of • at position [i, j] by the value of the variable i[j] in the solution to ΥS . The total running time isO((2k ·pk2) ·((m+kn)3 +nm1.4)) = O(2kpk2 · (m+ kn)3).\nSince the the transpose of M has the same rank as M, it follows immediately that p-RMC[col] is in FPT. Corollary 3. p-RMC[col] is in FPT.\nAs a consequence of the running time of the algorithm given in the proof of Theorem 2, we obtain: Corollary 4. RMC[row] and RMC[col] are in XP.\n3.2. Bounded Domain: Parameterization by comb\nIn this subsection, we present a randomized fixed-parameter algorithm for p-RMC[comb] with constant one-sided error probability. Before we proceed to the algorithm, we need to introduce some basic terminology related to systems of equations. Let Υ be a system of ` equations EQ1, EQ2,. . . , EQ` over GF(p); we assume that the equations are simplified as much as possible. In particular, we assume that no equation contains two terms over the same set of variables such that the degree/exponent of each variable in both terms is the same. Let EQi be a linear equation in Υ, and let x be a variable which occurs in EQi (with a non-zero coefficient). Naturally, EQi can be transformed into an equivalent equation EQi,x, where x is isolated, and we use Γi,x to denote the side of EQi,x not containing x, i.e., EQi,x is of the form x = Γi,x. We say that Υ′ is obtained from Υ by substitution of x in EQi if Υ′ is the system of equations obtained by:\n1. computing EQi,x and in particular Γi,x from EQi;\n2. setting Υ′ := Υ \\ {EQi}; and\n3. replacing x with Γi,x in every equation in Υ′.\nObserve that Υ′ has sizeO(n · `), and can also be computed in timeO(n·`), where n is the number of variables occurring in Υ. Furthermore, any solution to Υ′ can be transformed into a solution to Υ in linear time, and similarly any solution to Υ can be transformed into a solution to Υ′ in linear time (i.e., Υ′ and Υ are equivalent). Moreover, Υ′ contains at least one fewer variable and one fewer equation than Υ.\nThe following proposition is crucial for our proof, and is of independent interest.\nProposition 5. Let Υ be a system of ` quadratic equations over GF(p). Then computing a solution for Υ is in FPTR parameterized by ` and p, and in XPR parameterized only by `.\nProof. Let n be the number of variables in Υ. We distinguish two cases. If n ≥ `(` + 3)/2, then Υ can be solved in randomized time O(2`n3`(log p)2) (Miura et al., 2014). Otherwise, n < `(` + 3)/2, and we can solve Υ by a brute-force algorithm which enumerates (all of the) at most pn < p`(`+3)/2 assignments of values to the variables in Υ. The proposition now follows by observing that the given algorithm runs in timeO(2`n3`(log p)2+p`(`+3)/2`2).\nTheorem 6. p-RMC[comb] is in FPTR.\nProof Sketch. We begin by using Proposition 1 to compute the sets R and C containing the indices of the covering rows and columns, respectively; let |R| = r and |C| = c, and recall that the parameter value is k = r + c. Since the existence of a solution for p-RMC does not change if we permute rows and columns of M, we permute the rows of M so that the rows in R have indices 1, . . . , r, and subsequently, we permute the columns of M so that the columns in C have indices 1, . . . , c.\nBefore we proceed, let us give a high-level overview of our strategy. The core idea is to branch over signatures, which will be defined in a similar way to those in Theorem 2. These signatures will capture information about the dependencies among the rows in R and columns in C; one crucial difference is that for columns, we will focus only on dependencies in the submatrix M[r + 1 : m, ∗]. In each branch, we arrive at a system of equations that needs to be solved in order to determine whether the signatures are valid. Unlike Theorem 2, here the obtained system of equations will contain non-linear (but quadratic) terms, and hence solving the system is far from being trivial. Once we determine which signatures are valid, we choose one that minimizes the total rank.\nFor the first step, let us define the notion of signature that will be used in this proof. A signature S is a tuple\n(IR, DR, IC , DC) where: 1. IR ⊆ R; 2. DR is a mapping from R \\ IR to (IR → GF(p)); 3. IC ⊆ C; and 4. DC is a mapping from C \\ IC to (IC → GF(p)).\nWe say that a matrix M′ compatible with the incomplete matrix M matches a signature (IR, DR, IC , DC) if:\n◦ for each row d ∈ R \\ IR, there exist coefficients adr+1, . . . , a d m ∈ GF(p) such that d = adr+1M′[r +\n1, ∗] + · · ·+ admM′[m, ∗] + ∑ i∈IR DR(d)(i) · i; and\n◦ for each column h ∈ C \\ Ic, there exist coefficients bhc+1, . . . , b h n ∈ GF(p) such that h[r + 1 : m] =\nbhc+1M ′[r + 1 : m, c] + · · · + bhnM′[r + 1 : m,n] +∑\ni∈IC DC(h)(i) · i[r + 1 : m].\nThe number of distinct signatures is upper-bounded by 2r · pr2 · 2c · pc2 ≤ 2k · pk2 , and the first step of the algorithm branches over all possible signatures S. In the second step, for each enumerated signature S, we check whether S is valid (i.e., whether there exists a matrix M′, compatible with the incomplete M, that matches S) in a similar fashion as in the proof of Theorem 2. Here, this results in a system ΥS of |R \\ IR| · n+ |C \\ IC | · (m− r) equations which check the dependencies for rows in R \\ IR and columns in C \\ IC . For instance, the first equation in ΥS for some d ∈ R \\ IR has the following form: d[1] = adr+1M[r+1, 1]+· · ·+admM[m, 1]+ ∑ i∈IR DR(d)(i)·i[1], where adr+1, . . . , a d m are variables, DR(d)(i) is a number, and all other occurrences are either variables or numbers. Similarly, the second equation in ΥS for some h ∈ C \\ IC has the following form: h[r + 2] = bhc+1M[r + 2, c+ 1] + · · · + bhnM[r + 2, n] + ∑ i∈IC DC(d)(i) · i[r + 2], where bhc+1, . . . , b h n are variables, DC(d)(i) is a number, and all other occurrences are either variables or numbers.\nNext, observe that the only equations in ΥS that may contain non-linear terms are those for d[j], where j ≤ c, and in particular ΥS contains at most k2 equations with non-linear terms (k equations for at most k vectors d inR\\IR). We will now use substitutions to simplify ΥS by removing all linear equations; specifically, at each step we select an arbitrary linear equation EQi containing a variable x, apply substitution of x in EQi to construct a new system of equations with one fewer equation, and simplify all equations in the new system. If at any point we reach a system of equations that contains an invalid equation (e.g., 2=5), then ΥS does not have a solution, and we discard the corresponding branch. Otherwise, after at most |R\\IR| ·n+ |C \\IC | ·(m−r) ∈ O(kn+km) substitutions, we obtain a system of at most k2 quadratic equations ΨS such that any solution to ΨS can be transformed into a solution to ΥS in time O(kn+ km). We can now apply Proposition 5 to solve ΨS and mark S as a valid signature if ΨS has a solution.\nAfter all signatures have been processed, the algorithm se-\nlects a valid signature S = (I,D) that has the minimum value of |IR|+ |IC |, checks whether |IR|+ |IC |+ rk(M[r+ 1 : m, c : 1 + n]) ≤ t, and either uses this to construct a solution (similarly to the proof of Theorem 2), or outputs “no”. The theorem now follows by observing that the total running time of the algorithm is obtained by combining the branching factor of branching over all signatures (O(2k ·pk2)) with the run-time of Proposition 5 for k2 many quadratic equations (O(3k2n3(log p)2 + pk4)). In particular, we obtain a running time of O(3k2 · pk4 · n3).\nAs a consequence of the running time of the algorithm given in the proof of Theorem 6, we obtain:\nCorollary 7. RMC[comb] is in XPR."
  }, {
    "heading": "4. BOUNDED DISTINCT ROW MATRIX COMPLETION",
    "text": "Let (p,M, t) be an instance of DRMC. We say that two rows of M are compatible if whenever the two rows differ at some entry then one of the rows has a • at that entry. The compatibility graph of M, denoted by G(M), is the undirected graph whose vertices correspond to the row indices of M and in which there is an edge between two vertices if and only if their two corresponding rows are compatible. See Figure 2 for an illustration.\nWe start by showing that DRMC (and therefore p-DRMC) can be reduced to the CLIQUE COVER problem, which is defined as follows.\nCLIQUE COVER (CC)\nInput: An undirected graph G and an integer k. Task: Find a partition of V (G) into at most k\ncliques, or output that no such partition exists.\nLemma 8. An instance I = (p,M, t) of DRMC has a solution if and only if the instance I ′ = (G(M), t) of CC does. Moreover, a solution for I ′ can obtained in polynomial-time from a solution for I and vice versa.\nProof Sketch. The lemma follows immediately from the observation that a set R of rows in M can be made identical if and only if G(M)[R] is a clique.\nTheorem 9. CC is in FPT when parameterized by the treewidth of the input graph.\nProof Sketch. We show the theorem via a standard dynamic programming algorithm on a tree-decomposition of the input graph (Bodlaender & Koster, 2008). Namely after computing an optimal tree-decomposition (T, χ) of the input graph G, which can be achieved in FPT-time w.r.t. the treewidth of G (Kloks, 1994; Bodlaender, 1996; Bodlaender et al., 2016), we compute a set R(t) of tuples via a bottom-up dynamic programming algorithm for every t ∈ V (T ). In our case (P, c) ∈ R(t) if and only if P is a partition of G[χ(t)] into cliques and c is the minimum number such that G[χ(Tt)] has a partition P ′ into c cliques with P = {P ′ ∩ χ(t) | P ′ ∈ P ′ } \\ {∅}.\nNote that the above theorem also implies that the wellknown COLORING problem is FPT parameterized by the treewidth of the complement of the input graph. The theorem below follows immediately from Lemmas 8 and 9.\nTheorem 10. DRMC and p-DRMC are in FPT when parameterized by the treewidth of the compatibility graph.\n4.1. p-DRMC\nTheorem 11. p-DRMC[comb] is in FPT.\nProof. Let (M, t) be an instance of p-DRMC, and let k be the parameter comb. By Proposition 1, we can compute a set R• of rows and a set C• of columns, where |R• ∪ C•| ≤ k, and such that every occurrence of • in M is either contained in a row or column in R• ∪ C•. Let R and C be the set of rows and columns of M, respectively. Let P be the unique partition of R \\ R• such that two rows r and r′ belong to the same set in P if and only if they are identical on all columns in C \\C•. Then |P | ≤ (p+ 1)k, for every P ∈ P , since two rows in P can differ on at most |C•| ≤ k entries, each having (p + 1) values to be chosen from. Moreover, any two rows in R \\R• that are not contained in the same set in P are not compatible, which implies that they appear in different components of G(M) \\ R• and hence the set of vertices in every component of G(M) \\ R• is a subset of P , for some P ∈ P . It is now straightforward to show that tw(G(M)) ≤ k + (p+ 1)k, and hence, tw(G(M)) is bounded by a function of the parameter k. The theorem now follows from Theorem 10."
  }, {
    "heading": "4.2. DRMC",
    "text": "The proof of the following theorem is very similar to the proof of Theorem 11, i.e., we mainly use the observation that the parameter row is also a bound on the treewidth of the compatibility graph and then apply Theorem 10.\nTheorem 12. DRMC[row] is in FPT.\nFor the remainder of this section, we will introduce the PARTITIONING INTO TRIANGLES (PIT) problem: Given a graph G, decide whether there is a partition P of V (G) into triangles. We will often use the following easy observation.\nObservation 1. A graph G that does not contain a clique with four vertices has a partition into triangles if and only if it has a partition into at most |V (G)|/3 cliques. Theorem 13. DRMC[col] is paraNP-hard.\nProof Sketch. We will reduce from the NP-complete 3-SAT2 problem (Berman et al., 2003): Given a propositional formula φ in conjunctive normal form such that (1) every clause of φ has exactly three distinct literals and (2) every literal occurs in exactly two clauses, decide whether φ is satisfiable. To make our reduction easier to follow, we will divide the reduction into two steps. Given an instance (formula) φ of 3-SAT-2, we will first construct an equivalent instance G of PIT with the additional property that G does not contain a clique on four vertices. We note that similar reductions from variants of the satisfiability problem to PIT are known (and hence our first step does not show anything new for PIT); however, our reduction is specifically designed to simplify the second step, in which we will construct an instance (M, |V (G)|/3) of DRMC such that G(M) is isomorphic to G and M has only seven columns. By Observation 1 and Lemma 8, this proves the theorem since (M, |V (G)|/3) has a solution if and only if φ does.\nLet φ be an instance of 3-SAT-2 with variables x1, . . . , xn and clauses C1, . . . , Cm. We first construct the instance G of PIT such that G does not contain a clique of size four. For every variable xi of φ, let G(xi) be the graph illustrated in Figure 3, and for every clause Cj of φ, let G(Cj) be the graph illustrated in Figure 4. Let f : [m] × [3] → {xoi , x̄oi | 1 ≤ i ≤ n ∧ 1 ≤ o ≤ 2 } be any bijective function such that for every j and r with 1 ≤ j ≤ m and 1 ≤ r ≤ 3, it holds that: If f(j, r) = xoi (for some i and o), then xi is the r-th literal of Cj ; and if f(j, r) = x̄oi , then x̄i is the r-th literal of Cj .\nThe graph G is obtained from the disjoint union of the graphs G(x1), . . . , G(xn), G(C1), . . . , G(Cm) after applying the following modifications: (1) For every j and r with 1 ≤ j ≤ m and 1 ≤ r ≤ 3 add edges forming a triangle on the vertices l1j,r, l 2 j,r, f(j, r); and (2) for every i with 1 ≤ i ≤ 2n − m, add the vertices g1i , g2i and an edge between g1i and g 2 i . Finally we add edges forming a complete bipartite graph between all vertices in { goi | 1 ≤ i ≤ 2n −m ∧ 1 ≤ o ≤ 2 } and all vertices in {hoi | 1 ≤ i ≤ n ∧ 1 ≤ o ≤ 2 }.\nThis completes the construction of G. The following claim concludes the first step of our reduction.\nClaim 1. φ is satisfiable if and only if G has a partition\ninto triangles. Moreover, G does not contain a clique of size four.\nWe will now proceed to the second (and final) step of our reduction, i.e., we will construct an instance (M, |V (G)|/3) of DRMC such that: G(M) is isomorphic to G and M has only seven columns.\nM contains one row R(u) for every u ∈ V (G). The definition of R(u) for every vertex u that is part of some gadget G(xi) or G(Cj) is illustrated in Figures 3 and 4. Additionally, we set R(goj ) = (•, •, •, •, •, •, j) for every j and o with 1 ≤ j ≤ 2n−m and 1 ≤ o ≤ 2. Using an exhaustive case analysis, one can show thatG(M) is indeed isomorphic to G, which concludes the proof of the theorem.\nWe conclude this section with a hardness result showing that 2-DRMC remains NP-hard when the number of missing or known entries in each column/row is bounded.\nTheorem 14. The restriction of 2-DRMC to instances in which each row and each column contains exactly three missing entries is NP-hard. The same holds for the restriction of 2-DRMC to instances in which each row and each column contains at most 4 determined entries.\nProof Sketch. Consider the problem of (properly) coloring a graph on n vertices, having minimum degree n− 4 and no independent set of size 4, by n/3 colors, where n is divisible\nby 3; denote this problem as (n/3)-COLORINGδ=n−4. This problem is NP-hard via a reduction from the PARTITION INTO TRIANGLES problem on K4-free cubic graphs. The NP-hardness of the latter problem follows from the NPhardness of the PARTITION INTO TRIANGLES problem on planar cubic graphs (Cerioli et al., 2008), since a K4 in a cubic graph must be isolated, and hence can be removed from the start. Finally, using Observation 1, PARTITION INTO TRIANGLES on K4-free cubic graphs is polynomialtime reducible to (n/3)-COLORINGδ=n−4, via the simple reduction that complements the edges of the graph.\nNow we reduce from (n/3)-COLORINGδ=n−4 to p-DRMC by mimicking a standard reduction from 3-coloring to rank minimization (Peeters, 1996). Given an instanceG of (n/3)COLORINGδ=n−4, we construct an n× n matrix M whose rows and columns correspond to the vertices inG, as follows. The diagonal entries of M are all ones. For an entry at row i and column j, where i 6= j, M[i, j] = 0 if ij ∈ E(G), and is • otherwise. Finally, we set r = n/3. Observe that since each vertex in G has n− 4 neighbors, the number of missing entries in any row and any column of M is 3.\nIt is not difficult to show that G is a yes-instance of (n/3)COLORINGδ=n−4 if and only if (M, n/3) is a yes-instance of 2-DRMC.\nThe second statement in the theorem follows via a reduction from 3-COLORING on graphs of maximum degree at most 4 (Garey et al., 1976), using similar arguments."
  }, {
    "heading": "5. Conclusion",
    "text": "We studied the parameterized complexity of two fundamental matrix completion problems under several parameterizations. For the bounded domain case, we painted a positive picture by showing that the two problems are in FPT (resp. FPTR) w.r.t. all considered parameters. For the unbounded domain case, we characterized the parameterized complexity of DRMC by showing that it is in FPT parameterized by row, and paraNP-hard parameterized by col (and hence by comb). For RMC, we could show its membership in XP (resp. XPR) w.r.t. all considered parameters. Three immediate open questions ensue:\n◦ Is it possible to obtain a deterministic algorithm for p-RMC and RMC parameterized by comb?\n◦ Can we improve our XP (resp. XPR) results for RMC to FPT (resp. FPTR) or show that the problems are W[1]-hard?\n◦ Does a hardness result, similar to the one given in Theorem 14 for p-DRMC, hold for p-RMC?\nAcknowledments. Robert Ganian is also affiliated with FI MU, Czech Republic."
  }],
  "year": 2018,
  "references": [{
    "title": "A complete parameterized complexity analysis of bounded planning",
    "authors": ["C. Bäckström", "P. Jonsson", "S. Ordyniak", "S. Szeider"],
    "venue": "J. of Computer and System Sciences,",
    "year": 2015
  }, {
    "title": "Approximation hardness of short symmetric instances of MAX-3SAT",
    "authors": ["P. Berman", "M. Karpinski", "A.D. Scott"],
    "venue": "Electronic Colloquium on Computational Complexity (ECCC),",
    "year": 2003
  }, {
    "title": "The parameterized complexity of global constraints",
    "authors": ["C. Bessiere", "E. Hebrard", "B. Hnich", "Z. Kiziltan", "C. Quimper", "T. Walsh"],
    "venue": "Proceedings of the Twenty-Third AAAI Conference on Artificial Intelligence,",
    "year": 2008
  }, {
    "title": "A linear-time algorithm for finding treedecompositions of small treewidth",
    "authors": ["H.L. Bodlaender"],
    "venue": "SIAM J. Comput.,",
    "year": 1996
  }, {
    "title": "Combinatorial optimization on graphs of bounded treewidth",
    "authors": ["H.L. Bodlaender", "Koster", "A.M.C. A"],
    "venue": "The Computer Journal,",
    "year": 2008
  }, {
    "title": "A O(cn) 5approximation algorithm for treewidth",
    "authors": ["H.L. Bodlaender", "P.G. Drange", "M.S. Dregi", "F.V. Fomin", "D. Lokshtanov", "M. Pilipczuk"],
    "venue": "SIAM J. Comput.,",
    "year": 2016
  }, {
    "title": "Matrix completion with noise",
    "authors": ["E.J. Candès", "Y. Plan"],
    "venue": "Proceedings of the IEEE,",
    "year": 2010
  }, {
    "title": "Exact matrix completion via convex optimization",
    "authors": ["E.J. Candès", "B. Recht"],
    "venue": "Foundations of Computational Mathematics,",
    "year": 2009
  }, {
    "title": "The power of convex relaxation: near-optimal matrix completion",
    "authors": ["E.J. Candès", "T. Tao"],
    "venue": "IEEE Trans. Information Theory,",
    "year": 2010
  }, {
    "title": "Partition into cliques for cubic graphs: Planar case, complexity and approximation",
    "authors": ["M.R. Cerioli", "L. Faria", "T.O. Ferreira", "C.A.J. Martinhon", "F. Protti", "B.A. Reed"],
    "venue": "Discrete Applied Mathematics,",
    "year": 2008
  }, {
    "title": "Solving underdefined systems of multivariate quadratic equations. In Public Key Cryptography, 5th International Workshop on Practice and Theory in Public Key Cryptosystems",
    "authors": ["N. Courtois", "L. Goubin", "W. Meier", "J. Tacier"],
    "venue": "PKC",
    "year": 2002
  }, {
    "title": "Fundamentals of Parameterized Complexity",
    "authors": ["R.G. Downey", "M.R. Fellows"],
    "venue": "Texts in Computer Science. Springer Verlag,",
    "year": 2013
  }, {
    "title": "Sparse subspace clustering: Algorithm, theory, and applications",
    "authors": ["E. Elhamifar", "R. Vidal"],
    "venue": "IEEE Trans. Pattern Anal. Mach. Intell.,",
    "year": 2013
  }, {
    "title": "Parameterized complexity results for agenda safety in judgment aggregation",
    "authors": ["U. Endriss", "R. de Haan", "S. Szeider"],
    "venue": "Proceedings of AAMAS",
    "year": 2015
  }, {
    "title": "Matrix rank minimization with applications",
    "authors": ["M. Fazel"],
    "venue": "PhD thesis, Stanford University,",
    "year": 2002
  }, {
    "title": "Fast montecarlo algorithms for finding low-rank approximations",
    "authors": ["A.M. Frieze", "R. Kannan", "S. Vempala"],
    "venue": "J. ACM,",
    "year": 2004
  }, {
    "title": "The complexity landscape of decompositional parameters for ILP",
    "authors": ["R. Ganian", "S. Ordyniak"],
    "venue": "Artificial Intelligence,",
    "year": 2018
  }, {
    "title": "Some simplified NP-complete graph problems",
    "authors": ["M.R. Garey", "D.S. Johnson", "L.J. Stockmeyer"],
    "venue": "Theoretical Computer Science,",
    "year": 1976
  }, {
    "title": "Guarantees and limits of preprocessing in constraint satisfaction and reasoning",
    "authors": ["S. Gaspers", "S. Szeider"],
    "venue": "Artificial Intelligence,",
    "year": 2014
  }, {
    "title": "Fixed-parameter algorithms for artificial intelligence, constraint satisfaction, and database problems",
    "authors": ["G. Gottlob", "S. Szeider"],
    "venue": "The Computer Journal,",
    "year": 2006
  }, {
    "title": "Computational limits for matrix completion",
    "authors": ["M. Hardt", "R. Meka", "P. Raghavendra", "B. Weitz"],
    "venue": "In Proceedings of The 27th Conference on Learning Theory, volume 35 of JMLR Workshop and Conference Proceedings,",
    "year": 2014
  }, {
    "title": "A generalization of the fast LUP matrix decomposition algorithm and applications",
    "authors": ["O.H. Ibarra", "S. Moran", "R. Hui"],
    "venue": "J. Algorithms,",
    "year": 1982
  }, {
    "title": "Matrix completion from a few entries",
    "authors": ["R.H. Keshavan", "A. Montanari", "S. Oh"],
    "venue": "IEEE Trans. Information Theory,",
    "year": 2010
  }, {
    "title": "Matrix completion from noisy entries",
    "authors": ["R.H. Keshavan", "A. Montanari", "S. Oh"],
    "venue": "Journal of Machine Learning Research,",
    "year": 2010
  }, {
    "title": "Treewidth: Computations and Approximations",
    "authors": ["T. Kloks"],
    "year": 1994
  }, {
    "title": "Extended algorithm for solving underdefined multivariate quadratic equations",
    "authors": ["H. Miura", "Y. Hashimoto", "T. Takagi"],
    "venue": "IEICE Transactions,",
    "year": 2014
  }, {
    "title": "Orthogonal representations over finite fields and the chromatic number of graphs",
    "authors": ["R. Peeters"],
    "year": 1996
  }, {
    "title": "A simpler approach to matrix completion",
    "authors": ["B. Recht"],
    "venue": "Journal of Machine Learning Research,",
    "year": 2011
  }, {
    "title": "Simple algorithms and guarantees for low rank matrix completion over F2",
    "authors": ["J. Saunderson", "M. Fazel", "B. Hassibi"],
    "venue": "In Proceedings of The IEEE International Symposium on Information Theory,",
    "year": 2016
  }, {
    "title": "H-index manipulation by merging articles: Models, theory, and experiments",
    "authors": ["R. van Bevern", "C. Komusiewicz", "R. Niedermeier", "M. Sorge", "T. Walsh"],
    "venue": "Artif. Intell.,",
    "year": 2016
  }],
  "id": "SP:11b6011a19d63d85cea0d0a7c510fb16bcc1d7af",
  "authors": [{
    "name": "Robert Ganian",
    "affiliations": []
  }, {
    "name": "Iyad Kanj",
    "affiliations": []
  }, {
    "name": "Sebastian Ordyniak",
    "affiliations": []
  }, {
    "name": "Stefan Szeider",
    "affiliations": []
  }],
  "abstractText": "We consider two matrix completion problems, in which we are given a matrix with missing entries and the task is to complete the matrix in a way that (1) minimizes the rank, or (2) minimizes the number of distinct rows. We study the parameterized complexity of the two aforementioned problems with respect to several parameters of interest, including the minimum number of matrix rows, columns, and rows plus columns needed to cover all missing entries. We obtain new algorithmic results showing that, for the bounded domain case, both problems are fixed-parameter tractable with respect to all aforementioned parameters. We complement these results with a lower-bound result for the unbounded domain case that rules out fixed-parameter tractability w.r.t. some of the parameters under consideration.",
  "title": "Parameterized Algorithms for the Matrix Completion Problem"
}