{
  "sections": [{
    "text": "Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (Short Papers), pages 45–50 Vancouver, Canada, July 30 - August 4, 2017. c©2017 Association for Computational Linguistics\nhttps://doi.org/10.18653/v1/P17-2008"
  }, {
    "heading": "1 Introduction",
    "text": "Systems for automatic assessment of spontaneous spoken language proficiency (Fig. 1) are becoming increasingly important to meet the demand for English second language learning. Such systems are able to provide throughput and consistency\nwhich are unachievable with human examiners. This is a challenging task. There is a large vari-\nation in the quality of spoken English across all proficiency levels. In addition, candidates of the same skill level will have different accents, voices, mispronunciations, and sentence construction errors. All of which are heavily influenced by the candidate’s L1 language and compounded by ASR errors. It is therefore impossible in practice to observe all these variants in training. At test time, the predicted grade’s validity will decrease the more the candidate is mismatched to the data used to train the system. For deployment of these systems to high-stakes tests the performance on all candidates needs to be consistent and highly correlated with human graders. To achieve this it is important that these systems can detect outlier speakers who need to be examined by, for example, human graders.\nPreviously, separate models were used to filter out ”non-scorable” candidates (Yoon and Xie, 2014; Zechner et al., 2009; Higgins et al., 2011; Xie et al., 2012). However, such models reject candidates based on whether they can be scored at all, rather than an automatic grader’s uncertainty 1 in its predictions. It was shown by van Dalen et al. (2015) that Gaussian Process (GP) graders give\n1Uncertainty is used in the sense of the inverse of confidence to be consistent with Gal and Ghahramani (2016) and van Dalen et al. (2015).\n45\nstate-of-the-art performance for automatic assessment and yield meaningful uncertainty estimates for rejection of candidates. There are, however, computational constraints on training set sizes for GPs. In contrast, Deep Neural Networks (DNNs) are able to scale to large data sets, but lack a native measure of uncertainty. However, Gal and Ghahramani (2016) have shown that Monte-Carlo Dropout (MCD) can be used to derive an uncertainty estimate for a DNN.\nAlternatively, a Deep Density Network (DDN), which is a Mixture Density Network (Bishop, 1994) with only one mixture component, may be used to yield a mean and variance corresponding to the predicted grade and the uncertainty in the prediction. Similar to GP and DNNs with MCD, a standard DDN provides an implicit modelling of uncertainty in its prediction. This implicit model may not be optimal for the task at hand. Hence, a novel approach to explicitly model uncertainty is proposed in which the DDN is trained in a multitask fashion to model a low variance real data distribution and a high variance artificial data distribution which represents candidates with unseen characteristics."
  }, {
    "heading": "2 Prediction Uncertainty",
    "text": "The principled method for dealing with uncertainty in statistical modelling is the Bayesian approach, where a conditional posterior distribution over grades, g, given inputs, x, and training data D = {ĝ, x̂} is computed by marginalizing over all models:\np(g|x, D) = ∫ p(g|x,M)p(M|D)dM (1)\nwhere p(M|D) is a prior over a model given the data. Given the posterior, the predictive mean and the variance (uncertainty) can be computed using:\nµg(x) =\n∫ p(g|x, D)gdg\nσ2g(x) = ∫ p(g|x, D)g2dg − µ2g(x)\n(2)\n(3)"
  }, {
    "heading": "2.1 Gaussian Processes",
    "text": "Eq. 2, 3 can be analytically solved for a class of models called Gaussian Processes (GP) (Rasmussen and Williams, 2006), a powerful nonparametric model for regression. The GP induces\na conditional posterior in the form of a normal distribution over grades g given an input x and training data D:\np(g|x; D) = N (g; µg(x|D), σ2g(x|D)) (4)\nWith mean function µg(x|D) and variance function σ2g(x|D), which is a function of the similarity of an input x to the training data inputs x̂, where the similarity metric is defined by a covariance function k(., .). The nature of GP variance means that the model is uncertain in predictions for inputs far away from the training data, given appropriate choice of k(., .). Unfortunately, without sparsification approaches, the computational and memory requirements of GPs become prohibitively expensive for large data sets. Furthermore, GPs are known to scale poorly to higher dimensional features (Rasmussen and Williams, 2006)."
  }, {
    "heading": "2.2 Monte-Carlo Dropout",
    "text": "Alternatively, a grader can be constructed using Deep Neural Networks (DNNs) which have a very flexible architecture and scale well to large data sets. DNNs, however, lack a native measure of uncertainty. Uncertainty estimates for DNNs can be computed using a Monte-Carlo ensemble approximation to Eq. 2, 3:\nµ̂g(x) = 1\nN\nN∑\ni=1\nf(x;M(i))\nσ̂2g(x) = 1\nN\nN∑\ni=1\n( f(x; M(i)) )2 − µ̂2g(x)\n(5)\n(6)\nwhere there are N DNN models in the ensemble, M(i) is a DNN with a particular architecture and parameters sampled from p(M|D) using Monte Carlo Dropout (MCD) (Srivastava et al., 2014), and f(x; M(i)) are the DNN predictions. Recent work by Gal and Ghahramani (2016) showed that MCD is equivalent to approximate variational inference in GPs, and can be used to yield meaningful uncertainty estimates for DNNs. Furthermore, Gal and Ghahramani (2016) show that different choices of DNN activation functions correspond to different GP covariance functions. MCD uncertainty assumes that for inputs further from the training data, different subnets will produce increasingly differing outputs, leading to larger variances. Unfortunately, it is difficult to know beforehand which activation functions accomplish this in practice."
  }, {
    "heading": "3 Deep Density Networks",
    "text": "Instead of relying on a Monte Carlo approximation to Eq. 1, a DNN can be modified to produce a prediction of both a mean and a variance:\nµg(x) = fµ(x; M) σ2g(x) = fσ2(x; M)\n(7)\n(8)\nparametrising a normal distribution over grades conditioned on the input, similar to a GP. This architecture is a Deep Density Network (DDN), which is a Mixture Density Network (MDN) (Bishop, 1994) with only one mixture component. DDNs are trained by maximizing the likelihood of the training data. The variance of the DDN represents the natural spread of grades at a given input. This is an implicit measure of uncertainty, like GP and MCD variance, because it is learned automatically as part of the model. However, this doesn’t enforce higher variance further away from training points in DDNs. It is possible to explic-\nitly teach a DDN to predict a high or low variance for inputs which are unlike or similar to the training data, respectively (Fig. 2). This requires a novel training procedure. Two normal distributions are constructed: a low-variance real (training) data distribution pD and a high-variance artificial data distribution pN, which models data outside the real training data region. The DDN needs to model both distributions in a multi-task (MT) fashion. The loss function for training the DDN with explicitly specified uncertainty is the expectation over the training data of the KL divergence between the distribution it parametrizes and both the real and artificial data distributions:\nL = Ex̂[KL(pD||p(g|x̂; M)] + α · Ex̃[KL(pN||p(g|x̃; M)]\n(9)\nwhere α is the multi-task weight. The DDN with explicit uncertainty is trained in a two stage fashion. First, a standard DDN M0\nis trained, then a DDN M is instantiated using the parameters of M0 and trained in a multi-task fashion. The real data distribution pD is defined by M0 (Eq. 7, 8). The artificial data distribution pN is constructed by generating artificial inputs x̃ and the associated mean and variance targets µ(x̃), σ2(x̃):\npN = N (g; fµ(x̃; M0), σ2(x̃)) (10)\nThe predictions of M0 are used as the targets for µ(x̃). The target variance σ2(x̃) should depend on the similarity of x̃ to the training data. Here, this variance is modelled by the squared normalized Euclidean distance from the mean of x̂, with a diagonal covariance matrix, scaled by a hyperparameter λ. The artificial inputs x̃ need to be different to, but related to the real data x̂. Ideally, they should represent candidates with unseen characteristics, such as L1, accent and proficiency. A simple approach to generating x̃ is to use a Factor Analysis (FA) (Murphy, 2012) model trained on x̂. The generative model of FA is:\nx̃ ∼ N (Wz + µ, γΨ), z ∼ N (0, γI) (11)\nwhere W is the loading matrix, Ψ the diagonal residual noise variance, µ the mean, all derived from x̂, and γ is used to control the distance of the generated data from the real training data region. During training the artificial inputs are sampled from the FA model."
  }, {
    "heading": "4 Experimental Results",
    "text": "AUCRR = AUCvar\nAUCmax (12)\nAs previously stated, the operating scenario is to use a model’s estimate of the uncertainty in\nits prediction to reject candidates to be assessed by human graders for high-stakes tests, maximizing the increase in performance while rejecting the least number of candidates. The rejection process is illustrated using a rejection plot (Fig. 3). As the rejection fraction is increased, model predictions are replaced with human scores in some particular order, increasing overall correlation with human graders. Fig. 3 has 3 curves representing different orderings: expected random rejection, optimal rejection and model rejection. The expected random performance curve is a straight line from the base predictive performance to 1.0, representing rejection in a random order. The optimal rejection curve is constructed by rejecting predictions in order of decreasing mean square error relative to human graders. A rejection curve derived from a model should sit between the random and optimal curves. In this work, model rejection is in order of decreasing predicted variance.\nThe following metrics are used to assess and compare models: Pearson Correlation Coefficient (PCC) with human graders, the standard performance metric in assessment (Zechner et al., 2009; Higgins et al., 2011); 10% rejection PCC, which illustrates the predictive performance at a partic-\nular operating point, i.e. rejecting 10% of candidates; and Area under a model’s rejection curve (AUC) (Fig 3). However, AUC is influenced by the base PCC of a model, making it difficult to compare the rejection performance. Thus, a metric independent of predictive performance is needed. The proposed metric, AUCRR (Eq. 12), is the ratio of the areas under the actual (AUCvar) and optimal (AUCmax) rejection curves relative to the random rejection curve. Ratios of 1.0 and 0.0 correspond to perfect and random rejection, respectively.\nAll experiments were done using 33- dimensional pronunciation, fluency and acoustic features derived from audio and ASR transcriptions of responses to questions from the BULATS exam (Chambers and Ingham, 2011). The ASR system has a WER of 32% on a development set. The training and test sets have 4300 and 224 candidates, respectively. Each candidate provided a response to 21 questions, and the features used are aggregated over all 21 questions into a single feature vector. The test data was graded by expert graders at Cambridge English. These experts have inter-grader PCCs in the range 0.95-0.97. Candidates are equally distributed across CEFR grade levels (Europe, 2001).\nThe input features where whitened by subtracting the mean and dividing by the standard deviation for each dimension computed on all training speakers. The Adam optimizer (Kingma and Ba, 2015), dropout (Srivastava et al., 2014) regularization with a dropout keep probability of 0.6 and an exponentially decaying learning rate are used with decay factor of 0.86 per epoch, batch size 50. All networks have 2 hidden layers with 180 rectified linear units (ReLU) in each layer. DNN and DDN models were implemented in Tensorflow (Abadi et al., 2015). Models were initialized using the Xavier Initializer (Glorot and Bengio, 2010). A validation set of 100 candidates was selected from the training data to tune the model and hyperparameters. GPs were run using Scikit-Learn (Pedregosa et al., 2011) using a squared exponential covariance function.\nThe Gaussian Process grader, GP, is a competitive baseline (Tab. 1). GP variance clearly yields uncertainty which is useful for rejection. A DNN with ReLU activation, MCD, achieves grading performance similar to the GP. However, MCD fails to yield an informative uncertainty for rejection, with performance barely above random. If the tanh activation function, MCDtanh, is used instead, then a DNN is able to provide a meaningful measure of uncertainty using MCD, at the cost of grading performance. It is likely that ReLU activations correspond to a GP covariance function which is not suited for rejection on this data.\nThe standard DDN has comparable grading performance to the GP and DNNs. AUCRR of the DDN is on par with the GP, but the 10% rejection PCC is lower, indicating that the DDN is not as effective at rejecting the worst outlier candidates. The approach proposed in this work, a DDN trained in a multi-task fashion (DDN+MT), achieves significantly higher rejection performance, resulting in the best AUCRR and 10% rejection PCC, showing its better capability to detect outlier candidates. Note, AUC reflects similar trends to AUCRR, but not\nas clearly, which is demonstrated by Fig. 4. The model was found to be insensitive to the choice of hyper-parameters α and γ, but λ needed to be set to produce target noise variances σ2(x̃) larger than data variances σ2(x̂)."
  }, {
    "heading": "5 Conclusions and Future Work",
    "text": "A novel method for explicitly training DDNs to yield uncertainty estimates is proposed. A DDN is a density estimator which is trained to model two distributions in a multi-task fashion (1) the low variance (uncertainty) true data distribution and (2) a generated high variance artificial data distribution. The model is trained by minimizing the KL divergence between the DDN and the true data distribution (1) and between the DDN and the artificial data distribution (2). The DDN should assign its prediction of low or high variance (uncertainty) if the input is similar or dissimilar to the true data respectively. The artificial data distribution is given by a factor analysis model trained on the real data. During training the artificial data is sampled from this distribution.\nThis method outperforms GPs and Monte-Carlo Dropout in uncertainty based rejection for automatic assessment. However, the effect of the nature of artificial data on rejection performance should be further investigated and other data generation methods, such as Variational AutoEncoders (Kingma and Welling, 2014), and metrics to assess similarity between artificial and real training data should be examined. The proposed approach must also be assessed on other tasks and datasets."
  }, {
    "heading": "Acknowledgments",
    "text": "This research was funded under the ALTA Institute, University of Cambridge as well as the Engineering and Physical Sciences Research Council. Thanks to Cambridge English, University of Cambridge, for support and access to the BULATS data."
  }],
  "year": 2017,
  "references": [{
    "title": "TensorFlow: Large-scale machine learning on heterogeneous systems. Software available from tensorflow.org",
    "authors": ["sudevan", "Fernanda Viégas", "Oriol Vinyals", "Pete Warden", "Martin Wattenberg", "Martin Wicke", "Yuan Yu", "Xiaoqiang Zheng"],
    "year": 2015
  }, {
    "title": "Mixture density networks",
    "authors": ["C.M. Bishop."],
    "venue": "Technical Report NCRG 4288, Neural Computing Research Group, Department of Computer Science, Aston University .",
    "year": 1994
  }, {
    "title": "The BULATS online speaking test",
    "authors": ["Lucy Chambers", "Kate Ingham."],
    "venue": "Research Notes 43:21–25.",
    "year": 2011
  }, {
    "title": "Common European framework of reference for languages: Learning, teaching, assessment",
    "authors": ["Council of Europe."],
    "venue": "Cambridge, U.K: Press Syndicate of the University of Cambridge.",
    "year": 2001
  }, {
    "title": "Dropout as a Bayesian Approximation: Representing Model Uncertainty in Deep Learning",
    "authors": ["Yarin Gal", "Zoubin Ghahramani."],
    "venue": "Proceedings of the 33rd International Conference on Machine Learning (ICML-16).",
    "year": 2016
  }, {
    "title": "Understanding the difficulty of training deep feedforward neural networks",
    "authors": ["Xavier Glorot", "Yoshua Bengio."],
    "venue": "Aistats. volume 9, pages 249–256.",
    "year": 2010
  }, {
    "title": "A three-stage approach to the automated scoring of spontaneous spoken responses",
    "authors": ["Derrick Higgins", "Xiaoming Xi", "Klaus Zechner", "David Williamson."],
    "venue": "Computer Speech and Language 25(2):282–306.",
    "year": 2011
  }, {
    "title": "Adam: A Method for Stochastic Optimization",
    "authors": ["Diederik P. Kingma", "Jimmy Ba."],
    "venue": "Proceedings of the 3rd International Conference on Learning Representations (ICLR).",
    "year": 2015
  }, {
    "title": "Autoencoding variational bayes",
    "authors": ["Diederik P. Kingma", "Max Welling."],
    "venue": "Proceedings of the 2nd International Conference on Learning Representations (ICLR).",
    "year": 2014
  }, {
    "title": "Machine Learning",
    "authors": ["Kevin P. Murphy."],
    "venue": "The MIT Press.",
    "year": 2012
  }, {
    "title": "Scikit-learn: Machine learning",
    "authors": ["F. Pedregosa", "G. Varoquaux", "A. Gramfort", "V. Michel", "B. Thirion", "O. Grisel", "M. Blondel", "P. Prettenhofer", "R. Weiss", "V. Dubourg", "J. Vanderplas", "A. Passos", "D. Cournapeau", "M. Brucher", "M. Perrot", "E. Duchesnay"],
    "year": 2011
  }, {
    "title": "Gaussian Processes for Machine Learning",
    "authors": ["Carl Edward Rasmussen", "Christopher K.I. Williams."],
    "venue": "MIT Press.",
    "year": 2006
  }, {
    "title": "Dropout: a simple way to prevent neural networks from overfitting",
    "authors": ["Nitish Srivastava", "Geoffrey E Hinton", "Alex Krizhevsky", "Ilya Sutskever", "Ruslan Salakhutdinov."],
    "venue": "Journal of Machine Learning Research 15(1):1929–1958.",
    "year": 2014
  }, {
    "title": "Automatically Grading Learners’ English Using a Gaussian Process",
    "authors": ["Rogier C. van Dalen", "Kate M. Knill", "Mark J.F. Gales."],
    "venue": "Proceedings of the ISCA Workshop on Speech and Language Technology for Education (SLaTE).",
    "year": 2015
  }, {
    "title": "Exploring Content Features for Automated Speech Scoring",
    "authors": ["Shasha Xie", "Keelan Evanini", "Klaus Zechner."],
    "venue": "Proceedings of the 2012 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Tech-",
    "year": 2012
  }, {
    "title": "SimilarityBased Non-Scorable Response Detection for Automated Speech Scoring",
    "authors": ["Su-Youn Yoon", "Shasha Xie."],
    "venue": "Proceedings of the Ninth Workshop on Innovative Use of NLP for Building Educational Applications.",
    "year": 2014
  }, {
    "title": "Automatic scoring of non-native spontaneous speech in tests of spoken english",
    "authors": ["Klaus Zechner", "Derrick Higgins", "Xiaoming Xi", "David M. Williamson."],
    "venue": "Speech Communication 51(10):883–895. Spoken Language Technology for Education Spoken",
    "year": 2009
  }],
  "id": "SP:c5fb4ae972fdf4731bfde4988d7231eaf32846c0",
  "authors": [{
    "name": "Andrey Malinin",
    "affiliations": []
  }, {
    "name": "Anton Ragni",
    "affiliations": []
  }, {
    "name": "Kate M. Knill",
    "affiliations": []
  }, {
    "name": "Mark J. F. Gales",
    "affiliations": []
  }],
  "abstractText": "There is a growing demand for automatic assessment of spoken English proficiency. These systems need to handle large variations in input data owing to the wide range of candidate skill levels and L1s, and errors from ASR. Some candidates will be a poor match to the training data set, undermining the validity of the predicted grade. For high stakes tests it is essential for such systems not only to grade well, but also to provide a measure of their uncertainty in their predictions, enabling rejection to human graders. Previous work examined Gaussian Process (GP) graders which, though successful, do not scale well with large data sets. Deep Neural Networks (DNN) may also be used to provide uncertainty using Monte-Carlo Dropout (MCD). This paper proposes a novel method to yield uncertainty and compares it to GPs and DNNs with MCD. The proposed approach explicitly teaches a DNN to have low uncertainty on training data and high uncertainty on generated artificial data. On experiments conducted on data from the Business Language Testing Service (BULATS), the proposed approach is found to outperform GPs and DNNs with MCD in uncertainty-based rejection whilst achieving comparable grading performance.",
  "title": "Incorporating Uncertainty into Deep Learning for Spoken Language Assessment"
}