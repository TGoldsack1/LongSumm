{
  "sections": [{
    "heading": "1. Introduction",
    "text": "This paper is about weighted correlation clustering (Bansal et al., 2004), a combinatorial optimization problem whose feasible solutions are all clusterings of a graph, and whose objective function is a sum of weights w0, w1 : E → R+0 defined on the edgesE of the graph. The weightw0e is added to the sum if the nodes {u, v} = e ∈ E are in the same cluster, and the weight w1e is added to the sum if these nodes are in distinct clusters. The problem consists in finding a clustering of minimum weight.\nWeighted correlation clustering has found applications in the fields of network analysis (Cesa-Bianchi et al., 2012) and, more recently, computer vision (Kappes et al., 2011; Keuper et al., 2015; Insafutdinov et al., 2016; Beier et al., 2017; Tang et al., 2017), partly due to its key property that the number of clusters is not fixed, constrained or penalized in the problem statement but is instead defined by the (any)\n1Max Planck Institute for Informatics, Saarbrücken, Germany 2Saarland University, Saarbrücken, Germany 3Bosch Center for AI, Renningen, Germany 4University of Tübingen, Germany. Correspondence to: Jan-Hendrik Lange <jlange@mpi-inf.mpg.de>.\nProceedings of the 35 th International Conference on Machine Learning, Stockholm, Sweden, PMLR 80, 2018. Copyright 2018 by the author(s).\nsolution. Weighted correlation clustering in general graphs is hard to solve exactly and hard to approximate (Demaine et al., 2006). Remarkable progress has been made toward algorithms that find feasible solutions by approximations or heuristics (cf. Section 2). Yet, the computation of lower bounds remains challenging for large instances (Swoboda & Andres, 2017).\nWe make the following contributions: Firstly, in order to reduce instances in size, we establish partial optimality conditions on the graph and weights that can be checked combinatorially in polynomial time and determine the values of some variables in an optimal solution. By applying these conditions recursively, we reduce an instance in size without restricting the quality of solutions. For series-parallel graphs, our algorithm solves weighted correlation clustering exactly and in linear time, as we show. For general graphs, we demonstrate its effectiveness empirically.\nSecondly, in order to compute lower bounds to the optimal objective value efficiently, we define an algorithm that outputs a heuristic solution to a packing problem that is the dual of a reformulation of weighted correlation clustering. Empirically, this algorithm is shown to exhibit a run-time/tightness trade-off that is different from both the cutting plane algorithm of Kappes et al. (2015) and the message passing algorithm of Swoboda & Andres (2017), both of which solve a canonical linear program relaxation of weighted correlation clustering.\nThirdly, toward the goal of obtaining primal feasible solutions, we define a transformation of the weights w.r.t. our heuristic solution to the dual problem. This transformation is again a heuristic and is motivated by complementary slackness. Empirically, local search algorithms are shown to find feasible solutions of lower original weight when applied to instances with transformed weights.\nIn the supplementary material, we provide additional results that were omitted from the main paper for the sake of space. Implementations of our algorithms are provided on GitHub."
  }, {
    "heading": "2. Related Work",
    "text": "Weighted correlation clustering has a long history in the field of combinatorial optimization. Grötschel & Wakabayashi (1989) state an equivalent problem for complete graphs and\ndevise a branch-and-cut algorithm for solving this problem exactly. The polyhedral geometry of its feasible set is studied by Grötschel & Wakabayashi (1990); Deza et al. (1990; 1992), in the case of general graphs by Chopra & Rao (1993); Chopra (1994) and, for a more general problem, by Horňáková et al. (2017). For uniform absolute edge costs, Bansal et al. (2004) coined the name correlation clustering, established NP-hardness and the first approximation results. The connection between correlation clustering in general weighted graphs and weighted multicuts was made by Demaine et al. (2006) who thus established APX-hardness and obtained anO(log|V |) approximation algorithm for the problem. Further hardness results and improved approximation algorithms for particular classes of graphs are due to Charikar et al. (2005); Chawla et al. (2006; 2015); Ailon et al. (2012); Klein et al. (2015).\nApproximation algorithms are typically based on rounding the solution of a linear or semi-definite program relaxation. Due to its importance, tailored algorithms for solving the linear program relaxation more efficiently than standard methods have been proposed by Yarkony et al. (2012; 2015); Swoboda & Andres (2017). Complementary to these lower bounds, a variety of fast primal heuristics have been developed to tackle large instances (Beier et al., 2014; Pan et al., 2015; Levinkov et al., 2017). Although it has been observed that, in practice, heuristic solutions are often good, it remains difficult for large instances to determine non-trivial bounds on their optimality gap.\nPartial optimality concepts have been developed and exploited successfully for node labeling problems that arise from pseudo-Boolean optimization and from maximum a-posteriori inference in Markov Random Fields, cf. (Shekhovtsov, 2014; Swoboda et al., 2016). Transferring this knowledge to weighted correlation clustering is nontrivial, due to the different nature of the problem. Two partial optimality conditions for weighted correlation clustering are established by Alush & Goldberger (2012) and are here generalized."
  }, {
    "heading": "3. Problem Formulations",
    "text": ""
  }, {
    "heading": "3.1. Weighted Correlation Clustering",
    "text": "Weighted correlation clustering is a combinatorial optimization problem whose feasible solutions are all clusterings of a graph.\nLet G = (V,E) be a simple graph. We call a partition Π of V a clustering if every S ∈ Π induces a connected subgraph (cluster) of G. For any clustering Π of G, we denote by E0Π the set of those edges whose nodes are in the same cluster, and by E1Π the (complementary) set of those edges whose\nnodes are in distinct clusters:\nE0Π = {uv ∈ E | ∃S ∈ Π : u ∈ S and v ∈ S}, (1) E1Π = E \\ E0Π. (2)\nThe set of edges E1Π is known as the multicut of G that corresponds to the clustering Π.\nDefinition 1. For any graph G = (V,E) and any w0, w1 : E → R+0 , the instance of weighted correlation clustering w.r.t. G, w0 and w1 is the optimization problem\nmin Π ∑ e∈E0Π w0e + ∑ e∈E1Π w1e . (3)"
  }, {
    "heading": "3.2. Minimum Cost Multicut",
    "text": "Weighted correlation clustering is commonly stated in the form of a binary program whose feasible solutions are the incidence vectors of the multicuts of the graph. The incidence vector xΠ ∈ {0, 1}E corresponding to the multicut induced by Π is defined as\nxΠe = { 1 if e ∈ E1Π 0 else.\n(4)\nDefinition 2. For any graph G = (V,E) and any c : E → R, the instance of the minimum cost multicut problem w.r.t. G and c is the binary program\nmin Π ∑ e∈E ce x Π e . (5)\nThe minimizers of an instance of weighted correlation clustering (Def. 1) coincide with the minimizers of the instance of minimum cost multicut (Def. 2) with c = w1−w0, since\nmin Π ∑ e∈E0Π w0e + ∑ e∈E1Π w1e (6)\n= min Π ∑ e∈E ( w0e (1− xΠe ) + w1e xΠe ) (7)\n= ∑ e∈E\nw0e︸ ︷︷ ︸ const. + min Π\n∑ e∈E (w1e − w0e)︸ ︷︷ ︸ ce xΠe . (8)"
  }, {
    "heading": "3.3. Linear Program Relaxation",
    "text": "By taking the convex hull of multicut incidence vectors\nMC(G) := conv{xΠ | Π clustering of G}, (9)\nthe minimum cost multicut problem (Def. 2) can be written as the integer linear programming problem\nmin x∈MC(G) ∑ e∈E ce xe. (PMC)\nThe set MC(G) is called multicut polytope of G (Chopra & Rao, 1993). As the minimum cost multicut problem is NP-hard, a full description of the multicut polytope in terms of its facets is impractical. For practical purposes a linear programming (LP) relaxation of PMC is derived as follows.\nDenote by C(G) the set of all simple cycles of G. For any cycle C ∈ C(G), we write EC for the edge set of C. It is straight-forward to check the fact that any multicut incidence vector xΠ satisfies the system of linear inequalities\n∀C ∈ C(G) ∀f ∈ EC : xf ≤ ∑\ne∈EC\\{f}\nxe , (10)\nthe so-called cycle inequalities (Chopra & Rao, 1993). Therefore, the standard linear programming relaxation is given by the program\nmin x∈CYC(G) ∑ e∈E ce xe (PCYC)\nwhose feasible set\nCYC(G) := { x ∈ [0, 1]E ∣∣x satisfies (10)} (11) is also known as the cycle relaxation of MC(G). The problem PCYC is practical, because the cycle inequalities in (10) can be separated in polynomial time. The lower bounds thus obtained can serve to solve (small) instances of the minimum cost multicut problem by branch-and-cut because the cycle relaxation has no integer vertices except the incidence vectors of multicuts, according to Lemma 1.\nLemma 1 (Chopra & Rao (1993)). For any graph G = (V,E), it holds that MC(G) = CYC(G) ∩ ZE .\nA reference algorithm that we use for the experiments in Section 7 further exploits the fact that a cycle inequality in (10) defines a facet of MC(G) iff the associated cycle is chordless."
  }, {
    "heading": "3.4. Cycle Covering Formulation",
    "text": "For the presentation of this paper, we employ an alternative (integer) linear programming formulation in terms of covering cycles, which was similarly considered, e.g., by Demaine et al. (2006) for the combinatorial problem and by Charikar et al. (2005) in connection with the LP relaxation for complete graphs. We rewrite the feasible set of the general LP relaxation relative to the cost vector c. Therefore, let G and c be fixed.\nWe call an edge e ∈ E repulsive if ce < 0 and we call it attractive if ce > 0. Note that we may w.l.o.g. remove all edges e ∈ E with ce = 0, since the choice of xe is irrelevant to the objective. We write E = E+ ∪ E− where E+, E− collect all attractive and repulsive edges, respectively.\nWe call a cycle of G conflicted w.r.t. (G, c) if it contains precisely one repulsive edge. We denote by C−(G, c) ⊆ C(G) the set of all such cycles.\nWe consider the relaxation of CYC(G) that is constrained only by conflicted cycles. More specifically, we consider the system\n∀C ∈ C−(G, c), f ∈ EC ∩ E− : xf ≤ ∑\ne∈EC\\{f}\nxe\n(12)\nof only those linear inequalities of (10) for which the edge on the left-hand side is repulsive and all other edges are attractive. Defining\nCYC−(G, c) := { x ∈ [0, 1]E ∣∣ x satisfies (12)} (13) and replacing CYC(G) by CYC−(G, c) in PCYC has no effect on the solutions, due to the following lemma, a weaker form of which was also given by Yarkony et al. (2015). Lemma 2. For any c : E → R it holds that\nmin x∈CYC(G) c>x = min x∈CYC−(G,c) c>x (14)\nand\nmin x∈MC(G) c>x = min x∈CYC−(G,c)∩ZE c>x. (15)\nProof. Let x∗ be an optimal solution to the right-hand side of (14). We show that x∗ satisfies all cycle inequalities (10) by contradiction. To this end, suppose there exists a cycle C ∈ C(G) and f ∈ EC such that\nx∗f > ∑\ne∈EC\\{f}\nx∗e.\nIf any edge g ∈ EC \\ {f} is repulsive, then increasing x∗g would lower the objective. Since x\n∗ is optimal, there must be a conflicted cycle C ′ with g ∈ EC′ such that x∗g = ∑ e∈EC′\\{g}\nx∗e . Note that this means f /∈ EC′ . We write C4C ′ for the cycle obtained from the symmetric difference of EC and EC′ . Apparently, the cycle C4C ′ has one repulsive edge less and f ∈ EC4C′ . Therefore, by repeating the argument, we may w.l.o.g. assume that all edges in EC \\ {f} are attractive. Now assume that f is attractive as well, then decreasing x∗f would lower the objective. Therefore, since x\n∗ is optimal, there is a conflicted cycle C ′ with f ∈ EC′ and g ∈ EC′ ∩ E− such that\nx∗g = x ∗ f + ∑ e∈EC′\\{f,g} x∗e\n> ∑\ne∈EC\\{f}\nx∗e + ∑\ne∈EC′\\{f,g}\nx∗e\n≥ ∑\ne∈EC4C′\\{g}\nx∗e.\nNote that C4C ′ is a conflicted cycle. Thus, we conclude that x∗ violates an inequality of (12) and hence cannot be feasible. This concludes the proof of (14), the argument for (15) is analogous.\nWith the help of Lemma 2, we formulate PMC as a set covering problem: Definition 3. For any graph G = (V,E) and any c ∈ RE , we call\nmin x̂∈SC(G,c) ∑ e∈E |ce| x̂e (PSC)\nwith SC(G, c) the convex hull of all x̂ ∈ ZE that satisfy the system\n∀C ∈ C−(G, c) : ∑ e∈EC x̂e ≥ 1 (16)\n∀e ∈ E : x̂e ≥ 0 (17)\nthe set covering problem w.r.t. conflicted cycles, and we call SC(G, c) the set covering polyhedron w.r.t. conflicted cycles. Lemma 3. For any graph G = (V,E) and any c ∈ RE , we have\nmin x∈CYC−(G,c)∩ZE ∑ e∈E ce xe\n= Ltriv + min x̂∈SC(G,c) ∑ e∈E |ce| x̂e (18)\nwith\nLtriv = ∑ e∈E− ce (19)\nthe sum of negative edge costs (a trivial lower bound to the optimal value of PMC).\nProof. We define x̂ via x̂e := xe for any attractive edge e ∈ E+ and x̂e := 1− xe for any repulsive edge e ∈ E−. Since any conflicted cycle C ∈ C−(G, c) has precisely one repulsive edge, all conflicted cycle inequalities (12) become covering inequalities."
  }, {
    "heading": "4. Partial Optimality",
    "text": "In this section, we study partial optimality for PMC. More precisely, we establish conditions on an edge e ∈ E which guarantee that xe assumes one particular value, either 0 or 1, in at least one optimal solution (weak persistency). Fixations to 0 are of particular interest as they can be implemented as edge contractions (with subsequent merging of parallel edges), which effectively reduce the size of a given instance of the problem. As a corollary, we obtain an algorithm that solves weighted correlation clustering problems on seriesparallel graphs in linear time."
  }, {
    "heading": "4.1. Basic Conditions",
    "text": "A direct consequence from Lemma 3 is that we may disregard all edges that are not contained in any conflicted cycle. There are (at least) two ways this can happen: 1. An edge e ∈ E is not contained in any cycle at all, that is, e is a bridge. 2. The endpoints of a repulsive edge e = {u, v} ∈ E− belong to different components of G+ = (V,E+). In both cases, for any optimal solution x∗ of PMC, it holds that x∗e = 0 if e is attractive, and x ∗ e = 1 if e is repulsive. Thus, we can restrict the instance of the problem to the maximal components ofG that are connected in G+ and biconnected in G. This was also observed by Alush & Goldberger (2012).\nBelow, we establish more general partial optimality conditions. To this end, we need the following notation. A cut of G is a bipartition B = (S1, S2) of the nodes V , i.e. V = S1 ∪̇S2. The edge set of the cut B is denoted by EB = {uv ∈ E | u ∈ S1, v ∈ S2}."
  }, {
    "heading": "4.2. Dominant Edges",
    "text": "Definition 4. Let G = (V,E) be any graph and let c ∈ RE . An edge f ∈ E is called dominant attractive iff cf > 0 and there exists a cut B with f ∈ EB such that\ncf ≥ ∑\ne∈EB\\{f}\n|ce| . (20)\nAn edge f ∈ E− is called dominant repulsive iff cf < 0 and there exists a cut B with f ∈ EB such that\n|cf | ≥ ∑\ne∈EB∩E+ ce. (21)\nAn edge is called dominant iff it is dominant attractive or dominant repulsive.\nLemma 4. Let G = (V,E) be any graph and let c ∈ RE .\n(i) If f ∈ E is dominant attractive, then x∗f = 0 in at least one optimal solution x∗ of PMC.\n(ii) If f ∈ E is dominant repulsive, then x∗f = 1 in at least one optimal solution x∗ of PMC.\nProof. (i) We use the set covering formulation of PMC. Suppose f ∈ E+ is dominant and x̂∗f = 1 in an optimal solution x̂∗ of PSC. Every conflicted cycle that contains f also contains some edge e ∈ EB , since B is a cut. Therefore, the vector x̂ ∈ {0, 1}E defined by\nx̂e =  0 if e = f 1 if e ∈ EB , e 6= f x̂∗e else\nis a feasible solution to PSC. It has the same objective value as x̂∗, since f is dominant and x̂∗ is optimal.\n(ii) Suppose f ∈ E− is dominant and x̂∗f = 1 in an optimal solution x̂∗ of PSC. Every conflicted cycle that contains f also contains some edge e ∈ EB ∩ E+, since B is a cut and every conflicted cycle contains only one repulsive edge. Then the vector x̂ ∈ {0, 1}E defined by x̂f = 0, x̂e = 1 for all e ∈ EB ∩ E+ and x̂e = x̂∗e elsewhere is a feasible solution to PSC. It has the same objective value as x̂∗, since f is dominant and x̂∗ is optimal.\nLemma 4 generalizes the basic conditions discussed in Section 4.1, since each edge f ∈ E that is not contained in any conflicted cycle is also dominant. Dominance of edges can be decided in polynomial time, by computing minimum st-cuts in G for a suitable choice of capacities. In practice, the required computational effort may be mitigated by constructing a cut tree of G (Gomory & Hu, 1961). The practically most relevant cuts can even be checked in linear time, which we discuss in the following section."
  }, {
    "heading": "4.3. Two-Edge Cuts & Single-Node Cuts",
    "text": "In practice, it is expected that dominant edges are more likely to be found in cuts that are relatively sparse. We discuss two special cases of sparse cuts that are of particular interest, due to the following reasons. First, they can be checked in linear time, which gives rise to a fast preprocessing algorithm. Second, we show that our techniques solve PMC to optimality if G is series-parallel.\nTwo-edge cuts. Suppose B is a two-edge cut of G, i.e. EB = {e, f} for two edges e, f ∈ E. Apparently, according to (20) and (21), at least one of them must be dominant. Further, it is guaranteed that we can simplify the instance by edge deletions or contractions. To see this, distinguish the following cases. If both e and f are repulsive, then both of them are dominant and we can delete them, as they are not contained in any conflicted cycle. If f is dominant attractive, we can contract f . Finally, if f is dominant repulsive and e is attractive, then we can switch the signs of their coefficients and redefine xf := 1 − xf as well as xe := 1 − xe. Since |EB | = 2, this operation does not change the set of conflicted cycles of G and thus is valid (while only adding a constant to the objective). Afterwards, the edge f is dominant attractive and we can contract f . The two-edge cuts of G can be found in linear time, by computing the 3-edge-connected components of G, cf. (Mehlhorn et al., 2017).\nSingle-node cuts. For any v ∈ V , let Bv = ({v}, V \\ {v}) denote the cut that is induced by v. Whether EBv contains a dominant edge is easily decided by considering all edges incident to v. Moreover, if deg v = 2, then Bv is also a two-edge cut and we can apply the operation described in\nAlgorithm 1 Single-Node Cut Preprocessing input G = (V,E), c : E → R\n1: Initialize objective value offset ∆ = 0. 2: Initialize a queue Q = V . 3: while Q 6= ∅ do 4: Extract a vertex v ∈ Q. 5: if deg v = 1 then 6: Get neighbor u ∈ V . 7: if cuv ≥ 0 then 8: Set xuv = 0 and contract uv ∈ E. 9: else\n10: Set xuv = 1, ∆ = ∆ + cuv and delete uv ∈ E. 11: end if 12: else if deg v = 2 then 13: Get neighbors u,w ∈ V with |cuv| ≥ |cwv|. 14: if uv ∈ E+ then 15: Set xuv = 0 and contract uv ∈ E. 16: else if uv ∈ E− and wv ∈ E− then 17: Adjust offset ∆ = ∆ + cuv + cwv . 18: Set xuv = xwv = 1 and delete uv,wv ∈ E. 19: else if uv ∈ E− and wv ∈ E+ then 20: Adjust offset ∆ = ∆ + cuv + cwv . 21: Redefine xuv = 1− xuv , xwv = 1− xwv and cuv = −cuv , cwv = −cwv . 22: Set xuv = 0 and contract uv ∈ E. 23: end if 24: else if ∃f ∈ Bv dominant attractive then 25: Set xf = 0 and contract f ∈ E. 26: end if 27: Add to Q all vertices u /∈ Q whose neighborhood was changed. 28: end while 29: return (G, c), x,∆\nthe last paragraph. Updating the graph and applying these techniques recursively as specified in Algorithm 1 takes linear time. This has the following theoretical consequence.\nCorollary 1. If G has treewidth at most 2, then Algorithm 1 can be implemented to solve PMC exactly in O(|V |) time.\nProof. Place the vertices of G into buckets of ascending degree and always pick a vertex of minimal degree. Every graph of treewidth 2 has a vertex v with deg v ≤ 2. Since Algorithm 1 only contracts or deletes edges, fixing the variables according to Lemma 4, the updated graph still has treewidth at most 2. The number of nodes decreases by 1 in every iteration, hence the algorithm terminates in time O(|E|) = O(|V |) and outputs an optimal solution."
  }, {
    "heading": "5. Dual Lower Bounds",
    "text": "In this section, we define an algorithm for computing lower bounds for PMC. This algorithm exploits the structure of\nAlgorithm 2 Iterative Cycle Packing (ICP) input G = (V,E), c : E → R\n1: Initialize we = |ce| for all e ∈ E and y = 0, L = Ltriv. 2: for ` = 3 . . . |E| do 3: while ∃C ∈ C−(G, c) : |EC | ≤ ` do 4: Pick C ∈ C−(G, c) such that |EC | ≤ `. 5: Compute yC = mine∈EC we.\n6: Redefine we = { we − yC if e ∈ EC we else. 7: Increase lower bound L = L+ yC . 8: Remove all edges e ∈ E with we = 0 from G. 9: end while\n10: if C−(G, c) = ∅ then 11: return y, L 12: end if 13: end for\nthe reformulation PSC. It computes a heuristic solution to the dual of its LP relaxation.\nThe LP relaxation (up to the constant Ltriv) of problem PSC is given by\nmin ∑ e∈E |ce|x̂e (22)\nsubject to ∑ e∈EC x̂e ≥ 1 ∀C ∈ C−(G, c) (23)\nx̂e ≥ 0 ∀e ∈ E .\nThe corresponding dual program reads\nmax ∑\nC∈C−(G,c)\nyC (24)\nsubject to ∑\nC: e∈EC\nyC ≤ |ce| ∀e ∈ E (25)\nyC ≥ 0 ∀C ∈ C−(G, c) .\nA heuristic solution of (24), and thus a lower bound for (22), is found by Algorithm 2 that we call Iterative Cycle Packing (ICP). It works as follows: Firstly, it chooses a conflicted cycle C and increases yC as much as possible. Secondly, it decreases the weights we (initially |ce|) of all edges e ∈ EC by yC and removes all edges of zero weight. These steps are repeated until there are no conflicted cycles left.\nImplementation details. The absolute running time of ICP as well as the quality of the output lower bounds depends on the choice of cycles C. We pursue the following strategy that we found to perform well empirically in both aspects: In each iteration of the main loop, we choose a repulsive edge e = uv ∈ E− such that u and v are in the same connected component of G+ = (V,E+). Then, we find a conflicted cycle containing e by searching for a shortest path\n(in terms of hop distance) from u to v in G+. We apply this search for conflicted cycles in rounds of increasing cycle length, using breadth-first search with an early termination criterion based on the hop distance. We also maintain and periodically update a component labeling of G+ in order to to reduce the number of redundant shortest path searches."
  }, {
    "heading": "6. Re-weighting for Primal Algorithms",
    "text": "In this section, we exploit the dual solution in primal algorithms. The motivation is due to complementary slackness, which is made explicit in the following lemma.\nLemma 5. Assume the primal LP (22) is tight, i.e., its optimal solution x̂∗ also solves PSC, and the solution output by ICP solves the dual (24) optimally. Then, for every e ∈ E with positive residual weight we > 0, it holds that x̂∗e = 0.\nProof. If we > 0, the constraint (25) at e ∈ E is inactive at the optimal dual solution. Thus, x̂∗e = 0 in the optimal primal solution, by complementary slackness.\nOf course, the assumption of Lemma 5 is too strong for practical purposes. However, the intuition is that if the LP relaxation is fairly tight and the obtained dual solution is close to optimal, it can still provide useful information about the primal problem. More specifically, the weights we output by ICP can be interpreted as an indication of how likely the primal variable x̂e is zero in an optimal solution. In order to make use of this information, we propose to shift the weights of the primal problem to a convex combination λ|ce|+ (1− λ)we of the original and residual weights, for a suitable choice of λ ∈ (0, 1). Experiments in Section 7 show that this shift can guide primal heuristics toward better feasible solutions to the original problem."
  }, {
    "heading": "7. Experiments",
    "text": "In this section, we study partial optimality, dual lower bounds and re-weightings empirically, for all instances of\nthe weighted correlation clustering problem from Kappes et al. (2015) and Leskovec et al. (2010).\nInstances. From Kappes et al. (2015), we consider all three collections of instances: Image Segmentation contains instances w.r.t. planar superpixel adjacency graphs of photographs. Knott-3D contains instances w.r.t. non-planar supervoxel adjacency graphs of volume images taken by a serial sectioning electron microscope. Modularity Clustering contains instances w.r.t. complete graphs. In all three collections, the edge costs ce are fractional and non-uniform. For all these instances, except one in the collection Modularity Clustering, optimal solutions are accessible and are computed here as a reference. From Leskovec et al. (2010), we consider directed graphs of the social networks Epinions and Slashdot, each with more than half a million edges labeled either +1 or −1. Instances of the minimum cost multicut problem are defined here by removing the orientation of edges, by deleting all self-loops, and by replacing parallel edges by a single edge with the sum of their costs1."
  }, {
    "heading": "7.1. Partial Optimality",
    "text": "In order to study the partial optimality conditions of Section 4 empirically, we process the above instances as follows: First, we remove all edges of cost 0, all bridges, as well as all repulsive edges whose nodes belong to distinct connected components of G+. Second, we check for every v ∈ V whether the cut Bv = ({v}, V \\ {v}) induces dominant edges. If we find dominant attractive edges or vertices of degree ≤ 2, we perform contractions and deletions according to Alg. 1. Both steps are repeated until no further edges can be removed or contracted.\nAfter the main reduction step, which takes linear time and is thus very fast, we further check all remaining edges uv ∈ E for dominance in any (general) uv-cut. To this end, we construct a cut tree of G with the help of Gusfield’s algorithm (Gusfield, 1990), which takes |V | − 1 max-flow computations. Despite the increased computational effort, we only found a small number of additional dominant attractive edges and thus could only perform few further contractions. However, we found a significant number of additional dom-\n1This results in 2703 edges of cost 0 for Epinions, and 1949 such edges for Slashdot.\ninant repulsive edges.\nThe effect of our method in the total number of nodes and edges is shown in Table 1. We also report the number of remaining edges that are not dominant repulsive. It can be seen from this table that the numbers are effectively reduced. This is explained, firstly, by the sparsity of the graphs and, secondly, by the non-uniformity of the costs. From the comparison to the number of remaining non-persistent variables when only the criteria of Alush & Goldberger (2012) are applied, it can be seen that our more general criteria reveal considerably more persistency.\nIt may be expected that optimization methods benefit in terms of runtime from the reduced size of the instances. On the instances of Kappes et al. (2015), we found the effect to be insignificant due to their small original size. On Epinions and Slashdot, however, the runtime of the local search algorithm GAEC+KLj (cf. Section 7.3) decreased by more than 70%. For completeness, we provide the numbers in the supplements."
  }, {
    "heading": "7.2. Dual Lower Bounds",
    "text": "In order to put into perspective the dual lower bounds output by Iterative Cycle Packing (ICP) as described in Section 5, we compare this algorithm, firstly, to the cutting plane algorithm for PCYC of Kappes et al. (2015), with Gurobi for solving the LPs (denoted here by LP) and, secondly, to the message passing algorithm of Swoboda & Andres (2017), applied to PCYC, with code and parameter settings kindly provided by the authors (denoted here by MPC).\nResults are shown in Figure 1 and Table 2. It can be seen from the figure and the table that, for the large and hard instances Epinions and Slashdot, ICP converges at under 102 seconds, outputting lower bounds that are matched and exceeded by MPC at around 103 seconds. It can be seen from Table 2 that the situation is similar for the smaller instances: The lower bounds output by ICP are a bit worse than those output by LP or MPC (here compared to the best optimal solution known) but are obtained faster (by as much as three orders of magnitude for Knott-3D-450).\nIt is known from Kappes et al. (2015) that their instances can be solved faster than their LP relaxations by means of branch-and-cut, separating only integer infeasible points\n·105\nEpinions\n·105\nSlashdot\nby cycle inequalities using BFS (instead of Dijkstra’s algorithm), and resorting to the strong (undisclosed) cuts of Gurobi for cutting off fractional solutions. We restrict our comparison here to algorithms that seek to solve the LP relaxation PCYC. This is justified by the fact that size ultimately renders integer linear programming intractable. We conclude that ICP is capable of computing non-trivial lower bounds fast."
  }, {
    "heading": "7.3. Re-weighting",
    "text": "In order to study the re-weighting described in Section 6, we measure its effect on heuristic algorithms for finding feasible solutions. To this end, we employ the implementations of Levinkov et al. (2017) of Greedy Additive Edge Contraction (GAEC), an algorithm that starts from singleton clusters and greedily contracts attractive edges with maximum nonnegative cost, and of KLj, the well-known Kernighan-Lin heuristic for graph partitioning that recursively improves an initial clustering by splitting, merging or exchanging nodes between neighboring clusters.\nA comparison between the feasible solutions found by applying the heuristics GAEC and GAEC+KLj to original instances, on the one hand, and to instances re-weighted by ICP with λ = 12 , on the other hand, can be found in Table\n3. Note that we only re-weight the input to GAEC and let KLj run with original weights, starting from the solution returned by GAEC, as we found this approach to be advantageous. It can be seen from Table 3 that our re-weighting consistently improves the gap. On average, it is slightly less effective than the reparameterization with the more accurate dual solutions obtained from MPC, as proposed by Swoboda & Andres (2017). A more detailed comparison is provided in the supplements."
  }, {
    "heading": "8. Conclusion",
    "text": "We have established partial optimality conditions, a heuristic lower bound and a heuristic re-weighting for instances of the weighted correlation clustering problem. We have shown advantages of each of these constructions empirically. Checking a subset of our partial optimality conditions recursively gives a fast combinatorial algorithm that efficiently reduces the size of problem instances. Conceptually, it solves the problem for series-parallel graphs to optimality, in linear time. Our dual heuristic algorithm provides nontrivial lower bounds and valuable dual information fast. For future work, it is relevant to examine if more sophisticated dual solvers such as MPC benefit from a “warm-start” that transforms and exploits the heuristic dual solution."
  }],
  "year": 2018,
  "references": [{
    "title": "Improved approximation algorithms for bipartite correlation clustering",
    "authors": ["N. Ailon", "N. Avigdor-Elgrabli", "E. Liberty", "A. van Zuylen"],
    "venue": "SIAM Journal on Computing,",
    "year": 2012
  }, {
    "title": "Ensemble segmentation using efficient integer linear programming",
    "authors": ["A. Alush", "J. Goldberger"],
    "year": 1966
  }, {
    "title": "Correlation clustering",
    "authors": ["N. Bansal", "A. Blum", "S. Chawla"],
    "venue": "Machine Learning,",
    "year": 2004
  }, {
    "title": "Cut, glue & cut: A fast, approximate solver for multicut partitioning",
    "authors": ["T. Beier", "T. Kroeger", "J.H. Kappes", "U. Köthe", "F.A. Hamprecht"],
    "venue": "In CVPR,",
    "year": 2014
  }, {
    "title": "A correlation clustering approach to link classification in signed networks",
    "authors": ["N. Cesa-Bianchi", "C. Gentile", "F. Vitale", "G. Zappella"],
    "venue": "In COLT,",
    "year": 2012
  }, {
    "title": "Clustering with qualitative information",
    "authors": ["M. Charikar", "V. Guruswami", "A. Wirth"],
    "venue": "Journal of Computer and System Sciences,",
    "year": 2005
  }, {
    "title": "On the hardness of approximating multicut and sparsest-cut",
    "authors": ["S. Chawla", "R. Krauthgamer", "R. Kumar", "Y. Rabani", "D. Sivakumar"],
    "venue": "Computational Complexity,",
    "year": 2006
  }, {
    "title": "Near optimal LP rounding algorithm for correlation clustering on complete and complete k-partite graphs",
    "authors": ["S. Chawla", "K. Makarychev", "T. Schramm", "G. Yaroslavtsev"],
    "venue": "In STOC,",
    "year": 2015
  }, {
    "title": "The graph partitioning polytope on seriesparallel and 4-wheel free graphs",
    "authors": ["S. Chopra"],
    "venue": "SIAM Journal on Discrete Mathematics,",
    "year": 1994
  }, {
    "title": "The partition problem",
    "authors": ["S. Chopra", "M. Rao"],
    "venue": "Mathematical Programming,",
    "year": 1993
  }, {
    "title": "Correlation clustering in general weighted graphs",
    "authors": ["E.D. Demaine", "D. Emanuel", "A. Fiat", "N. Immorlica"],
    "venue": "Theoretical Computer Science,",
    "year": 2006
  }, {
    "title": "Complete descriptions of small multicut polytopes",
    "authors": ["M. Deza", "M. Grötschel", "M. Laurent"],
    "venue": "In Applied Geometry And Discrete Mathematics, Proceedings of a DIMACS Workshop,",
    "year": 1990
  }, {
    "title": "Clique-web facets for multicut polytopes",
    "authors": ["M.M. Deza", "M. Grötschel", "M. Laurent"],
    "venue": "Mathematics of Operations Research,",
    "year": 1992
  }, {
    "title": "Multi-Terminal Network Flows",
    "authors": ["R.E. Gomory", "T.C. Hu"],
    "venue": "Journal of the Society for Industrial and Applied Mathematics,",
    "year": 1961
  }, {
    "title": "A cutting plane algorithm for a clustering problem",
    "authors": ["M. Grötschel", "Y. Wakabayashi"],
    "venue": "Mathematical Programming,",
    "year": 1989
  }, {
    "title": "Facets of the clique partitioning polytope",
    "authors": ["M. Grötschel", "Y. Wakabayashi"],
    "venue": "Mathematical Programming,",
    "year": 1990
  }, {
    "title": "Very simple methods for all pairs network flow analysis",
    "authors": ["D. Gusfield"],
    "venue": "SIAM J. Comput.,",
    "year": 1990
  }, {
    "title": "Analysis and optimization of graph decompositions by lifted multicuts",
    "authors": ["A. Horňáková", "Lange", "J.-H", "B. Andres"],
    "venue": "In ICML,",
    "year": 2017
  }, {
    "title": "Deepercut: A deeper, stronger, and faster multi-person pose estimation model",
    "authors": ["E. Insafutdinov", "L. Pishchulin", "B. Andres", "M. Andriluka", "B. Schiele"],
    "venue": "In ECCV,",
    "year": 2016
  }, {
    "title": "Globally optimal image partitioning by multicuts",
    "authors": ["J.H. Kappes", "M. Speth", "B. Andres", "G. Reinelt", "C. Schnörr"],
    "venue": "In EMMCVPR,",
    "year": 2011
  }, {
    "title": "Motion trajectory segmentation via minimum cost multicuts",
    "authors": ["M. Keuper", "B. Andres", "T. Brox"],
    "venue": "In ICCV,",
    "year": 2015
  }, {
    "title": "Correlation clustering and two-edge-connected augmentation for planar graphs",
    "authors": ["P.N. Klein", "C. Mathieu", "H. Zhou"],
    "venue": "In STACS,",
    "year": 2015
  }, {
    "title": "Signed networks in social media",
    "authors": ["J. Leskovec", "D.P. Huttenlocher", "J.M. Kleinberg"],
    "venue": "In Proceedings of the 28th International Conference on Human Factors in Computing Systems,",
    "year": 2010
  }, {
    "title": "A comparative study of local search algorithms for correlation clustering",
    "authors": ["E. Levinkov", "A. Kirillov", "B. Andres"],
    "venue": "In GCPR,",
    "year": 2017
  }, {
    "title": "Parallel correlation clustering on big graphs",
    "authors": ["X. Pan", "D.S. Papailiopoulos", "S. Oymak", "B. Recht", "K. Ramchandran", "M.I. Jordan"],
    "venue": "In NIPS,",
    "year": 2015
  }, {
    "title": "Maximum persistency in energy minimization",
    "authors": ["A. Shekhovtsov"],
    "venue": "In CVPR, pp. 1162–1169,",
    "year": 2014
  }, {
    "title": "A message passing algorithm for the minimum cost multicut problem",
    "authors": ["P. Swoboda", "B. Andres"],
    "venue": "In CVPR,",
    "year": 2017
  }, {
    "title": "Partial optimality by pruning for MAP-inference with general graphical models",
    "authors": ["P. Swoboda", "A. Shekhovtsov", "J.H. Kappes", "C. Schnörr", "B. Savchynskyy"],
    "venue": "TPAMI, 38(7):1370–1382,",
    "year": 2016
  }, {
    "title": "Multiple people tracking by lifted multicut and person reidentification",
    "authors": ["S. Tang", "M. Andriluka", "B. Andres", "B. Schiele"],
    "venue": "In CVPR,",
    "year": 2017
  }, {
    "title": "Fast planar correlation clustering for image segmentation",
    "authors": ["J. Yarkony", "A.T. Ihler", "C.C. Fowlkes"],
    "venue": "ECCV",
    "year": 2012
  }, {
    "title": "Parallel multicut segmentation via dual decomposition",
    "authors": ["J. Yarkony", "T. Beier", "P. Baldi", "F.A. Hamprecht"],
    "venue": "New Frontiers in Mining Complex Patterns,",
    "year": 2015
  }],
  "id": "SP:67f3ffe3ba90a3b8da2dcd4ccac9788a397244af",
  "authors": [{
    "name": "Jan-Hendrik Lange",
    "affiliations": []
  }, {
    "name": "Andreas Karrenbauer",
    "affiliations": []
  }, {
    "name": "Bjoern Andres",
    "affiliations": []
  }],
  "abstractText": "Weighted correlation clustering is hard to solve and hard to approximate for general graphs. Its applications in network analysis and computer vision call for efficient algorithms. To this end, we make three contributions: We establish partial optimality conditions that can be checked efficiently, and doing so recursively solves the problem for series-parallel graphs to optimality, in linear time. We exploit the packing dual of the problem to compute a heuristic, but non-trivial lower bound faster than that of a canonical linear program relaxation. We introduce a re-weighting with the dual solution by which efficient local search algorithms converge to better feasible solutions. The effectiveness of our methods is demonstrated empirically on a number of benchmark instances.",
  "title": "Partial Optimality and Fast Lower Bounds for Weighted Correlation Clustering"
}