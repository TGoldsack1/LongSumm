{
  "sections": [{
    "text": "Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (Long Papers), pages 946–956 Melbourne, Australia, July 15 - 20, 2018. c©2018 Association for Computational Linguistics\n946"
  }, {
    "heading": "1 Introduction",
    "text": "Target-oriented (also mentioned as “target-level” or “aspect-level” in some works) sentiment classification aims to determine sentiment polarities over “opinion targets” that explicitly appear in the sentences (Liu, 2012). For example, in the sentence “I am pleased with the fast log on, and the long battery life”, the user mentions two targets\n∗The work was done when Xin Li was an intern at Tencent AI Lab. This project is substantially supported by a grant from the Research Grant Council of the Hong Kong Special Administrative Region, China (Project Code: 14203414).\n1Our code is open-source and available at https:// github.com/lixin4ever/TNet\n“log on” and “better life”, and expresses positive sentiments over them. The task is usually formulated as predicting a sentiment category for a (target, sentence) pair.\nRecurrent Neural Networks (RNNs) with attention mechanism, firstly proposed in machine translation (Bahdanau et al., 2014), is the most commonly-used technique for this task. For example, Wang et al. (2016); Tang et al. (2016b); Yang et al. (2017); Liu and Zhang (2017); Ma et al. (2017) and Chen et al. (2017) employ attention to measure the semantic relatedness between each context word and the target, and then use the induced attention scores to aggregate contextual features for prediction. In these works, the attention weight based combination of word-level features for classification may introduce noise and downgrade the prediction accuracy. For example, in “This dish is my favorite and I always get it and never get tired of it.”, these approaches tend to involve irrelevant words such as “never” and “tired” when they highlight the opinion modifier “favorite”. To some extent, this drawback is rooted in the attention mechanism, as also observed in machine translation (Luong et al., 2015) and image captioning (Xu et al., 2015).\nAnother observation is that the sentiment of a target is usually determined by key phrases such as “is my favorite”. By this token, Convolutional Neural Networks (CNNs)—whose capability for extracting the informative n-gram features (also called “active local features”) as sentence representations has been verified in (Kim, 2014; Johnson and Zhang, 2015)— should be a suitable model for this classification problem. However, CNN likely fails in cases where a sentence expresses different sentiments over multiple targets, such as “great food but the service was dreadful!”. One reason is that CNN cannot fully explore the target information as done by RNN-based meth-\nods (Tang et al., 2016a).2 Moreover, it is hard for vanilla CNN to differentiate opinion words of multiple targets. Precisely, multiple active local features holding different sentiments (e.g., “great food” and “service was dreadful”) may be captured for a single target, thus it will hinder the prediction.\nWe propose a new architecture, named TargetSpecific Transformation Networks (TNet), to solve the above issues in the task of target sentiment classification. TNet firstly encodes the context information into word embeddings and generates the contextualized word representations with LSTMs. To integrate the target information into the word representations, TNet introduces a novel Target-Specific Transformation (TST) component for generating the target-specific word representations. Contrary to the previous attention-based approaches which apply the same target representation to determine the attention scores of individual context words, TST firstly generates different representations of the target conditioned on individual context words, then it consolidates each context word with its tailor-made target representation to obtain the transformed word representation. Considering the context word “long” and the target “battery life” in the above example, TST firstly measures the associations between “long” and individual target words. Then it uses the association scores to generate the target representation conditioned on “long”. After that, TST transforms the representation of “long” into its target-specific version with the new target representation. Note that “long” could also indicate a negative sentiment (say for “startup time”), and the above TST is able to differentiate them.\nAs the context information carried by the representations from the LSTM layer will be lost after the non-linear TST, we design a contextpreserving mechanism to contextualize the generated target-specific word representations. Such mechanism also allows deep transformation structure to learn abstract features3. To help the CNN feature extractor locate sentiment indicators more accurately, we adopt a proximity strategy to scale the input of convolutional layer with positional relevance between a word and the target.\n2One method could be concatenating the target representation with each word representation, but the effect as shown in (Wang et al., 2016) is limited.\n3Abstract features usually refer to the features ultimately useful for the task (Bengio et al., 2013; LeCun et al., 2015).\nIn summary, our contributions are as follows: • TNet adapts CNN to handle target-level sentiment classification, and its performance dominates the state-of-the-art models on benchmark datasets. • A novel Target-Specific Transformation component is proposed to better integrate target information into the word representations. • A context-preserving mechanism is designed to forward the context information into a deep transformation architecture, thus, the model can learn more abstract contextualized word features from deeper networks."
  }, {
    "heading": "2 Model Description",
    "text": "Given a target-sentence pair (wτ ,w), where wτ = {wτ1 , wτ2 , ..., wτm} is a sub-sequence of w = {w1, w2, ..., wn}, and the corresponding word embeddings xτ = {xτ1 , xτ2 , ..., xτm} and x = {x1, x2, ..., xn}, the aim of target sentiment classification is to predict the sentiment polarity y ∈ {P,N,O} of the sentence w over the target wτ , where P , N and O denote “positive”, “negative” and “neutral” sentiments respectively.\nThe architecture of the proposed TargetSpecific Transformation Networks (TNet) is shown in Fig. 1. The bottom layer is a BiLSTM which transforms the input x = {x1, x2, ..., xn} ∈ Rn×dimw into the contextualized word representations h(0) = {h(0)1 , h (0) 2 , ..., h (0) n } ∈ Rn×2dimh (i.e. hidden states of BiLSTM), where dimw and dimh denote the dimensions of the word embeddings and the hidden representations respectively. The middle part, the core part of our TNet, consists of L Context-Preserving Transformation (CPT) layers. The CPT layer incorporates the target information into the word representations via a novel Target-Specific Transformation (TST) component. CPT also contains a contextpreserving mechanism, resembling identity mapping (He et al., 2016a,b) and highway connection (Srivastava et al., 2015a,b), allows preserving the context information and learning more abstract word-level features using a deep network. The top most part is a position-aware convolutional layer which first encodes positional relevance between a word and a target, and then extracts informative features for classification."
  }, {
    "heading": "2.1 Bi-directional LSTM Layer",
    "text": "As observed in Lai et al. (2015), combining contextual information with word embeddings is an\neffective way to represent a word in convolutionbased architectures. TNet also employs a BiLSTM to accumulate the context information for each word of the input sentence, i.e., the bottom part in Fig. 1. For simplicity and space issue, we denote the operation of an LSTM unit on xi as LSTM(xi). Thus, the contextualized word representation h(0)i ∈ R2dimh is obtained as follows:\nh (0) i = [ −−−−→ LSTM(xi); ←−−−− LSTM(xi)], i ∈ [1, n]. (1)"
  }, {
    "heading": "2.2 Context-Preserving Transformation",
    "text": "The above word-level representation has not considered the target information yet. Traditional attention-based approaches keep the word-level features static and aggregate them with weights as the final sentence representation. In contrast, as shown in the middle part in Fig. 1, we introduce multiple CPT layers and the detail of a single CPT is shown in Fig. 2. In each CPT layer, a tailor-made TST component that aims at better consolidating word representation and target representation is proposed. Moreover, we design a context-preserving mechanism enabling the learning of target-specific word representations in a deep neural architecture."
  }, {
    "heading": "2.2.1 Target-Specific Transformation",
    "text": "TST component is depicted with the TST block in Fig. 2. The first task of TST is to generate the representation of the target. Previous methods (Chen\net al., 2017; Liu and Zhang, 2017) average the embeddings of the target words as the target representation. This strategy may be inappropriate in some cases because different target words usually do not contribute equally. For example, in the target “amd turin processor”, the word “processor” is more important than “amd” and “turin”, because the sentiment is usually conveyed over the phrase head, i.e.,“processor”, but seldom over modifiers (such as brand name “amd”). Ma et al. (2017) attempted to overcome this issue by measuring the importance score between each target word representation and the averaged sentence vector. However, it may be ineffective for sentences expressing multiple sentiments (e.g., “Air has higher resolution but the fonts are small.”), because taking the average tends to neutralize different sentiments.\nWe propose to dynamically compute the importance of target words based on each sentence word rather than the whole sentence. We first employ another BiLSTM to obtain the target word representations hτ ∈ Rm×2dimh :\nhτj = [ −−−−→ LSTM(xτj ); ←−−−− LSTM(xτj )], j ∈ [1,m]. (2)\nThen, we dynamically associate them with each word wi in the sentence to tailor-make target representation rτi at the time step i:\nrτi = m∑ j=1 hτj ∗ F(h (l) i , h τ j ), (3)\nwhere the function F measures the relatedness between the j-th target word representation hτj and\nthe i-th word-level representation h(l)i :\nF(h(l)i , h τ j ) =\nexp (h (l)> i h τ j )∑m\nk=1 exp (h (l)> i h τ k) . (4)\nFinally, the concatenation of rτi and h (l) i is fed into a fully-connected layer to obtain the i-th targetspecific word representation h̃i (l) :\nh̃ (l) i = g(W τ [h (l) i : r τ i ] + b τ ), (5)\nwhere g(∗) is a non-linear activation function and “:” denotes vector concatenation. W τ and bτ are the weights of the layer."
  }, {
    "heading": "2.2.2 Context-Preserving Mechanism",
    "text": "After the non-linear TST (see Eq. 5), the context information captured with contextualized representations from the BiLSTM layer will be lost since the mean and the variance of the features within the feature vector will be changed. To take advantage of the context information, which has been proved to be useful in (Lai et al., 2015), we investigate two strategies: Lossless Forwarding (LF) and Adaptive Scaling (AS), to pass the context information to each following layer, as depicted by the block “LF/AS” in Fig. 2. Accordingly, the model variants are named TNet-LF and TNet-AS.\nLossless Forwarding. This strategy preserves context information by directly feeding the features before the transformation to the next layer. Specifically, the input h(l+1)i of the (l+1)-th CPT layer is formulated as:\nh (l+1) i = h (l) i + h̃ (l) i , i ∈ [1, n], l ∈ [0, L], (6)\nwhere h(l)i is the input of the l-th layer and h̃ (l) i is the output of TST in this layer. We unfold the recursive form of Eq. 6 as follows:\nh (l+1) i = h (0) i +TST(h (0) i )+· · ·+TST(h (l) i ). (7)\nHere, we denote h̃(l)i as TST(h (l) i ). From Eq. 7, we can see that the output of each layer will contain the contextualized word representations (i.e., h (0) i ), thus, the context information is encoded into the transformed features. We call this strategy “Lossless Forwarding” because the contextualized representations and the transformed representations (i.e., TST(h(l)i )) are kept unchanged during the feature combination.\nAdaptive Scaling. Lossless Forwarding introduces the context information by directly adding back the contextualized features to the transformed features, which raises a question: Can the weights of the input and the transformed features be adjusted dynamically? With this motivation, we propose another strategy, named “Adaptive Scaling”. Similar to the gate mechanism in RNN variants (Jozefowicz et al., 2015), Adaptive Scaling introduces a gating function to control the passed proportions of the transformed features and the input features. The gate t(l) as follows:\nt (l) i = σ(Wtransh (l) i + btrans), (8)\nwhere t(l)i is the gate for the i-th input of the l-th CPT layer, and σ is the sigmoid activation function. Then we perform convex combination of h(l)i and h̃(l)i based on the gate:\nh (l+1) i = t (l) i h̃ (l) i + (1− t (l) i ) h (l) i . (9)\nHere, denotes element-wise multiplication. The non-recursive form of this equation is as follows (for clarity, we ignore the subscripts):\nh(l+1) = [ l∏ k=0 (1− t(k))] h(0)\n+[t(0) l∏\nk=1\n(1− t(k))] TST(h(0)) + · · ·\n+t(l−1)(1− t(l)) TST(h(l−1)) + t(l) TST(h(l)).\nThus, the context information is integrated in each upper layer and the proportions of the contextualized representations and the transformed representations are controlled by the computed gates in different transformation layers."
  }, {
    "heading": "2.3 Convolutional Feature Extractor",
    "text": "Recall that the second issue that blocks CNN to perform well is that vanilla CNN may associate a target with unrelated general opinion words which are frequently used as modifiers for different targets across domains. For example, “service” in “Great food but the service is dreadful” may be associated with both “great” and “dreadful”. To solve it, we adopt a proximity strategy, which is observed effective in (Chen et al., 2017; Li and Lam, 2017). The idea is a closer opinion word is more likely to be the actual modifier of the target.\nSpecifically, we first calculate the position relevance vi between the i-th word and the target4:\nvi =  1− (k+m−i)C i < k +m 1− i−kC k +m ≤ i ≤ n 0 i > n\n(10)\nwhere k is the index of the first target word, C is a pre-specified constant, and m is the length of the target wτ . Then, we use v to help CNN locate the correct opinion w.r.t. the given target:\nĥ (l) i = h (l) i ∗ vi, i ∈ [1, n], l ∈ [1, L]. (11)\nBased on Eq. 10 and Eq. 11, the words close to the target will be highlighted and those far away will be downgraded. v is also applied on the intermediate output to introduce the position information into each CPT layer. Then we feed the weighted h(L) to the convolutional layer, i.e., the top-most layer in Fig. 1, to generate the feature map c ∈ Rn−s+1 as follows:\nci = ReLU(w > convh (L) i:i+s−1 + bconv), (12)\nwhere h(L)i:i+s−1 ∈ Rs·dimh is the concatenated vector of ĥ(L)i , · · · , ĥ (L) i+s−1, and s is the kernel size. wconv ∈ Rs·dimh and bconv ∈ R are learnable weights of the convolutional kernel. To capture the most informative features, we apply max pooling (Kim, 2014) and obtain the sentence representation z ∈ Rnk by employing nk kernels:\nz = [max(c1), · · · ,max(cnk)] >. (13)\nFinally, we pass z to a fully connected layer for sentiment prediction:\np(y|wτ ,w) = Softmax(Wfz + bf ). (14)\nwhere Wf and bf are learnable parameters. 4As we perform sentence padding, it is possible that the index i is larger than the actual length n of the sentence."
  }, {
    "heading": "3 Experiments",
    "text": ""
  }, {
    "heading": "3.1 Experimental Setup",
    "text": "As shown in Table 1, we evaluate the proposed TNet on three benchmark datasets: LAPTOP and REST are from SemEval ABSA challenge (Pontiki et al., 2014), containing user reviews in laptop domain and restaurant domain respectively. We also remove a few examples having the “conflict label” as done in (Chen et al., 2017); TWITTER is built by Dong et al. (2014), containing twitter posts. All tokens are lowercased without removal of stop words, symbols or digits, and sentences are zero-padded to the length of the longest sentence in the dataset. Evaluation metrics are Accuracy and Macro-Averaged F1 where the latter is more appropriate for datasets with unbalanced classes. We also conduct pairwise t-test on both Accuracy and Macro-Averaged F1 to verify if the improvements over the compared models are reliable.\nTNet is compared with the following methods.\n• SVM (Kiritchenko et al., 2014): It is a traditional support vector machine based model with extensive feature engineering;\n• AdaRNN (Dong et al., 2014): It learns the sentence representation toward target for sentiment prediction via semantic composition over dependency tree;\n• AE-LSTM, and ATAE-LSTM (Wang et al., 2016): AE-LSTM is a simple LSTM model incorporating the target embedding as input, while ATAE-LSTM extends AE-LSTM with attention;\n• IAN (Ma et al., 2017): IAN employs two LSTMs to learn the representations of the context and the target phrase interactively;\n• CNN-ASP: It is a CNN-based model implemented by us which directly concatenates target representation to each word embedding;\n• TD-LSTM (Tang et al., 2016a): It employs two LSTMs to model the left and right contexts of the target separately, then performs predictions based on concatenated context representations;\n• MemNet (Tang et al., 2016b): It applies attention mechanism over the word embeddings multiple times and predicts sentiments\nbased on the top-most sentence representations;\n• BILSTM-ATT-G (Liu and Zhang, 2017): It models left and right contexts using two attention-based LSTMs and introduces gates to measure the importance of left context, right context, and the entire sentence for the prediction;\n• RAM (Chen et al., 2017): RAM is a multilayer architecture where each layer consists of attention-based aggregation of word features and a GRU cell to learn the sentence representation.\nWe run the released codes of TD-LSTM and BILSTM-ATT-G to generate results, since their papers only reported results on TWITTER. We also rerun MemNet on our datasets and evaluate it with both accuracy and Macro-Averaged F1.5\nWe use pre-trained GloVe vectors (Pennington et al., 2014) to initialize the word embeddings and the dimension is 300 (i.e., dimw = 300). For out-of-vocabulary words, we randomly sample their embeddings from the uniform distribution U(−0.25, 0.25), as done in (Kim, 2014). We only use one convolutional kernel size because it was observed that CNN with single optimal kernel size is comparable with CNN having multiple kernel sizes on small datasets (Zhang and Wallace, 2017). To alleviate overfitting, we apply dropout on the input word embeddings of the LSTM and the ultimate sentence representation z. All weight matrices are initialized with the uniform distribution U(−0.01, 0.01) and the biases are initialized\n5The codes of TD-LSTM/MemNet and BILSTM-ATTG are available at: http://ir.hit.edu.cn/˜dytang and http://leoncrashcode.github.io. Note that MemNet was only evaluated with accuracy.\nas zeros. The training objective is cross-entropy, and Adam (Kingma and Ba, 2015) is adopted as the optimizer by following the learning rate and the decay rates in the original paper.\nThe hyper-parameters of TNet-LF and TNetAS are listed in Table 2. Specifically, all hyperparameters are tuned on 20% randomly held-out training data and the hyper-parameter collection producing the highest accuracy score is used for testing. Our model has comparable number of parameters compared to traditional LSTM-based models as we reuse parameters in the transformation layers and BiLSTM.6"
  }, {
    "heading": "3.2 Main Results",
    "text": "As shown in Table 3, both TNet-LF and TNet-AS consistently achieve the best performance on all datasets, which verifies the efficacy of our whole TNet model. Moreover, TNet can perform well for different kinds of user generated content, such as product reviews with relatively formal sentences in LAPTOP and REST, and tweets with more ungrammatical sentences in TWITTER. The reason is the CNN-based feature extractor arms TNet with more power to extract accurate features from ungrammatical sentences. Indeed, we can also observe that another CNN-based baseline, i.e., CNNASP implemented by us, also obtains good results on TWITTER.\nOn the other hand, the performance of those comparison methods is mostly unstable. For the tweet in TWITTER, the competitive BILSTMATT-G and RAM cannot perform as effective as they do for the reviews in LAPTOP and REST, due to the fact that they are heavily rooted in LSTMs and the ungrammatical sentences hinder their ca-\n6All experiments are conducted on a single NVIDIA GTX 1080. The prediction cost of a sentence is about 2 ms.\npability in capturing the context features. Another difficulty caused by the ungrammatical sentences is that the dependency parsing might be errorprone, which will affect those methods such as AdaRNN using dependency information.\nFrom the above observations and analysis, some takeaway message for the task of target sentiment classification could be:\n• LSTM-based models relying on sequential information can perform well for formal sentences by capturing more useful context features;\n• For ungrammatical text, CNN-based models may have some advantages because CNN aims to extract the most informative n-gram features and is thus less sensitive to informal texts without strong sequential patterns."
  }, {
    "heading": "3.3 Performance of Ablated TNet",
    "text": "To investigate the impact of each component such as deep transformation, context-preserving mechanism, and positional relevance, we perform comparison between the full TNet models and its ablations (the third group in Table 3). After removing the deep transformation (i.e., the techniques introduced in Section 2.2), both TNet-LF and TNetAS are reduced to TNet w/o transformation (where\nposition relevance is kept), and their results in both accuracy and F1 measure are incomparable with those of TNet. It shows that the integration of target information into the word-level representations is crucial for good performance.\nComparing the results of TNet and TNet w/o context (where TST and position relevance are kept), we observe that the performance of TNet w/o context drops significantly on LAPTOP and REST7, while on TWITTER, TNet w/o context performs very competitive (p-values with TNetLF and TNet-AS are 0.066 and 0.053 respectively for Accuracy). Again, we could attribute this phenomenon to the ungrammatical user generated content of twitter, because the contextpreserving component becomes less important for such data. TNet w/o context performs consistently better than TNet w/o transformation, which verifies the efficacy of the target specific transformation (TST), before applying context-preserving.\nAs for the position information, we conduct statistical t-test between TNet-LF/AS and TNetLF/AS w/o position together with performance comparison. All of the produced p-values are less than 0.05, suggesting that the improvements brought in by position information are significant.\n7Without specification, the significance level is set to 0.05."
  }, {
    "heading": "3.4 CPT versus Alternatives",
    "text": "The next interesting question is what if we replace the transformation module (i.e., the CPT layers in Fig.1) of TNet with other commonly-used components? We investigate two alternatives: attention mechanism and fully-connected (FC) layer, resulting in three pipelines as shown in the second group of Table 3 (position relevance is kept for them).\nLSTM-ATT-CNN applies attention as the alternative8, and it does not need the contextpreserving mechanism. It performs unexceptionally worse than the TNet variants. We are surprised that LSTM-ATT-CNN is even worse than TNet w/o transformation (a pipeline simply removing the transformation module) on TWITTER. More concretely, applying attention results in negative effect on TWITTER, which is consistent with the observation that all those attention-based state-of-the-art methods (i.e., TD-LSTM, MemNet, BILSTM-ATT-G, and RAM) cannot perform well on TWITTER.\nLSTM-FC-CNN-LF and LSTM-FC-CNN-AS are built by applying FC layer to replace TST and keeping the context-preserving mechanism (i.e., LF and AS). Specifically, the concatenation of word representation and the averaged target vector is fed to the FC layer to obtain targetspecific features. Note that LSTM-FC-CNNLF/AS are equivalent to TNet-LF/AS when processing single-word targets (see Eq. 3). They obtain competitive results on all datasets: comparable with or better than the state-of-the-art methods. The TNet variants can still outperform LSTMFC-CNN-LF/AS with significant gaps, e.g., on LAPTOP and REST, the accuracy gaps between TNet-LF and LSTM-FC-CNN-LF are 0.42% (p < 0.03) and 0.38% (p < 0.04) respectively."
  }, {
    "heading": "3.5 Impact of CPT Layer Number",
    "text": "As our TNet involves multiple CPT layers, we investigate the effect of the layer number L. Specifically, we conduct experiments on the held-out training data of LAPTOP and vary L from 2 to 10, increased by 2. The cases L=1 and L=15 are also included. The results are illustrated in Figure 3. We can see that both TNet-LF and TNetAS achieve the best results when L=2. While increasing L, the performance is basically becoming worse. For large L, the performance of TNet-AS\n8We tried different attention mechanisms and report the best one here, namely, dot attention (Luong et al., 2015).\ngenerally becomes more sensitive, it is probably because AS involves extra parameters (see Eq 9) that increase the training difficulty."
  }, {
    "heading": "3.6 Case Study",
    "text": "Table 4 shows some sample cases. The input targets are wrapped in the brackets with true labels given as subscripts. The notations P, N and O in the table represent positive, negative and neutral respectively. For each sentence, we underline the target with a particular color, and the text of its corresponding most informative n-gram feature9 captured by TNet-AS (TNet-LF captures very similar features) is in the same color (so color printing is preferred). For example, for the target “resolution” in the first sentence, the captured feature is “Air has higher”. Note that as discussed above, the CNN layer of TNet captures such features with the size-three kernels, so that the features are trigrams. Each of the last features of the second and seventh sentences contains a padding token, which is not shown.\nOur TNet variants can predict target sentiment more accurately than RAM and BILSTM-ATT-G in the transitional sentences such as the first sentence by capturing correct trigram features. For the third sentence, its second and third most informative trigrams are “100% . PAD” and “’ s not”, being used together with “features make up”, our models can make correct predictions. Moreover, TNet can still make correct prediction when the explicit opinion is target-specific. For example,\n9For each convolutional filter, only one n-gram feature in the feature map will be kept after the max pooling. Among those from different filters, the n-gram with the highest frequency will be regarded as the most informative n-gram w.r.t. the given target.\n“long” in the fifth sentence is negative for “startup time”, while it could be positive for other targets such as “battery life” in the sixth sentence. The sentiment of target-specific opinion word is conditioned on the given target. Our TNet variants, armed with the word-level feature transformation w.r.t. the target, is capable of handling such case.\nWe also find that all these models cannot give correct prediction for the last sentence, a commonly used subjunctive style. In this case, the difficulty of prediction does not come from the detection of explicit opinion words but the inference based on implicit semantics, which is still quite challenging for neural network models."
  }, {
    "heading": "4 Related Work",
    "text": "Apart from sentence level sentiment classification (Kim, 2014; Shi et al., 2018), aspect/target level sentiment classification is also an important research topic in the field of sentiment analysis. The early methods mostly adopted supervised learning approach with extensive hand-coded features (Blair-Goldensohn et al., 2008; Titov and McDonald, 2008; Yu et al., 2011; Jiang et al., 2011; Kiritchenko et al., 2014; Wagner et al., 2014; Vo and Zhang, 2015), and they fail to model the semantic relatedness between a target and its context which is critical for target sentiment analysis. Dong et al. (2014) incorporate the target information into the feature learning using dependency trees. As observed in previous works, the performance heavily relies on the quality of dependency parsing. Tang et al. (2016a) propose to split the context into two parts and associate target with contextual features separately. Similar to (Tang et al., 2016a), Zhang et al. (2016) develop a three-way gated neural network to model the in-\nteraction between the target and its surrounding contexts. Despite the advantages of jointly modeling target and context, they are not capable of capturing long-range information when some critical context information is far from the target. To overcome this limitation, researchers bring in the attention mechanism to model target-context association (Tang et al., 2016a,b; Wang et al., 2016; Yang et al., 2017; Liu and Zhang, 2017; Ma et al., 2017; Chen et al., 2017; Zhang et al., 2017; Tay et al., 2017). Compared with these methods, our TNet avoids using attention for feature extraction so as to alleviate the attended noise."
  }, {
    "heading": "5 Conclusions",
    "text": "We re-examine the drawbacks of attention mechanism for target sentiment classification, and also investigate the obstacles that hinder CNN-based models to perform well for this task. Our TNet model is carefully designed to solve these issues. Specifically, we propose target specific transformation component to better integrate target information into the word representation. Moreover, we employ CNN as the feature extractor for this classification problem, and rely on the contextpreserving and position relevance mechanisms to maintain the advantages of previous LSTM-based models. The performance of TNet consistently dominates previous state-of-the-art methods on different types of data. The ablation studies show the efficacy of its different modules, and thus verify the rationality of TNet’s architecture."
  }],
  "year": 2018,
  "references": [{
    "title": "Neural machine translation by jointly",
    "authors": ["Dzmitry Bahdanau", "Kyunghyun Cho", "Yoshua Bengio"],
    "year": 2014
  }, {
    "title": "Representation learning: A review and new perspectives",
    "authors": ["Yoshua Bengio", "Aaron Courville", "Pascal Vincent."],
    "venue": "IEEE Transactions on Pattern Analysis and Machine Intelligence, 35(8):1798–1828.",
    "year": 2013
  }, {
    "title": "Building a sentiment summarizer for local service reviews",
    "authors": ["Sasha Blair-Goldensohn", "Kerry Hannan", "Ryan McDonald", "Tyler Neylon", "George A Reis", "Jeff Reynar."],
    "venue": "WWW workshop on NLP in the information explosion era, pages 339–348.",
    "year": 2008
  }, {
    "title": "Recurrent attention network on memory for aspect sentiment analysis",
    "authors": ["Peng Chen", "Zhongqian Sun", "Lidong Bing", "Wei Yang."],
    "venue": "Proceedings of EMNLP, pages 463–472.",
    "year": 2017
  }, {
    "title": "Adaptive recursive neural network for target-dependent twitter sentiment classification",
    "authors": ["Li Dong", "Furu Wei", "Chuanqi Tan", "Duyu Tang", "Ming Zhou", "Ke Xu."],
    "venue": "Proceedings of ACL, pages 49–54.",
    "year": 2014
  }, {
    "title": "Deep residual learning for image recognition",
    "authors": ["Kaiming He", "Xiangyu Zhang", "Shaoqing Ren", "Jian Sun."],
    "venue": "Proceedings of CVPR, pages 770–778.",
    "year": 2016
  }, {
    "title": "Identity mappings in deep residual networks",
    "authors": ["Kaiming He", "Xiangyu Zhang", "Shaoqing Ren", "Jian Sun."],
    "venue": "Proceedings of ECCV, pages 630–645.",
    "year": 2016
  }, {
    "title": "Target-dependent twitter sentiment classification",
    "authors": ["Long Jiang", "Mo Yu", "Ming Zhou", "Xiaohua Liu", "Tiejun Zhao."],
    "venue": "Proceedings of ACL, pages 151–160.",
    "year": 2011
  }, {
    "title": "Semi-supervised convolutional neural networks for text categorization via region embedding",
    "authors": ["Rie Johnson", "Tong Zhang."],
    "venue": "Proceedings of NIPS, pages 919–927.",
    "year": 2015
  }, {
    "title": "An empirical exploration of recurrent network architectures",
    "authors": ["Rafal Jozefowicz", "Wojciech Zaremba", "Ilya Sutskever."],
    "venue": "Proceedings of ICML, pages 2342–2350.",
    "year": 2015
  }, {
    "title": "Convolutional neural networks for sentence classification",
    "authors": ["Yoon Kim."],
    "venue": "Proceedings of EMNLP, pages 1746–1751.",
    "year": 2014
  }, {
    "title": "Adam: A method for stochastic optimization",
    "authors": ["Diederik Kingma", "Jimmy Ba."],
    "venue": "Proceedings of ICLR.",
    "year": 2015
  }, {
    "title": "Nrc-canada-2014: Detecting aspects and sentiment in customer reviews",
    "authors": ["Svetlana Kiritchenko", "Xiaodan Zhu", "Colin Cherry", "Saif Mohammad."],
    "venue": "Proceedings of SemEval, pages 437–442.",
    "year": 2014
  }, {
    "title": "Recurrent convolutional neural networks for text classification",
    "authors": ["Siwei Lai", "Liheng Xu", "Kang Liu", "Jun Zhao."],
    "venue": "Proceedings of AAAI, volume 333, pages 2267–2273.",
    "year": 2015
  }, {
    "title": "Deep learning",
    "authors": ["Yann LeCun", "Yoshua Bengio", "Geoffrey Hinton."],
    "venue": "Nature, 521(7553):436.",
    "year": 2015
  }, {
    "title": "Deep multi-task learning for aspect term extraction with memory interaction",
    "authors": ["Xin Li", "Wai Lam."],
    "venue": "Proceedings of EMNLP, pages 2876–2882.",
    "year": 2017
  }, {
    "title": "Sentiment analysis and opinion mining",
    "authors": ["Bing Liu."],
    "venue": "Synthesis Lectures on Human Language Technologies, 5(1):1–167.",
    "year": 2012
  }, {
    "title": "Attention modeling for targeted sentiment",
    "authors": ["Jiangming Liu", "Yue Zhang."],
    "venue": "Proceedings of EACL, pages 572–577.",
    "year": 2017
  }, {
    "title": "Effective approaches to attentionbased neural machine translation",
    "authors": ["Thang Luong", "Hieu Pham", "Christopher D. Manning."],
    "venue": "Proceedings of EMNLP, pages 1412–1421.",
    "year": 2015
  }, {
    "title": "Interactive attention networks for aspect-level sentiment classification",
    "authors": ["Dehong Ma", "Sujian Li", "Xiaodong Zhang", "Houfeng Wang."],
    "venue": "Proceedings of IJCAI, pages 4068–4074.",
    "year": 2017
  }, {
    "title": "Glove: Global vectors for word representation",
    "authors": ["Jeffrey Pennington", "Richard Socher", "Christopher Manning."],
    "venue": "Proceedings of EMNLP, pages 1532–1543.",
    "year": 2014
  }, {
    "title": "Semeval-2014 task 4: Aspect based sentiment analysis",
    "authors": ["Maria Pontiki", "Dimitris Galanis", "John Pavlopoulos", "Harris Papageorgiou", "Ion Androutsopoulos", "Suresh Manandhar."],
    "venue": "Proceedings of SemEval, pages 27–35.",
    "year": 2014
  }, {
    "title": "Learning domain-sensitive and sentimentaware word embeddings",
    "authors": ["Bei Shi", "Zihao Fu", "Lidong Bing", "Wai Lam."],
    "venue": "Proceedings of ACL.",
    "year": 2018
  }, {
    "title": "Training very deep networks",
    "authors": ["Rupesh K Srivastava", "Klaus Greff", "Jürgen Schmidhuber."],
    "venue": "Proceedings of NIPS, pages 2377–2385.",
    "year": 2015
  }, {
    "title": "Highway networks",
    "authors": ["Rupesh Kumar Srivastava", "Klaus Greff", "Jürgen Schmidhuber."],
    "venue": "arXiv preprint arXiv:1505.00387.",
    "year": 2015
  }, {
    "title": "Effective lstms for target-dependent sentiment classification",
    "authors": ["Duyu Tang", "Bing Qin", "Xiaocheng Feng", "Ting Liu."],
    "venue": "Proceedings of COLING, pages 3298–3307.",
    "year": 2016
  }, {
    "title": "Aspect level sentiment classification with deep memory network",
    "authors": ["Duyu Tang", "Bing Qin", "Ting Liu."],
    "venue": "Proceedings of EMNLP, pages 214–224.",
    "year": 2016
  }, {
    "title": "Learning to attend via word-aspect associative fusion for aspect-based sentiment analysis",
    "authors": ["Yi Tay", "Anh Tuan Luu", "Siu Cheung Hui."],
    "venue": "arXiv preprint arXiv:1712.05403.",
    "year": 2017
  }, {
    "title": "Modeling online reviews with multi-grain topic models",
    "authors": ["Ivan Titov", "Ryan McDonald."],
    "venue": "Proceedings of WWW, pages 111–120.",
    "year": 2008
  }, {
    "title": "Target-dependent twitter sentiment classification with rich automatic features",
    "authors": ["Duy-Tin Vo", "Yue Zhang."],
    "venue": "Proceedings of IJCAI, pages 1347– 1353.",
    "year": 2015
  }, {
    "title": "Dcu: Aspect-based polarity classification for semeval task 4",
    "authors": ["Joachim Wagner", "Piyush Arora", "Santiago Cortes", "Utsab Barman", "Dasha Bogdanova", "Jennifer Foster", "Lamia Tounsi."],
    "venue": "Proceedings of SemEval, pages 223–229.",
    "year": 2014
  }, {
    "title": "Attention-based lstm for aspect-level sentiment classification",
    "authors": ["Yequan Wang", "Minlie Huang", "xiaoyan zhu", "Li Zhao"],
    "venue": "In Proceedings of EMNLP,",
    "year": 2016
  }, {
    "title": "Show, attend and tell: Neural image caption generation with visual attention",
    "authors": ["Kelvin Xu", "Jimmy Ba", "Ryan Kiros", "Kyunghyun Cho", "Aaron Courville", "Ruslan Salakhudinov", "Rich Zemel", "Yoshua Bengio."],
    "venue": "Proceedings of ICML, pages 2048–2057.",
    "year": 2015
  }, {
    "title": "Attention based lstm for target dependent sentiment classification",
    "authors": ["Min Yang", "Wenting Tu", "Jingxuan Wang", "Fei Xu", "Xiaojun Chen."],
    "venue": "Proceedings of AAAI, pages 5013–5014.",
    "year": 2017
  }, {
    "title": "Aspect ranking: identifying important product aspects from online consumer reviews",
    "authors": ["Jianxing Yu", "Zheng-Jun Zha", "Meng Wang", "TatSeng Chua."],
    "venue": "Proceedings of ACL, pages 1496–1505.",
    "year": 2011
  }, {
    "title": "Gated neural networks for targeted sentiment analysis",
    "authors": ["Meishan Zhang", "Yue Zhang", "Duy-Tin Vo."],
    "venue": "Proceedings of AAAI, pages 3087–3093.",
    "year": 2016
  }, {
    "title": "A sensitivity analysis of (and practitioners guide to) convolutional neural networks for sentence classification",
    "authors": ["Ye Zhang", "Byron Wallace."],
    "venue": "Proceedings of IJCNLP, pages 253–263.",
    "year": 2017
  }, {
    "title": "Dependency parsing with partial annotations: An empirical comparison",
    "authors": ["Yue Zhang", "Zhenghua Li", "Jun Lang", "Qingrong Xia", "Min Zhang."],
    "venue": "Proceedings of IJCNLP, pages 49–58.",
    "year": 2017
  }],
  "id": "SP:c9bec2df79afab65e8417d389cbb9011c3196dbd",
  "authors": [{
    "name": "Xin Li",
    "affiliations": []
  }, {
    "name": "Lidong Bing",
    "affiliations": []
  }, {
    "name": "Wai Lam",
    "affiliations": []
  }, {
    "name": "Bei Shi",
    "affiliations": []
  }],
  "abstractText": "Target-oriented sentiment classification aims at classifying sentiment polarities over individual opinion targets in a sentence. RNN with attention seems a good fit for the characteristics of this task, and indeed it achieves the state-of-the-art performance. After re-examining the drawbacks of attention mechanism and the obstacles that block CNN to perform well in this classification task, we propose a new model to overcome these issues. Instead of attention, our model employs a CNN layer to extract salient features from the transformed word representations originated from a bi-directional RNN layer. Between the two layers, we propose a component to generate target-specific representations of words in the sentence, meanwhile incorporate a mechanism for preserving the original contextual information from the RNN layer. Experiments show that our model achieves a new state-of-the-art performance on a few benchmarks.1",
  "title": "Transformation Networks for Target-Oriented Sentiment Classification"
}