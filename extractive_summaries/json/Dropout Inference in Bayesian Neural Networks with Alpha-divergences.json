{
  "sections": [{
    "heading": "1. Introduction",
    "text": "Deep learning models have been used to obtain state-ofthe-art results on many tasks (Krizhevsky et al., 2012; Szegedy et al., 2014; Sutskever et al., 2014; Sundermeyer et al., 2012; Mikolov et al., 2010; Kalchbrenner & Blunsom, 2013), and in many pipelines these models have replaced the more traditional Bayesian probabilistic models (Sennrich et al., 2016). But unlike deep learning models, Bayesian probabilistic models can capture parameter uncertainty and its induced effects over predictions, capturing the models’ ignorance about the world, and able to convey their increased uncertainty on out-of-data examples. This\n1University of Cambridge, UK 2The Alan Turing Institute, UK. Correspondence to: Yingzhen Li <yl494@cam.ac.uk>.\nProceedings of the 34 th International Conference on Machine Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017 by the author(s).\ninformation can be used, for example, to identify when a vision model is given an adversarial image (studied below), or to tackle many problems in AI safety (Amodei et al., 2016). With model uncertainty at hand, applications as farreaching as safety in self-driving cars can be explored, using models which can propagate their uncertainty up the decision making pipeline (Gal, 2016). With deterministic deep learning models this invaluable uncertainty information is often lost.\nBayesian deep learning – an approach to combining Bayesian probability theory together with deep learning – allows us to use state-of-the-art models and at the same time obtain model uncertainty (Gal, 2016; Gal & Ghahramani, 2016a). Originating in the 90s (Neal, 1995; MacKay, 1992; Denker & LeCun, 1991), Bayesian neural networks (BNNs) in particular have started gaining in popularity again (Graves, 2011; Blundell et al., 2015; HernandezLobato & Adams, 2015). BNNs are standard neural networks (NNs) with prior probability distributions placed over their weights. Given observed data, inference is then performed to find what are the more likely and less likely weights to explain the data. But as easy it is to formulate BNNs, is as difficult to perform inference in them. Many approximations have been proposed over the years (Denker & LeCun, 1991; Neal, 1995; Graves, 2011; Blundell et al., 2015; Hernandez-Lobato & Adams, 2015; Hernández-Lobato et al., 2016), some more practical and some less practical. A practical approximation for inference in Bayesian neural networks should be able to scale well to large data and complex models (such as convolutional neural networks (CNNs) (Rumelhart et al., 1985; LeCun et al., 1989)). Much more importantly perhaps, it would be impractical to change existing model architectures that have been well studied, and it is often impractical to work with complex and cumbersome techniques which are difficult to explain to non-experts. Many existing approaches to obtain model confidence often do not scale to complex models or large amounts of data, and require us to develop new models for existing tasks for which we already have well performing tools (Gal, 2016).\nOne possible solution for practical inference in BNNs is variational inference (VI) (Jordan et al., 1999), a ubiquitous technique for approximate inference. Dropout variational distributions in particular (a mixture of two Gaussians with\nsmall standard deviations, and with one component fixed at zero) can be used to obtain a practical inference technique (Gal & Ghahramani, 2016b). These have been used for machine vision and medical applications (Kendall & Cipolla, 2016; Kendall et al., 2015; Angermueller & Stegle, 2015; Yang et al., 2016). Dropout variational inference can be implemented by adding dropout layers (Hinton et al., 2012; Srivastava et al., 2014) before every weight layer in the NN model. Inference is then carried out by Monte Carlo (MC) integration over the variational distribution, in practice implemented by simulating stochastic forward passes through the model at test time (referred to as MC dropout). Although dropout VI is a practical technique for approximate inference, it also has some major limitations. Dropout VI can severely underestimate model uncertainty (Gal, 2016, Section 3.3.2) – a property many VI methods share (Turner & Sahani, 2011). This can lead to devastating results in applications that must rely on good uncertainty estimates such as AI safety applications.\nAlternative objectives to VI’s objective are therefore needed. Black-box α-divergence minimisation (Hernández-Lobato et al., 2016; Li & Turner, 2016; Minka, 2005) is a class of approximate inference methods extending on VI, approximating EP’s energy function (Minka, 2001) as well as the Hellinger distance (Hellinger, 1909). These were proposed as a solution to some of the difficulties encountered with VI. However, the main difficulty with α-divergences is that the divergences are hard to use in practice. Existing inference techniques only use Gaussian approximating distributions, with the density over the approximation having to be evaluated explicitly many times. The objective offers a limited intuitive interpretation which is difficult to explain to non-experts, and of limited use for engineers (Gal, 2016, Section 2.2.2). Perhaps more importantly, current α-divergence inference techniques require existing models and code-bases to be changed radically to perform inference in the Bayesian counterpart to these models. To implement a complex CNN structure with the inference and code of (Hernández-Lobato et al., 2016), for example, one would be required to re-implement many already-implemented software tools.\nIn this paper we propose a re-parametrisation of the induced α-divergence objectives, and by relying on some mild assumptions (justified below), derive a simple approximate inference technique which can easily be implemented with existing models. Further, we rely on the dropout approximate variational distribution and demonstrate how inference can be done in a practical way – requiring us to only change the loss of the NN, L(θ), and to perform multiple stochastic forward passes at training time. Precisely, given l(·, ·) some standard NN loss such as cross entropy or the Euclidean loss, and {f ω̂k(xn)}Kk=1 a set of K stochastic dropout network outputs on input xn\nwith randomly masked weights ω̂k, our proposed objective is:\nL(θ) = − 1 α ∑ n log-sum-exp [ −αl(yn, f ω̂k(xn)) ] + L2(θ)\nwith α a real number, θ the set of network weights to be optimised, and an L2 regulariser over θ. By selecting α = 1 this objective directly optimises the per-point predictive log-likelihood, while picking α → 0 would focus on increasing the training accuracy, recovering VI.\nSpecific choices of αwill result in improved uncertainty estimates (and accuracy) compared to VI in dropout BNNs, without slowing convergence time. We demonstrate this through a myriad of applications, including an assessment of fully connected NNs in regression and classification, and an assessment of Bayesian CNNs. Finally, we study the uncertainty estimates resulting from our approximate inference technique. We show that our models’ uncertainty increases on adversarial images generated from the MNIST dataset, suggesting that these lie outside of the training data distribution. This in practice allows us to tell-apart such adversarial images from non-adversarial images by examining epistemic model uncertainty."
  }, {
    "heading": "2. Background",
    "text": "We review background in Bayesian neural networks and approximate variational inference. In the next section we discuss α-divergences."
  }, {
    "heading": "2.1. Bayesian Neural Networks",
    "text": "Given training inputs X = {x1, . . . ,xN} and their corresponding outputs Y = {y1, . . . ,yN}, in parametric Bayesian regression we would like to infer a distribution over parameters ω of a function y = fω(x) that could have generated the outputs. Following the Bayesian approach, to find parameters that could have generated our data, we put some prior distribution over the space of parameters p0(ω). This distribution captures our prior belief as to which parameters are likely to have generated our outputs before observing any data. We further need to define a probability distribution over the outputs given the inputs p(y|x, ω). For classification tasks we assume a softmax likelihood,\np ( y|x, ω ) = Softmax (fω(x))\nor a Gaussian likelihood for regression. Given a dataset X,Y, we then look for the posterior distribution over the space of parameters: p(ω|X,Y). This distribution captures how likely the function parameters are, given our observed data. With it we can predict an output for a new input point x∗ by integrating\np(y∗|x∗,X,Y) = ∫ p(y∗|x∗, ω)p(ω|X,Y)dω. (1)\nOne way to define a distribution over a parametric set of functions is to place a prior distribution over a neural network’s weights ω = {Wi}Li=1, resulting in a Bayesian NN (MacKay, 1992; Neal, 1995). Given weight matrices Wi and bias vectors bi for layer i, we often place standard matrix Gaussian prior distributions over the weight matrices, p0(Wi) = N (Wi;0, I) and often assume a point estimate for the bias vectors for simplicity."
  }, {
    "heading": "2.2. Approximate Variational Inference in Bayesian Neural Networks",
    "text": "In approximate inference, we are interested in finding the distribution of weight matrices (parametrising our functions) that have generated our data. This is the posterior over the weights given our observables X,Y: p(ω|X,Y), which is not tractable in general. Existing approaches to approximate this posterior are through variational inference (as was done in Hinton & Van Camp (1993); Barber & Bishop (1998); Graves (2011); Blundell et al. (2015)). We need to define an approximating variational distribution qθ(ω) (parametrised by variational parameters θ), and then minimise w.r.t. θ the KL divergence (Kullback & Leibler, 1951; Kullback, 1959) between the approximating distribution and the full posterior:\nKL ( qθ(ω)||p(ω|X,Y) ) ∝ − ∫ qθ(ω) log p(Y|X, ω)dω + KL(qθ(ω)||p0(ω)) = − N∑ i=1 ∫ qθ(ω) log p(yi|fω(xi))dω + KL(qθ(ω)||p0(ω)),\nwhere A ∝ B is slightly abused here to denote equality up to an additive constant (w.r.t. variational parameters θ)."
  }, {
    "heading": "2.3. Dropout Approximate Inference",
    "text": "Given a (deterministic) neural network, stochastic regularisation techniques in the model (such as dropout (Hinton et al., 2012; Srivastava et al., 2014)) can be interpreted as variational Bayesian approximations in a Bayesian NN with the same network structure (Gal & Ghahramani, 2016b). This is because applying a stochastic regularisation technique is equivalent to multiplying the NN weight matrices Mi by some random noise i (with a new noise realisation for each data point). The resulting stochastic weight matrices Wi = iMi can be seen as draws from the approximate posterior over the BNN weights, replacing the deterministic NN’s weight matrices Mi. Our set of variational parameters is then the set of matrices θ = {Mi}Li=1. For example, dropout can be seen as an approximation to Bayesian NN inference with dropout approximating distributions, where the rows of the matrices Wi distribute according to a mixture of two Gaussians with small variances\nand the mean of one of the Gaussians fixed at zero. The uncertainty in the weights induces prediction uncertainty by marginalising over the approximate posterior using Monte Carlo integration:\np(y = c|x,X,Y) = ∫ p(y = c|x, ω)p(ω|X,Y)dω\n≈ ∫ p(y = c|x, ω)qθ(ω)dω\n≈ 1 K K∑ k=1 p(y = c|x, ω̂k)\nwith ω̂k ∼ qθ(ω), where qθ(ω) is the Dropout distribution (Gal, 2016). Given its popularity, we concentrate on the dropout stochastic regularisation technique throughout the rest of the paper, although any other stochastic regularisation technique could be used instead (such as multiplicative Gaussian noise (Srivastava et al., 2014) or dropConnect (Wan et al., 2013)).\nDropout VI is an example of practical approximate inference, but it also underestimates model uncertainty (Gal, 2016, Section 3.3.2). This is because minimising the KL divergence between q(ω) and p(ω|X,Y) penalises q(ω) for placing probability mass where p(ω|X,Y) has no mass, but does not penalise q(ω) for not placing probability mass at locations where p(ω|X,Y) does have mass. We next discuss α-divergences as an alternative to the VI objective."
  }, {
    "heading": "3. Black-box α-divergence minimisation",
    "text": "In this section we provide a brief review of the black box alpha (BB-α, Hernández-Lobato et al. (2016)) method upon which the main derivation in this paper is based. Consider approximating the following distribution:\np(ω) = 1\nZ p0(ω) ∏ n fn(ω).\nIn Bayesian neural networks context, these factors fn(ω) represent the likelihood terms p(yn|xn, ω), Z = p(Y|X), and the approximation target p(ω) is the exact posterior p(ω|X,Y). Popular methods of approximate inference include variational inference (VI) (Jordan et al., 1999) and expectation propagation (EP) (Minka, 2001), where these two algorithms are special cases of power EP (Minka, 2004) that minimises Amari’s α-divergence (Amari, 1985) Dα[p||q] in a local way:\nDα[p||q] = 1\nα(1− α)\n( 1− ∫ p(ω)αq(ω)1−αdω ) .\nWe provide details of α-divergences and local approximation methods in the appendix, and in the rest of the paper we consider three special cases in this rich family:\n1. Exclusive KL divergence: D0[p||q] = KL[q||p] = Eq [ log q(ω)\np(ω)\n] ;\n2. Hellinger distance: D0.5[p||q] = 4Hel2[q||p] = 2 ∫ (√ p(ω)− √ q(ω) )2 dω;\n3. Inclusive KL divergence: D1[p||q] = KL[p||q] = Ep [ log p(ω)\nq(ω)\n] .\nSince α = 0 is used in VI and α = 1.0 is used in EP, in later sections we will also refer to these alpha settings as the VI value, Hellinger value, and EP value, respectively.\nPower-EP, though providing a generic variational framework, does not scale with big data. It maintains approximating factors attached to every likelihood term fn(ω), resulting in space complexity O(N) for the posterior approximation which is clearly undesirable. The recently proposed stochastic EP (Li et al., 2015) and BB-α (HernándezLobato et al., 2016) inference methods reduce this memory overhead to O(1) by sharing these approximating factors. Moreover, optimisation in BB-α is done by descending the so called BB-α energy function, where Monte Carlo (MC) methods and automatic differentiation are also deployed to allow fast prototyping.\nBB-α has been successfully applied to Bayesian neural networks for regression, classification (Hernández-Lobato et al., 2016) and model-based reinforcement learning (Depeweg et al., 2016). They all found that using α 6= 0 often returns better approximations than the VI case. The reasons for the worse results of VI are two fold. From the perspective of inference, due to the zero-forcing behaviour of exclusive KL discussed before, VI often fits to a local mode of the exact posterior and is over-confident in prediction. On hyper-parameter learning point of view, as the variational lower-bound is used as a (biased) approximation to the maximum likelihood objective, the learned model could be biased towards over-simplified cases (Turner & Sahani, 2011). These problems could potentially be addressed by using α-divergences. For example, inclusive KL encourages the coverage of the support set (referred as mass-covering), and when used in local divergence minimisation (Minka, 2005), it can fit an approximation to a mode of p(ω) with better estimates of uncertainty. Moreover the BB-α energy provides a better approximation to the marginal likelihood as well, meaning that the learned model will be less biased and thus fitting the data distribution better (Li & Turner, 2016). Hellinger distance seems to provide a good balance between zero-forcing and masscovering, and empirically it has been found to achieve the best performance.\nGiven the success of α-divergence methods, it is a natural idea to extend these algorithms to other classes of approximations such as dropout. However this task is non-trivial. First, the original formulation of BB-α energy is an ad hoc adaptation of power-EP energy (see appendix), which applies to exponential family q distributions only. Second, the energy function offers a limited intuitive interpretation to non-experts, thus of limited use for practitioners. Third and most importantly, a naive implementation of BB-α using dropout would bring in a prohibitive computational burden. To see this, we first review the BB-α energy function in the general case (Li & Turner, 2016) given α 6= 0:\nLα(q) = − 1\nα ∑ n logEq\n[( fn(ω)p0(ω) 1 N\nq(ω) 1 N\n)α] . (2)\nOne could verify that this is the same energy function as presented in (Hernández-Lobato et al., 2016) by considering q an exponential family distribution. In practice (2) might be intractable, hence an MC approximation is introduced:\nLMCα (q) = − 1\nα ∑ n log 1 K ∑ k\n[( fn(ω̂k)p0(ω̂k) 1 N\nq(ω̂k) 1 N\n)α] (3)\nwith ω̂k ∼ q(ω). This is a biased approximation as the expectation in (2) is computed before taking the logarithm. But empirically Hernández-Lobato et al. (2016) showed that the bias introduced by the MC approximation is often dominated by the variance of the samples, meaning that the effect of the bias is negligible. When α → 0 it returns the variational free energy (the VI objective)\nL0(q) = LVFE(q) = KL[q||p0]− ∑ n Eq [log fn(ω)] , (4)\nand the corresponding MC approximation LMCVFE becomes an unbiased estimator of LVFE. Also LMCα → LMCVFE as the number of samples K → 1.\nThe original paper (Hernández-Lobato et al., 2016) proposed a naive implementation which directly evaluates the MC estimation (3) with samples ω̂k ∼ q(ω). However as discussed before, dropout implicitly samples different masked weight matrices ω̂ ∼ q for different data points. This indicates that the naive approach, when applied to dropout approximation, would gather all these samples for all M datapoints in a mini-batch (i.e. MK sets of neural network weight matrices in total), which brings prohibitive cost if the network is wide and deep. Interestingly, the minimisation of the variational free energy (α = 0) with the dropout approximation can be computed very efficiently. The main reason for this success is due to the additive structure of the variational free energy: no evaluation of q density is required if the “regulariser” KL[q||p0] can be computed/approximated efficiently. In the following section we\npropose an improved version of BB-α energy to allow applications with dropout and other flexible approximation structures."
  }, {
    "heading": "4. A New Reparameterisation of BB-α Energy",
    "text": "We propose a reparamterisation of the BB-α energy to reduce the computational overhead. First we denote q̃(ω) as a free-form “cavity distribution” (see appendix), and write the approximate posterior q as\nq(ω) = 1\nZq q̃(ω)\n( q̃(ω)\np0(ω)\n) α N−α\n, (5)\nwhere we assume Zq < +∞ is the normalising constant to ensure q a valid distribution. When α/N → 0, the unnormalised density in (5) converges to q̃(ω) for every ω, and Zq → 1 by the assumption of Zq < +∞ (Van Erven & Harremoës, 2014). Hence q → q̃ when α/N → 0, and this happens for example when we choose α → 0, or N → +∞ as well as when α grows sub-linearly to N . Now we rewrite the BB-alpha energy in terms of q̃:\nLα(q) = − 1\nα ∑ n log\n∫ ( 1\nZq q̃(ω)\n( q̃(ω)\np0(ω)\n) α N−α )1− αN p0(ω) α N fn(ω) αdω\n= − 1 α ∑ n (∫ q̃(ω)fn(ω) α − ( 1− α N ) logZq )\n= N\nα\n( 1− α\nN\n) log ∫ q̃(ω) ( q̃(ω)\np0(ω)\n) α N−α\ndω\n− 1 α ∑ n logEq̃ [fn(ω)α]\n= Rβ [q̃||p0]− 1\nα ∑ n logEq̃ [fn(ω)α] , β = N N − α ,\nwhere Rβ [q̃||p0] represents the Rényi divergence (Rényi (1961), see appendix) of order β. Furthermore, provided Rβ [q̃||p0] < +∞ (which holds when assuming Zq < +∞), we have Rβ [q̃||p0] → KL[q̃||p0] = KL[q||p0] as α N → 0. This means that for a constant α that scales sublinearly with N , in large data settings we can further approximate the BB-α energy as\nLα(q) ≈ L̃α(q) = KL[q||p0]− 1\nα ∑ n logEq [fn(ω)α] .\nNote that here we also use the fact that now q ≈ q̃. Critically, the proposed reparameterisation is continuous in α, and by taking α → 0 the variational free-energy (4) is recovered.\nGiven a loss function l(·, ·), e.g. l2 loss in regression or cross entropy in classification, we can define the (unnormalised) likelihood term fn(ω) ∝ p(yn|xn, ω) ∝\nexp[−l(yn, fω(xn))], e.g. see (LeCun et al., 2006)1. Swapping fn(ω) for this last expression, and approximating the expectation over q using Monte Carlo sampling, we obtain our proposed minimisation objective:\nL̃MCα (q) = KL[q||p0] + const (6)\n− 1 α ∑ n log-sum-exp[−αl(yn, f ω̂k(xn))]\nwith log-sum-exp being the log-sum-exp operator over K samples from the approximate posterior ω̂k ∼ q(ω). This objective function also approximates the marginal likelihood. Therefore, compared to the original formulation (2), the improved version (6) is considerably simpler (both to implement and to understand), has a similar form to standard objective functions used in deep learning research, yet remains an approximate Bayesian inference algorithm.\nTo gain some intuitive understanding of this objective, we observe what it reduces to for different α and K settings. By selecting α = 1 the per-point predictive log-likelihood logEq[p(yn|xn, ω)] is directly optimised. On the other hand, picking the VI value (α → 0) would focus on increasing the training accuracy Eq[log p(yn|xn, ω)]. The Hellinger value could be used to achieve a balance between reducing training error and improving predictive likelihood, which has been found to be desirable (HernándezLobato et al., 2016; Depeweg et al., 2016). Lastly, for K = 1 the log-sum-exp disappears, the α’s cancel out, and the original (stochastic) VI objective is recovered.\nIn summary, our proposal modifies the loss function by multiplying it by α and then performing log-sum-exp with a sum over multiple stochastic forward passes sampled from the BNN approximate posterior. The remaining KLdivergence term (between q and the prior p) can often be approximated. It can be viewed as a regulariser added to the objective function, and reduces to L2-norm regulariser for certain popular q choices (Gal, 2016)."
  }, {
    "heading": "4.1. Dropout BB-α",
    "text": "We now provide a concrete example where the approximate distribution is defined by dropout. With dropout VI, MC samples are used to approximate the expectation w.r.t. q, which in practice is implemented as performing stochastic forward passes through the dropout network – i.e. given an input x, the input is fed through the network and a new dropout mask is sampled and applied at each dropout layer. This gives a stochastic output – a sample from the dropout network on the input x. A similar approximation is used in our case as well, where to implement the MC sampling in eq. (6) we perform multiple stochastic forward passes\n1fn(ω) does not need to be a normalised density of yn unless one would like to optimise the associated hyper parameters.\nthrough the network.\nRecall the neural network fω(x) is parameterised by the variable ω. In classification, cross entropy is often used as the loss function l(y, fω(x)) = −yT logpω(x), where the label yn is a one-hot binary vector, and the network output pω(xn) = Softmax(fω(xn)) encodes the probability vector of class assignments. Applying the re-formulated BB-α energy (6) with a Bayesian equivalent of the network, we arrive at the objective function L̃MCα (q) = ∑ i pi||Mi||22 − 1 α ∑ n yTn log 1 K ∑ k (pω̂k(xn)) α\n= 1\nα ∑ n l\n( yn, 1\nK ∑ k pω̂k(xn) α ) + ∑ i L2(Mi)\nwith {pω̂k(xn)}Kk=1 being K stochastic network outputs on input xn, pi equals to one minus the dropout rate of the ith layer, and the L2 regularization terms coming from an approximation to the KL-divergence (Gal, 2016). I.e. we raise network probability outputs to the power α and average them as an input to the standard cross entropy loss. Taking α 6= 1 can be viewed as training the neural network with an adjusted “power” loss, regularized by an L2 norm. Implementing this induced loss with Keras (Chollet, 2015) is as simple as a few lines of Python. A code snippet is given in Figure 1, with more details in the appendix.\nIn regression problems, the loss function is defined as l(y, fω(x)) = τ2 ||y− f\nω(x)||22 and the likelihood term can be interpreted as y ∼ N (y; fω(x), τ−1I). Plugging this into the energy function returns the following objective\nL̃MCα (q) = − 1\nα ∑ n log-sum-exp [ −ατ 2 ||yn − f ω̂k(xn)||22 ] + ND\n2 log τ + ∑ i pi||Mi||22, (7)\nwith {f ω̂k(xn)}Kk=1 being K stochastic forward passes on input xn. Again, this is reminiscent of the l2 objective in standard deep learning, and can be implemented by simply passing the input through the dropout network multiple times, collecting the stochastic outputs, and feeding the set of outputs through our new BB-alpha loss function."
  }, {
    "heading": "5. Experiments",
    "text": "We test the reparameterised BB-α on Bayesian NNs with the dropout approximation. We assess the proposed inference in regression and classification tasks on standard benchmarking datasets, comparing different values of α. This last experiment leads us to propose a technique that could be used to identify adversarial image attacks. In the appendix we further provide a study of run time trade-off."
  }, {
    "heading": "5.1. Regression",
    "text": "The first experiment considers Bayesian neural network regression with approximate posterior induced by dropout. We use benchmark UCI datasets2 that have been tested in related literature. The model is a single-layer neural network with 50 ReLU units for all datasets except for Protein and Year, which use 100 units. We consider α ∈ {0.0, 0.5, 1.0} in order to examine the effect of masscovering/zero-forcing behaviour in dropout. MC approximation with K = 10 samples is also deployed to compute the energy function. Other initialisation settings are largely taken from (Li & Turner, 2016).\nWe summarise the test negative log-likelihood (LL) and RMSE with standard error (across different random splits, the lower the better) for selected datasets in Figure 2 and 3, respectively. The full results are provided in the appendix. Although optimal α may vary for different datasets, using non-VI values has significantly improved the test-LL performances, while remaining comparable in test error metric. In particular, α = 0.5 produced overall good results for both test LL and RMSE, which is consistent with previous findings. We also compare with a BNN with a Gaussian approximation (VI-G) (Li & Turner, 2016), a BNN with HMC, and a sparse Gaussian process model with 50 inducing points (Bui et al., 2016). In test-LL metric our best dropout model out-performs the Gaussian approximation method on almost all datasets, and for some datasets is on par with HMC which is the current gold standard for Bayesian neural works, and with the GP model that is known to be superior in regression."
  }, {
    "heading": "5.2. Classification",
    "text": "We further experiment with a classification task, comparing the accuracy of the various α values on the MNIST benchmark (LeCun & Cortes, 1998). We assessed a fully connect NN with 2 hidden layers and 100 units in each layer. We used dropout probability 0.5 and α ∈ {0, 0.5, 1}. Again, we use K = 10 samples at training time for all α values,\n2http://archive.ics.uci.edu/ml/datasets. html\nand Ktest = 100 samples at test time. We use weight decay 10−6, which is equivalent to prior lengthscale l2 = 0.1 (Gal & Ghahramani, 2016b). We repeat each experiment three times and plot mean and standard error. Test RMSE as well as test log likelihood are given in Figure 4. As can be seen, Hellinger value α = 0.5 gives best test RMSE, with test log likelihood matching that of the EP value α = 1. The VI value α = 0 under-performs according to both metrics.\nWe next assess a convolutional neural network model (CNN). For this experiment we use the standard CNN example given in (Chollet, 2015) with 32 convolution filters, 100 hidden units at the top layer, and dropout probability 0.5 before each fully-connected layer. Other settings are as before. Average test accuracy and test log likelihood are given in Figure 5. In this case, VI value α = 0 seems to supersede the EP value α = 1, and performs similarly to the Hellinger value α = 0.5 according to both metrics."
  }, {
    "heading": "5.3. Detecting Adversarial Examples",
    "text": "The third set of experiments considers adversarial attacks on dropout-trained Bayesian neural networks. We test the hypothesis that certain techniques for generating adversarial examples will give images that lie outside of the image\nmanifold, i.e. far from the data distribution (note though that there exist techniques that will guarantee the images staying near the data manifold, by minimising the perturbation used to construct the adversarial example). By assessing the BNN uncertainty, we should see increased uncertainty for adversarial images if they indeed lie outside of the training data distribution. The tested models are fully connected networks with 3 hidden layers of 1000 units trained using dropout rate 0.5 and different alpha values. These models are also compared to a benchmark MLP with the same architecture but trained by maximum likelihood. The adversarial examples are generated on MNIST test data that is normalised to be in the range [0, 1]. For the dropout trained networks we perform MC dropout at test time with Ktest = 10 MC samples.\nThe first attack in consideration is the Fast Gradient Sign (FGS) method (Goodfellow et al., 2014). This is an untargeted attack, which attempts to reduces the maximum value of the predicted class label probability\nxadv = x− η · sgn(∇x max y log p(y|x)).\nWe use the single gradient step FGS implemented in Cleverhans (Papernot et al., 2016) with the stepsize η varied\nbetween 0.0 and 0.5. The left panel in Figure 6 demonstrates the classification accuracy on adversarial examples, which shows that the dropout networks, especially the one trained with α = 1.0, are significantly more robust to adversarial attacks compared to the deterministic NN. For example, for η = 0.1 the adversarial samples still visually close to the original class, and the BNN trained with α = 0.0 achieves an accuracy level almost 3 times higher than the MLP and around 20% higher than the VI-trained version. More interestingly, the test data examples and adversarial images can be told-apart by investigating the uncertainty representation of the dropout models. In the right panel of Figure 6 we depict the predictive entropy computed on the neural network output probability vector, and show example corresponding adversarial images below the axis for each corresponding stepsize. Clearly the deterministic NN model produces over-confident predictions on adversarial samples, e.g. it predicts the wrong label very confidently even when the input is still visually close to digit “7” (η = 0.2). While dropout models, though producing wrong labels, are very uncertain about their predictions. This uncertainty keeps increasing as we move away from the data manifold. Hence the dropout networks are much more immunised from noise-corrupted inputs, as they can be detected using uncertainty estimates in this example.\nThe second attack we consider is a targeted version of FGS (Goodfellow et al., 2014; Carlini & Wagner, 2016), which maximises the predictive probability of a selected class instead. As an example, we fix class 0 as the target and apply the iterative gradient-base attack to all non-zero digits in test data. At step t, the adversarial output is computed as\nxtadv = x t−1 adv + η · sgn(∇x log p(ytarget|x t−1 adv )),\nwhere the stepsize η is fixed at 0.01 in this case. Results are presented in the left panel of Figure 7, and again dropout\ntrained models are more robust to this attack compared with the MLP. Similarly these adversarial examples could be detected by the Bayesian neural networks’ uncertainty, by examining the predictive entropy. By visually inspecting the generated adversarial examples in the right panel of Figure 7, it is clear that the MLP overconfidently classifies a digit 7 to class 0. On the other hand, the dropout models are still fairly uncertain about their predictions even after 40 gradient steps. More interestingly, running this iterative attack on dropout models produces a smooth interpolation between different digits, and when the model is confident on predicting the target class, the corresponding adversarial images are visually close to digit zero.\nThese initial results suggest that assessing the epistemic uncertainty of classification models can be used as a viable technique to identify adversarial examples. We would note though that we used this experiment to demonstrate our techniques’ uncertainty estimates, and much more research is needed to solve the difficulties faced with adversarial inputs."
  }, {
    "heading": "6. Conclusions",
    "text": "We presented a practical extension of the BB-alpha objective which allows us to use the technique with dropout approximating distributions. The technique often supersedes existing approximate inference techniques (even sparse Gaussian processes), and is easy to implement. A code snippet for our induced loss is given in the appendix."
  }, {
    "heading": "Acknowledgements",
    "text": "We thank Rich Turner, Nicolas Papernot, and the reviewers for comments. YL thanks the Schlumberger Foundation FFTF fellowship for supporting her PhD study."
  }],
  "year": 2017,
  "references": [{
    "title": "Differential-Geometrical Methods in Statistic",
    "authors": ["Amari", "Shun-ichi"],
    "year": 1985
  }, {
    "title": "Concrete problems in ai safety",
    "authors": ["Amodei", "Dario", "Olah", "Chris", "Steinhardt", "Jacob", "Christiano", "Paul", "Schulman", "John", "Mane", "Dan"],
    "venue": "arXiv preprint arXiv:1606.06565,",
    "year": 2016
  }, {
    "title": "Multi-task deep neural network to predict CpG methylation profiles from low-coverage sequencing data",
    "authors": ["C Angermueller", "O. Stegle"],
    "venue": "In NIPS MLCB workshop,",
    "year": 2015
  }, {
    "title": "Ensemble learning in Bayesian neural networks",
    "authors": ["Barber", "David", "Bishop", "Christopher M"],
    "venue": "NATO ASI SERIES F COMPUTER AND SYSTEMS SCIENCES,",
    "year": 1998
  }, {
    "title": "Weight uncertainty in neural network",
    "authors": ["Blundell", "Charles", "Cornebise", "Julien", "Kavukcuoglu", "Koray", "Wierstra", "Daan"],
    "venue": "In ICML,",
    "year": 2015
  }, {
    "title": "Deep gaussian processes for regression using approximate expectation propagation",
    "authors": ["Bui", "Thang D", "Hernández-Lobato", "Daniel", "Li", "Yingzhen", "José Miguel", "Turner", "Richard E"],
    "venue": "In Proceedings of The 33rd International Conference on Machine Learning (ICML),",
    "year": 2016
  }, {
    "title": "Towards evaluating the robustness of neural networks",
    "authors": ["Carlini", "Nicholas", "Wagner", "David"],
    "venue": "arXiv preprint arXiv:1608.04644,",
    "year": 2016
  }, {
    "title": "Transforming neural-net output levels to probability distributions",
    "authors": ["Denker", "John", "LeCun", "Yann"],
    "venue": "In Advances in Neural Information Processing Systems",
    "year": 1991
  }, {
    "title": "Learning and policy search in stochastic dynamical systems with bayesian neural networks",
    "authors": ["Depeweg", "Stefan", "Hernández-Lobato", "José Miguel", "Doshi-Velez", "Finale", "Udluft", "Steffen"],
    "venue": "arXiv preprint arXiv:1605.07127,",
    "year": 2016
  }, {
    "title": "Uncertainty in Deep Learning",
    "authors": ["Gal", "Yarin"],
    "venue": "PhD thesis, University of Cambridge,",
    "year": 2016
  }, {
    "title": "Bayesian convolutional neural networks with Bernoulli approximate variational inference",
    "authors": ["Gal", "Yarin", "Ghahramani", "Zoubin"],
    "venue": "ICLR workshop track,",
    "year": 2016
  }, {
    "title": "Dropout as a Bayesian approximation: Representing model uncertainty in deep learning",
    "authors": ["Gal", "Yarin", "Ghahramani", "Zoubin"],
    "year": 2016
  }, {
    "title": "Explaining and harnessing adversarial examples",
    "authors": ["Goodfellow", "Ian J", "Shlens", "Jonathon", "Szegedy", "Christian"],
    "venue": "arXiv preprint arXiv:1412.6572,",
    "year": 2014
  }, {
    "title": "Practical variational inference for neural networks",
    "authors": ["Graves", "Alex"],
    "venue": "In Advances in Neural Information Processing Systems,",
    "year": 2011
  }, {
    "title": "Neue begründung der theorie quadratischer formen von unendlichvielen veränderlichen",
    "authors": ["Hellinger", "Ernst"],
    "venue": "Journal für die reine und angewandte Mathematik,",
    "year": 1909
  }, {
    "title": "Probabilistic backpropagation for scalable learning of Bayesian neural networks",
    "authors": ["Hernandez-Lobato", "Jose Miguel", "Adams", "Ryan"],
    "venue": "In ICML,",
    "year": 2015
  }, {
    "title": "Black-box alpha divergence minimization",
    "authors": ["Hernández-Lobato", "José Miguel", "Li", "Yingzhen", "HernándezLobato", "Daniel", "Bui", "Thang", "Turner", "Richard E"],
    "venue": "In Proceedings of The 33rd International Conference on Machine Learning,",
    "year": 2016
  }, {
    "title": "Keeping the neural networks simple by minimizing the description length of the weights",
    "authors": ["Hinton", "Geoffrey E", "Van Camp", "Drew"],
    "venue": "In COLT,",
    "year": 1993
  }, {
    "title": "Improving neural networks by preventing co-adaptation of feature detectors",
    "authors": ["Hinton", "Geoffrey E", "Srivastava", "Nitish", "Krizhevsky", "Alex", "Sutskever", "Ilya", "Salakhutdinov", "Ruslan R"],
    "venue": "arXiv preprint arXiv:1207.0580,",
    "year": 2012
  }, {
    "title": "An introduction to variational methods for graphical models",
    "authors": ["Jordan", "Michael I", "Ghahramani", "Zoubin", "Jaakkola", "Tommi S", "Saul", "Lawrence K"],
    "venue": "Machine learning,",
    "year": 1999
  }, {
    "title": "Recurrent continuous translation models",
    "authors": ["Kalchbrenner", "Nal", "Blunsom", "Phil"],
    "venue": "In EMNLP,",
    "year": 2013
  }, {
    "title": "Modelling uncertainty in deep learning for camera relocalization",
    "authors": ["Kendall", "Alex", "Cipolla", "Roberto"],
    "venue": "IEEE International Conference on Robotics and Automation (ICRA),",
    "year": 2016
  }, {
    "title": "Bayesian segnet: Model uncertainty in deep convolutional encoder-decoder architectures for scene understanding",
    "authors": ["Kendall", "Alex", "Badrinarayanan", "Vijay", "Cipolla", "Roberto"],
    "venue": "arXiv preprint arXiv:1511.02680,",
    "year": 2015
  }, {
    "title": "Imagenet classification with deep convolutional neural networks. In Advances in neural information processing",
    "authors": ["Krizhevsky", "Alex", "Sutskever", "Ilya", "Hinton", "Geoffrey E"],
    "year": 2012
  }, {
    "title": "Information theory and statistics",
    "authors": ["Kullback", "Solomon"],
    "year": 1959
  }, {
    "title": "On information and sufficiency",
    "authors": ["Kullback", "Solomon", "Leibler", "Richard A"],
    "venue": "The annals of mathematical statistics,",
    "year": 1951
  }, {
    "title": "The mnist database of handwritten digits",
    "authors": ["LeCun", "Yann", "Cortes", "Corinna"],
    "year": 1998
  }, {
    "title": "Backpropagation applied to handwritten zip code recognition",
    "authors": ["LeCun", "Yann", "Boser", "Bernhard", "Denker", "John S", "Henderson", "Donnie", "Howard", "Richard E", "Hubbard", "Wayne", "Jackel", "Lawrence D"],
    "venue": "Neural Computation,",
    "year": 1989
  }, {
    "title": "A tutorial on energy-based learning",
    "authors": ["LeCun", "Yann", "Chopra", "Sumit", "Hadsell", "Raia", "M Ranzato", "F. Huang"],
    "venue": "Predicting structured data,",
    "year": 2006
  }, {
    "title": "Rényi divergence variational inference",
    "authors": ["Li", "Yingzhen", "Turner", "Richard E"],
    "venue": "In NIPS,",
    "year": 2016
  }, {
    "title": "Stochastic expectation propagation",
    "authors": ["Li", "Yingzhen", "Hernández-Lobato", "José Miguel", "Turner", "Richard E"],
    "venue": "In Advances in Neural Information Processing Systems (NIPS),",
    "year": 2015
  }, {
    "title": "A practical Bayesian framework for backpropagation networks",
    "authors": ["MacKay", "David JC"],
    "venue": "Neural Computation,",
    "year": 1992
  }, {
    "title": "Recurrent neural network based language model",
    "authors": ["Mikolov", "Tomáš", "Karafiát", "Martin", "Burget", "Lukáš", "Černockỳ", "Jan", "Khudanpur", "Sanjeev"],
    "venue": "In Eleventh Annual Conference of the International Speech Communication Association,",
    "year": 2010
  }, {
    "title": "Divergence measures and message passing",
    "authors": ["Minka", "Tom"],
    "venue": "Technical report, Microsoft Research,",
    "year": 2005
  }, {
    "title": "Expectation propagation for approximate Bayesian inference",
    "authors": ["T.P. Minka"],
    "venue": "In Conference on Uncertainty in Artificial Intelligence (UAI),",
    "year": 2001
  }, {
    "title": "Bayesian learning for neural networks",
    "authors": ["Neal", "Radford M"],
    "venue": "PhD thesis, University of Toronto,",
    "year": 1995
  }, {
    "title": "cleverhans v1.0.0: an adversarial machine learning library",
    "authors": ["Papernot", "Nicolas", "Goodfellow", "Ian", "Sheatsley", "Ryan", "Feinman", "Reuben", "McDaniel", "Patrick"],
    "venue": "arXiv preprint arXiv:1610.00768,",
    "year": 2016
  }, {
    "title": "On measures of entropy and information",
    "authors": ["Rényi", "Alfréd"],
    "venue": "Fourth Berkeley symposium on mathematical statistics and probability,",
    "year": 1961
  }, {
    "title": "Learning internal representations by error propagation",
    "authors": ["Rumelhart", "David E", "Hinton", "Geoffrey E", "Williams", "Ronald J"],
    "venue": "Technical report, DTIC Document,",
    "year": 1985
  }, {
    "title": "Edinburgh neural machine translation systems for wmt 16",
    "authors": ["Sennrich", "Rico", "Haddow", "Barry", "Birch", "Alexandra"],
    "venue": "In Proceedings of the First Conference on Machine Translation,",
    "year": 2016
  }, {
    "title": "Dropout: A simple way to prevent neural networks from overfitting",
    "authors": ["Srivastava", "Nitish", "Hinton", "Geoffrey", "Krizhevsky", "Alex", "Sutskever", "Ilya", "Salakhutdinov", "Ruslan"],
    "venue": "The Journal of Machine Learning Research,",
    "year": 1929
  }, {
    "title": "LSTM neural networks for language modeling",
    "authors": ["Sundermeyer", "Martin", "Schlüter", "Ralf", "Ney", "Hermann"],
    "venue": "In INTERSPEECH,",
    "year": 2012
  }, {
    "title": "Sequence to sequence learning with neural networks",
    "authors": ["Sutskever", "Ilya", "Vinyals", "Oriol", "Le", "Quoc VV"],
    "venue": "In NIPS,",
    "year": 2014
  }, {
    "title": "Going deeper with convolutions",
    "authors": ["Szegedy", "Christian", "Liu", "Wei", "Jia", "Yangqing", "Sermanet", "Pierre", "Reed", "Scott", "Anguelov", "Dragomir", "Erhan", "Dumitru", "Vanhoucke", "Vincent", "Rabinovich", "Andrew"],
    "venue": "arXiv preprint arXiv:1409.4842,",
    "year": 2014
  }, {
    "title": "Two problems with variational expectation maximisation for time-series models. Inference and Estimation in Probabilistic Time-Series",
    "authors": ["RE Turner", "M. Sahani"],
    "year": 2011
  }, {
    "title": "Rényi divergence and Kullback-Leibler divergence",
    "authors": ["Van Erven", "Tim", "Harremoës", "Peter"],
    "venue": "Information Theory, IEEE Transactions on,",
    "year": 2014
  }, {
    "title": "Regularization of neural networks using dropconnect",
    "authors": ["L Wan", "M Zeiler", "S Zhang", "Y LeCun", "R. Fergus"],
    "venue": "In ICML-13,",
    "year": 2013
  }, {
    "title": "Fast predictive image registration",
    "authors": ["Yang", "Xiao", "Kwitt", "Roland", "Niethammer", "Marc"],
    "venue": "arXiv preprint arXiv:1607.02504,",
    "year": 2016
  }],
  "id": "SP:c37711212d217df50ad3490e67d8b36c17168877",
  "authors": [{
    "name": "Yingzhen Li",
    "affiliations": []
  }, {
    "name": "Yarin Gal",
    "affiliations": []
  }],
  "abstractText": "To obtain uncertainty estimates with real-world Bayesian deep learning models, practical inference approximations are needed. Dropout variational inference (VI) for example has been used for machine vision and medical applications, but VI can severely underestimates model uncertainty. Alpha-divergences are alternative divergences to VI’s KL objective, which are able to avoid VI’s uncertainty underestimation. But these are hard to use in practice: existing techniques can only use Gaussian approximating distributions, and require existing models to be changed radically, thus are of limited use for practitioners. We propose a re-parametrisation of the alpha-divergence objectives, deriving a simple inference technique which, together with dropout, can be easily implemented with existing models by simply changing the loss of the model. We demonstrate improved uncertainty estimates and accuracy compared to VI in dropout networks. We study our model’s epistemic uncertainty far away from the data using adversarial images, showing that these can be distinguished from non-adversarial images by examining our model’s uncertainty.",
  "title": "Dropout Inference in Bayesian Neural Networks with Alpha-divergences"
}