{
  "sections": [{
    "text": "Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing, pages 1722–1732, Lisbon, Portugal, 17-21 September 2015. c©2015 Association for Computational Linguistics.\nWe then test the performance of our model on part-of-speech tagging, named entity recognition, sentiment analysis, semantic relation identification and semantic relatedness, controlling for embedding dimensionality. We find that multi-sense embeddings do improve performance on some tasks (part-of-speech tagging, semantic relation identification, semantic relatedness) but not on others (named entity recognition, various forms of sentiment analysis). We discuss how these differences may be caused by the different role of word sense information in each of the tasks. The results highlight the importance of testing embedding models in real applications."
  }, {
    "heading": "1 Introduction",
    "text": "Enriching vector models of word meaning so they can represent multiple word senses per word type seems to offer the potential to improve many language understanding tasks. Most traditional embedding models associate each word\ntype with a single embedding (e.g., Bengio et al. (2006)). Thus the embedding for homonymous words like bank (with senses including ‘sloping land’ and ‘financial institution’) is forced to represent some uneasy central tendency between the various meanings. More fine-grained embeddings that represent more natural regions in semantic space could thus improve language understanding.\nEarly research pointed out that embeddings could model aspects of word sense (Kintsch, 2001) and recent research has proposed a number of models that represent each word type by different senses, each sense associated with a sensespecific embedding (Kintsch, 2001; Reisinger and Mooney, 2010; Neelakantan et al., 2014; Huang et al., 2012; Chen et al., 2014; Pina and Johansson, 2014; Wu and Giles, 2015; Liu et al., 2015). Such sense-specific embeddings have shown improved performance on simple artificial tasks like matching human word similarity judgments— WS353 (Rubenstein and Goodenough, 1965) or MC30 (Huang et al., 2012).\nIncorporating multisense word embeddings into general NLP tasks requires a pipelined architecture that addresses three major steps:\n1. Sense-specific representation learning: learn word sense specific embeddings from a large corpus, either unsupervised or aided by external resources like WordNet.\n2. Sense induction: given a text unit (a phrase, sentence, document, etc.), infer word senses for its tokens and associate them with corresponding sense-specific embeddings.\n3. Representation acquisition for phrases or sentences: learn representations for text units given sense-specific embeddings and pass them to machine learning classifiers.\nMost existing work on multi-sense embeddings emphasizes the first step by learning sense spe-\n1722\ncific embeddings, but does not explore the next two steps. These are important steps, however, since it isn’t clear how existing multi-sense embeddings can be incorporated into and benefit realworld NLU tasks.\nWe propose a pipelined architecture to address all three steps and apply it to a variety of NLP tasks: part-of-speech tagging, named entity recognition, sentiment analysis, semantic relation identification and semantic relatedness. We find:\n• Multi-sense embeddings give improved performance in some tasks (e.g., semantic similarity for words and sentences, semantic relation identification part-of-speech tagging), but not others (e.g., sentiment analysis, named entity extraction). In our analysis we offer some suggested explanations for these differences.\n• Some of the improvements for multi-sense embeddings are no longer visible when using more sophisticated neural models like LSTMs which have more flexibility in filtering away the informational chaff from the wheat.\n• It is important to carefully compare against embeddings of the same dimensionality.\n• When doing so, the most straightforward way to yield better performance on these tasks is just to increase embedding dimensionality.\nAfter describing related work, we introduce the new unsupervised sense-learning model in section 3, give our sense-induction algorithm in section 4, and then in following sections evaluate its performance for word similarity, and then various NLP tasks."
  }, {
    "heading": "2 Related Work",
    "text": "Neural embedding learning frameworks represent each token with a dense vector representation, optimized through predicting neighboring words or decomposing co-occurrence matrices (Bengio et al., 2006; Collobert and Weston, 2008; Mnih and Hinton, 2007; Mikolov et al., 2013; Mikolov et al., 2010; Pennington et al., 2014). Standard neural models represent each word with a single unique vector representation.\nRecent work has begun to augment the neural paradigm to address the multi-sense problem\nby associating each word with a series of sense specific embeddings. The central idea is to augment standard embedding learning models like skip-grams by disambiguating word senses based on local co-occurrence— e.g., the fruit “apple” tends to co-occur with the words “cider, tree, pear” while the homophonous IT company co-occurs with words like “iphone”, “Google” or “ipod”.\nFor example Reisinger and Mooney (2010) and Huang et al. (2012) propose ways to develop multiple embeddings per word type by pre-clustering the contexts of each token to create a fixed number of senses for each word, and then relabeling each word token with the clustered sense before learning embeddings. Neelakantan et al. (2014) extend these models by relaxing the assumption that each word must have a fixed number of senses and using a non-parametric model setting a threshold to decide when a new sense cluster should be split off; Liu et al. (2015) learns sense/topic specific embeddings by combining neural frameworks with LDA topic models. Wu and Giles (2015) disambiguate sense embeddings from Wikipedia by first clustering wiki documents. Chen et al. (2014) turn to external resources and used a predefined inventory of senses, building a distinct representation for every sense defined by the Wordnet dictionary. Other relevant work includes Qiu et al. (2014) who maintains separate representations for different part-ofspeech tags of the same word.\nRecent work is mostly evaluated on the relatively artificial task of matching human word similarity judgments."
  }, {
    "heading": "3 Learning Sense-Specific Embeddings",
    "text": "We propose to build on this previous literature, most specifically Huang et al. (2012) and Neelakantan et al. (2014), to develop an algorithm for learning multiple embeddings for each word type, each embedding corresponding to a distinct induced word sense. Such an algorithm should have the property that a word should be associated with a new sense vector just when evidence in the context (e.g., neighboring words, document-level co-occurrence statistics) suggests that it is sufficiently different from its early senses. Such a line of thinking naturally points to Chinese Restaurant Processes (CRP) (Blei et al., 2004; Teh et al., 2006) which have been applied in the related field of word sense induction. In the analogy of\nCRP, the current word could either sit at one of the existing tables (belonging to one of the existing senses) or choose a new table (a new sense). The decision is made by measuring semantic relatedness (based on local context information and global document information) and the number of customers already sitting at that table (the popularity of word senses). We propose such a model and show that it improves over the state of the art on a standard word similarity task."
  }, {
    "heading": "3.1 Chinese Restaurant Processes",
    "text": "We offer a brief overview of Chinese Restaurant Processes in this section; readers interested in more details can consult the original papers (Blei et al., 2004; Teh et al., 2006; Pitman, 1995). CRP can be viewed as a practical interpretation of Dirichlet Processes (Ferguson, 1973) for nonparametric clustering. In the analogy, each data point is compared to a customer in a restaurant. The restaurant has a series of tables t, each of which serves a dish dt. This dish can be viewed as the index of a cluster or a topic. The next customer w to enter would either choose an existing table, sharing the dish (cluster) already served or choosing a new cluster based on the following probability distribution:\nPr(tw = t) ∝ { NtP (w|dt) if t already exists γP (w|dnew) if t is new\n(1) where Nt denotes the number of customers already sitting at table t and P (w|dt) denotes the probability of assigning the current data point to cluster dt. γ is the hyper parameter controlling the preference for sitting at a new table.\nCRPs exhibit a useful “rich get richer” property because they take into account the popularity of different word senses. They are also more flexible than a simple threshold strategy for setting up new clusters, due to the robustness introduced by adopting the relative ratio of P (w|dt) and P (w|dnew)."
  }, {
    "heading": "3.2 Incorporating CRP into Distributed Language Models",
    "text": "We describe how we incorporate CRP into a standard distributed language model1.\n1We omit details about training standard distributed models; see Collobert and Weston (2008) and Mikolov et al. (2013).\nAs in the standard vector-space model, each token w is associated with a K dimensional global embedding ew. Additionally, it is associated with a set of senses Zw = {z1w, z2w, ..., z|Zw|w } where |Zw| denotes the number of senses discovered for word w. Each sense z is associated with a distinct sense-specific embedding ezw. When we encounter a new token w in the text, at the first stage, we maximize the probability of seeing the current token given its context as in standard language models using the global vector ew:\np(ew|eneigh) = F (ew, eneigh) (2)\nF() can take different forms in different learning paradigms, e.g., F = ∏ w′∈neigh p(ew, ew′) for skip-gram or F = p(ew, g(ew)) for SENNA (Collobert and Weston, 2008) and CBOW, where g(eneigh) denotes a function that projects the concatenation of neighboring vectors to a vector with the same dimension as ew for SENNA and the bag-or-word averaging for CBOW (Mikolov et al., 2013).\nUnlike traditional one-word-one-vector frameworks, eneigh includes sense information in addition to the global vectors for neighbors. eneigh can therefore be written as2.\neneigh = {en−k, , ..., en−1, en+1, ..., en−k} (3)\nNext we would use CRP to decide which sense the current occurrence corresponds to, or construct a new sense if it is a new meaning that we have not encountered before. Based on CRP, the probability that assigns the current occurrence to each of the discovered senses or a new sense is given by:\nPr(zw = z) ∝  Nwz P (e z w|context) if z already exists\nγP (w|znew) if z is new (4)\nwhere Nwz denotes the number of times already assigned to sense z for token w. P (ezw|context) denotes the probability that current occurrence belonging to (or generated by) sense z.\nThe algorithm for parameter update for the one token predicting procedure is illustrated in Figure\n2For models that predict succeeding words, sense labels for preceding words have already been decided. For models that predict words using both left and right contexts, the labels for right-context words have not been decided yet. In such cases we just use its global word vector to fill up the position.\n01: Input : Token sequence {wn, wneigh}. 02: Update parameters involved in Equ (3)(4) based on current word prediction. 03: Sample sense label z from CRP. 04: If a new sense label z is sampled: 05: - add z to Zwn 06: - ezwn = argmax p(wn|zm) 07: else: update parameters involved based on sampled sense label z.\nFigure 1: Incorporating CRP into Neural Language Models.\n1: Line 2 shows parameter updating through predicting the occurrence of current token. Lines 4-6 illustrate the situation when a new word sense is detected, in which case we would add the newly detected sense z into Zwn . The vector representation ezw for the newly detected sense would be obtained by maximizing the function p(ezw|context).\nAs we can see, the model performs word-sense clustering and embedding learning jointly, each one affecting the other. The prediction of the global vector of the current token (line2) is based on both the global and sense-specific embeddings of its neighbors, as will be updated through predicting the current token. Similarly, once the sense label is decided (line7), the model will adjust the embeddings for neighboring words, both global word vectors and sense-specific vectors.\nTraining We train embeddings using Gigaword5 + Wikipedia2014. The training approach is implemented using skip-grams (SG) (Mikolov et al., 2013). We induced senses for the top 200,000 most frequent words (and used a unified “unknown” token for other less-frequent tokens). The window size is set to 11. We iterate three times over the corpus."
  }, {
    "heading": "4 Obtaining Word Representations for NLU tasks",
    "text": "Next we describe how we decide sense labels for tokens in context. The scenario is treated as a inference procedure for sense labels where all global word embeddings and sense-specific embeddings are kept fixed.\nGiven a document or a sentence, we have an objective function with respect to sense labels by multiplying Eq.2 over each containing token.\nComputing the global optimum sense labeling— in which every word gets an optimal sense label— requires searching over the space of all senses for all words, which can be expensive. We therefore chose two simplified heuristic approaches:\n• Greedy Search: Assign each token the locally optimum sense label and represent the current token with the embedding associated with that sense.\n• Expectation: Compute the probability of each possible sense for the current word, and represent the word with the expectation vector:\n~ew = ∑ z∈Zw p(w|z, context) · ezw"
  }, {
    "heading": "5 Word Similarity Evaluation",
    "text": "We evaluate our embeddings by comparing with other multi-sense embeddings on the standard artificial task for matching human word similarity judgments.\nEarly work used similarity datasets like WS353 (Finkelstein et al., 2001) or RG (Rubenstein and Goodenough, 1965), whose context-free nature makes them a poor evaluation. We therefore adopt Stanford’s Contextual Word Similarities (SCWS) (Huang et al., 2012), in which human judgments are associated with pairs of words in context. Thus for example “bank” in the context of “river bank” would have low relatedness with “deficit” in the context “financial deficit”.\nWe first use the Greedy or Expectation strategies to obtain word vectors for tokens given their context. These vectors are then used as input to get the value of cosine similarity between two words.\nPerformances are reported in Table 1. Consistent with earlier work (e.g.., Neelakantan et al. (2014)), we find that multi-sense embeddings result in better performance in the context-dependent SCWS task (SG+Greedy and SG+Expect are better than SG). As expected, performance is not as high when global level information is ignored when choosing word senses (SG+Greedy) as when it is included (SG+Expect), as neighboring words don’t provide sufficient information for word sense disambiguation.\nTo note, the proposed CRF models work a little better than earlier baselines, which gives some evidence that it is sufficiently strong to stand in for\nthis class of multi-sense models and serves as a promise for being extended to NLU tasks.\nVisualization Table 2 shows examples of semantically related words given the local context. Word embeddings for tokens are obtained by using the inferred sense labels from the Greedy model and are then used to search for nearest neighbors in the vector space based on cosine similarity. Like earlier models (e.g., Neelakantan et al. (2014))., the model can disambiguate different word senses (in examples like bank, rock and apple) based on their local context; although of course the model is also capable of dealing with polysemy—senses that are less distinct."
  }, {
    "heading": "6 Experiments on NLP Tasks",
    "text": "Having shown that multi-sense embeddings improve word similarity tasks, we turn to ask whether they improve real-world NLU tasks: POS tagging, NER tagging, sentiment analysis at the phrase and sentence level, semantic relationship identification and sentence-level semantic relatedness. For each task, we experimented on the following sets of embeddings, which are trained using the word2vec package on the same corpus:\n• Standard one-word-one-vector embeddings from skip-gram (50d).\n• Sense disambiguated embeddings from Section 3 and 4 using Greedy Search and Expectation (50d)\n• The concatenation of global word embeddings and sense-specific embeddings (100d).\n• Standard one-word-one-vector skip-gram embeddings with dimensionality doubled (100d) (100d is the correct corresponding\nbaseline since the concatenation above doubles the dimensionality of word vectors)\n• Embeddings with very high dimensionality (300d).\nAs far as possible we try to perform an appleto-apple comparison on these tasks, and our goal is an analytic one—to investigate how well semantic information can be encoded in multi-sense embeddings and how they can improve NLU performances—rather than an attempt to create state-of-the-art results. Thus for example, in tagging tasks (e.g., NER, POS), we follow the protocols in (Collobert et al., 2011) using the concatenation of neighboring embeddings as input features rather than treating embeddings as auxiliary features which are fed into a CRF model along with other manually developed features as in Pennington et al. (2014). Or for experiments on sentiment and other tasks where sentence level embeddings are required we only employ standard recurrent or recursive models for sentence embedding rather than models with sophisticated state-of-theart methods (e.g., Tai et al. (2015; Irsoy and Cardie (2014)).\nSignificance testing for comparing models is done via the bootstrap test (Efron and Tibshirani, 1994). Unless otherwise noted, significant testing is performed on one-word-one-vector embedding (50d) versus multi-sense embedding using Expectation inference (50d) and one-vector embedding (100d) versus Expectation (100d)."
  }, {
    "heading": "6.1 The Tasks",
    "text": "Named Entity Recognition We use the CoNLL-2003 English benchmark for training, and test on the CoNLL-2003 test data. We follow the protocols in Collobert et al. (2011), using the concatenation of neighboring embeddings as input to a multi-layer neural model. We employ a five-layer neural architecture, comprised of an input layer, three convolutional layers with rectifier linear activation function and a softmax output layer. Training is done by gradient descent with minibatches where each sentence is treated as one batch. Learning rate, window size, number of hidden units of hidden layers, L2 regularizations and number of iterations are tuned on the development set.\nPart-of-Speech Tagging We use Sections 0–18 of the Wall Street Journal (WSJ) data for train-\ning, sections 19–21 for validation and sections 22–24 for testing. Similar to NER, we trained 5- layer neural models which take the concatenation of neighboring embeddings as inputs. We adopt a similar training and parameter tuning strategy as for POS tagging.\nSentence-level Sentiment Classification (Pang) The sentiment dataset of Pang et al. (2002) consists of movie reviews with a sentiment label for each sentence. We divide the original dataset into training(8101)/dev(500)/testing(2000). Word embeddings are initialized using the aforementioned types of embeddings and kept fixed in the learning procedure. Sentence level embeddings are achieved by using standard sequence recurrent neural models (Pearlmutter, 1989) (for details, please refer to Appendix section). The ob-\ntained embedding is then fed into a sigmoid classifier. Convolutional matrices at the word level are randomized from [-0.1, 0.1] and learned from sequence models. For training, we adopt AdaGrad with mini-batch. Parameters (i.e., L2 penalty, learning rate and mini batch size) are tuned on the development set. Due to space limitations, we omit details of recurrent models and training.\nSentiment Analysis–Stanford Treebank The Stanford Sentiment Treebank (Socher et al., 2013) contains gold-standard labels for each constituent in the parse tree (phrase level), thus allowing us to investigate a sentiment task at a finer granularity than the dataset in Pang et al. (2002) where labels are only found at the top of each sentence, The sentences in the treebank were split into a training(8544)/development(1101)/testing(2210) dataset.\nFollowing Socher et al. (2013) we obtained embeddings for tree nodes by using a recursive neural network model, where the embedding for parent node is obtained in a bottom-up fashion based on its children. The embeddings for each parse tree constituent are output to a softmax layer; see Socher et al. (2013).\nWe focus on the standard version of recursive neural models. Again we fixed word embeddings to each of the different embedding settings described above3. Similarly, we adopted AdaGrad\n3Note that this is different from the settings used in\nwith mini-batch. Parameters (i.e., L2 penalty, learning rate and mini batch size) are tuned on the development set. The number of iterations is treated as a variable to tune and parameters are harvested based on the best performance on the development set.\nSemantic Relationship Classification SemEval-2010 Task 8 (Hendrickx et al., 2009) is to find semantic relationships between pairs of nominals, e.g., in “My [apartment]e1 has a pretty large [kitchen]e2” classifying the relation between [apartment] and [kitchen] as component-whole. The dataset contains 9 ordered relationships, so the task is formalized as a 19-class classification problem, with directed relations treated as separate labels; see Hendrickx et al. (2009) for details.\nWe follow the recursive implementations defined in Socher et al. (2012). The path in the parse tree between the two nominals is retrieved, and the embedding is calculated based on recursive models and fed to a softmax classifier. For pure comparison purpose, we only use embeddings as features and do not explore other combination of artificial features. We adopt the same training strategy as for the sentiment task (e.g., Adagrad, minibatches, etc).\n(Socher et al., 2013) where word vectors were treated as parameters to optimize.\nSentence Semantic Relatedness We use the Sentences Involving Compositional Knowledge (SICK) dataset (Marelli et al., 2014) consisting of 9927 sentence pairs, split into training(4500)/development(500)/Testing(4927). Each sentence pair is associated with a gold-standard label ranging from 1 to 5, indicating how semantically related are the two sentences, from 1 (the two sentences are unrelated) to 5 (the two are very related).\nIn our setting, the similarity between two sentences is measured based on sentence-level embeddings. Let s1 and s2 denote two sentences and es1 and es2 denote corresponding embeddings. es1 and es2 are achieved through recurrent or recursive models (as illustrated in Appendix section). Again, word embeddings are obtained by simple table look up in one-word-one-vector settings and inferred using the Greedy or Expectation strategy in multi-sense settings. We adopt two different recurrent models for acquiring sentencelevel embeddings, a standard recurrent model and an LSTM model (Hochreiter and Schmidhuber, 1997).\nThe similarity score is predicted using a regression model built on the structure of a three layer convolutional model, with concatenation of es1 and es2 as input, and a regression score from 1- 5 as output. We adopted the same training strategy as described earlier. The trained model is then used to predict the relatedness score between two new sentences. Performance is measured using Pearson’s r between the predicted score and goldstandard labels."
  }, {
    "heading": "6.2 Discussions",
    "text": "Results for different tasks are represented in Tables 3-9.\nAt first glance it seems that multi-sense embeddings do indeed offer superior performance, since combining global vectors with sense-specific vectors introduces a consistent performance boost\nfor every task, when compared with the standard (50d) setting. But of course this is an unfair comparison; combining global vector with sensespecific vector doubles the dimensionality of vector to 100, making comparison with standard dimensionality (50d) unfair. When comparing with standard (100), the conclusions become more nuanced.\nFor every task, the +Expectation method has performances that often seem to be higher than the simple baseline (both for the 50d case or the 100d case). However, only some of these differences are significant.\n(1) Using multi-sense embeddings is significantly helpful for tasks like semantic relatedness (Tables 7-8). This is sensible since sentence meaning here is sensitive to the semantics of one particular word, which could vary with word sense and which would directly be reflected on the relatedness score.\n(2) By contrast, for sentiment analysis (Tables 5-6), much of the task depends on correctly identifying a few sentiment words like “good” or “bad”, whose senses tend to have similar sentiment values, and hence for which multi-sense embeddings offer little help. Multi-sense embeddings might promise to help sentiment analysis for some cases, like disambiguating the word “sound” in “safe and sound” versus “movie sound”. But we suspect that such cases are not common, explaining the nonsignificance of the improvement. Furthermore, the advantages of neural models in sentiment analysis tasks presumably lie in their capability to capture local composition like negation, and it’s not clear how helpful multi-sense embeddings are for that aspect.\n(3) Similarly, multi-sense embeddings help for POS tagging, but not for NER tagging (Table 3-4). Word senses have long been known to be related to POS tags. But the largest proportion of NER tags consists of the negative not-a-NER (“O”) tag, each of which is likely correctly labelable regard-\nless of whether senses are disambiguated or not (since presumably if a word is not a named entity, most of its senses are not named entities either).\n(4) As we apply more sophisticated models like LSTM to semantic relatedness tasks (in Table 9), the advantages caused by multi-sense embeddings disappears.\n(5) Doubling the number of dimensions is sufficient to increase performance as much as using the complex multi-sense algorithm. (Of course increasing vector dimensionality (to 300) boosts performance even more, although at the significant cost of exponentially increasing time complexity.) We do larger one-word-one-vector embeddings do so well? We suggest some hypotheses:\n• though information about distinct senses is encoded in one-word-one-vector embeddings in a mixed and less structured way, we suspect that the compositional nature of neural models is able to separate the informational chaff from the wheat and choose what information to take up, bridging the gap between single vector and multi-sense paradigms. For models like LSTMs which are better at doing such a job by using gates to control information flow, the difference between two paradigms should thus be further narrowed, as indeed we found.\n• The pipeline model proposed in the work requires sense-label inference (i.e., step 2). We proposed two strategies: GREEDY and EXPECTATION, and found that GREEDY models perform worse than EXPECTATION, as we might expect4. But even EXPECTATION can be viewed as another form of one-wordone-vector models, just one where different senses are entangled but weighted to emphasize the important ones. Again, this suggests another cause for the strong relative performance of larger-dimensioned one-word-onevector models."
  }, {
    "heading": "7 Conclusion",
    "text": "In this paper, we expand ongoing research into multi-sense embeddings by first proposing a new version based on Chinese restaurant processes that achieves state of the art performance on simple\n4GREEDY models work in a more aggressive way and likely make mistakes due to the non-global-optimum nature and limited context information\nword similarity matching tasks. We then introduce a pipeline system for incorporating multisense embeddings into NLP applications, and examine multiple NLP tasks to see whether and when multi-sense embeddings can introduce performance boosts. Our results suggest that simply increasing the dimensionality of baseline skip-gram embeddings is sometimes sufficient to achieve the same performance wins that come from using multi-sense embeddings. That is, the most straightforward way to yield better performance on these tasks is just to increase embedding dimensionality.\nOur results come with some caveats. In particular, our conclusions are based on the pipelined system that we introduce, and other multi-sense embedding systems (e.g., a more advanced sense learning model or a better sense label model or a completely different pipeline system) may find stronger effects of multi-sense models. Nonetheless we do consistently find improvements for multi-sense embeddings in some tasks (part-ofspeech tagging and semantic relation identification), suggesting the benefits of our multi-sense models and those of others. Perhaps the most important implication of our results may be the evidence they provide for the importance of going beyond simple human-matching tasks, and testing embedding models by using them as components in real NLP applications."
  }, {
    "heading": "8 Appendix",
    "text": "In sentiment classification and sentence semantic relatedness tasks, classification models require embeddings that represent the input at a sentence or phrase level. We adopt recurrent networks (standard ones or LSTMs) and recursive networks in order to map a sequence of tokens with various length to a vector representation.\nRecurrent Networks A recurrent network successively takes wordwt at step t, combines its vector representation et with the previously built hidden vector ht−1 from time t− 1, calculates the resulting current embedding ht, and passes it to the next step. The embedding ht for the current time t is thus:\nht = tanh(W · ht−1 + V · et) (5) whereW and V denote compositional matrices. If Ns denote the length of the sequence, hNs represents the whole sequence S.\nRecursive Networks Standard recursive models work in a similar way by working on neighboring words by parse tree order rather than sequence order. They compute the representation for each parent node based on its immediate children recursively in a bottom-up fashion until reaching the root of the tree. For a given node η in the tree and its left child ηleft (with representation eleft) and right child ηright (with representation eright), the standard recursive network calculates eη:\neη = tanh(W · eηleft + V · eηright) (6)\nLong Short Term Memory (LSTM) LSTM models (Hochreiter and Schmidhuber, 1997) are defined as follows: given a sequence of inputs X = {x1, x2, ..., xnX}, an LSTM associates each timestep with an input, memory and output gate, respectively denoted as it, ft and ot. We notationally disambiguate e and h, where et denote the vector for an individual text unit (e.g., word or sentence) at time step t while ht denotes the vector computed by the LSTM model at time t by combining et and ht−1. σ denotes the sigmoid function. W ∈ R4K×2K . The vector representation ht for each time-step t is given by:\n[ it ft ot lt ] = [ σ σ σ tanh ] W · [ ht−1 et ] (7)\nct = ft · ct−1 + it · lt (8) hst = ot · ct (9)"
  }, {
    "heading": "9 Acknowledgments",
    "text": "We would like to thank Sam Bowman, Ignacio Cases, Kevin Gu, Gabor Angeli, Sida Wang, Percy Liang and other members of the Stanford NLP group, as well as anonymous reviewers for their helpful advice on various aspects of this work. We gratefully acknowledge the support of the NSF via award IIS-1514268, the Defense Advanced Research Projects Agency (DARPA) Deep Exploration and Filtering of Text (DEFT) Program under Air Force Research Laboratory (AFRL) contract no. FA8750-13-2-0040. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of NSF, DARPA, AFRL, or the US government."
  }],
  "year": 2015,
  "references": [{
    "title": "Neural probabilistic language models",
    "authors": ["Yoshua Bengio", "Holger Schwenk", "Jean-Sébastien Senécal", "Fréderic Morin", "Jean-Luc Gauvain."],
    "venue": "Innovations in Machine Learning, pages 137–186. Springer.",
    "year": 2006
  }, {
    "title": "Hierarchical topic models and the nested chinese restaurant process",
    "authors": ["David M. Blei", "Thomas L. Griffiths", "Michael I. Jordan", "Joshua B. Tenenbaum."],
    "venue": "Advances in neural information processing systems,",
    "year": 2004
  }, {
    "title": "A unified model for word sense representation and disambiguation",
    "authors": ["Xinxiong Chen", "Zhiyuan Liu", "Maosong Sun."],
    "venue": "Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 1025–1035.",
    "year": 2014
  }, {
    "title": "A unified architecture for natural language processing: Deep neural networks with multitask learning",
    "authors": ["Ronan Collobert", "Jason Weston."],
    "venue": "Proceedings of the 25th international conference on Machine learning, pages 160–167. ACM.",
    "year": 2008
  }, {
    "title": "Natural language processing (almost) from scratch",
    "authors": ["Ronan Collobert", "Jason Weston", "Léon Bottou", "Michael Karlen", "Koray Kavukcuoglu", "Pavel Kuksa."],
    "venue": "The Journal of Machine Learning Research, 12:2493–2537.",
    "year": 2011
  }, {
    "title": "An introduction to the bootstrap",
    "authors": ["Bradley Efron", "Robert J Tibshirani."],
    "venue": "CRC press.",
    "year": 1994
  }, {
    "title": "A bayesian analysis of some nonparametric problems",
    "authors": ["Thomas S Ferguson."],
    "venue": "The annals of statistics, pages 209–230.",
    "year": 1973
  }, {
    "title": "Placing search in context: The concept revisited",
    "authors": ["Lev Finkelstein", "Evgeniy Gabrilovich", "Yossi Matias", "Ehud Rivlin", "Zach Solan", "Gadi Wolfman", "Eytan Ruppin."],
    "venue": "Proceedings of the 10th international conference on World Wide Web, pages 406–",
    "year": 2001
  }, {
    "title": "Semeval-2010 task 8: Multi-way classification of semantic relations",
    "authors": ["Iris Hendrickx", "Su Nam Kim", "Zornitsa Kozareva", "Preslav Nakov", "Diarmuid Ó Séaghdha", "Sebastian Padó", "Marco Pennacchiotti", "Lorenza Romano", "Stan Szpakowicz"],
    "year": 2009
  }, {
    "title": "Long short-term memory",
    "authors": ["Sepp Hochreiter", "Jürgen Schmidhuber."],
    "venue": "Neural computation, 9(8):1735–1780.",
    "year": 1997
  }, {
    "title": "Improving word representations via global context and multiple word prototypes",
    "authors": ["Eric H Huang", "Richard Socher", "Christopher D Manning", "Andrew Y Ng."],
    "venue": "Proceedings of the 50th Annual Meeting of the Association for Computational Linguis-",
    "year": 2012
  }, {
    "title": "Deep recursive neural networks for compositionality in language",
    "authors": ["Ozan Irsoy", "Claire Cardie."],
    "venue": "Advances in Neural Information Processing Systems, pages 2096–2104.",
    "year": 2014
  }, {
    "title": "Predication",
    "authors": ["Walter Kintsch."],
    "venue": "Cognitive Science, 25(2):173–202.",
    "year": 2001
  }, {
    "title": "Topical word embeddings",
    "authors": ["Yang Liu", "Zhiyuan Liu", "Tat-Seng Chua", "Maosong Sun."],
    "venue": "TwentyNinth AAAI Conference on Artificial Intelligence.",
    "year": 2015
  }, {
    "title": "Semeval-2014 task 1: Evaluation of compositional distributional semantic models on full sentences through semantic relatedness and textual",
    "authors": ["Marco Marelli", "Luisa Bentivogli", "Marco Baroni", "Raffaella Bernardi", "Stefano Menini", "Roberto Zamparelli"],
    "year": 2014
  }, {
    "title": "Recurrent neural network based language model",
    "authors": ["Tomas Mikolov", "Martin Karafiát", "Lukas Burget", "Jan Cernockỳ", "Sanjeev Khudanpur."],
    "venue": "INTERSPEECH, pages 1045–1048.",
    "year": 2010
  }, {
    "title": "Efficient estimation of word representations in vector space",
    "authors": ["Tomas Mikolov", "Kai Chen", "Greg Corrado", "Jeffrey Dean."],
    "venue": "arXiv preprint arXiv:1301.3781.",
    "year": 2013
  }, {
    "title": "Three new graphical models for statistical language modelling",
    "authors": ["Andriy Mnih", "Geoffrey Hinton."],
    "venue": "Proceedings of the 24th international conference on Machine learning, pages 641–648. ACM.",
    "year": 2007
  }, {
    "title": "Efficient nonparametric estimation of multiple embeddings per word in vector space",
    "authors": ["Arvind Neelakantan", "Jeevan Shankar", "Alexandre Passos", "Andrew McCallum."],
    "venue": "Proceedings of EMNLP.",
    "year": 2014
  }, {
    "title": "Thumbs up?: Sentiment classification using machine learning techniques",
    "authors": ["Bo Pang", "Lillian Lee", "Shivakumar Vaithyanathan."],
    "venue": "Proceedings of the ACL-02 conference on Empirical methods in natural language processing-Volume 10, pages 79–86. As-",
    "year": 2002
  }, {
    "title": "Learning state space trajectories in recurrent neural networks",
    "authors": ["Barak A Pearlmutter."],
    "venue": "Neural Computation, 1(2):263–269.",
    "year": 1989
  }, {
    "title": "Glove: Global vectors for word representation",
    "authors": ["Jeffrey Pennington", "Richard Socher", "Christopher D Manning."],
    "venue": "Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 1532–1543.",
    "year": 2014
  }, {
    "title": "A simple and efficient method to generate word sense representations",
    "authors": ["Luis Nieto Pina", "Richard Johansson."],
    "venue": "arXiv preprint arXiv:1412.6045.",
    "year": 2014
  }, {
    "title": "Exchangeable and partially exchangeable random partitions",
    "authors": ["Jim Pitman."],
    "venue": "Probability theory and related fields, 102(2):145–158.",
    "year": 1995
  }, {
    "title": "Learning word representation considering proximity and ambiguity",
    "authors": ["Lin Qiu", "Yong Cao", "Zaiqing Nie", "Yong Rui."],
    "venue": "Twenty-Eighth AAAI Conference on Artificial Intelligence.",
    "year": 2014
  }, {
    "title": "Multi-prototype vector-space models of word meaning",
    "authors": ["Joseph Reisinger", "Raymond J Mooney."],
    "venue": "NAACL.",
    "year": 2010
  }, {
    "title": "Contextual correlates of synonymy",
    "authors": ["Herbert Rubenstein", "John B Goodenough."],
    "venue": "Communications of the ACM, 8(10):627–633.",
    "year": 1965
  }, {
    "title": "Semantic compositionality through recursive matrix-vector spaces",
    "authors": ["Richard Socher", "Brody Huval", "Christopher D Manning", "Andrew Y Ng."],
    "venue": "Proceedings of the 2012 Joint Conference on Empirical Methods in Natural Language Processing and",
    "year": 2012
  }, {
    "title": "Recursive deep models for semantic compositionality over a sentiment treebank",
    "authors": ["Richard Socher", "Alex Perelygin", "Jean Y Wu", "Jason Chuang", "Christopher D Manning", "Andrew Y Ng", "Christopher Potts."],
    "venue": "Proceedings of EMNLP.",
    "year": 2013
  }, {
    "title": "Improved semantic representations from tree-structured long short-term memory networks",
    "authors": ["Kai Sheng Tai", "Richard Socher", "Christopher D Manning."],
    "venue": "arXiv preprint arXiv:1503.00075.",
    "year": 2015
  }, {
    "title": "Hierarchical dirichlet processes",
    "authors": ["Yee Whye Teh", "Michael I. Jordan", "Matthew J. Beal", "David M. Blei."],
    "venue": "Journal of the american statistical association, 101(476).",
    "year": 2006
  }, {
    "title": "Sense-aware semantic analysis: A multi-prototype word representation model using wikipedia",
    "authors": ["Zhaohui Wu", "C. Lee Giles."],
    "venue": "Twenty-Ninth AAAI Conference on Artificial Intelligence.",
    "year": 2015
  }],
  "id": "SP:9dc9bfd38ff8cf39784af23c5fa1bdf6d44c1b5c",
  "authors": [{
    "name": "Jiwei Li",
    "affiliations": []
  }, {
    "name": "Dan Jurafsky",
    "affiliations": []
  }],
  "abstractText": "Learning a distinct representation for each sense of an ambiguous word could lead to more powerful and fine-grained models of vector-space representations. Yet while ‘multi-sense’ methods have been proposed and tested on artificial wordsimilarity tasks, we don’t know if they improve real natural language understanding tasks. In this paper we introduce a multisense embedding model based on Chinese Restaurant Processes that achieves state of the art performance on matching human word similarity judgments, and propose a pipelined architecture for incorporating multi-sense embeddings into language un-",
  "title": "Do Multi-Sense Embeddings Improve Natural Language Understanding?"
}