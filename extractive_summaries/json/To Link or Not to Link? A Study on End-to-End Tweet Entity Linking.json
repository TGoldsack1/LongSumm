{
  "sections": [{
    "text": "Proceedings of NAACL-HLT 2013, pages 1020–1030, Atlanta, Georgia, 9–14 June 2013. c©2013 Association for Computational Linguistics\nIn the current entity linking literature, mention detection and entity disambiguation are frequently cast as equally important but distinct problems. However, in our task, we find that mention detection is often the performance bottleneck. The reason is that messages on micro-blogs are short, noisy and informal texts with little context, and often contain phrases with ambiguous meanings.\nTo rigorously address the Twitter entity linking problem, we propose a structural SVM algorithm for entity linking that jointly optimizes mention detection and entity disambiguation as a single end-to-end task. By combining structural learning and a variety of firstorder, second-order, and context-sensitive features, our system is able to outperform existing state-of-the art entity linking systems by 15% F1."
  }, {
    "heading": "1 Introduction",
    "text": "Microblogging services, such as Twitter and Facebook, are today capturing the largest volume ever recorded of fine-grained discussions spanning a huge breadth of topics, from the mundane to the historic. The micro-blogging service Twitter reports that it alone captures over 340M short messages,\nor tweets, per day.1 From such micro-blogging services’ data streams, researchers have reported mining insights about a variety of domains, from election results (Tumasjan et al., 2010) and democracy movements (Starbird and Palen, 2012) to health issues and disease spreading (Paul and Dredze, 2011; Sadilek et al., 2012), as well as tracking product feedback and sentiment (Asur and Huberman, 2010).\nA critical step in mining information from a micro-blogging service, such as Twitter, is the identification of entities in tweets. In order to mine the relationship between drugs, symptoms and sideeffects, or track the popularity of politicians or sentiment about social issues, we must first be able to identify the topics and specific entities being discussed. The challenge is that messages on microblogs are short, noisy, and informal texts with little context, and often contain phrases with ambiguous meanings. For example, “one day” may be either a set phrase or a reference to a movie. Given such difficulties, current mining and analysis of microblogs lists limits its application to certain domains with easy-to-recognize, unambiguous entities in order to avoid noise in the extraction results.\nWe begin this paper with a thorough investigation of mention detection and entity disambiguation for social media, focused on the Twitter micro-blogging service. Mention detection is the task of extraction surface form candidates that can link to an entity in the domain of interest. Entity disambiguation is the task of linking an extracted mention to a specific definition or instance of an entity in a knowledge base.\n1http://blog.twitter.com/2012/03/twitter-turns-six.html\n1020\nWhile mention detection and entity disambiguation are frequently cast as equally important but distinct and separate problems, we find that mention detection is where today’s systems and our baseline techniques incur the most failures. Detecting the correct entity mention is a significant challenge given mis-capitalizations, incorrect grammar, and ambiguous phrases. In (Ritter et al., 2011), the authors report their system achieves 0.64 to 0.67 F1 on named entity segmentation results with 34K tokens of labeled examples. On the other hand, once the correct entity mention is detected, a trivial disambiguation that maps to the most popular entity2 will achieve 85% accuracy in our set.\nOur primary contribution in this paper is a recasting and merging of the tasks of mention detection and entity disambiguation into a single endto-end entity linking task. We achieve significant improvements by applying structural learning techniques to jointly optimize the detection and disambiguation of entities. Treating detection and disambiguation as a single task also enables us to apply a large set of new features, conventionally used only for disambiguation, to the initial detection of mentions. These features, derived from external knowledge bases, include entity popularity and inter-entity relations from external knowledge bases, and are not well utilized in current mention detection systems. For example, consider the following partial tweet:\n(1) The town is so, so good. And don’t worry Ben, we already forgave you for Gigli. Really.\nDetermining whether or not “The town” is a mention of a location or other specific entity based solely on lexical and syntactic features is challenging. Knowing “The Town” is the name of a recent movie helps, and we can we be more confident if we know that Ben Affleck is an actor in the movie, and Gigli is another of his movies.\nTo train and evaluate our system, we created three separate annotated data sets of approximately 500 tweets each. These data sets are hand annotated with entity links to Wikipedia. We evaluate our system by comparing its performance at detecting en-\n2What we mean here is “the most linked entity”. See Section 3 for details.\ntities to the performance of two state-of-the-art entity linking systems, Cucerzan (Cucerzan, 2007) and TagMe (Ferragina and Scaiella, 2010), and find that our system outperforms them significantly by 15% in absolute F1.\nThe rest of this paper describes related work, our structured learning approach to entity linking, and our experimental results."
  }, {
    "heading": "2 Related Work",
    "text": "Building an entity linking system requires solving two interrelated sub-problems: mention detection and entity disambiguation. The significant portion of recent work in the literature (Ratinov et al., 2011; Davis et al., 2012; Sil et al., 2012; Demartini et al., 2012; Wang et al., 2012; Han and Sun, 2011; Han et al., 2011) focuses solely upon the entity linking problem. The entity linking systems of these studies assume that entity mentions are provided by a separate mention detection system. In contrast, our study jointly identifies and disambiguates entity mentions within tweets (short text fragments).\nA subset of existing literature targets end-to-end linking (Cucerzan, 2007; Milne and Witten, 2008; Kulkarni et al., 2009; Ferragina and Scaiella, 2010; Han and Sun, 2011; Meij et al., 2012), but there are quite a few differences between our work and each of these systems. Some systems (Milne and Witten, 2008; Kulkarni et al., 2009; Han and Sun, 2011) heavily depend on Wikipedia text and might not work well in short and noisy tweets. Many systems (Mihalcea and Csomai, 2007; Cucerzan, 2007; Milne and Witten, 2008; Ferragina and Scaiella, 2010) treat mention detection and entity disambiguation as two different problems. (Meij et al., 2012) is the most related to our paper. While their system also considers mention detection and entity disambiguation together, they do not consider entityto-entity relationships and do not incorporate contextual words from tweets.\nAn area of work closely related to the mention detection problem is the Named Entity Recognition (NER) problem, the identification of textual phrases which belong to core categories (Person, Location, Organization). It is well-known that NER systems trained on well-written documents perform very poorly on short, noisy text, such as tweets (Rit-\nter et al., 2011). There have been a few recent studies proposing Twitter-specific NER systems (Li et al., 2012; Ritter et al., 2011)."
  }, {
    "heading": "3 Preliminaries",
    "text": "For performing entity linking on Twitter, we choose Wikipedia as our external knowledge base of entities.\nEntity We define an entity as a nonambiguous, terminal page (e.g., The Town (the film)) in Wikipedia (i.e., a Wikipedia page that is not a category, disambiguation, list, or redirect page). We define an anchor phrase (surface form) as the textual phrase (e.g., the town) which can potentially link to some entities. We define an entity mention as an anchor phrase and the context (“the town” in the example tweet in Section 1), where its semantic meaning umambiguously represents a specific entity. Note that an entity may be represented by multiple surface forms.\nWikipedia Lexicon Construction Following the assumptions used in most prior entity linking research, we assume that surface forms of entities can be found as anchor phrases in Wikipedia. In order to construct a Wikipedia lexicon, we first collect all anchors phases in Wikipedia. For each anchor phrase (surface form) s, we construct a lexicon entry by gathering the set of entities {e1, e2, . . . eK} that can be linked from s. We also collect the number of times anchor a links to the entity ei, d(s, ei). We define P (ei|s) = d(s, ei)/d(s), where d(s) represents the number of times s appears in Wikipedia. We refer e′ as the most linked entity for anchor s if e′ = arg maxe P (ei|s).\nCandidate Generation Given a tweet t, we extract all k-grams of size ≤ k. For each k-gram, we find all entities where this k-gram is an anchor phrase. If a k-gram is an anchor phrase for at least one entity, then the k-gram is a candidate entity mention. In general, we identify many candidate phrase per tweet; let U(t) = {c1, c2, . . .} denote the set of candidates in tweet t. We refer to s(c) as the surface form (e.g., the anchor phrase) of c. Compared to the anchor phrase, the candidate also carries the context and position information. Let E(ci) = {e1, e2, . . . ,NIL} denote the set of entities\nwhich candidate i may be linked to, plus the additional special token NIL. Note that the size of E(ci) is always at least 2.\nTask Definition First, our system generates candidate entity mentions, textual phrases which can possibly be entity mentions. Our system then performs filtering and optimization to process the list of candidates. For each candidate, our system links the candidate to a special NIL token or links the candidate to its corresponding entity in Wikipedia. More formally, given a tweet t and its candidate set U(t), the goal of the system is to predict yi ∈ E(ci),∀ci ∈ U(t).\nComparison to the TAC KBP Competition It is important to state that our definition of the entity linking problem differs significantly from the entity linking problem as defined by the TAC KBP competition (Ji et al., 2010; Ji et al., 2011). In the TAC, there is no true mention detection problem; every candidate in the TAC is an entity mention that represents an entity. Another difference is that the TAC allows for an entity mention to map to an entity not in the external knowledge base (Wikipedia); our system does not provide special handling of this case.\nComparison to Named Entity Recognition There are also important differences between our task and the canonical NER task. For example, NER systems identify common names, such as “Robert,” as entities. In our task, we only consider a prediction as a success if the system can determine which person in Wikipedia “Robert” is referring to. In other words, our definition of entities depends on the given knowledge base, rather than human judgment. Hence, it is difficult to make a fair system comparison of our system to NER systems."
  }, {
    "heading": "4 Entity Linking as Structural Learning",
    "text": "In our framework, we use structural learning as a tool to capture the relationship between entities. We define yi as the output for ci, where yi ∈ E(ci). Let T = |U(t)| and y = {y1, y2, . . . , yT }. The feature function for the whole assignment can be written as Φ(t, U(t),y). The score for the assignment y can be obtained as the linear product between the weight vector w and the feature vector. For an input example, the prediction can be found by solving the\ninference problem:\ny′ = arg max y wT Φ(t, U(t),y) (1)\nWe use a Structural SVM (SSVM) (Taskar et al., 2004; Tsochantaridis et al., 2005; Chang et al., 2010) as our learning algorithm. To train the weight vector w, we minimize the objective function of the SSVM\nmin w\n‖w‖2\n2 + C l∑ i=1 ξ2i (2)\nwhere l is the number of labeled examples and\nwT Φ(ti, c(ti),yi)\n≥∆(yi,y) + wT Φ(ti, c(ti),y)− ξi, ∀i,y\nWe denote yi as the gold assignment for xi and define ∆(yi,y) as the Hamming distance between two assignments yi and y."
  }, {
    "heading": "4.1 Features",
    "text": "Feature definitions are very important as they define the shapes of the structures. Our feature vector is defined as Φ(t, U(t),y) = ∑\ni φ(t, ci, yi)+ ∑ i<j φ(t, ci, yi, cj , yj)\nwhere ci and cj is the i-th and j-th candidates in U(t), respectively.\nFirst, we assign Φ(t, ci,NIL) to be a special bias feature. The corresponding weight value behaves as a threshold to cut-off mentions. Recall in our definition that yi = NIL represents that the candidate ci is not a mention.\nThe first order features for Φ(t, ci, e) are described as follows. In general, we can classify our features into two types: mention-specific features and entity-specific features. For a given candidate ci, mention-specific features only consider the surface form of ci and the tweet t. Entity-specific features also consider the knowledge base content of the entity e. Prior work in the entity linking literature has primarily focused on entity-specific features, as most prior work solves entity disambiguation with given mentions.\nBase and Capitalization Rate Our base features are from two resources. Let s(c) denote the surface form of candidate c. The link probability Pl(s(c)) and P (e|s(c)) features are extracted from Wikipedia. We explained P (e|s(c)) in Section 3. Link probability Pl(s(c)) is the probability that a phrase is used as an anchor in Wikipedia. We also add a third feature that captures normalized link count. Besides these three features, we also have a feature to indicate if a is a stop word, and a feature indicating the number of tokens in a. The view count and P (e|s) features are entity-specific, while the other three features are mention-specific.\nFor each phrase s(c), we also collect statistics about the probability that a phrase is capitalized in Wikipedia. We refer to this feature as the capitalization rate feature, Pc(s(c)).\nPopularity Feature We have access to 300GBs of Wikipedia page view counts, representing one months worth of page view information, we use this as popularity data.3 As mentioned in Section 3, we find that the most often linked Wikipedia articles might not be the most popular ones on Twitter. Using page view statistics helps our system correct this bias. We define another probability based on page view statistics Pv(ei|c) = v(ei)/( ∑ e∈E(c)/{NIL} v(e)), where v(e) represents the view count for the page e.\nContext Capitalization Our context capitalization features indicate if the current candidate, the word before, and the word after the candidate are capitalized.\nEntity Type and Tf-idf We use the procedure proposed in (Ratinov et al., 2011) to extract keyword phrases from categories for each Wikipedia page, and then build a rule-based system using keyword phrases to classify if each entity page belongs to one of the following entity types: Person, Location, Organization, TV Show, Book/Magazine and Movie.4 For a given candidate c and an entity e, the associated binary feature becomes active if the entity belongs to a specific entity type. There are six entity type features in our system.\n3http://dammit.lt/wikistats 4The entity type prediction accuracy of our rule-based sys-\ntem on the development set is around 95%.\nWe also include tf-idf features in our system. For each Wikipedia page, we collect the top 100 tf-idf words. We add one feature that is the dot product between the tf-idf word vector of e and the words of tweet t. We include a second feature that represents the average tf-idf score of all words that appear in both e and t.\nSecond-order features We include four very simple second-order features φ(t, ci, ei, cj , ej) to capture more complex relations between entities and candidates. The first feature is the Jaccard distance between two Wikipedia pages ei and ej . Let Γ(ei) denote the set of Wikipedia pages that contain a hyperlink to ei. We define the Jaccard distance between ei and ej as:\nJac(ei, ej) = |Γ(ei) ∩ Γ(ej)| |Γ(ei) ∪ Γ(ej)|\nThis feature has a similar effect as the normalized Google distance (Cilibrasi and Vitanyi, 2007), which has been used for many entity linking systems. Let us use the following shorthand: si = s(ci) and sj = s(cj). We have also included three features P (ei|si)P (ej |sj), Pc(si)Pc(sj) and Pl(si)Pl(sj) to increase the expressivity of our model."
  }, {
    "heading": "4.2 Mining Additional Contextual Words",
    "text": "Unlike mention detection systems used in other NLP tasks, there are no lexical features in our system. Lexical features are important as they can capture semantic meaning precisely. However, given that we do not have many labeled examples, lexical features can lead to overfitting. The diverse language\nin tweets also make it more difficult to use lexical features.\nOur solution for this problem is to use a very simple method to mine context words for different entities from a large, unlabeled tweet corpus. The algorithm works as follows:\n1. Train an end-to-end entity linking system and then apply it to a large, unlabeled tweet corpus\n2. Extract contextual words for each entity type based on the pseudo-labeled data.\n3. Train the entity linking system again with new contextual features.\nIn this paper, we only use the word before and the word after as our contextual word for a candidate. Note that while there are ambiguous phrases on the surface (e.g., “friends” can be a TV show or just a regular phrase), certain phrases are unambiguous (e.g., “CSI : Miami”). As contextual words are often shared within the same entity type (e.g. “watching” is likely to appear before a tv show), those words can potentially improve our final system.\nLet wi denote the i-th word in the tweet and ti denote the entity type for the i-th word.5 We use a very simple rule to select a set of left context words Q(R) for entity type R.\nQ(R) = {wi | P (ti+1 = R|wi) > r, d(wi) > z}\nwhere d(wi) represent the number of times the word wi appears in the unlabeled set. The first rule is to simply find a word which is more likely to be followed by an entity. The second rule filter outs noisy words (e.g., Twitter handles) in the unlabeled set. The right context words are also extracted in a similar way.\nTo train the second end-to-end entity linking system, we add one additional feature for the contextual words. For the feature vector Φ(t, ci, e), the context feature is active if the candidate ci is capitalized6 and the context words around ci belongs to Q(R), given R is the entity type for the entity e.\n5The tag ti belongs to the entity type R if our system links a candidate c to an entity with type R and c covers the word wi.\n6The word “watching” can be a TV show while most of the time it is not. These common makes this contextual feature noisy. We found that the context feature can only be reliably applied when the candidate is capitalized."
  }, {
    "heading": "4.3 Cohesiveness Score",
    "text": "There are several ways to consider entity-entity cohesiveness besides using the second-order features directly. In our model, we also consider a modified cohesiveness score proposed in (Ferragina and Scaiella, 2010). The idea behind the cohesiveness score is to estimate the correlations between different entities by using weighted Jaccard scores.7\nThere are two rounds in the procedure of computing the cohesiveness score. We first estimate approximately the most probable entity for each candidate given all the other candidates in the same tweet. In the second round, the cohesiveness score is then produced with respect to the most probable entity computed in the first round.\nMore formally, in the first round, we compute the relevance score for each candidate and entity pair:\nRel(e, c|t) = ∑ c′ 6=c ∑ e′∈E(c′) P (e ′|c′)Jac(e, e′)\n|U(t)| .\nThen, the cohesiveness score is computed by Scoh(e, c|t) = ∑ c′ 6=c Jac(e, ē(c ′))P (ē(c′)|c′)\n|U(t)| ,\nwhere the ē(c′) = arg maxe∈E(c′)Rel(e, c ′|t). We then put the cohesiveness score as a feature for each (e, c) pair. In practice, we found that the cohesiveness score in the model can significantly increase the disambiguation ability of the model without using the second-order information."
  }, {
    "heading": "4.4 Inference",
    "text": "In order to train and test the SSVM model, one needs to solve both the inference problem Eq. (3) and the loss-augmented inference problem. Without secondorder features, the inference and loss-augmented inference problems can be easily solved, given that each component can be solved independently by\ny′i = arg max y∈E(ci) wT Φ(t, ci, y) (3)\nWhile the inference problem can be solved independently, the training algorithm still considers the whole assignment together in the training procedure.\n7In our experiments, we only apply the cohesiveness score technique on candidates which pass the filtering procedure. See section 5 for more details for our filtering process.\nWith the second-order features, the inference problem becomes NP-hard. While one can resort to using integer linear programming to find the optimal solution, we choose not to do so. We instead use the beam search algorithm. Our beam search algorithm first arranges the candidates from left to right, and then solve the inference problems approximately."
  }, {
    "heading": "5 Experiments",
    "text": "We collected unlabeled Twitter data from two resources and then asked human annotators to label each tweet with a set of entities present. Our annotators ignored the following: duplicate entities per tweet, ambiguous entity mentions, and entities not present in Wikipedia. We next describe the two sets of Twitter data used as our training data and testing data. In addition to these two datasets, we also randomly sampled another 200 tweets as our development set.\nRitter We sampled 473 and 500 tweets8 from the data used in (Ritter et al., 2011) to be our training data and test data, respectively. We did not use any labels generated by (Ritter et al., 2011); our annotators completely re-annotated each tweets with its set of entities. We refer to the first set as Train and the second set as Test 1.\nEntertainment To check if our system has the ability to generalize across different domains, we sampled another 488 tweets related to entertainment entities. Our main focus was to extract tweets that contained TV shows, Movies, and\n8We originally labeled 1000 tweets but then found 27 repeated tweets in the dataset. Therefore, we remove those 27 tweets in the training set.\nBooks/Magazines. Identifying tweets from a specific domain is a research topic on its own, so we followed (Dalvi et al., 2012), and used a keyword matching method.9 After sampling this set of tweets, we asked our annotators to label the data in the same way as before (all entities are labeled, not just entertainment entities). We refer to this tweet set as Test 2.\nAfter sampling, all tweets were then normalized in the following way. First, we removed all retweet symbols (RT) and special symbols, as these are tokens that may easily confuse NER systems. We treated punctuation as separate tokens. Hashtags (#) play a very important role in tweets as they often carry critical information. We used the following web service10 to break the hashtags into tokens (e.g., the service will break “#TheCloneWars” into “the clone wars”) (Wang et al., 2011).\nThe statistics of our labeled examples are presented in Table 2. First, note that the average number of mentions per tweet is well below 1. In fact, many tweets are personal conversations and do not carry any entities that can be linked to Wikipedia. Still, many candidates are generated (such as “really”) for those tweets, given that those candidates can still potentially link to an entity (“really” could be a TV channel). Therefore, it is very important to include tweets without entities in the training set because we do not want our system to create unnecessary links to entities.\nAnother interesting thing to note is the percentage of entity mentions that disambiguate directly to their most often linked entities in Wikipedia. If we simply disambiguate each entity mention to its most linked entity in Wikipedia, we can already achieve 85% to 90% accuracy, if mention detection is perfectly accurate. However, mention detection is a difficult problem as only about 3% of candidates are valid entity mentions.\nIt is worthwhile to mention that, as per (Ferragina and Scaiella, 2010), for computational efficiency,\n9We use the following word list :“movie”, “tv”, “episode”, “film”, “actor”, “actors”, “actress”, “director”, “directors”, “movies”, “episodes”, “book”, “novel”, “reading”, “read”, “watch”, “watching”, “show”, “books”, “novels”, “movies”, “author” and “authors”.\n10http://web-ngram.research.microsoft. com/info/break.html\nwe apply several preprocessing steps before running our entity linking system. First, for each anchor in Wikipedia, we gather all entities it can disambiguate to and remove from that anchor’s entity set all entities that are linked less than 2% of the time. Second, we apply a modified filtering procedure similar to that proposed in (Ferragina and Scaiella, 2010) to filter the set of candidates per tweet.\nEvaluation Our annotated datasets contain entities from many Wikipedia categories. For evaluation, we primarily focus on entities belonging to a set of six core categories (Person, Location, Organization, TV Show, Book/Magazine, Movie). We believe it is necessary to focus upon core entities, rather than considering all possible entities in Wikipedia. Most common words in the English language have their own Wikpedia page, but most words are not important enough to be considered entities. In general, there is a large degree of subjectivity when comparing different entity linking datasets; different researchers have their own interpretation of what constitutes an entity. For example, we examined the annotation used in (Meij et al., 2012) and found it to be extremely lenient, when compared to our own beliefs of what is an entity. Therefore, we believe evaluating performance on restricted entity types is the only fair way to compare different endto-end entity linking systems.\nWe evaluate the performance of our system on a per-tweet basis, by comparing the set of annotated “gold” entities with the set of entities predicted by our system, and computing performance metrics (precision, recall, F1). We choose to evaluate our system on a per-tweet basis, as opposed to a perentity basis, because we wish to avoid the issue of matching segmentations. For example, it is quite common to observe multiple overlapping phrases in a tweet that should be linked to the same entity (e.g., “President Obama” and “Obama”). When evaluating our system, we compute performance metrics for both all entities and core entities.11\nParameters In our implementation, we fixed the regularization parameter C = 10. When beam-\n11To decide if an entity is a core entity or not, we use the following procedure. For the gold entities, the annotators also annotate type of the entity. We decide the entity type of the predicted entities using the procedure described in Section 4.1.\nsearch is used, the beam size is set to be 50, and we only consider the top 10 candidates for each candidate to speed the inference process. In the context word mining algorithm, r = 0.5% and z = 1000."
  }, {
    "heading": "5.1 Results",
    "text": "In the following, we analyze the contributions of each component in our system and compare our final systems to other existing end-to-end entity linking systems.\nSystem Comparison We compare our final system to other state-of-the-art systems in Table 3. CUCERZAN represents a modified implementation of the system in (Cucerzan, 2007). TagMe is an endto-end linking system that focuses on short texts, including tweets. Our system significantly outperforms these two systems in both precision and recall. Note that CUCERZAN’s system is a state-ofthe-art system on well-written documents with provided entity mentions. The system (Cucerzan, 2007) has been extended by the authors and won the TAC KBP competition in 2010 (Ji et al., 2010).\nThere are two possible reasons to explain why our system outperforms CUCERZAN. First, their mention detection is a carefully designed system targeted toward documents, not tweets. Their system has segmentation issues when applied to Twitter, as it relies heavily upon capitalization when identifying candidate entity mentions. Second, their system heavily depends on the fact that related entities should appear together within documents. However, given that tweets are very short, some of their most important features are not suitable for the Twitter domain. Our system outperforms TagMe because we use a more sophisticated machine learning approach, as compared to their system. TagMe links too many\nspurious entity mentions for common words. This is a result of their algorithm’s over-emphasis on entityentity co-occurrence features.\nFeature Study We study the contributions of each feature group in our system in Table 4. We summarize our discoveries as follows:\nFirst, we find collecting statistics from a large corpus helps the system significantly. In addition to P (e|s), we find that capitalization rate features offer around 3% to 4% F1 improvement in Test 1. Similarly, popularity features are also important, as it corrects bias existing in Wikipedia link statistics. Compared to lexical features, using statistical features offers a great advantage of reducing the need for large amounts of labeled data.\nWe also find entity related features (Popularity, Entity Type, Tf-idf) are crucial. Given that between 85% to 90% of our mentions should directly disambiguate to the most often linked entities, one might think entity-specific features are not important in our task. Interestingly, entity-specific features are among the most important features. The discovery confirms our hypothesis: it is critical to consider mention detection and entity disambiguation as a single problem, rather than as separate problems in a two staged approach used by many other entity linking systems. Note that capitalization rate and context capitalization features are mention-specific. Additionally, we find that mixing mention-specific features and entity-specific features results in a better model.\nMining Context Words We verify the effectiveness of adding contextual features that are extracted automatically from large unlabeled data. We apply our system (with all first-order features) on a set of 20 million unlabeled tweets we collected. Context words are then extracted using the simple rules described in Section 4. We list the top 10 words we extracted in Table 5. Due to space limitations, we only list the words for the Person and TV Show categories. The results are interesting as we are able to find common misspelled words and abbreviations used in Twitter. For example, we find that “watchn” means “watching” and “nw” means “now watching,” and they are usually words found before TV shows. We also find tweeters frequently use abbreviations for people’s jobs. For example, “wr” means “wide receiver” and “rb” means “running back.” When mined context is added into our system, the performance improves significantly (Table 6). We note\nthat extending context mining algorithms in a largescale, principled approach is an important next research topic.\nCapturing Entity-Entity Relationships In this paper, we use two methods to capture the relationship between entities: adding the cohesiveness score and using second order information. Until now, we only considered features that can be extracted from only one entity. Past research has shown that considering features that involve multiple entities can improve entity linking performance, given that related entities are more likely to appear together in a document. When these type of features are added, we need to perform beamsearch, as the exact inference procedure can be prohibitively expensive.\nAs displayed in Table 6, we find that either adding the cohesiveness score or using second order information can improve prediction. Using both methods improves the model even more. Comparing computation overhead, computing cohesiveness is significantly more cost-effective than using second-order information."
  }, {
    "heading": "6 Conclusion",
    "text": "In this paper, we propose a structural SVM method to address the problem of end-to-end entity linking on Twitter. By considering mention detection and entity disambiguation together, we build a end-toend entity linking system that outperforms current state-of-the-art systems.\nThere are plenty of research problems left to be addressed. Developing a better algorithm for mining contextual words is an important research topic. It would also be interesting to design a method that jointly learns NER models and entity linking models."
  }],
  "year": 2013,
  "references": [{
    "title": "Predicting the future with social media",
    "authors": ["S. Asur", "B.A. Huberman."],
    "venue": "arXiv preprint arXiv:1003.5699.",
    "year": 2010
  }, {
    "title": "Structured output learning with indirect supervision",
    "authors": ["M. Chang", "V. Srikumar", "D. Goldwasser", "D. Roth."],
    "venue": "Proceedings of the International Conference on Machine Learning (ICML).",
    "year": 2010
  }, {
    "title": "The google similarity distance",
    "authors": ["R.L. Cilibrasi", "P.M.B. Vitanyi."],
    "venue": "Knowledge and Data Engineering, IEEE Transactions on, 19(3):370–383.",
    "year": 2007
  }, {
    "title": "Large-scale named entity disambiguation based on Wikipedia data",
    "authors": ["S. Cucerzan."],
    "venue": "Proceedings of the 2007 Joint Conference of EMNLP-CoNLL, pages 708–716.",
    "year": 2007
  }, {
    "title": "Object matching in tweets with spatial models",
    "authors": ["N. Dalvi", "R. Kumar", "B. Pang."],
    "venue": "Proceedings of the fifth ACM international conference on Web search and data mining, WSDM ’12, pages 43–52, New York, NY, USA. ACM.",
    "year": 2012
  }, {
    "title": "Named entity disambiguation in streaming data",
    "authors": ["A. Davis", "A. Veloso", "A.S. da Silva", "W. Meira", "Jr.", "A.H.F. Laender."],
    "venue": "Proceedings of the Annual Meeting of the Association for Computational Linguistics (ACL), pages 815–824, Stroudsburg, PA, USA. Asso-",
    "year": 2012
  }, {
    "title": "Zencrowd: leveraging probabilistic reasoning and crowdsourcing techniques for large-scale entity linking",
    "authors": ["G. Demartini", "D.E. Difallah", "P. Cudré-Mauroux."],
    "venue": "The International World Wide Web Conference, pages 469–478, New York, NY, USA. ACM.",
    "year": 2012
  }, {
    "title": "Tagme: on-the-fly annotation of short text fragments (by wikipedia entities)",
    "authors": ["P. Ferragina", "U. Scaiella."],
    "venue": "Proceedings of the 19th ACM international conference on Information and knowledge management, CIKM ’10, pages 1625–1628, New York, NY,",
    "year": 2010
  }, {
    "title": "A generative entity-mention model for linking entities with knowledge base",
    "authors": ["X. Han", "L. Sun."],
    "venue": "Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies - Volume 1, HLT ’11, pages 945–",
    "year": 2011
  }, {
    "title": "Collective entity linking in web text: a graph-based method",
    "authors": ["X. Han", "L. Sun", "J. Zhao."],
    "venue": "Proceedings of the 34th international ACM SIGIR conference on Research and development in Information Retrieval, SIGIR ’11, pages 765–774, New York, NY,",
    "year": 2011
  }, {
    "title": "Overview of the tac 2010 knowledge base population track",
    "authors": ["H. Ji", "R. Grishman", "H.T. Dang", "K. Griffitt", "J. Ellis."],
    "venue": "Proceedings of the TAC 2010 Workshop.",
    "year": 2010
  }, {
    "title": "Overview of the tac 2011 knowledge base population track",
    "authors": ["H. Ji", "R. Grishman", "Dang."],
    "venue": "Proceedings of the TAC 2011 Workshop.",
    "year": 2011
  }, {
    "title": "Collective annotation of wikipedia entities in web text",
    "authors": ["S. Kulkarni", "A. Singh", "G. Ramakrishnan", "S. Chakrabarti."],
    "venue": "Proceedings of the 15th ACM SIGKDD international conference on Knowledge discovery and data mining, Proceedings",
    "year": 2009
  }, {
    "title": "Twiner: named entity recognition in targeted twitter stream",
    "authors": ["C. Li", "J. Weng", "Q. He", "Y. Yao", "A. Datta", "A. Sun", "B.-S. Lee."],
    "venue": "Proceedings of the 35th international ACM SIGIR conference on Research and development in information retrieval, Proceedings of In-",
    "year": 2012
  }, {
    "title": "Adding semantics to microblog posts",
    "authors": ["E. Meij", "W. Weerkamp", "M. de Rijke."],
    "venue": "Proceedings of the fifth ACM international conference on Web search and data mining, pages 563–572, New York, NY, USA. ACM.",
    "year": 2012
  }, {
    "title": "Wikify!: linking documents to encyclopedic knowledge",
    "authors": ["R. Mihalcea", "A. Csomai."],
    "venue": "Proceedings of ACM Conference on Information and Knowledge Management (CIKM), pages 233–242. ACM.",
    "year": 2007
  }, {
    "title": "Learning to link with wikipedia",
    "authors": ["D. Milne", "I.H. Witten."],
    "venue": "Proceedings of ACM Conference on Information and Knowledge Management (CIKM), pages 509–518, New York, NY, USA. ACM.",
    "year": 2008
  }, {
    "title": "You are what you tweet: Analyzing twitter for public health",
    "authors": ["M.J. Paul", "M. Dredze."],
    "venue": "Fifth International AAAI Conference on Weblogs and Social Media (ICWSM 2011).",
    "year": 2011
  }, {
    "title": "Local and global algorithms for disambiguation to wikipedia",
    "authors": ["L. Ratinov", "D. Roth", "D. Downey", "M. Anderson."],
    "venue": "Proceedings of the Annual Meeting of the Association for Computational Linguistics (ACL), pages 1375–1384, Stroudsburg, PA, USA. Association",
    "year": 2011
  }, {
    "title": "Named entity recognition in tweets: an experimental study",
    "authors": ["A. Ritter", "S. Clark", "Mausam", "O. Etzioni."],
    "venue": "Proceedings of the Conference on Empirical Methods for Natural Language Processing (EMNLP), pages 1524–1534, Stroudsburg, PA, USA. Association",
    "year": 2011
  }, {
    "title": "Modeling spread of disease from social interactions",
    "authors": ["A. Sadilek", "H. Kautz", "V. Silenzio."],
    "venue": "Sixth AAAI International Conference on Weblogs and Social Media (ICWSM).",
    "year": 2012
  }, {
    "title": "Linking named entities to any database",
    "authors": ["A. Sil", "E. Cronin", "P. Nie", "Y. Yang", "A.-M. Popescu", "A. Yates."],
    "venue": "Proceedings of the Conference on Empirical Methods for Natural Language Processing (EMNLP), pages 116–127, Stroudsburg, PA, USA. As-",
    "year": 2012
  }, {
    "title": "how) will the revolution be retweeted?: information diffusion and the 2011 egyptian uprising",
    "authors": ["K. Starbird", "L. Palen."],
    "venue": "Proceedings of the acm 2012 conference on computer supported cooperative work, pages 7–16. ACM.",
    "year": 2012
  }, {
    "title": "Max-margin markov networks",
    "authors": ["B. Taskar", "C. Guestrin", "D. Koller."],
    "venue": "The Conference on Advances in Neural Information Processing Systems (NIPS).",
    "year": 2004
  }, {
    "title": "Large margin methods for structured and interdependent output variables",
    "authors": ["I. Tsochantaridis", "T. Joachims", "T. Hofmann", "Y. Altun."],
    "venue": "Journal of Machine Learning Research, 6:1453–1484, September.",
    "year": 2005
  }, {
    "title": "Predicting elections with twitter: What 140 characters reveal about political sentiment",
    "authors": ["A. Tumasjan", "T.O. Sprenger", "P.G. Sandner", "I.M. Welpe."],
    "venue": "Proceedings of the fourth international aaai conference on weblogs and social media, pages 178–185.",
    "year": 2010
  }, {
    "title": "Web scale nlp: a case study on url word breaking",
    "authors": ["K. Wang", "C. Thrasher", "B.J.P. Hsu."],
    "venue": "The International World Wide Web Conference, pages 357–366. ACM.",
    "year": 2011
  }, {
    "title": "Targeted disambiguation of ad-hoc, homogeneous sets of named entities",
    "authors": ["C. Wang", "K. Chakrabarti", "T. Cheng", "S. Chaudhuri."],
    "venue": "The International World Wide Web Conference, pages 719–728, New York, NY, USA. ACM.",
    "year": 2012
  }],
  "id": "SP:64d8482fc94cc344429134e6c541579b59932b7c",
  "authors": [{
    "name": "Stephen Guo",
    "affiliations": []
  }, {
    "name": "Ming-Wei Chang",
    "affiliations": []
  }, {
    "name": "Emre Kıcıman",
    "affiliations": []
  }],
  "abstractText": "Information extraction from microblog posts is an important task, as today microblogs capture an unprecedented amount of information and provide a view into the pulse of the world. As the core component of information extraction, we consider the task of Twitter entity linking in this paper. In the current entity linking literature, mention detection and entity disambiguation are frequently cast as equally important but distinct problems. However, in our task, we find that mention detection is often the performance bottleneck. The reason is that messages on micro-blogs are short, noisy and informal texts with little context, and often contain phrases with ambiguous meanings. To rigorously address the Twitter entity linking problem, we propose a structural SVM algorithm for entity linking that jointly optimizes mention detection and entity disambiguation as a single end-to-end task. By combining structural learning and a variety of firstorder, second-order, and context-sensitive features, our system is able to outperform existing state-of-the art entity linking systems by 15% F1.",
  "title": "To Link or Not to Link? A Study on End-to-End Tweet Entity Linking"
}