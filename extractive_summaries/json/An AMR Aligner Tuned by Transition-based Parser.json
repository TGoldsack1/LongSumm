{
  "sections": [{
    "text": "Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing, pages 2422–2430 Brussels, Belgium, October 31 - November 4, 2018. c©2018 Association for Computational Linguistics\n2422\nAn AMR Aligner Tuned by Transition-based Parser\nYijia Liu, Wanxiang Che∗, Bo Zheng, Bing Qin, Ting Liu Research Center for Social Computing and Information Retrieval\nHarbin Institute of Technology, China {yjliu,car,bzheng,qinb,tliu}@ir.hit.edu.cn\nAbstract\nIn this paper, we propose a new rich resource enhanced AMR aligner which produces multiple alignments and a new transition system for AMR parsing along with its oracle parser. Our aligner is further tuned by our oracle parser via picking the alignment that leads to the highestscored achievable AMR graph. Experimental results show that our aligner outperforms the rule-based aligner in previous work by achieving higher alignment F1 score and consistently improving two open-sourced AMR parsers. Based on our aligner and transition system, we develop a transition-based AMR parser that parses a sentence into its AMR graph directly. An ensemble of our parsers with only words and POS tags as input leads to 68.4 Smatch F1 score, which outperforms the parser of Wang and Xue (2017)."
  }, {
    "heading": "1 Introduction",
    "text": "Abstract Meaning Representation (AMR) (Banarescu et al., 2013) is a semantic representation which encodes the meaning of a sentence in a rooted and directed graph, whose nodes are abstract semantic concepts and edges are semantic relations between concepts (see Figure 1 for an example). Parsing a sentence into its AMR graph has drawn a lot of research attention in recent years with a number of parsers being developed (Flanigan et al., 2014; Wang et al., 2015b; Pust et al., 2015; Artzi et al., 2015; Peng et al., 2015; Zhou et al., 2016; Goodman et al., 2016; Damonte et al., 2017; Ballesteros and Al-Onaizan, 2017; Foland and Martin, 2017; Konstas et al., 2017).\nThe nature of abstracting away the association between a concept and a span of words complicates the training of the AMR parser. A wordconcept aligner is required to derive such association from the sentence-AMR-graph pair and the\n∗* Email corresponding.\nalignment output is then used as reference to train the AMR parser. In previous works, such alignment is extracted by either greedily applying a set of heuristic rules (Flanigan et al., 2014) or adopting the unsupervised word alignment technique from machine translation (Pourdamghani et al., 2014; Wang and Xue, 2017).\nThe rule-based aligner – JAMR aligner proposed by Flanigan et al. (2014) is widely used in previous works thanks to its flexibility of incorporating additional linguistic resources like WordNet. However, achieving good alignments with the JAMR aligner still faces some difficult challenges. The first challenge is deriving an optimal alignment in ambiguous situations. Taking the sentence-AMR-graph pair in Figure 1 for example, the JAMR aligner doesn’t distinguish between the two “nuclear”s in the sentence and can yield sub-optimal alignment in which the first “nuclear” is aligned to the nucleus˜2 concept. The second challenge is recalling more semantically matched word-concept pair without harming the\nalignment precision. The JAMR aligner adopts a rule that aligns the word-concept pair which at least have a common longest prefix of 4 characters, but omitting the shorter cases like aligning the word “actions” to the concept act-01 and the semantically matched cases like aligning the word “example” to the concept exemplify-01. The final challenge which is faced by both the rule-based and unsupervised aligners is tuning the alignment with downstream parser learning. Previous works treated the alignment as a fixed input. Its quality is never evaluated and its alternatives are never explored. All these challenges make the JAMR aligner achieve only an alignment F1 score of about 90% and influence the performance of the trained AMR parsers.\nIn this paper, we propose a novel method to solve these challenges and improve the word-toconcept alignment, which further improves the AMR parsing performance. A rule-based aligner and a transition-based oracle AMR parser lie in the core of our method. For the aligner part, we incorporate rich semantic resources into the JAMR aligner to recall more word-concept pairs and cancel its greedily aligning process. This leads to multiple alignment outputs with higher recall but lower precision. For the parser part, we propose a new transition system that can parse the raw sentence into AMR graph directly. Meanwhile, a new oracle algorithm is proposed which produces the best achievable AMR graph from an alignment. Our aligner is tuned by our oracle parser by feeding the alignments to the oracle parser and picking the one which leads to the highest Smatch F1 score (Cai and Knight, 2013). The chosen alignment is used in downstream training of the AMR parser. Based on the newly proposed aligner and transition system, we develop a transition-based parser that directly parses a sentence into its AMR graph and it can be easily improved through ensemble thanks to its simplicity.\nWe conduct experiments on LDC2014T12 dataset.1 Both intrinsic and extrinsic evaluations are performed on our aligner. In the intrinsic evaluation, our aligner achieves an alignment F1 score of 95.2%. In the extrinsic evaluation, we replace the JAMR aligner with ours in two opensourced AMR parsers, which leads to consistent improvements on both parsers. We also evaluate our transition-based parser on the same dataset.\n1catalog.ldc.upenn.edu/ldc2014t12\nUsing both our aligner and ensemble, a score of 68.1 Smatch F1 is achieved without any additional resources, which is comparable to the parser of Wang and Xue (2017). With additional part-ofspeech (POS) tags, our ensemble parser achieves 68.4 Smatch F1 score and outperforms that of Wang and Xue (2017).\nThe contributions of this paper come in two folds:\n• We propose a new AMR aligner (§3) which recalls more semantically matched pairs and produces multiple alignments. We also propose a new transition system for AMR parsing (§4.1) and use its oracle (§4.2) to pick the alignment that leads to the highest-scored achievable AMR graph (§4.3). Both intrinsic and extrinsic evaluations (§5) show the effectiveness of our aligner by achieving higher F1 score and consistently improving two opensourced AMR parsers.\n• We build a new transition-based parser (§4.4) upon our aligner and transition system which directly parses a raw sentence into its AMR graph. Through simple ensemble, our parser achieves 68.4 Smatch F1 score with only words and POS tags as input (§6) and outperforms the parser of Wang and Xue (2017).\nOur code and the alignments for LDC2014T12 dataset are publicly available at https:// github.com/Oneplus/tamr"
  }, {
    "heading": "2 Related Work",
    "text": "AMR Parsers. AMR parsing maps a natural language sentence into its AMR graph. Most current parsers construct the AMR graph in a two-staged manner which first identifies concepts (nodes in the graph) from the input sentence, then identifies relations (edges in the graph) between the identified concepts. Flanigan et al. (2014) and their follow-up works (Flanigan et al., 2016; Zhou et al., 2016) model the parsing problem as finding the maximum spanning connected graph. Wang et al. (2015b) proposes to greedily transduce the dependency tree into AMR graph and a bunch of works (Wang et al., 2015a; Goodman et al., 2016; Wang and Xue, 2017) further improve the transducer’s performance with rich features and imitation learning.2 Transition-based methods\n2Wang et al. (2015b) and the follow-up works refer their transducing process as “transition-based”. However, to dis-\nthat directly parse an input sentence into its AMR graph have also been studied (Ballesteros and AlOnaizan, 2017; Damonte et al., 2017). In these works, the concept identification and relation identification are performed jointly.\nAn aligner which maps a span of words into its concept serves to the generation of training data for the concept identifier, thus is important to the parser training. Missing or incorrect alignments lead to poor concept identification, which then hurt the overall AMR parsing performance. Besides the typical two-staged methods, the aligner also works in some other AMR parsing algorithms like that using syntax-based machine translation (Pust et al., 2015), sequence-to-sequence (Peng et al., 2017; Konstas et al., 2017), Hyperedge Replacement Grammar (Peng et al., 2015) and Combinatory Category Grammar (Artzi et al., 2015).\nPrevious aligner works solve the alignment problem in two different ways. The rule-based aligner (Flanigan et al., 2014) defines a set of heuristic rules which align a span of words to the graph fragment and greedily applies these rules. The unsupervised aligner (Pourdamghani et al., 2014; Wang and Xue, 2017) uncovers the word-toconcept alignment from the linearized AMR graph through EM. All these approaches yield a single alignment for one sentence and its effect on the downstream parsing is not considered.\nJAMR Aligner (Flanigan et al., 2014). Two components exist in the JAMR aligner: 1) a set of heuristic rules and 2) a greedy search process.\nThe heuristic rules in the JAMR aligner are a set of indicator functions ρ(c, ws,e) which take a concept c and a span of words ws,e starting from s and ending with e as input and return whether they should be aligned. These rules can be categorized into matching rules and updating rules. The matching rules directly compare c with ws,e and determine if they should be aligned. The updating rules first retrieve the concept c′ that ws,e aligns, then determine if c and ws,e should be aligned by checking whether c and c′ meet some conditions. Here, we illustrate how update rules work by applying a rule named Entity Type on the AMR graph in Figure 1 as an example. When determining if the entity type concept country should be aligned to “North Korea”, the Entity\ntinguish their work with that of Damonte et al. (2017) and Ballesteros and Al-Onaizan (2017), we use the term “transduce” instead.\nType rule first retrieve that this span is aligned to the fragment (name :op1 \"North\" :op2 \"Korea\"), then determine if they are aligned by checking if name is the tail concept of country.\nThe greedy search process applies rules in a manually defined order. The results are mutually exclusive which means once a graph fragment is aligned by one rule, it cannot be realigned. By doing so, conflicts between the alignments produced by different rules are resolved. Flanigan et al. (2014) didn’t talk about the principle of orders but it generally follows the principle that 1) the matching rules have higher priorities than the updating rules, and 2) exact matching rules have higher priorities than the fuzzy matching rules."
  }, {
    "heading": "3 Enhanced Rule-based Aligner",
    "text": ""
  }, {
    "heading": "3.1 Enhancing Aligner with Rich Semantic Resources",
    "text": "Error propagates in the greedy search process. An alignment error can lead to future errors because of the dependencies and mutual exclusions between rules. In the JAMR aligner, rules that recall more alignments but introduce errors are carefully opted out and it influences the aligner’s performance. Our motivation is to use rich semantic resources to recall more alignments. Instead of resolving the resulted conflicts and errors by greedy search, we keep the multiple alignments produced by the aligner and let a parser decide the best alignment.\nIn this paper, we use two kinds of semantic resources to recall more alignments, which include the similarity drawn from Glove embedding (Pennington et al., 2014)3 and the morphosemantic database (Fellbaum et al., 2009) in the WordNet project4. Two additional matching schemes semantic match and morphological match are proposed as:\nSemantic Match. Glove embedding encodes a word into its vector representation. We define semantic match of a concept as a word in the sentence that has a cosine similarity greater than 0.7 in the embedding space with the concept striping off trailing number (e.g. run-01→ run).\nMorphological Match. Morphosemantic is a database that contains links among derivational\n3nlp.stanford.edu/projects/glove/ 4wordnet.princeton.edu/wordnet/\ndownload/standoff/\nlinks connecting noun and verb senses (e.g., “example” and exemplify). We define morphological match of a concept as a word in the sentence having the (word, concept) link in the database.\nBy defining the semantic match and morphological match, we extend the rules in Flanigan et al. (2014) with four additional matching rules as shown in Table 1. These rules are intended to recall the concepts or entities which either semantically resemble a span of words but differ in the surface form, or match a span of words in their morphological derivation."
  }, {
    "heading": "3.2 Producing Multiple Alignments",
    "text": "Using the rules in the JAMR aligner along with our four extended matching rules, we propose an algorithm to draw multiple alignments from a pair of sentence and AMR graph and it is shown in Algorithm 1. In this algorithm, Ac denotes the set of candidate alignments for a graph fragment c, in which each alignment is represented as a tuple (s, e, c′) where s denotes the starting position, e denotes the ending position, and c′ denotes the concept that lead to this alignment. At the beginning, Ac is initialized as an empty set (line 1 to 2). Then all the matching rules are tried to align a span of words to that fragment (line 3 to 7). After applying all the matching rules, all the updating rules are repeatedly applied until no new alignment is generated in one iteration (line 8 to 16). During applying the updating rules, we keep track of the dependencies between fragments. Finally, all the possible combination of the alignments are enumerated without considering the one that violates the fragment dependencies (line 17 to 26)."
  }, {
    "heading": "4 Transition-based AMR Parser",
    "text": "Our enhanced rule-based aligner produces multiple alignments, and we would like to use our\nAlgorithm 1: Our alignment algorithm. Input: An AMR graph with a set of graph fragments C;\na sentence W ; a set of matching rules PM ; and a set of updating rules PU .\nOutput: a set of alignments A. 1 for c ∈ C do 2 Ac ← ∅; 3 for ρM ∈ PM do 4 for ws,e ← spans(W ) do 5 for c ∈ C do 6 if ρM (c, ws,e) then 7 Ac ← Ac ∪ (s, e, nil);\n8 updated← true ; 9 while updated is true do\n10 updated← false; 11 for ρU ∈ PU do 12 for c, c′ ∈ C × C do 13 for (s, e, d) ∈ A′c do 14 if ρU (c, ws,e) ∧ (s, e, c′) /∈ Ac then 15 Ac ← Ac ∪ (s, e, c′); 16 updated← true;\n17 A ← ∅ ; 18 for (a1, ..., ac) ∈ CartesianProduct(A1, ..., A|C|) do 19 legal← true; 20 for a ∈ (a1, ..., ac) do 21 (s, e, c′)← a; 22 (s′, e′, d)← ac′ ; 23 if s 6= s′ ∧ e 6= e′ then 24 legal← false ;\n25 if legal then 26 A ← A∪ (a1, ..., ac);\nparser to evaluate their qualities. A parameterized parser does not accomplish such goal because training its parameters depends on the aligner’s outputs. A deterministic parser works in this situation but is required to consider the association between concepts and spans. This stops the deterministic parsers which build AMR graph only from the derived concepts5 from being used because they do not distinguish alignments that yields to the same set of concepts.6\nThis discussion shows that to evaluate the quality of an alignment, we need a deterministic (oracle) parser which builds the AMR graph from the raw sentence. Ballesteros and Al-Onaizan (2017) presented a transition-based parser that directly parses a sentence into its AMR graph. A transition system which extends the swap-based dependency parsing system to handle AMR non-projectivities (Damonte et al., 2017) was proposed in their work.\n5e.g. the reference relation identifier in Flanigan et al. (2014) and the oracle transducer in Wang et al. (2015b).\n6recall the “nuclear” example in Section 1.\nTheir work presented the possibility for the oracle parser, but their oracle parser was not touched explicitly. What’s more, in the non-projective dependency parsing, Choi and McCallum (2013)’s extension to the list-based system (Nivre, 2008) with caching mechanism achieves expected linear time complexity and requires fewer actions to parse a non-projective tree than the swap-based system. Their extension to transition-based AMR parsing is worth studying.\nIn this paper, we propose to extend Choi and McCallum (2013)’s transition system to AMR parsing and present the corresponding oracle parser. The oracle parser is used for tuning our aligner and training our parser. We also present a comprehensive comparison of our system with that of Ballesteros and Al-Onaizan (2017) in Section 6.3."
  }, {
    "heading": "4.1 List-based Extension for AMR Parsing",
    "text": "We follow Choi and McCallum (2013) and define a state in our transition system as a quadruple s = (σ, δ, β,A), where σ is a stack holding processed words, δ is a deque holding words popped out of σ that will be pushed back in the future, and β is a buffer holding unprocessed words. A is a set of labeled relations. A set of actions is defined to parse sentence into AMR graph. Table 2 gives a formal illustration of these actions and how they work. The first five actions in Table 2 are our ex-\ntended actions, and they are used to deriving concepts from the input sentence."
  }, {
    "heading": "4.2 Oracle Parser",
    "text": "Given an alignment and the gold standard AMR graph, we can build the best AMR graph by repeatedly applying one of these actions and this is what we called oracle parser. Before running the oracle parser, we first remove the concepts which aren’t aligned with any span of words from the AMR graph. During running the oracle parser, for a state s = (σ|s0, δ, b0|b1|β, A), our oracle parser decides which action to apply by checking the following conditions one by one.\n1. If b0 is a word and it doesn’t align to any concept, perform DROP.\n2. If b1 is within a span in the alignment, perform MERGE.\n3. If b0 is a word or span and it only aligns to one entity concept c, perform ENTITY(c).\n4. If b0 is a word or span and it aligns to one or more concepts, perform CONFIRM(c) where c is the concept b0 aligns and has the longest graph distance to the root.\n5. If b0 is a concept and its head concept c has the same alignment as b0, perform NEW(c).\n6. If b0 is a concept and there is an unprocessed edge r between s0 and t0, perform LEFT(r) or RIGHT(r) according to r’s direction.\n7. If s0 has unprocessed edge, perform CACHE.\n8. If s0 doesn’t have unprocessed edge, perform REDUCE.\n9. perform SHIFT.\nWe test our oracle parser on the hand-align data created by Flanigan et al. (2014) and it achieves 97.4 Smatch F1 score.7 Besides the errors resulted from incorrect manual alignments, entity errors made by the limitation of our ENTITY(c) action count a lot. Since our ENTITY action directly converts the surface form of a word span into an entity. It cannot correctly generate entity names when they require derivation,8 or where tokenization errors exist.9"
  }, {
    "heading": "4.3 Tune the Aligner with Oracle Parser",
    "text": "Using our oracle parser, we tune the aligner by picking the alignment which leads to the highestscored AMR graph from the set of candidates (see Figure 2 for the workflow). When more than one alignment achieve the highest score, we choose the one with the smallest number of actions. Intuitively, choosing the one with the smallest number of actions will encourage structurally coherent alignment10 because coherent alignment requires fewer CACHE actions."
  }, {
    "heading": "4.4 Parsing Model",
    "text": "Based on our aligner and transition system, we propose a transition-based parser which parse the\n7 Since some alignments in hand-align were created on incorrect AMR annotations, we filter out them and only use the correct subset which has 136 pairs of alignment and AMR graph. This data is also used in our intrinsic evaluation.\n8e.g., “North Koreans” cannot be parsed into (name :op1 \"North\" :op2 \"Korea\")\n9e.g., “Wi Sung - lac” cannot be parsed into (name :op1 \"Wi\" :op2 \"Sung-lac\")\n10e.g. the first “nuclear” aligned to nucleus˜1 in Fig. 1\nraw sentence directly into its AMR graph. In this paper, we follow Ballesteros and Al-Onaizan (2017) and use StackLSTM (Dyer et al., 2015) to model the states. The score of a transition action a on state s is calculated as p(a|s) = exp{ga · STACKLSTM(s) + ba}∑ a′ exp{ga′ · STACKLSTM(s) + ba′} ,\nwhere STACKLSTM(s) encodes the state s into a vector and ga is the embedding vector of action a. We encourage the reader to refer Ballesteros and Al-Onaizan (2017) for more details.\nEnsemble. Ensemble has been shown as an effective way of improving the neural model’s performance (He et al., 2017). Since the transitionbased parser directly parse a sentence into its AMR graph, ensemble of several parsers is easier compared to the two-staged AMR parsers. In this paper, we ensemble the parsers trained with different initialization by averaging their probability distribution over the actions."
  }, {
    "heading": "5 Alignment Experiments",
    "text": ""
  }, {
    "heading": "5.1 Settings",
    "text": "We evaluate our aligner on the LDC2014T12 dataset. Two kinds of evaluations are carried out including the intrinsic and extrinsic evaluations.\nFor the intrinsic evaluation, we follow Flanigan et al. (2014) and evaluate the F1 score of the alignments produced by our aligner against the manually aligned data created in their work (handalign). We also use our oracle parser’s performance as an intrinsic evaluation assuming that better alignment leads to higher scored oracle parser.\nFor the extrinsic evaluation, we plug our alignment into two open-sourced AMR parsers: 1) JAMR (Flanigan et al., 2014, 2016) and 2) CAMR (Wang et al., 2015b,a) and evaluate the final performances of the AMR parsers on both the newswire proportion and the entire dataset of LDC2014T12. We use the configuration in Flanigan et al. (2016) for JAMR and the configuration in Wang et al. (2015a) without semantic role labeling (SRL) features for CAMR."
  }, {
    "heading": "5.2 Results",
    "text": "Intrinsic Evaluation. Table 3 shows the intrinsic evaluation results, in which our alignment intrinsically outperforms JAMR aligner by achieving better alignment F1 score and leading to a higher scored oracle parser.\nExtrinsic Evaluation. Table 4 shows the results. From this table, we can see that our alignment consistently improves all the parsers by a margin ranging from 0.5 to 1.7. Both the intrinsic and the extrinsic evaluations show the effectiveness our aligner."
  }, {
    "heading": "5.3 Ablation",
    "text": "To have a better understanding of our aligner, we conduct ablation test by removing the semantic matching and oracle parser tuning respectively and retrain the JAMR parser on the newswire proportion. The results are shown in Table 5. From this table, we can see that removing either of these components harms the performance. Removing oracle parser tuning leads to severe performance drop and the score is even lower than that with JAMR aligner. We address this observation to that alignment noise is introduced by the semantic matching especially by the word embedding similarity component. Without filtering the noise by our oracle parser, just introducing more matching rules will harm the performance."
  }, {
    "heading": "6 Parsing Experiments",
    "text": ""
  }, {
    "heading": "6.1 Settings",
    "text": "We use the same settings in our aligner extrinsic evaluation for the experiments on our transitionbased parser. For the input to the parser, we tried two settings: 1) using only words as input, and 2) using words and POS tags as input. Automatic POS tags are assigned with Stanford POS tagger (Manning et al., 2014). Word embedding from Ling et al. (2015) is used in the same way with Ballesteros and Al-Onaizan (2017). To opt\nout the effect of different initialization in training the neural network, we run 10 differently seeded runs and report their average performance following Reimers and Gurevych (2017)."
  }, {
    "heading": "6.2 Results",
    "text": "Table 6 shows the performance of our transitionbased parser along with comparison to the parsers in the previous works. When compared with our transition-based counterpart (Ballesteros and AlOnaizan, 2017), our word-only model outperforms theirs using the same JAMR alignment. The same trend is witnessed using words and POS tags as input. When replacing the JAMR alignments with ours, the parsing performances are improved in the same way as in Table 4, which further confirms the effectiveness of our aligner.\nThe second block in Table 6 shows the results of our ensemble parser, in which ensemble significantly improves the performance and more parsers ensembled, more improvements are achieved. An ensemble of 10 parsers with only words as input achieves 68.1 Smatch F1 score which is comparable to the AMR parser of Wang and Xue (2017). Using the minimal amount of additional syntactic information – POS tags, the performance of the ensemble of 10 parsers is further pushed to 68.4, which surpasses that of Wang and Xue (2017) which relied on named entity recognition (NER) and dependency parsing (DEP).\nA further study on the speed shows that our 10 parser ensemble can parse 43 tokens per second which is faster than JAMR (7 tokens/sec.) and CAMR (24 tokens/sec.) thanks to the simplicity of our model and independence of preprocessing, like NER and DEP.11"
  }, {
    "heading": "6.3 Comparison to Ballesteros and",
    "text": "Al-Onaizan (2017)\nTo explain the improved performance against Ballesteros and Al-Onaizan (2017) in Table 6, we\n11In our speed comparison, we also count the time of preprocessing for JAMR and CAMR. All the comparison is performed in the same single-threaded settings.\ngive a comprehensive comparison between our transition system and that of Ballesteros and AlOnaizan (2017).\nCapability. In both these two systems, a span of words can only be derived into concept for one time. “Patch” actions are required to generate new concepts from the one that is aligned to the same span.12 Ballesteros and Al-Onaizan (2017) uses a DEPENDENT action to generate one tail concept for one hop and cannot deal with the cases which have a chain of more than two concepts aligned to the same span. Our list-based system differs theirs by using a NEW action to deal these cases. Since the new concept is pushed onto the buffer, NEW action can be repeatedly applied and used to generate arbitrary concepts that aligned to the same\n12 e.g., three concepts in the fragment (person :source (country :name (name :op1 \"North\" :op2 \"Korea\"))) are aligned to “North Koreans”.\nspan. On the development set of LDC2014T12, our oracle achieves 91.7 Smatch F1 score over the JAMR alignment, which outperforms Ballesteros and Al-Onaizan (2017)’s oracle (89.5 in their paper) on the same alignment. This result confirms that our list-based system is more powerful.\nNumber of Actions. Our list-based system also differs theirs in the number of oracle actions required to parse the same AMR graphs. We use the oracles from two systems to parse the development set of LDC2014T12 on the same JAMR alignments. Figure 3 shows the comparison in which our system clearly uses fewer actions (the average number of our system is 63.7 and that of Ballesteros and Al-Onaizan (2017) is 86.4). Using fewer actions makes the parser learned from the oracle less prone to error propagation. We attribute the improved performance in Table 6 to this advantage of transition system."
  }, {
    "heading": "7 Conclusion",
    "text": "In this paper, we propose a new AMR aligner which is tuned by a novel transition-based AMR oracle parser. Our aligner is also enhanced by rich semantic resource and recalls more alignments. Both the intrinsic and extrinsic evaluations show the effectiveness of our aligner by achieving higher alignment F1 score and consistently improving two open-sourced AMR parsers. We also develop transition-based AMR parser based on our aligner and transition system and it achieves a performance of 68.4 Smatch F1 score via ensemble with only words and POS tags as input."
  }, {
    "heading": "Acknowledgments",
    "text": "We thank the anonymous reviewers for their helpful comments and suggestions. This work was\nsupported by the National Key Basic Research Program of China via grant 2014CB340503 and the National Natural Science Foundation of China (NSFC) via grant 61632011 and 61772153."
  }],
  "year": 2018,
  "references": [{
    "title": "Broad-coverage CCG semantic parsing with AMR",
    "authors": ["Yoav Artzi", "Kenton Lee", "Luke Zettlemoyer."],
    "venue": "Proc. of EMNLP.",
    "year": 2015
  }, {
    "title": "AMR parsing using Stack-LSTMs",
    "authors": ["Miguel Ballesteros", "Yaser Al-Onaizan."],
    "venue": "Proc. of EMNLP.",
    "year": 2017
  }, {
    "title": "Abstract meaning representation for sembanking",
    "authors": ["Laura Banarescu", "Claire Bonial", "Shu Cai", "Madalina Georgescu", "Kira Griffitt", "Ulf Hermjakob", "Kevin Knight", "Philipp Koehn", "Martha Palmer", "Nathan Schneider."],
    "venue": "Proc. of the 7th Linguistic An-",
    "year": 2013
  }, {
    "title": "Smatch: an evaluation metric for semantic feature structures",
    "authors": ["Shu Cai", "Kevin Knight."],
    "venue": "Proc. of ACL.",
    "year": 2013
  }, {
    "title": "Transition-based dependency parsing with selectional branching",
    "authors": ["Jinho D. Choi", "Andrew McCallum."],
    "venue": "Proc. of ACL.",
    "year": 2013
  }, {
    "title": "An incremental parser for abstract meaning representation",
    "authors": ["Marco Damonte", "Shay B. Cohen", "Giorgio Satta."],
    "venue": "Proc. of EACL.",
    "year": 2017
  }, {
    "title": "Transitionbased dependency parsing with stack long shortterm memory",
    "authors": ["Chris Dyer", "Miguel Ballesteros", "Wang Ling", "Austin Matthews", "Noah A. Smith."],
    "venue": "Proc. of ACL.",
    "year": 2015
  }, {
    "title": "Putting semantics into WordNet’s “morphosemantic” links",
    "authors": ["Christiane Fellbaum", "Anne Osherson", "Peter E. Clark."],
    "venue": "Human Language Technology. Challenges of the Information Society.",
    "year": 2009
  }, {
    "title": "CMU at SemEval-2016 task 8: Graph-based AMR parsing with infinite ramp loss",
    "authors": ["Jeffrey Flanigan", "Chris Dyer", "Noah A. Smith", "Jaime Carbonell."],
    "venue": "Proc. of the 10th International Workshop on Semantic Evaluation (SemEval-2016).",
    "year": 2016
  }, {
    "title": "A discriminative graph-based parser for the abstract meaning representation",
    "authors": ["Jeffrey Flanigan", "Sam Thomson", "Jaime Carbonell", "Chris Dyer", "Noah A. Smith."],
    "venue": "Proc. of ACL.",
    "year": 2014
  }, {
    "title": "Abstract meaning representation parsing using LSTM recurrent neural networks",
    "authors": ["William Foland", "James H. Martin."],
    "venue": "Proc. of ACL.",
    "year": 2017
  }, {
    "title": "Noise reduction and targeted exploration in imitation learning for abstract meaning representation parsing",
    "authors": ["James Goodman", "Andreas Vlachos", "Jason Naradowsky."],
    "venue": "Proc. of ACL.",
    "year": 2016
  }, {
    "title": "Deep semantic role labeling: What works and whats next",
    "authors": ["Luheng He", "Kenton Lee", "Mike Lewis", "Luke Zettlemoyer."],
    "venue": "Proc. of ACL.",
    "year": 2017
  }, {
    "title": "Neural AMR: Sequence-to-sequence models for parsing and generation",
    "authors": ["Ioannis Konstas", "Srinivasan Iyer", "Mark Yatskar", "Yejin Choi", "Luke Zettlemoyer."],
    "venue": "Proc. of ACL.",
    "year": 2017
  }, {
    "title": "Two/too simple adaptations of word2vec for syntax problems",
    "authors": ["Wang Ling", "Chris Dyer", "Alan W Black", "Isabel Trancoso."],
    "venue": "Proc. of NAACL.",
    "year": 2015
  }, {
    "title": "The Stanford CoreNLP natural language processing toolkit",
    "authors": ["Christopher D. Manning", "Mihai Surdeanu", "John Bauer", "Jenny Finkel", "Steven J. Bethard", "David McClosky."],
    "venue": "ACL System Demonstrations.",
    "year": 2014
  }, {
    "title": "Algorithms for deterministic incremental dependency parsing",
    "authors": ["Joakim Nivre."],
    "venue": "Computational Linguistics, 34(4).",
    "year": 2008
  }, {
    "title": "A synchronous hyperedge replacement grammar based approach for amr parsing",
    "authors": ["Xiaochang Peng", "Linfeng Song", "Daniel Gildea."],
    "venue": "Proc. of CoNLL.",
    "year": 2015
  }, {
    "title": "Addressing the data sparsity issue in neural amr parsing",
    "authors": ["Xiaochang Peng", "Chuan Wang", "Daniel Gildea", "Nianwen Xue."],
    "venue": "Proc. of EACL.",
    "year": 2017
  }, {
    "title": "Glove: Global vectors for word representation",
    "authors": ["Jeffrey Pennington", "Richard Socher", "Christopher Manning."],
    "venue": "Proc. of EMNLP.",
    "year": 2014
  }, {
    "title": "Aligning english strings with abstract meaning representation graphs",
    "authors": ["Nima Pourdamghani", "Yang Gao", "Ulf Hermjakob", "Kevin Knight."],
    "venue": "Proc. of EMNLP.",
    "year": 2014
  }, {
    "title": "Parsing English into abstract meaning representation using syntaxbased machine translation",
    "authors": ["Michael Pust", "Ulf Hermjakob", "Kevin Knight", "Daniel Marcu", "Jonathan May."],
    "venue": "Proc. of EMNLP.",
    "year": 2015
  }, {
    "title": "Reporting score distributions makes a difference: Performance study of LSTM-networks for sequence tagging",
    "authors": ["Nils Reimers", "Iryna Gurevych."],
    "venue": "Proc. of EMNLP.",
    "year": 2017
  }, {
    "title": "Getting the most out of amr parsing",
    "authors": ["Chuan Wang", "Nianwen Xue."],
    "venue": "Proc. of EMNLP.",
    "year": 2017
  }, {
    "title": "Boosting transition-based AMR parsing with refined actions and auxiliary analyzers",
    "authors": ["Chuan Wang", "Nianwen Xue", "Sameer Pradhan."],
    "venue": "Proc. of ACL.",
    "year": 2015
  }, {
    "title": "A transition-based algorithm for amr parsing",
    "authors": ["Chuan Wang", "Nianwen Xue", "Sameer Pradhan."],
    "venue": "Proc. of NAACL.",
    "year": 2015
  }, {
    "title": "AMR parsing with an incremental joint model",
    "authors": ["Junsheng Zhou", "Feiyu Xu", "Hans Uszkoreit", "Weiguang QU", "Ran Li", "Yanhui Gu."],
    "venue": "Proc. of EMNLP.",
    "year": 2016
  }],
  "id": "SP:2bb9f0768fac9622a0be446df69daf75a954d5ac",
  "authors": [{
    "name": "Yijia Liu",
    "affiliations": []
  }, {
    "name": "Wanxiang Che",
    "affiliations": []
  }, {
    "name": "Bo Zheng",
    "affiliations": []
  }, {
    "name": "Bing Qin",
    "affiliations": []
  }, {
    "name": "Ting Liu",
    "affiliations": []
  }],
  "abstractText": "In this paper, we propose a new rich resource enhanced AMR aligner which produces multiple alignments and a new transition system for AMR parsing along with its oracle parser. Our aligner is further tuned by our oracle parser via picking the alignment that leads to the highestscored achievable AMR graph. Experimental results show that our aligner outperforms the rule-based aligner in previous work by achieving higher alignment F1 score and consistently improving two open-sourced AMR parsers. Based on our aligner and transition system, we develop a transition-based AMR parser that parses a sentence into its AMR graph directly. An ensemble of our parsers with only words and POS tags as input leads to 68.4 Smatch F1 score, which outperforms the parser of Wang and Xue (2017).",
  "title": "An AMR Aligner Tuned by Transition-based Parser"
}