{
  "sections": [{
    "text": "Proceedings of NAACL-HLT 2018, pages 1470–1480 New Orleans, Louisiana, June 1 - 6, 2018. c©2018 Association for Computational Linguistics\nWe introduce KBGAN, an adversarial learning framework to improve the performances of a wide range of existing knowledge graph embedding models. Because knowledge graphs typically only contain positive facts, sampling useful negative training examples is a nontrivial task. Replacing the head or tail entity of a fact with a uniformly randomly selected entity is a conventional method for generating negative facts, but the majority of the generated negative facts can be easily discriminated from positive facts, and will contribute little towards the training. Inspired by generative adversarial networks (GANs), we use one knowledge graph embedding model as a negative sample generator to assist the training of our desired model, which acts as the discriminator in GANs. This framework is independent of the concrete form of generator and discriminator, and therefore can utilize a wide variety of knowledge graph embedding models as its building blocks. In experiments, we adversarially train two translation-based models, TRANSE and TRANSD, each with assistance from one of the two probability-based models, DISTMULT and COMPLEX. We evaluate the performances of KBGAN on the link prediction task, using three knowledge base completion datasets: FB15k-237, WN18 and WN18RR. Experimental results show that adversarial training substantially improves the performances of target embedding models under various settings."
  }, {
    "heading": "1 Introduction",
    "text": "Knowledge graph (Dong et al., 2014) is a powerful graph structure that can provide direct access of knowledge to users via various applications such as structured search, question answering, and intelligent virtual assistant. A common representation of knowledge graph beliefs is in the\nform of a discrete relational triple such as LocatedIn(NewOrleans,Louisiana).\nA main challenge for using discrete representation of knowledge graph is the lack of capability of accessing the similarities among different entities and relations. Knowledge graph embedding (KGE) techniques (e.g., RESCAL (Nickel et al., 2011), TRANSE (Bordes et al., 2013), DISTMULT (Yang et al., 2015), and COMPLEX (Trouillon et al., 2016)) have been proposed in recent years to deal with the issue. The main idea is to represent the entities and relations in a vector space, and one can use machine learning technique to learn the continuous representation of the knowledge graph in the latent space.\nHowever, even steady progress has been made in developing novel algorithms for knowledge graph embedding, there is still a common challenge in this line of research. For space efficiency, common knowledge graphs such as Freebase (Bollacker et al., 2008), Yago (Suchanek et al., 2007), and NELL (Mitchell et al., 2015) by default only stores beliefs, rather than disbeliefs. Therefore, when training the embedding models, there is only the natural presence of the positive examples. To use negative examples, a common method is to remove the correct tail entity, and randomly sample from a uniform distribution (Bordes et al., 2013). Unfortunately, this approach is not ideal, because the sampled entity could be completely unrelated to the head and the target relation, and thus the quality of randomly generated negative examples is often poor (e.g, LocatedIn(NewOrleans,BarackObama)). Other approach might leverage external ontological constraints such as entity types (Krompaß et al., 2015) to generate negative examples, but such resource does not always exist or accessible.\nIn this work, we provide a generic solution to improve the training of a wide range of knowl-\n1470\nedge graph embedding models. Inspired by the recent advances of generative adversarial deep models (Goodfellow et al., 2014), we propose a novel adversarial learning framework, namely, KBGAN, for generating better negative examples to train knowledge graph embedding models. More specifically, we consider probabilitybased, log-loss embedding models as the generator to supply better quality negative examples, and use distance-based, margin-loss embedding models as the discriminator to generate the final knowledge graph embeddings. Since the generator has a discrete generation step, we cannot directly use the gradient-based approach to backpropagate the errors. We then consider a onestep reinforcement learning setting, and use a variance-reduction REINFORCE method to achieve this goal. Empirically, we perform experiments on three common KGE datasets (FB15K-237, WN18 and WN18RR), and verify the adversarial learning approach with a set of KGE models. Our experiments show that across various settings, this adversarial learning mechanism can significantly improve the performance of some of the most commonly used translation based KGE methods. Our contributions are three-fold:\n• We are the first to consider adversarial learning to generate useful negative training examples to improve knowledge graph embedding.\n• This adversarial learning framework applies to a wide range of KGE models, without the need of external ontologies constraints.\n• Our method shows consistent performance gains on three commonly used KGE datasets."
  }, {
    "heading": "2 Related Work",
    "text": ""
  }, {
    "heading": "2.1 Knowledge Graph Embeddings",
    "text": "A large number of knowledge graph embedding models, which represent entities and relations in a knowledge graph with vectors or matrices, have been proposed in recent years. RESCAL (Nickel et al., 2011) is one of the earliest studies on matrix factorization based knowledge graph embedding models, using a bilinear form as score function. TRANSE (Bordes et al., 2013) is the first model to introduce translation-based embedding. Later variants, such as TRANSH (Wang et al., 2014), TRANSR (Lin et al., 2015) and TRANSD (Ji et al., 2015), extend TRANSE by projecting the embedding vectors of entities into various spaces. DISTMULT (Yang et al., 2015) simplifies RESCAL by only using a diagonal matrix, and COMPLEX (Trouillon et al., 2016) extends DISTMULT into the complex number field. (Nickel et al., 2015) is a comprehensive survey on these models.\nSome of the more recent models achieve strong performances. MANIFOLDE (Xiao et al., 2016) embeds a triple as a manifold rather than a point. HOLE (Nickel et al., 2016) employs circular correlation to combine the two entities in a triple. CONVE (Dettmers et al., 2017) uses a convolutional neural network as the score function. However, most of these studies use uniform sampling to generate negative training examples (Bordes et al., 2013). Because our framework is independent of the concrete form of models, all these models can be potentially incorporated into our framework, regardless of the complexity. As a proof of principle, our work focuses on simpler models. Table 1 summarizes the score functions and dimensions of all models mentioned above."
  }, {
    "heading": "2.2 Generative Adversarial Networks and its Variants",
    "text": "Generative Adversarial Networks (GANs) (Goodfellow et al., 2014) was originally proposed for generating samples in a continuous space such as images. A GAN consists of two parts, the generator and the discriminator. The generator accepts a noise input and outputs an image. The discriminator is a classifier which classifies images as “true” (from the ground truth set) or “fake” (generated by the generator). When training a GAN, the generator and the discriminator play a minimax game, in which the generator tries to generate “real” images to deceive the discriminator, and the discriminator tries to tell them apart from ground truth images. GANs are also capable of generating samples satisfying certain requirements, such as conditional GAN (Mirza and Osindero, 2014).\nIt is not possible to use GANs in its original form for generating discrete samples like natural language sentences or knowledge graph triples, because the discrete sampling step prevents gradients from propagating back to the generator. SEQGAN (Yu et al., 2017) is one of the first successful solutions to this problem by using reinforcement learning—It trains the generator using policy gradient and other tricks. IRGAN (Wang et al., 2017) is a recent work which combines two categories of information retrieval models into a discrete GAN framework. Likewise, our framework relies on policy gradient to train the generator which provides discrete negative triples.\nThe discriminator in a GAN is not necessarily a classifier. Wasserstein GAN or WGAN (Arjovsky et al., 2017) uses a regressor with clipped parameters as its discriminator, based on solid analysis about the mathematical nature of GANs. GOGAN (Juefei-Xu et al., 2017) further replaces the loss function in WGAN with marginal loss. Although originating from very different fields, the form of loss function in our framework turns out to be more closely related to the one in GOGAN."
  }, {
    "heading": "3 Our Approaches",
    "text": "In this section, we first define two types of training objectives in knowledge graph embedding models to show how KBGAN can be applied. Then, we demonstrate a long overlooked problem about negative sampling which motivates us to propose KBGAN to address the problem. Finally, we dive into the mathematical, and algorithmic details of\nKBGAN."
  }, {
    "heading": "3.1 Types of Training Objectives",
    "text": "For a given knowledge graph, let E be the set of entities, R be the set of relations, and T be the set of ground truth triples. In general, a knowledge graph embedding (KGE) model can be formulated as a score function f(h, r, t), h, t ∈ E , r ∈ R which assigns a score to every possible triple in the knowledge graph. The estimated likelihood of a triple to be true depends only on its score given by the score function.\nDifferent models formulate their score function based on different designs, and therefore interpret scores differently, which further lead to various training objectives. Two common forms of training objectives are particularly of our interest: Marginal loss function is commonly used by a large group of models called translation-based models, whose score function models distance between points or vectors, such as TRANSE, TRANSH, TRANSR, TRANSD and so on. In these models, smaller distance indicates a higher likelihood of truth, but only qualitatively. The marginal loss function takes the following form:\nLm = ∑\n(h,r,t)∈T [f(h, r, t)− f(h′, r, t′) + γ]+ (1)\nwhere γ is the margin, [·]+ = max(0, ·) is the hinge function, and (h′, r, t′) is a negative triple. The negative triple is generated by replacing the head entity or the tail entity of a positive triple with a random entity in the knowledge graph, or formally (h′, r, t′) ∈ {(h′, r, t)|h′ ∈ E} ∪ {(h, r, t′)|t′ ∈ E}. Log-softmax loss function is commonly used by models whose score function has probabilistic interpretation. Some notable examples are RESCAL, DISTMULT, COMPLEX. Applying the softmax function on scores of a given set of triples gives the probability of a triple to be the best one among them: p(h, r, t) = exp f(h,r,t)∑\n(h′,r,t′) exp f(h ′,r,t′) . The loss\nfunction is the negative log-likelihood of this probabilistic model:\nLl = ∑\n(h,r,t)∈T − log exp f(h, r, t)∑ exp f(h′, r, t′)\n(h′, r, t′) ∈ {(h, r, t)} ∪Neg(h, r, t) (2) where Neg(h, r, t) ⊂ {(h′, r, t)|h′ ∈ E} ∪ {(h, r, t′)|t′ ∈ E} is a set of sampled corrupted triples.\nOther forms of loss functions exist, for example CONVE uses a triple-wise logistic function to model how likely the triple is true, but by far the two described above are the most common. Also, softmax function gives an probabilistic distribution over a set of triples, which is necessary for a generator to sample from them."
  }, {
    "heading": "3.2 Weakness of Uniform Negative Sampling",
    "text": "Most previous KGE models use uniform negative sampling for generating negative triples, that is, replacing the head or tail entity of a positive triple with any of the entities in E , all with equal probability. Most of the negative triples generated in this way contribute little to learning an effective embedding, because they are too obviously false.\nTo demonstrate this issue, let us consider the following example. Suppose we have a ground truth triple LocatedIn(NewOrleans,Louisiana), and corrupt it by replacing its tail entity. First, we remove the tail entity, leaving LocatedIn(NewOrleans,?). Because the relation LocatedIn constraints types of its entities, “?” must be a geographical region. If we fill “?” with a random entity e ∈ E , the probability of e having a wrong type is very high, resulting in ridiculous triples like LocatedIn(NewOrleans,BarackObama) or LocatedIn(NewOrleans,StarTrek). Such triples are considered “too easy”, because they can be eliminated solely by types. In contrast, LocatedIn(NewOrleans,Florida) is a very useful negative triple, because it satisfies type constraints, but it cannot be proved wrong without detailed knowl-\nedge of American geography. If a KGE model is fed with mostly “too easy” negative examples, it would probably only learn to represent types, not the underlying semantics.\nThe problem is less severe to models using logsoftmax loss function, because they typically samples tens or hundreds of negative triples for one positive triple in each iteration, and it is likely to have a few useful negatives among them. For instance, (Trouillon et al., 2016) found that a 100:1 negative-to-positive ratio results in the best performance for COMPLEX. However, for marginal loss function, whose negative-to-positive ratio is always 1:1, the low quality of uniformly sampled negatives can seriously damage their performance."
  }, {
    "heading": "3.3 Generative Adversarial Training for Knowledge Graph Embedding Models",
    "text": "Inspired by GANs, we propose an adversarial training framework named KBGAN which uses a KGE model with softmax probabilities to provide high-quality negative samples for the training of a KGE model whose training objective is marginal loss function. This framework is independent of the score functions of these two models, and therefore possesses some extent of universality. Figure 1 illustrates the overall structure of KBGAN.\nIn parallel to terminologies used in GAN literature, we will simply call these two models generator and discriminator respectively in the rest of this paper. We use softmax probabilistic models as the generator because they can adequately model the “sampling from a probability distribu-\nAlgorithm 1: The KBGAN algorithm Data: training set of positive fact triples T = {(h, r, t)} Input: Pre-trained generator G with parameters θG and score function fG(h, r, t), and pre-trained discriminator D with\nparameters θD and score function fD(h, r, t) Output: Adversarially trained discriminator\n1 b←− 0; // baseline for policy gradient 2 repeat 3 Sample a mini-batch of data Tbatch from T ; 4 GG ←− 0, GD ←− 0; // gradients of parameters of G and D 5 rsum ←− 0; // for calculating the baseline 6 for (h, r, t) ∈ Tbatch do 7 Uniformly randomly sample Ns negative triples Neg(h, r, t) = {(h′i, r, t′i)}i=1...Ns ; 8 Obtain their probability of being generated: pi = exp fG(h ′ i,r,t ′ i)∑Ns\nj=1 exp fG(h ′ j ,r,t ′ j)\n;\n9 Sample one negative triple (h′s, r, t′s) from Neg(h, r, t) according to {pi}i=1...Ns . Assume its probability to be ps;\n10 GD ←− GD +∇θD [fD(h, r, t)− fD(h′s, r, t′s) + γ]+; // accumulate gradients for D 11 r ←− −fD(h′s, r, t′s), rsum ←− rsum + r; // r is the reward 12 GG ←− GG + (r − b)∇θG log ps; // accumulate gradients for G 13 end 14 θG ←− θG + ηGGG, θD ←− θD − ηDGD; // update parameters 15 b← rsum/|Tbatch|; // update baseline 16 until convergence;\ntion” process of discrete GANs, and we aim at improving discriminators based on marginal loss because they can benefit more from high-quality negative samples. Note that a major difference between GAN and our work is that, the ultimate goal of our framework is to produce a good discriminator, whereas GANS are aimed at training a good generator. In addition, the discriminator here is not a classifier as it would be in most GANs.\nIntuitively, the discriminator should assign a relatively small distance to a high-quality negative sample. In order to encourage the generator to generate useful negative samples, the objective of the generator is to minimize the distance given by discriminator for its generated triples. And just like the ordinary training process, the objective of the discriminator is to minimize the marginal loss between the positive triple and the generated negative triple. In an adversarial training setting, the generator and the discriminator are alternatively trained towards their respective objectives.\nSuppose that the generator produces a probability distribution on negative triples pG(h\n′, r, t′|h, r, t) given a positive triple (h, r, t), and generates negative triples (h′, r, t′) by sampling from this distribution. Let fD(h, r, t) be the score function of the discriminator. The objective of the discriminator can be formulated as\nminimizing the following marginal loss function:\nLD = ∑\n(h,r,t)∈T [fD(h, r, t)− fD(h′, r, t′) + γ]+\n(h′, r, t′) ∼ pG(h′, r, t′|h, r, t) (3)\nThe only difference between this loss function and Equation 1 is that it uses negative samples from the generator.\nThe objective of the generator can be formulated as maximizing the following expectation of negative distances:\nRG = ∑\n(h,r,t)∈T E[−fD(h′, r, t′)]\n(h′, r, t′) ∼ pG(h′, r, t′|h, r, t) (4)\nRG involves a discrete sampling step, so we cannot find its gradient with simple differentiation. We use a simple special case of Policy Gradient Theorem1 (Sutton et al., 2000) to obtain the gradient of RG with respect to parameters of the generator:\n∇GRG = ∑\n(h,r,t)∈T E(h′,r,t′)∼pG(h′,r,t′|h,r,t)\n[−fD(h′, r, t′)∇G log pG(h′, r, t′|h, r, t)]\n' ∑\n(h,r,t)∈T\n1\nN\n∑\n(h′i,r,t ′ i)∼pG(h′,r,t′|h,r,t),i=1...N\n[−fD(h′, r, t′)∇G log pG(h′, r, t′|h, r, t)] (5) 1A proof can be found in the supplementary material\nwhere the second approximate equality means we approximate the expectation with sampling in practice. Now we can calculate the gradient of RG and optimize it with gradient-based algorithms.\nPolicy Gradient Theorem arises from reinforcement learning (RL), so we would like to draw an analogy between our model and an RL model. The generator can be viewed as an agent which interacts with the environment by performing actions and improves itself by maximizing the reward returned from the environment in response of its actions. Correspondingly, the discriminator can be viewed as the environment. Using RL terminologies, (h, r, t) is the state (which determines what actions the actor can take), pG(h′, r, t′|h, r, t) is the policy (how the actor choose actions), (h′, r, t′) is the action, and −fD(h′, r, t′) is the reward. The method of optimizing RG described above is called REINFORCE (Williams, 1992) algorithm in RL. Our model is a simple special case of RL, called one-step RL. In a typical RL setting, each action performed by the agent will change its state, and the agent will perform a series of actions (called an epoch) until it reaches certain states or the number of actions reaches a certain limit. However, in the analogy above, actions does not affect the state, and after each action we restart with another unrelated state, so each epoch consists of only one action.\nTo reduce the variance of REINFORCE algorithm, it is common to subtract a baseline from the reward, which is an arbitrary number that only depends on the state, with-\nout affecting the expectation of gradients.2 In our case, we replace −fD(h′, r, t′) with −fD(h′, r, t′) − b(h, r, t) in the equation above to introduce the baseline. To avoid introducing new parameters, we simply let b be a constant, the average reward of the whole training set: b =∑\n(h,r,t)∈T E(h′,r,t′)∼pG(h′,r,t′|h,r,t)[−fD(h′, r, t′)]. In practice, b is approximated by the mean of rewards of recently generated negative triples.\nLet the generator’s score function to be fG(h, r, t), given a set of candidate negative triples Neg(h, r, t) ⊂ {(h′, r, t)|h′ ∈ E}∪{(h, r, t′)|t′ ∈ E}, the probability distribution pG is modeled as:\npG(h ′, r, t′|h, r, t) = exp fG(h ′, r, t′)∑ exp fG(h∗, r, t∗) (h∗, r, t∗) ∈ Neg(h, r, t) (6) Ideally, Neg(h, r, t) should contain all possible negatives. However, knowledge graphs are usually highly incomplete, so the ”hardest” negative triples are very likely to be false negatives (true facts). To address this issue, we instead generate Neg(h, r, t) by uniformly sampling of Ns entities (a small number compared to the number of all possible negatives) from E to replace h or t. Because in real-world knowledge graphs, true negatives are usually far more than false negatives, such set would be unlikely to contain any false negative, and the negative selected by the generator would likely be a true negative. Using a small Neg(h, r, t) can also significantly reduce computational complexity.\nBesides, we adopt the “bern” sampling technique (Wang et al., 2014) which replaces the “1” side in “1-to-N” and “N-to-1” relations with higher probability to further reduce false negatives.\nAlgorithm 1 summarizes the whole adversarial training process. Both the generator and the dis-\n2A proof of such fact can also be found in the supplementary material\ncriminator require pre-training, which is the same as conventionally training a single KBE model with uniform negative sampling. Formally speaking, one can pre-train the generator by minimizing the loss function defined in Equation (1), and pre-train the discriminator by minimizing the loss function defined in Equation (2). Line 14 in the algorithm assumes that we are using the vanilla gradient descent as the optimization method, but obviously one can substitute it with any gradientbased optimization algorithm."
  }, {
    "heading": "4 Experiments",
    "text": "To evaluate our proposed framework, we test its performance for the link prediction task with different generators and discriminators. For the generator, we choose two classical probability-based KGE model, DISTMULT and COMPLEX, and for the discriminator, we also choose two classical translation-based KGE model, TRANSE and TRANSD, resulting in four possible combinations of generator and discriminator in total. See Table 1 for a brief summary of these models."
  }, {
    "heading": "4.1 Experimental Settings",
    "text": ""
  }, {
    "heading": "4.1.1 Datasets",
    "text": "We use three common knowledge base completion datasets for our experiment: FB15k-237, WN18 and WN18RR. FB15k-237 is a subset of FB15k introduced by (Toutanova and Chen, 2015), which removed redundant relations in FB15k and greatly reduced the number of relations. Likewise, WN18RR is a subset of WN18 introduced by (Dettmers et al., 2017) which removes reversing relations and dramatically increases the difficulty of reasoning. Both FB15k and WN18 are first introduced by (Bordes et al., 2013) and have been commonly used in knowledge graph researches. Statistics of datasets we used are shown in Table 3."
  }, {
    "heading": "4.1.2 Evaluation Protocols",
    "text": "Following previous works like (Yang et al., 2015) and (Trouillon et al., 2016), for each run, we report two common metrics, mean reciprocal ranking (MRR) and hits at 10 (H@10). We only report scores under the filtered setting (Bordes et al., 2013), which removes all triples appeared in training, validating, and testing sets from candidate triples before obtaining the rank of the ground truth triple."
  }, {
    "heading": "4.1.3 Implementation Details",
    "text": "3 In the pre-training stage, we train every model to convergence for 1000 epochs, and divide every epoch into 100 mini-batches. To avoid overfitting, we adopt early stopping by evaluating MRR on the validation set every 50 epochs. We tried γ = 0.5, 1, 2, 3, 4, 5 and L1, L2 distances for TRANSE and TRANSD, and λ = 0.01, 0.1, 1, 10 for DISTMULT and COMPLEX, and determined the best hyperparameters listed on table 2, based on their performances on the validation set after pre-training. Due to limited computation resources, we deliberately limit the dimensions of embeddings to k = 50, similar to the one used in earlier works, to save time. We also apply certain constraints or regularizations to these models, which are mostly the same as those described in their original publications, and also listed on table 2.\nIn the adversarial training stage, we keep all the hyperparamters determined in the pre-training stage unchanged. The number of candidate negative triples, Ns, is set to 20 in all cases, which is proven to be optimal among the candidate set of {5, 10, 20, 30, 50}. We train for 5000 epochs, with 100 mini-batches for each epoch. We also use early stopping in adversarial training by evaluating MRR on the validation set every 100 epochs.\nWe use the self-adaptive optimization method Adam (Kingma and Ba, 2015) for all trainings, and always use the recommended default setting α = 0.001, β1 = 0.9, β2 = 0.999, = 10 −8."
  }, {
    "heading": "4.2 Results",
    "text": "Results of our experiments as well as baselines are shown in Table 4. All settings of adversarial training bring a pronounced improvement to the model, which indicates that our method is consistently effective in various cases. TRANSE performs slightly worse than TRANSD on FB15k-237 and WN18, but better on WN18RR. Using DISTMULT or COMPLEX as the generator does not affect performance greatly.\nTRANSE and TRANSD enhanced by KBGAN can significantly beat their corresponding baseline implementations, and outperform stronger baselines in some cases. As a prototypical and proofof-principle experiment, we have never expected state-of-the-art results. Being simple models pro-\n3The KBGAN source code is available at https:// github.com/cai-lw/KBGAN\nposed several years ago, TRANSE and TRANSD has their limitations in expressiveness that are unlikely to be fully compensated by better training technique. In future researches, people may try employing more advanced models into KBGAN, and we believe it has the potential to become stateof-the-art.\nTo illustrate our training progress, we plot performances of the discriminator on validation set over epochs, which are displayed in Figure 2. As all these graphs show, our performances are always in increasing trends, converging to its max-\nimum as training proceeds, which indicates that KBGAN is a robust GAN that can converge to good results in various settings, although GANs are wellknown for difficulty in convergence. Fluctuations in these graphs may seem more prominent than other KGE models, but is considered normal for an adversially trained model. Note that in some cases the curve still tends to rise after 5000 epochs. We do not have sufficient computation resource to train for more epochs, but we believe that they will also eventually converge."
  }, {
    "heading": "4.3 Case study",
    "text": "To demonstrate that our approach does generate better negative samples, we list some examples of them in Table 5, using the KBGAN (TRANSE + DISTMULT) model and the WN18 dataset. All hyperparameters are the same as those described in Section 4.1.3.\nCompared to uniform random negatives which are almost always totally unrelated, the generator generates more semantically related negative samples, which is different from type relatedness we used as example in Section 3.2, but also helps training. In the first example, two of the five terms are physically related to the process of distilling liquids. In the second example, three of the five entities are geographical objects. In the third example, two of the five entities express the concept of “gather”.\nBecause we deliberately limited the strength of generated negatives by using a small Ns as described in Section 3.3, the semantic relation is pretty weak, and there are still many unrelated entities. However, empirical results (when selecting the optimal Ns) shows that such situation is more beneficial for training the discriminator than generating even stronger negatives."
  }, {
    "heading": "5 Conclusions",
    "text": "We propose a novel adversarial learning method for improving a wide range of knowledge graph embedding models—We designed a generatordiscriminator framework with dual KGE components. Unlike random uniform sampling, the generator model generates higher quality negative examples, which allow the discriminator model to learn better. To enable backpropagation of error, we introduced a one-step REINFORCE method to seamlessly integrate the two modules. Experimentally, we tested the proposed ideas with four commonly used KGE models on three datasets, and the results showed that the adversarial learning framework brought consistent improvements to various KGE models under different settings."
  }],
  "year": 2018,
  "references": [{
    "title": "Wasserstein gan",
    "authors": ["Martin Arjovsky", "Soumith Chintala", "Leon Bottou."],
    "venue": "International Conferrence on Machine Learning.",
    "year": 2017
  }, {
    "title": "Freebase: a collaboratively created graph database for structuring human knowledge",
    "authors": ["Kurt Bollacker", "Colin Evans", "Praveen Paritosh", "Tim Sturge", "Jamie Taylor."],
    "venue": "Proceedings of the 2008 ACM SIGMOD international conference on Management",
    "year": 2008
  }, {
    "title": "Translating embeddings for modeling multirelational data",
    "authors": ["Antoine Bordes", "Nicolas Usunier", "Alberto GarciaDuran", "Jason Weston", "Oksana Yakhnenko."],
    "venue": "Advances in Neural Information Processing Systems. pages 2787–2795.",
    "year": 2013
  }, {
    "title": "Convolutional 2d knowledge graph embeddings",
    "authors": ["Tim Dettmers", "Pasquale Minervini", "Pontus Stenetorp", "Sebastian Riedel."],
    "venue": "arXiv preprint arXiv:1707.01476 .",
    "year": 2017
  }, {
    "title": "Knowledge vault: A web-scale approach to probabilistic knowledge fusion",
    "authors": ["Xin Dong", "Evgeniy Gabrilovich", "Geremy Heitz", "Wilko Horn", "Ni Lao", "Kevin Murphy", "Thomas Strohmann", "Shaohua Sun", "Wei Zhang."],
    "venue": "Proceedings of the 20th ACM",
    "year": 2014
  }, {
    "title": "Generative adversarial nets",
    "authors": ["Ian Goodfellow", "Jean Pouget-Abadie", "Mehdi Mirza", "Bing Xu", "David Warde-Farley", "Sherjil Ozair", "Aaron Courville", "Yoshua Bengio."],
    "venue": "Advances in Neural Information Processing Systems. pages 2672–2680.",
    "year": 2014
  }, {
    "title": "Knowledge graph embedding via dynamic mapping matrix",
    "authors": ["Guoliang Ji", "Shizhu He", "Liheng Xu", "Kang Liu", "Jun Zhao."],
    "venue": "The 53rd Annual Meeting of the Association for Computational Linguistics.",
    "year": 2015
  }, {
    "title": "Gang of gans: Generative adversarial networks with maximum margin ranking",
    "authors": ["Felix Juefei-Xu", "Vishnu Naresh Boddeti", "Marios Savvides."],
    "venue": "arXiv preprint arXiv:1704.04865 .",
    "year": 2017
  }, {
    "title": "Adam: A method for stochastic optimization",
    "authors": ["Diederik P. Kingma", "Jimmy Lei Ba."],
    "venue": "The 3rd International Conference on Learning Representations.",
    "year": 2015
  }, {
    "title": "Type-constrained representation learning in knowledge graphs",
    "authors": ["Denis Krompaß", "Stephan Baier", "Volker Tresp."],
    "venue": "International Semantic Web Conference. Springer, pages 640–655.",
    "year": 2015
  }, {
    "title": "Learning entity and relation embeddings for knowledge graph completion",
    "authors": ["Yankai Lin", "Zhiyuan Liu", "Maosong Sun", "Yang Liu", "Xuan Zhu."],
    "venue": "The Twenty-ninth AAAI Conference on Artificial Intelligence. pages 2181–2187.",
    "year": 2015
  }, {
    "title": "Conditional generative adversarial nets",
    "authors": ["Mehdi Mirza", "Simon Osindero."],
    "venue": "arXiv preprint arXiv:1411.01784 .",
    "year": 2014
  }, {
    "title": "A review of relational machine learning for knowledge graphs",
    "authors": ["Maximilian Nickel", "Kevin Murphy", "Volker Tresp", "Evgeniy Gabrilovich."],
    "venue": "arXiv preprint arXiv:1503.00759 .",
    "year": 2015
  }, {
    "title": "Holographic embeddings of knowledge graphs",
    "authors": ["Maximilian Nickel", "Lorenzo Rosasco", "Tomaso Poggio Poggio."],
    "venue": "The Thirtieth AAAI Conference on Artificial Intelligence. pages 1955–1961.",
    "year": 2016
  }, {
    "title": "A three-way model for collective learning on multi-relational data",
    "authors": ["Maximilian Nickel", "Volker Tresp", "Hans-Peter Kriegel."],
    "venue": "Proceedings of the 28th International Conference on Machine Learning. pages 809–816.",
    "year": 2011
  }, {
    "title": "Yago: a core of semantic knowledge",
    "authors": ["Fabian M Suchanek", "Gjergji Kasneci", "Gerhard Weikum."],
    "venue": "Proceedings of the 16th international conference on World Wide Web. ACM, pages 697–706.",
    "year": 2007
  }, {
    "title": "Policy gradient methods for reinforcement learning with function approximation",
    "authors": ["Richard S Sutton", "David A McAllester", "Satinder P Singh", "Yishay Mansour."],
    "venue": "Advances in neural information processing systems. pages 1057–1063.",
    "year": 2000
  }, {
    "title": "Observed versus latent features for knowledge base and text inference",
    "authors": ["Kristina Toutanova", "Danqi Chen."],
    "venue": "Proceedings of the 3rd Workshop on Continuous Vector Space Models and their Compositionality. pages 57–66.",
    "year": 2015
  }, {
    "title": "Complex embeddings for simple link prediction",
    "authors": ["Théo Trouillon", "Johannes Welbl", "Sebastian Riedel", "Éric Gaussier", "Guillaume Bouchard."],
    "venue": "International Conference on Machine Learning. pages 2071–2080.",
    "year": 2016
  }, {
    "title": "Irgan: A minimax game for unifying generative and discriminative information retrieval models",
    "authors": ["Jun Wang", "Lantao Yu", "Weinan Zhang", "Yu Gong", "Yinghui Xu", "Benyou Wang", "Peng Zhang", "Dell Zhang."],
    "venue": "The 40th International ACM SIGIR Con-",
    "year": 2017
  }, {
    "title": "Knowledge graph embedding by translating on hyperplanes",
    "authors": ["Zhen Wang", "Jianwen Zhang", "Jianlin Feng", "Zheng Chen."],
    "venue": "The Twenty-eighth AAAI Conference on Artificial Intelligence. pages 1112– 1119.",
    "year": 2014
  }, {
    "title": "Simple statistical gradientfollowing algorithms for connectionist reinforcement learning",
    "authors": ["Ronald J Williams."],
    "venue": "Machine learning 8(3-4):229–256. 1479",
    "year": 1992
  }, {
    "title": "From one point to a manifold: Knowledge graph embedding for precise link prediction",
    "authors": ["Han Xiao", "Minlie Huang", "Xiaoyan Zhu."],
    "venue": "The TwentyFifth International Joint Conference on Artificial Intelligence.",
    "year": 2016
  }, {
    "title": "Embedding entities and relations for learning and inference in knowledge bases",
    "authors": ["Bishan Yang", "Wen-tau Yih", "Xiaodong He", "Jianfeng Gao", "Li Deng."],
    "venue": "The 3rd International Conference on Learning Representations .",
    "year": 2015
  }, {
    "title": "Seqgan: Sequence generative adversarial nets with policy gradient",
    "authors": ["Lantao Yu", "Weinan Zhang", "Jun Wang", "Yong Yu."],
    "venue": "The Thirty-First AAAI Conference on Artificial Intelligence. pages 2852–2858.",
    "year": 2017
  }],
  "id": "SP:73047a0f0192a35d3b5c6f5ebeadf3706b17e4dc",
  "authors": [{
    "name": "Liwei Cai",
    "affiliations": []
  }, {
    "name": "William Yang Wang",
    "affiliations": []
  }],
  "abstractText": "We introduce KBGAN, an adversarial learning framework to improve the performances of a wide range of existing knowledge graph embedding models. Because knowledge graphs typically only contain positive facts, sampling useful negative training examples is a nontrivial task. Replacing the head or tail entity of a fact with a uniformly randomly selected entity is a conventional method for generating negative facts, but the majority of the generated negative facts can be easily discriminated from positive facts, and will contribute little towards the training. Inspired by generative adversarial networks (GANs), we use one knowledge graph embedding model as a negative sample generator to assist the training of our desired model, which acts as the discriminator in GANs. This framework is independent of the concrete form of generator and discriminator, and therefore can utilize a wide variety of knowledge graph embedding models as its building blocks. In experiments, we adversarially train two translation-based models, TRANSE and TRANSD, each with assistance from one of the two probability-based models, DISTMULT and COMPLEX. We evaluate the performances of KBGAN on the link prediction task, using three knowledge base completion datasets: FB15k-237, WN18 and WN18RR. Experimental results show that adversarial training substantially improves the performances of target embedding models under various settings.",
  "title": "KBGAN: Adversarial Learning for Knowledge Graph Embeddings"
}