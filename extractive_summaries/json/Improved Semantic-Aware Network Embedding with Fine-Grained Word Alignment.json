{
  "sections": [{
    "text": "Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing, pages 1829–1838 Brussels, Belgium, October 31 - November 4, 2018. c©2018 Association for Computational Linguistics\n1829"
  }, {
    "heading": "1 Introduction",
    "text": "Networks are ubiquitous, with prominent examples including social networks (e.g., Facebook, Twitter) or citation networks of research papers (e.g., arXiv). When analyzing data from these real-world networks, traditional methods often represent vertices (nodes) as one-hot representations (containing the connectivity information of each vertex with respect to all other vertices), usually suffering from issues related to the inherent sparsity of large-scale networks. This results in models that are not able to fully capture the relationships between vertices of the network (Perozzi et al., 2014; Tu et al., 2016). Alternatively, network embedding (i.e., network representation learning) has been considered, representing each vertex of a network with a low-dimensional vector that preserves information on its similarity rel-\native to other vertices. This approach has attracted considerable attention in recent years (Tang and Liu, 2009; Perozzi et al., 2014; Tang et al., 2015; Grover and Leskovec, 2016; Wang et al., 2016; Chen et al., 2016; Wang et al., 2017a; Zhang et al., 2018).\nTraditional network embedding approaches focus primarily on learning representations of vertices that preserve local structure, as well as internal structural properties of the network. For instance, Isomap (Tenenbaum et al., 2000), LINE (Tang et al., 2015), and Grarep (Cao et al., 2015) were proposed to preserve first-, second-, and higher-order proximity between nodes, respectively. DeepWalk (Perozzi et al., 2014), which learns vertex representations from random-walk sequences, similarly, only takes into account structural information of the network. However, in realworld networks, vertices usually contain rich textual information (e.g., user profiles in Facebook, paper abstracts in arXiv, user-generated content on Twitter, etc.), which may be leveraged effectively for learning more informative embeddings.\nTo address this opportunity, Yang et al. (2015) proposed text-associated DeepWalk, to incorporate textual information into the vectorial representations of vertices (embeddings). Sun et al. (2016) employed deep recurrent neural networks to integrate the information from vertex-\nassociated text into network representations. Further, Tu et al. (2017) proposed to more effectively model the semantic relationships between vertices using a mutual attention mechanism.\nAlthough these methods have demonstrated performance gains over structure-only network embeddings, the relationship between text sequences for a pair of vertices is accounted for solely by comparing their sentence embeddings. However, as shown in Figure 1, to assess the similarity between two research papers, a more effective strategy would compare and align (via localweighting) individual important words (keywords) within a pair of abstracts, while information from other words (e.g., stop words) that tend to be less relevant can be effectively ignored (downweighted). This alignment mechanism is difficult to accomplish in models where text sequences are first embedded into a common space and then compared in pairs (He and Lin, 2016; Parikh et al., 2016; Wang and Jiang, 2017; Wang et al., 2017b; Shen et al., 2018a).\nWe propose to learn a semantic-aware Network Embedding (NE) that incorporates wordlevel alignment features abstracted from text sequences associated with vertex pairs. Given a pair of sentences, our model first aligns each word within one sentence with keywords from the other sentence (adaptively up-weighted via an attention mechanism), producing a set of fine-grained matching vectors. These features are then accumulated via a simple but efficient aggregation function, obtaining the final representation for the sentence. As a result, the word-by-word alignment features (as illustrated in Figure 1) are explicitly and effectively captured by our model. Further, the learned network embeddings under our framework are adaptive to the specific (local) vertices that are considered, and thus are context-aware and especially suitable for downstream tasks, such as link prediction. Moreover, since the word-by-word matching procedure introduced here is highly parallelizable and does not require any complex encoding networks, such as Long Short-Term Memory (LSTM) or Convolutional Neural Networks (CNNs), our framework requires significantly less time for training, which is attractive for large-scale network applications.\nWe evaluate our approach on three real-world datasets spanning distinct network-embeddingbased applications: link prediction, vertex classi-\nfication and visualization. We show that the proposed word-by-word alignment mechanism efficiently incorporates textual information into the network embedding, and consistently exhibits superior performance relative to several competitive baselines. Analyses considering the extracted word-by-word pairs further validate the effectiveness of the proposed framework."
  }, {
    "heading": "2 Proposed Methods",
    "text": ""
  }, {
    "heading": "2.1 Problem Definition",
    "text": "A network (graph) is defined as G = {V ,E}, where V and E denote the set of N vertices (nodes) and edges, respectively, where elements of E are two-element subsets of V . Here we only consider undirected networks, however, our approach (introduced below) can be readily extended to the directed case. We also define W , the symmetric RN×N matrix whose elements,wij , denote the weights associated with edges in V , and T , the set of text sequences assigned to each vertex. Edges and weights contain the structural information of the network, while the text can be used to characterize the semantic properties of each vertex. Given network G, with the network embedding we seek to encode each vertex into a low-dimensional vector h (with dimension much smaller than N ), while preserving structural and semantic features of G."
  }, {
    "heading": "2.2 Framework Overview",
    "text": "To incorporate both structural and semantic information into the network embeddings, we specify two types of (latent) embeddings: (i) hs, the structural embedding; and (ii) ht, the textual embedding. Specifically, each vertex in G is encoded into a low-dimensional embedding h = [hs;ht]. To learn these embeddings, we specify an objective that leverages the information from both W and T , denoted as\nL = ∑ e∈E Lstruct(e) + Ltext(e) + Ljoint(e) , (1)\nwhere Lstruct, Ltext and Ljoint denote structure, text, and joint structure-text training losses, respectively. For a vertex pair {vi, vj} weighted by wij , Lstruct(vi, vj) in (1) is defined as (Tang et al., 2015)\nLstruct(vi, vj) = wij log p(his|hjs) , (2)\nwhere p(his|hjs) denotes the conditional probability between structural embeddings for vertices {vi, vj}. To leverage the textual information in T , similar text-specific and joint structure-text training objectives are also defined\nLtext(vi, vj) = wijα1 log p(hit|h j t ) , (3)\nLjoint(vi, vj) = wijα2 log p(hit|hjs) (4) + wijα3 log p(h i s|h j t ) , (5)\nwhere p(hit|h j t ) and p(h i t|hjs) (or p(his|h j t )) denote the conditional probability for a pair of text embeddings and text embedding given structure embedding (or vice versa), respectively, for vertices {vi, vj}. Further, α1, α2 and α3 are hyperparameters that balance the impact of the different training-loss components. Note that structural embeddings, hs, are treated directly as parameters, while the text embeddings ht are learned based on the text sequences associated with vertices.\nFor all conditional probability terms, we follow Tang et al. (2015) and consider the second-order proximity between vertex pairs. Thus, for vertices {vi, vj}, the probability of generating hi conditioned on hj may be written as\np(hi|hj) = exp\n( hj T hi )\n∑N k=1 exp ( hj T hk ) . (6)\nNote that (6) can be applied to both structural and text embeddings in (2) and (3).\nInspired by Tu et al. (2017), we further assume that vertices in the network play different roles depending on the vertex with which they interact. Thus, for a given vertex, the text embedding, ht, is adaptive (specific) to the vertex it is being conditioned on. This type of contextaware textual embedding has demonstrated superior performance relative to context-free embeddings (Tu et al., 2017). In the following two sections, we describe our strategy for encoding the text sequence associated with an edge into its adaptive textual embedding, via word-by-context and word-by-word alignments."
  }, {
    "heading": "2.3 Word-by-Context Alignment",
    "text": "We first introduce our base model, which reweights the importance of individual words within a text sequence in the context of the edge being considered. Consider text sequences associated with two vertices connected by an edge, de-\nnoted ta and tb and contained in T . Text sequences ta and tb are of lengths Ma and Mb, respectively, and are represented by Xa ∈ Rd×Ma and Xb ∈ Rd×Mb , respectively, where d is the dimension of the word embedding. Further, x(i)a denotes the embedding of the i-th word in sequence ta.\nOur goal is to encode text sequences ta and tb into counterpart-aware vectorial representations ha and hb. Thus, while inferring the adaptive textual embedding for sentence ta, we propose reweighting the importance of each word in ta to explicitly account for its alignment with sentence tb. The weight αi, corresponding to the i-th word in ta, is generated as:\nαi = exp(tanh(W1cb +W2x (i) a ))∑Ma\nj=1 exp(tanh(W1cb +W2x (j) a ))\n, (7)\nwhere W1 and W2 are model parameters and cb = ∑Mb i=1 x b i is the context vector of sequence tb, obtained by simply averaging over all the word embeddings in the sequence, similar to fastText (Joulin et al., 2016). Further, the word-by-context embedding for sequence ta is obtained by taking the weighted average over all word embeddings\nha = ∑Ma i=1αix (i) a . (8)\nIntuitively, αi may be understood as the relevance score between the ith word in ta and sequence tb. Specifically, keywords within ta, in the context of tb, should be assigned larger weights, while less important words will be correspondingly downweighted. Similarly, hb is encoded as a weighted embedding using (7) and (8)."
  }, {
    "heading": "2.4 Fine-Grained Word-by-Word Alignment",
    "text": "With the alignment in the previous section, wordby-context matching features αi are modeled; however, the word-by-word alignment information (fine-grained), which is key to characterize the relationship between two vertices (as discussed in the above), is not explicitly captured. So motivated, we further propose an architecture to explicitly abstract word-by-word alignment information from ta and tb, to learn the relationship between the two vertices. This is inspired by the recent success of Relation Networks (RNs) for relational reasoning (Santoro et al., 2017).\nAs illustrated in Figure 2, given two input embedding matrices Xa and Xb, we first compute the affinity matrix A ∈ RMb×Ma , whose elements represent the affinity scores corresponding to all word pairs between sequences ta and tb\nA = XTb Xa . (9)\nSubsequently, we compute the context-aware matrix for sequence tb as\nAb = softmax(A) , X̃b = XbAb , (10)\nwhere the softmax(·) function is applied columnwise to A, and thus Ab contains the attention weights (importance scores) across sequence tb (columns), which account for each word in sequence ta (rows). Thus, matrix X̃b ∈ Rd×Ma in (10) constitutes an attention-weighted embedding for Xb. Specifically, the i-th column of X̃b, denoted as x̃(i)b , can be understood as a weighted average over all the words in tb, where higher attention weights indicate better alignment (match) with the i-th word in ta.\nTo abstract the word-by-word alignments, we compare x(i)a with x̃ (i) b , for i = 1, 2, ...,Ma, to obtain the corresponding matching vector\nm(i)a = falign ( x(i)a , x̃ (i) b ) , (11)\nwhere falign(·) represents the alignment function. Inspired by the observation in Wang and Jiang (2017) that simple comparison/alignment functions based on element-wise operations exhibit excellent performance in matching text sequences, here we use a combination of element-wise subtraction and multiplication as\nfalign(x (i) a , x̃ (i) a ) = [x (i) a − x̃ (i) a ;x (i) a x̃ (i) a ] ,\nwhere denotes the element-wise Hadamard product, then these two operations are concatenated to produce the matching vector m(i)a . Note these operators may be used individually or combined as we will investigate in our experiments.\nSubsequently, matching vectors from (11) are aggregated to produce the final textual embedding hat for sequence ta as\nhat = faggregate ( m(1)a ,m (2) a , ...,m (Ma) a ) , (12)\nwhere faggregate denotes the aggregation function, which we specify as the max-pooling pooling operation. Notably, other commutative operators, such as summation or average pooling, can be otherwise employed. Although these aggregation functions are simple and invariant to the order of words in input sentences, they have been demonstrated to be highly effective in relational reasoning (Parikh et al., 2016; Santoro et al., 2017). To further explore this, in Section 5.3, we conduct an ablation study comparing different choices of alignment and aggregation functions.\nThe representation hb can be obtained in a similar manner through (9), (10), (11) and (12), but replacing (9) with A = XTaXb (its transpose). Note that this word-by-word alignment is more computationally involved than word-by-context; however, the former has substantially fewer parameters to learn, provided we no longer have to estimate the parameters in (7)."
  }, {
    "heading": "2.5 Training and Inference",
    "text": "For large-scale networks, computing and optimizing the conditional probabilities in (1) using (6) is computationally prohibitive, since it requires the summation over all vertices V in G. To address this limitation, we leverage the negative sampling strategy introduced by Mikolov et al. (2013), i.e., we perform computations by sampling a subset of negative edges. As a result, the conditional in (6) can be rewritten as:\np(hi|hj) = log σ ( hj T hi )\n+ K∑ i=1 Ehi∼P (v) [ log σ ( −hjThi )] ,\nwhere σ(x) = 1/(1 + exp(−x)) is the sigmoid function. Following Mikolov et al. (2013), we set the noise distribution P (v) ∝ d3/4v , where dv is the out-degree of vertex v ∈ V . The number of negative samples K is treated as a hyperparameter. We\nuse Adam (Kingma and Ba, 2014) to update the model parameters while minimizing the objective in (1)."
  }, {
    "heading": "3 Related Work",
    "text": "Network embedding methods can be divided into two categories: (i) methods that solely rely on the structure, e.g., vertex information; and (ii) methods that leverage both the structure the network and the information associated with its vertices.\nFor the first type of models, DeepWalk (Perozzi et al., 2014) has been proposed to learn node representations by generating node contexts via truncated random walks; it is similar to the concept of Skip-Gram (Mikolov et al., 2013), originally introduced for learning word embeddings. LINE (Tang et al., 2015) proposed a principled objective to explicitly capture first-order and second-order proximity information from the vertices of a network. Further, Grover and Leskovec (2016) introduced a biased random walk procedure to generate the neighborhood for a vertex, which infers the node representations by maximizing the likelihood of preserving the local context information of vertices. However, these algorithms generally ignore rich heterogeneous information associated with vertices. Here, we focus on incorporating textual information into network embeddings.\nTo learn semantic-aware network embeddings, Text-Associated DeepWalk (TADW) (Yang et al., 2015) proposed to integrate textual features into network representations with matrix factorization, by leveraging the equivalence between DeepWalk and matrix factorization. CENE (ContentEnhanced Network Embedding) (Sun et al., 2016) used bidirectional recurrent neural networks to abstract the semantic information associated with vertices, which further demonstrated the advantages of employing textual information. To capture the interaction between sentences of vertex pairs, Tu et al. (2017) further proposed ContextAware Network Embedding (CANE), that employs a mutual attention mechanism to adaptively account for the textual information from neighboring vertices. Despite showing improvement over structure-only models, these semantic-aware methods cannot capture word-level alignment information, which is important for inferring the relationship between node pairs, as previously discussed. In this work, we introduce a WordAlignment-based Network Embedding (WANE)\nframework, which aligns and aggregates word-byword matching features in an explicit manner, to obtain more informative network representations."
  }, {
    "heading": "4 Experimental Setup",
    "text": "Datasets We investigate the effectiveness of the proposed WANE model on two standard networkembedding-based tasks, i.e., link prediction and multi-label vertex classification. The following three real-world datasets are employed for quantitative evaluation: (i) Cora, a standard paper citation network that contains 2,277 machine learning papers (vertices) grouped into 7 categories and connected by 5,214 citations (edges) (ii) HepTh, another citation network of 1,038 papers with abstract information and 1,990 citations; (iii) Zhihu, a network of 10,000 active users from Zhihu, the largest Q&A website in China, where 43,894 vertices and descriptions of the Q&A topics are available. The average lengths of the text in the three datasets are 90, 54, and 190, respectively. To make direct comparison with existing work, we employed the same preprocessing procedure1 of Tu et al. (2017).\nTraining Details For fair comparison with CANE (Tu et al., 2017), we set the dimension of network embedding for our model to 200. The number of negative samples K is selected from {1, 3, 5} according to performance on the validation set. We set the batch size as 128, and the model is trained using Adam (Kingma and Ba, 2014), with a learning rate of 1× 10−3 for all parameters. Dropout regularization is employed on the word embedding layer, with rate selected from {0.5, 0.7, 0.9}, also on the validation set. Our code will be released to encourage future research.\nBaselines To evaluate the effectiveness of our framework, we consider several strong baseline methods for comparisons, which can be categorized into two types: (i) models that only exploit structural information: MMB (Airoldi et al., 2008), DeepWalk (Perozzi et al., 2014), LINE (Tang et al., 2015), and node2vec (Grover and Leskovec, 2016). (ii) Models that take both structural and textual information into account: Naive combination (which simply concatenates the structure-based embedding with CNN-based text embeddings, as explored in (Tu et al., 2017), TADW (Yang et al., 2015), CENE (Sun et al.,\n1https://github.com/thunlp/CANE\n2016), and CANE (Tu et al., 2017). It is worth noting that unlike all these baselines, WANE explicitly captures word-by-word interactions between text sequence pairs.\nEvaluation Metrics We employ AUC (Hanley and McNeil, 1982) as the evaluation metric for link prediction, which measures the probability that vertices within an existing edge, randomly sampled from the test set, are more similar than those from a random pair of non-existing vertices, in terms of the inner product between their corresponding embeddings.\nFor multi-label vertex classification and to ensure fair comparison, we follow Yang et al. (2015) and employ a linear SVM on top of the learned network representations, and evaluate classification accuracy with different training ratios (varying from 10% to 50%). The experiments for each setting are repeated 10 times and the average test accuracy is reported."
  }, {
    "heading": "5 Experimental Results",
    "text": "We experiment with three variants for our WANE model: (i) WANE: where the word embeddings of each text sequence are simply average to obtain the sentence representations, similar to (Joulin et al., 2016; Shen et al., 2018c). (ii) WANE-\nwc: where the textual embeddings are inferred with word-by-context alignment. (iii) WANE-ww: where the word-by-word alignment mechanism is leveraged to capture word-by-word matching features between available sequence pairs."
  }, {
    "heading": "5.1 Link Prediction",
    "text": "Table 1 presents link prediction results for all models on Cora dataset, where different ratios of edges are used for training. It can be observed that when only a small number of edges are available, e.g., 15%, the performances of structure-only methods is much worse than semantic-aware models that have taken textual information into consideration The perfromance gap tends to be smaller when a larger proportion of edges are employed for training. This highlights the importance of incorporating associated text sequences into network embeddings, especially in the case of representing a relatively sparse network. More importantly, the proposed WANE-ww model consistently outperforms other semantic-aware NE models by a substantial margin, indicating that our model better abstracts word-by-word alignment features from the text sequences available, thus yields more informative network representations.\nFurther, WANE-ww also outperforms WANE or WANE-wc on a wide range of edge training pro-\nportions. This suggests that: (i) adaptively assigning different weights to each word within a text sequence (according to its paired sequence) tends to be a better strategy than treating each word equally (as in WANE). (ii) Solely considering the context-by-word alignment features (as in WANE-wc) is not as efficient as abstracting word-by-word matching information from text sequences. We observe the same trend and the superiority of our WANE-ww models on the other two datasets, HepTh and Zhihu datasets, as shown in Table 2 and 3, respectively."
  }, {
    "heading": "5.2 Multi-label Vertex Classification",
    "text": "We further evaluate the effectiveness of proposed framework on vertex classification tasks with the Cora dataset. Similar to Tu et al. (2017), we generate the global embedding for each vertex by taking the average over its context-aware embeddings with all other connected vertices. As shown in Figure 3(c), semantic-aware NE methods (including naive combination, TADW, CENE, CANE) exhibit higher test accuracies than semantic-agnostic models, demonstrating the advantages of incorporating textual information. Moreover, WANEww consistently outperforms other competitive semantic-aware models on a wide range of labeled proportions, suggesting that explicitly capturing word-by-word alignment features is not only use-\nful for vertex-pair-based tasks, such as link prediction, but also results in better global embeddings which are required for vertex classification tasks. These observations further demonstrate that WANE-ww is an effective and robust framework to extract informative network representations.\nSemi-supervised classification We further consider the case where the training ratio is less than 10%, and evaluate the learned network embedding with a semi-supervised classifier. Following Yang et al. (2015), we employ a Transductive SVM (TSVM) classifier with a linear kernel (Joachims, 1998) for fairness. As illustrated in Table 4, the proposed WANE-ww model exhibits superior performances in most cases. This may be due to the fact that WANE-ww extracts information from the vertices and text sequences jointly, thus the obtained vertex embeddings are less noisy and perform more consistently with relatively small training ratios (Yang et al., 2015)."
  }, {
    "heading": "5.3 Ablation Study",
    "text": "Motivated by the observation in Wang and Jiang (2017) that the advantages of different functions to match two vectors vary from task to task, we further explore the choice of alignment and aggregation functions in our WANE-ww model. To match the word pairs between two sequences, we experimented with three types of operations: sub-\ntraction, multiplication, and Sub & Multi (the concatenation of both approaches). As shown in Figure 3(a) and 3(b), element-wise subtraction tends to be the most effective operation performancewise on both Cora and Zhihu datasets, and performs comparably to Sub & Multi on the HepTh dataset. This finding is consistent with the results in Wang and Jiang (2017), where they found that simple comparison functions based on elementwise operations work very well on matching text sequences.\nIn terms of the aggregation functions, we compare (one-layer) CNN, mean-pooling, and maxpooling operations to accumulate the matching vectors. As shown in Figure 3(b), max-pooling has the best empirical results on all three datasets. This may be attributed to the fact that the maxpooling operation is better at selecting important word-by-word alignment features, among all matching vectors available, to infer the relationship between vertices."
  }, {
    "heading": "5.4 Qualitative Analysis",
    "text": "Embedding visualization To visualize the learned network representations, we further employ t-SNE to map the low-dimensional vectors of the vertices to a 2-D embedding space. We use the Cora dataset because there are labels associated with each vertex and WANE-ww to obtain the network embeddings.\nAs shown in Figure 4 where each point indicates one paper (vertex), and the color of each point indicates the category it belongs to, the embeddings of the same label are indeed very close in the 2-D plot, while those with different labels are relatively farther from each other. Note that the model is not trained with any label information, indicating that WANE-ww has extracted meaningful patterns from the text and vertex information available.\nCase study The proposed word-by-word alignment mechanism can be used to highlight the most informative words (and the corresponding matching features) wrt the relationship between vertices. We visualize the norm of matching vector obtained in (11) in Figure 5 for the Cora dataset. It can be observed that matched key words, e.g., ‘MCMC’, ‘convergence’, between the text sequences are indeed assigned higher values in the matching vectors. These words would be selected preferentially by the final max-pooling aggregation operation. This indicates that WANEww is able to abstract important word-by-word alignment features from paired text sequences."
  }, {
    "heading": "6 Conclusions",
    "text": "We have presented a novel framework to incorporate the semantic information from vertexassociated text sequences into network embeddings. An align-aggregate framework is introduced, which first aligns a sentence pair by capturing the word-by-word matching features, and then adaptively aggregating these word-level alignment\ninformation with an efficient max-pooling function. The semantic features abstracted are further encoded, along with the structural information, into a shared space to obtain the final network embedding. Compelling experimental results on several tasks demonstrated the advantages of our approach. In future work, we aim to leverage abundant unlabeled text data to abstract more informative sentence representations (Dai and Le, 2015; Zhang et al., 2017; Shen et al., 2017; Tang and de Sa, 2018) . Another interesting direction is to learn binary and compact network embedding, which could be more efficient in terms of both computation and memory, relative to its continuous counterpart (Shen et al., 2018b).\nAcknowledgments This research was supported in part by DARPA, DOE, NIH, ONR and NSF."
  }],
  "year": 2018,
  "references": [{
    "title": "Mixed membership stochastic blockmodels",
    "authors": ["Edoardo M. Airoldi", "David M. Blei", "Stephen E. Fienberg", "Eric P. Xing."],
    "venue": "JMLR 9:1981–2014.",
    "year": 2008
  }, {
    "title": "Grarep: Learning graph representations with global structural information",
    "authors": ["Shaosheng Cao", "Wei Lu", "Qiongkai Xu."],
    "venue": "CIKM. ACM, pages 891– 900.",
    "year": 2015
  }, {
    "title": "Incorporate group information to enhance network embedding",
    "authors": ["Jifan Chen", "Qi Zhang", "Xuanjing Huang."],
    "venue": "CIKM. ACM, pages 1901–1904.",
    "year": 2016
  }, {
    "title": "Semi-supervised sequence learning",
    "authors": ["Andrew M Dai", "Quoc V Le."],
    "venue": "Advances in neural information processing systems. pages 3079–3087.",
    "year": 2015
  }, {
    "title": "node2vec: Scalable feature learning for networks",
    "authors": ["Aditya Grover", "Jure Leskovec."],
    "venue": "SIGKDD. ACM, pages 855–864.",
    "year": 2016
  }, {
    "title": "The meaning and use of the area under a receiver operating characteristic (roc) curve",
    "authors": ["James A Hanley", "Barbara J McNeil."],
    "venue": "Radiology 143(1):29–",
    "year": 1982
  }, {
    "title": "Pairwise word interaction modeling with deep neural networks for semantic similarity measurement",
    "authors": ["Hua He", "Jimmy Lin."],
    "venue": "NAACL. pages 937–948.",
    "year": 2016
  }, {
    "title": "Making large-scale svm learning practical",
    "authors": ["Thorsten Joachims."],
    "venue": "Technical report, Technical report, SFB 475: Komplexitätsreduktion in Multivariaten Datenstrukturen, Universität Dortmund.",
    "year": 1998
  }, {
    "title": "Bag of tricks for efficient text classification",
    "authors": ["Armand Joulin", "Edouard Grave", "Piotr Bojanowski", "Tomas Mikolov."],
    "venue": "arXiv preprint arXiv:1607.01759 .",
    "year": 2016
  }, {
    "title": "Adam: A method for stochastic optimization",
    "authors": ["Diederik P Kingma", "Jimmy Ba."],
    "venue": "arXiv preprint arXiv:1412.6980 .",
    "year": 2014
  }, {
    "title": "Distributed representations of words and phrases and their compositionality",
    "authors": ["Tomas Mikolov", "Ilya Sutskever", "Kai Chen", "Greg S Corrado", "Jeff Dean."],
    "venue": "NIPS. pages 3111–3119.",
    "year": 2013
  }, {
    "title": "A decomposable attention model for natural language inference",
    "authors": ["Ankur P Parikh", "Oscar Täckström", "Dipanjan Das", "Jakob Uszkoreit."],
    "venue": "EMNLP .",
    "year": 2016
  }, {
    "title": "Deepwalk: Online learning of social representations",
    "authors": ["Bryan Perozzi", "Rami Al-Rfou", "Steven Skiena."],
    "venue": "SIGKDD. ACM, pages 701–710.",
    "year": 2014
  }, {
    "title": "A simple neural network module for relational reasoning",
    "authors": ["Adam Santoro", "David Raposo", "David G Barrett", "Mateusz Malinowski", "Razvan Pascanu", "Peter Battaglia", "Tim Lillicrap."],
    "venue": "NIPS. pages 4974–4983.",
    "year": 2017
  }, {
    "title": "Learning context-sensitive convolutional filters for text processing",
    "authors": ["Dinghan Shen", "Renqiang Min Martin", "Yitong Li", "Lawrence Carin."],
    "venue": "EMNLP.",
    "year": 2018
  }, {
    "title": "Nash: Toward end-to-end neural architecture for generative semantic hashing",
    "authors": ["Dinghan Shen", "Qinliang Su", "Paidamoyo Chapfuwa", "Wenlin Wang", "Guoyin Wang", "Lawrence Carin", "Ricardo Henao."],
    "venue": "arXiv preprint arXiv:1805.05361 .",
    "year": 2018
  }, {
    "title": "Baseline needs more love: On simple word-embedding-based models and associated pool",
    "authors": ["Dinghan Shen", "Guoyin Wang", "Wenlin Wang", "Martin Renqiang Min", "Qinliang Su", "Yizhe Zhang", "Chunyuan Li", "Ricardo Henao", "Lawrence Carin"],
    "year": 2018
  }, {
    "title": "Deconvolutional latent-variable model for text sequence matching",
    "authors": ["Dinghan Shen", "Yizhe Zhang", "Ricardo Henao", "Qinliang Su", "Lawrence Carin."],
    "venue": "arXiv preprint arXiv:1709.07109 .",
    "year": 2017
  }, {
    "title": "A general framework for content-enhanced network representation learning",
    "authors": ["Xiaofei Sun", "Jiang Guo", "Xiao Ding", "Ting Liu."],
    "venue": "arXiv preprint arXiv:1610.02906 .",
    "year": 2016
  }, {
    "title": "Line: Large-scale information network embedding",
    "authors": ["Jian Tang", "Meng Qu", "Mingzhe Wang", "Ming Zhang", "Jun Yan", "Qiaozhu Mei."],
    "venue": "WWW. International World Wide Web Conferences Steering Committee, pages 1067–1077.",
    "year": 2015
  }, {
    "title": "Relational learning via latent social dimensions",
    "authors": ["Lei Tang", "Huan Liu."],
    "venue": "SIGKDD. ACM, pages 817–826.",
    "year": 2009
  }, {
    "title": "Multi-view sentence representation learning",
    "authors": ["Shuai Tang", "Virginia R de Sa."],
    "venue": "arXiv preprint arXiv:1805.07443 .",
    "year": 2018
  }, {
    "title": "A global geometric framework for nonlinear dimensionality reduction",
    "authors": ["Joshua B Tenenbaum", "Vin De Silva", "John C Langford."],
    "venue": "science 290(5500):2319–2323.",
    "year": 2000
  }, {
    "title": "Cane: Context-aware network embedding for relation modeling",
    "authors": ["Cunchao Tu", "Han Liu", "Zhiyuan Liu", "Maosong Sun."],
    "venue": "ACL. volume 1, pages 1722– 1731.",
    "year": 2017
  }, {
    "title": "Max-margin deepwalk: Discriminative learning of network representation",
    "authors": ["Cunchao Tu", "Weicheng Zhang", "Zhiyuan Liu", "Maosong Sun."],
    "venue": "IJCAI. pages 3889–3895.",
    "year": 2016
  }, {
    "title": "Structural deep network embedding",
    "authors": ["Daixin Wang", "Peng Cui", "Wenwu Zhu."],
    "venue": "SIGKDD. ACM, pages 1225–1234.",
    "year": 2016
  }, {
    "title": "A compareaggregate model for matching text sequences",
    "authors": ["Shuohang Wang", "Jing Jiang."],
    "venue": "ICLR.",
    "year": 2017
  }, {
    "title": "Community preserving network embedding",
    "authors": ["Xiao Wang", "Peng Cui", "Jing Wang", "Jian Pei", "Wenwu Zhu", "Shiqiang Yang."],
    "venue": "AAAI. pages 203– 209.",
    "year": 2017
  }, {
    "title": "Bilateral multi-perspective matching for natural language sentences",
    "authors": ["Zhiguo Wang", "Wael Hamza", "Radu Florian."],
    "venue": "IJCAI.",
    "year": 2017
  }, {
    "title": "Network representation learning with rich text information",
    "authors": ["Cheng Yang", "Zhiyuan Liu", "Deli Zhao", "Maosong Sun", "Edward Y Chang."],
    "venue": "IJCAI. pages 2111–2117.",
    "year": 2015
  }, {
    "title": "Diffusion maps for textual network embedding",
    "authors": ["Xinyuan Zhang", "Yitong Li", "Dinghan Shen", "Lawrence Carin."],
    "venue": "arXiv preprint arXiv:1805.09906 .",
    "year": 2018
  }, {
    "title": "Deconvolutional paragraph representation learning",
    "authors": ["Yizhe Zhang", "Dinghan Shen", "Guoyin Wang", "Zhe Gan", "Ricardo Henao", "Lawrence Carin."],
    "venue": "Advances in Neural Information Processing Systems. pages 4169–4179.",
    "year": 2017
  }],
  "id": "SP:6263238e1e0834bc6fb210adf54921823adf276a",
  "authors": [{
    "name": "Dinghan Shen",
    "affiliations": []
  }, {
    "name": "Xinyuan Zhang",
    "affiliations": []
  }, {
    "name": "Ricardo Henao",
    "affiliations": []
  }, {
    "name": "Lawrence Carin",
    "affiliations": []
  }],
  "abstractText": "Network embeddings, which learn lowdimensional representations for each vertex in a large-scale network, have received considerable attention in recent years. For a wide range of applications, vertices in a network are typically accompanied by rich textual information such as user profiles, paper abstracts, etc. We propose to incorporate semantic features into network embeddings by matching important words between text sequences for all pairs of vertices. We introduce a word-by-word alignment framework that measures the compatibility of embeddings between word pairs, and then adaptively accumulates these alignment features with a simple yet effective aggregation function. In experiments, we evaluate the proposed framework on three real-world benchmarks for downstream tasks, including link prediction and multi-label vertex classification. Results demonstrate that our model outperforms state-of-the-art network embedding methods by a large margin.",
  "title": "Improved Semantic-Aware Network Embedding with Fine-Grained Word Alignment"
}