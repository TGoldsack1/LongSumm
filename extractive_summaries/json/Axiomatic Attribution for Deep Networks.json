{
  "sections": [{
    "heading": "1. Motivation and Summary of Results",
    "text": "We study the problem of attributing the prediction of a deep network to its input features.\nDefinition 1. Formally, suppose we have a function F : Rn → [0, 1] that represents a deep network, and an input x = (x1, . . . , xn) ∈ Rn. An attribution of the prediction at input x relative to a baseline input x′ is a vector AF (x, x\n′) = (a1, . . . , an) ∈ Rn where ai is the contribution of xi to the prediction F (x).\nFor instance, in an object recognition network, an attribution method could tell us which pixels of the image were responsible for a certain label being picked (see Figure 2). The attribution problem was previously studied by various papers (Baehrens et al., 2010; Simonyan et al., 2013;\n*Equal contribution 1Google Inc., Mountain View, USA. Correspondence to: Mukund Sundararajan <mukunds@google.com>, Ankur Taly <ataly@google.com>.\nProceedings of the 34 th International Conference on Machine Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017 by the author(s).\nShrikumar et al., 2016; Binder et al., 2016; Springenberg et al., 2014).\nThe intention of these works is to understand the inputoutput behavior of the deep network, which gives us the ability to improve it. Such understandability is critical to all computer programs, including machine learning models. There are also other applications of attribution. They could be used within a product driven by machine learning to provide a rationale for the recommendation. For instance, a deep network that predicts a condition based on imaging could help inform the doctor of the part of the image that resulted in the recommendation. This could help the doctor understand the strengths and weaknesses of a model and compensate for it. We give such an example in Section 6.2. Attributions could also be used by developers in an exploratory sense. For instance, we could use a deep network to extract insights that could be then used in a rulebased system. In Section 6.3, we give such an example.\nA significant challenge in designing an attribution technique is that they are hard to evaluate empirically. As we discuss in Section 4, it is hard to tease apart errors that stem from the misbehavior of the model versus the misbehavior of the attribution method. To compensate for this shortcoming, we take an axiomatic approach. In Section 2 we identify two axioms that every attribution method must satisfy. Unfortunately most previous methods do not satisfy one of these two axioms. In Section 3, we use the axioms to identify a new method, called integrated gradients.\nUnlike previously proposed methods, integrated gradients do not need any instrumentation of the network, and can be computed easily using a few calls to the gradient operation, allowing even novice practitioners to easily apply the technique.\nIn Section 6, we demonstrate the ease of applicability over several deep networks, including two images networks, two text processing networks, and a chemistry network. These applications demonstrate the use of our technique in either improving our understanding of the network, performing debugging, performing rule extraction, or aiding an end user in understanding the network’s prediction.\nRemark 1. Let us briefly examine the need for the baseline in the definition of the attribution problem. A common way for humans to perform attribution relies on counter-\nfactual intuition. When we assign blame to a certain cause we implicitly consider the absence of the cause as a baseline for comparing outcomes. In a deep network, we model the absence using a single baseline input. For most deep networks, a natural baseline exists in the input space where the prediction is neutral. For instance, in object recognition networks, it is the black image. The need for a baseline has also been pointed out by prior work on attribution (Shrikumar et al., 2016; Binder et al., 2016)."
  }, {
    "heading": "2. Two Fundamental Axioms",
    "text": "We now discuss two axioms (desirable characteristics) for attribution methods. We find that other feature attribution methods in literature break at least one of the two axioms. These methods include DeepLift (Shrikumar et al., 2016; 2017), Layer-wise relevance propagation (LRP) (Binder et al., 2016), Deconvolutional networks (Zeiler & Fergus, 2014), and Guided back-propagation (Springenberg et al., 2014). As we will see in Section 3, these axioms will also guide the design of our method.\nGradients. For linear models, ML practitioners regularly inspect the products of the model coefficients and the feature values in order to debug predictions. Gradients (of the output with respect to the input) is a natural analog of the model coefficients for a deep network, and therefore the product of the gradient and feature values is a reasonable starting point for an attribution method (Baehrens et al., 2010; Simonyan et al., 2013); see the third column of Figure 2 for examples. The problem with gradients is that they break sensitivity, a property that all attribution methods should satisfy."
  }, {
    "heading": "2.1. Axiom: Sensitivity(a)",
    "text": "An attribution method satisfies Sensitivity(a) if for every input and baseline that differ in one feature but have different predictions then the differing feature should be given a non-zero attribution. (Later in the paper, we will have a part (b) to this definition.)\nGradients violate Sensitivity(a): For a concrete example, consider a one variable, one ReLU network, f(x) = 1 − ReLU(1−x). Suppose the baseline is x = 0 and the input is x = 2. The function changes from 0 to 1, but because f becomes flat at x = 1, the gradient method gives attribution of 0 to x. Intuitively, gradients break Sensitivity because the prediction function may flatten at the input and thus have zero gradient despite the function value at the input being different from that at the baseline. This phenomenon has been reported in previous work (Shrikumar et al., 2016).\nPractically, the lack of sensitivity causes gradients to focus on irrelevant features (see the “fireboat” example in Fig-\nure 2).\nOther back-propagation based approaches. A second set of approaches involve back-propagating the final prediction score through each layer of the network down to the individual features. These include DeepLift, Layer-wise relevance propagation (LRP), Deconvolutional networks (DeConvNets), and Guided back-propagation. These methods differ in the specific backpropagation logic for various activation functions (e.g., ReLU, MaxPool, etc.).\nUnfortunately, Deconvolution networks (DeConvNets), and Guided back-propagation violate Sensitivity(a). This is because these methods back-propogate through a ReLU node only if the ReLU is turned on at the input. This makes the method similar to gradients, in that, the attribution is zero for features with zero gradient at the input despite a non-zero gradient at the baseline. We defer the specific counterexamples to the full version of this paper (Sundararajan et al., 2017).\nMethods like DeepLift and LRP tackle the Sensitivity issue by employing a baseline, and in some sense try to compute “discrete gradients” instead of (instantaeneous) gradients at the input. (The two methods differ in the specifics of how they compute the discrete gradient). But the idea is that a large, discrete step will avoid flat regions, avoiding a breakage of sensitivity. Unfortunately, these methods violate a different requirement on attribution methods."
  }, {
    "heading": "2.2. Axiom: Implementation Invariance",
    "text": "Two networks are functionally equivalent if their outputs are equal for all inputs, despite having very different implementations. Attribution methods should satisfy Implementation Invariance, i.e., the attributions are always identical for two functionally equivalent networks. To motivate this, notice that attribution can be colloquially defined as assigning the blame (or credit) for the output to the input features. Such a definition does not refer to implementation details.\nWe now discuss intuition for why DeepLift and LRP break Implementation Invariance; a concrete example is provided in the full version of this paper (Sundararajan et al., 2017). First, notice that gradients are invariant to implementation. In fact, the chain-rule for gradients ∂f∂g = ∂f ∂h · ∂h ∂g is essentially about implementation invariance. To see this, think of g and f as the input and output of a system, and h being some implementation detail of the system. The gradient of output f to input g can be computed either directly by ∂f∂g , ignoring the intermediate function h (implementation detail), or by invoking the chain rule via h. This is exactly how backpropagation works.\nMethods like LRP and DeepLift replace gradients with discrete gradients and still use a modified form of backpropa-\ngation to compose discrete gradients into attributions. Unfortunately, the chain rule does not hold for discrete gradients in general. Formally f(x1)−f(x0)g(x1)−g(x0) 6= f(x1)−f(x0) h(x1)−h(x0) · h(x1)−h(x0) g(x1)−g(x0) , and therefore these methods fail to satisfy implementation invariance.\nIf an attribution method fails to satisfy Implementation Invariance, the attributions are potentially sensitive to unimportant aspects of the models. For instance, if the network architecture has more degrees of freedom than needed to represent a function then there may be two sets of values for the network parameters that lead to the same function. The training procedure can converge at either set of values depending on the initializtion or for other reasons, but the underlying network function would remain the same. It is undesirable that attributions differ for such reasons."
  }, {
    "heading": "3. Our Method: Integrated Gradients",
    "text": "We are now ready to describe our technique. Intuitively, our technique combines the Implementation Invariance of Gradients along with the Sensitivity of techniques like LRP or DeepLift.\nFormally, suppose we have a function F : Rn → [0, 1] that represents a deep network. Specifically, let x ∈ Rn be the input at hand, and x′ ∈ Rn be the baseline input. For image networks, the baseline could be the black image, while for text models it could be the zero embedding vector.\nWe consider the straightline path (in Rn) from the baseline x′ to the input x, and compute the gradients at all points along the path. Integrated gradients are obtained by cumulating these gradients. Specifically, integrated gradients are defined as the path intergral of the gradients along the straightline path from the baseline x′ to the input x.\nThe integrated gradient along the ith dimension for an input x and baseline x′ is defined as follows. Here, ∂F (x)∂xi is the gradient of F (x) along the ith dimension.\nIntegratedGradsi(x) ::= (xi−x ′ i)× ∫ 1 α=0 ∂F (x′+α×(x−x′)) ∂xi dα\n(1) Axiom: Completeness. Integrated gradients satisfy an\naxiom called completeness that the attributions add up to the difference between the output of F at the input x and the baseline x′. This axiom is identified as being desirable by Deeplift and LRP. It is a sanity check that the attribution method is somewhat comprehensive in its accounting, a property that is clearly desirable if the networks score is used in a numeric sense, and not just to pick the top label, for e.g., a model estimating insurance premiums from credit features of individuals.\nThis is formalized by the proposition below, which instanti-\nates the fundamental theorem of calculus for path integrals.\nProposition 1. If F : Rn → R is differentiable almost everywhere 1 then\nΣni=1IntegratedGradsi(x) = F (x)− F (x′)\nFor most deep networks, it is possible to choose a baseline such that the prediction at the baseline is near zero (F (x′) ≈ 0). (For image models, the black image baseline indeed satisfies this property.) In such cases, there is an intepretation of the resulting attributions that ignores the baseline and amounts to distributing the output to the individual input features.\nRemark 2. Integrated gradients satisfies Sensivity(a) because Completeness implies Sensivity(a) and is thus a strengthening of the Sensitivity(a) axiom. This is because Sensitivity(a) refers to a case where the baseline and the input differ only in one variable, for which Completeness asserts that the difference in the two output values is equal to the attribution to this variable. Attributions generated by integrated gradients satisfy Implementation Invariance since they are based only on the gradients of the function represented by the network."
  }, {
    "heading": "4. Uniqueness of Integrated Gradients",
    "text": "Prior literature has relied on empirically evaluating the attribution technique. For instance, in the context of an object recognition task, (Samek et al., 2015) suggests that we select the top k pixels by attribution and randomly vary their intensities and then measure the drop in score. If the attribution method is good, then the drop in score should be large. However, the images resulting from pixel perturbation could be unnatural, and it could be that the scores drop simply because the network has never seen anything like it in training. (This is less of a concern with linear or logistic models where the simplicity of the model ensures that ablating a feature does not cause strange interactions.)\nA different evaluation technique considers images with human-drawn bounding boxes around objects, and computes the percentage of pixel attribution inside the box. While for most objects, one would expect the pixels located on the object to be most important for the prediction, in some cases the context in which the object occurs may also contribute to the prediction. The cabbage butterfly image from Figure 2 is a good example of this where the pixels on the leaf are also surfaced by the integrated gradients.\nRoughly, we found that every empirical evaluation tech-\n1Formally, this means the function F is continuous everywhere and the partial derivative of F along each input dimension satisfies Lebesgue’s integrability condition, i.e., the set of discontinuous points has measure zero. Deep networks built out of Sigmoids, ReLUs, and pooling operators satisfy this condition.\nnique we could think of could not differentiate between artifacts that stem from perturbing the data, a misbehaving model, and a misbehaving attribution method. This was why we turned to an axiomatic approach in designing a good attribution method (Section 2). While our method satisfies Sensitivity and Implementation Invariance, it certainly isn’t the unique method to do so.\nWe now justify the selection of the integrated gradients method in two steps. First, we identify a class of methods called Path methods that generalize integrated gradients. We discuss that path methods are the only methods to satisfy certain desirable axioms. Second, we argue why integrated gradients is somehow canonical among the different path methods."
  }, {
    "heading": "4.1. Path Methods",
    "text": "Integrated gradients aggregate the gradients along the inputs that fall on the straightline between the baseline and the input. There are many other (non-straightline) paths that monotonically interpolate between the two points, and each such path will yield a different attribution method. For instance, consider the simple case when the input is two dimensional. Figure 1 has examples of three paths, each of which corresponds to a different attribution method.\nFormally, let γ = (γ1, . . . , γn) : [0, 1] → Rn be a smooth function specifying a path in Rn from the baseline x′ to the input x, i.e., γ(0) = x′ and γ(1) = x.\nGiven a path function γ, path integrated gradients are obtained by integrating the gradients along the path γ(α) for α ∈ [0, 1]. Formally, path integrated gradients along the ith dimension for an input x is defined as follows.\nPathIntegratedGradsγi (x) ::= ∫ 1 α=0 ∂F (γ(α)) ∂γi(α) ∂γi(α) ∂α dα\n(2) where ∂F (x)∂xi is the gradient of F along the i\nth dimension at x.\nAttribution methods based on path integrated gradients are collectively known as path methods. Notice that integrated gradients is a path method for the straightline path specified γ(α) = x′ + α× (x− x′) for α ∈ [0, 1]. Remark 3. All path methods satisfy Implementation Invariance. This follows from the fact that they are defined using the underlying gradients, which do not depend on the implementation. They also satisfy Completeness (the proof is similar to that of Proposition 1) and Sensitvity(a) which is implied by Completeness (see Remark 2).\nMore interestingly, path methods are the only methods that satisfy certain desirable axioms. (For formal definitions of the axioms and proof of Proposition 2, see Friedman (Friedman, 2004).)\nAxiom: Sensitivity(b). (called Dummy in (Friedman, 2004)) If the function implemented by the deep network does not depend (mathematically) on some variable, then the attribution to that variable is always zero.\nThis is a natural complement to the definition of Sensitivity(a) from Section 2. This definition captures desired insensitivity of the attributions.\nAxiom: Linearity. Suppose that we linearly composed two deep networks modeled by the functions f1 and f2 to form a third network that models the function a×f1+b×f2, i.e., a linear combination of the two networks. Then we’d like the attributions for a× f1 + b× f2 to be the weighted sum of the attributions for f1 and f2 with weights a and b respectively. Intuitively, we would like the attributions to preserve any linearity within the network. Proposition 2. (Theorem 1 (Friedman, 2004)) Path methods are the only attribution methods that always satisfy Implementation Invariance, Sensitivity(b), Linearity, and Completeness. Remark 4. We note that these path integrated gradients have been used within the cost-sharing literature in economics where the function models the cost of a project as a function of the demands of various participants, and the attributions correspond to cost-shares. Integrated gradients correspond to a cost-sharing method called AumannShapley (Aumann & Shapley, 1974). Proposition 2 holds for our attribution problem because mathematically the cost-sharing problem corresponds to the attribution problem with the benchmark fixed at the zero vector. (Implementation Invariance is implicit in the cost-sharing literature as the cost functions are considered directly in their mathematical form.)"
  }, {
    "heading": "4.2. Integrated Gradients is Symmetry-Preserving",
    "text": "In this section, we formalize why the straightline path chosen by integrated gradients is canonical. First, observe that\nit is the simplest path that one can define mathematically. Second, a natural property for attribution methods is to preserve symmetry, in the following sense.\nSymmetry-Preserving. Two input variables are symmetric w.r.t. a function if swapping them does not change the function. For instance, x and y are symmetric w.r.t. F if and only if F (x, y) = F (y, x) for all values of x and y. An attribution method is symmetry preserving, if for all inputs that have identical values for symmetric variables and baselines that have identical values for symmetric variables, the symmetric variables receive identical attributions.\nE.g., consider the logistic model Sigmoid(x1 + x2 + . . . ). x1 and x2 are symmetric variables for this model. For an input where x1 = x2 = 1 (say) and baseline where x1 = x2 = 0 (say), a symmetry preserving method must offer identical attributions to x1 and x2.\nIt seems natural to ask for symmetry-preserving attribution methods because if two variables play the exact same role in the network (i.e., they are symmetric and have the same values in the baseline and the input) then they ought to receive the same attrbiution.\nTheorem 1. Integrated gradients is the unique path method that is symmetry-preserving.\nThe proof is provided in the full version of this paper (Sundararajan et al., 2017).\nRemark 5. If we allow averaging over the attributions from multiple paths, then are other methods that satisfy all the axioms in Theorem 1. In particular, there is the method by Shapley-Shubik (Shapley & Shubik, 1971) from the cost sharing literature, and used by (Lundberg & Lee, 2016; Datta et al., 2016) to compute feature attributions (though they were not studying deep networks). In this method, the attribution is the average of those from n! extremal paths; here n is the number of features. Here each such path considers an ordering of the input features, and sequentially changes the input feature from its value at the baseline to its value at the input. This method yields attributions that are different from integrated gradients. If the function of interest is min(x1, x2), the baseline is x1 = x2 = 0, and the input is x1 = 1, x2 = 3, then integrated gradients attributes the change in the function value entirely to the critical variable x1, whereas Shapley-Shubik assigns attributions of 1/2 each; it seems somewhat subjective to prefer one result over the other.\nWe also envision other issues with applying Shapley-Shubik to deep networks: It is computationally expensive; in an object recognition network that takes an 100X100 image as input, n is 10000, and n! is a gigantic number. Even if one samples few paths randomly, evaluating the attributions for a single path takes n calls to the deep network.\nIn contrast, integrated gradients is able to operate with 20 to 300 calls. Further, the Shapley-Shubik computation visit inputs that are combinations of the input and the baseline. It is possible that some of these combinations are very different from anything seen during training. We speculate that this could lead to attribution artifacts."
  }, {
    "heading": "5. Applying Integrated Gradients",
    "text": "Selecting a Benchmark. A key step in applying integrated gradients is to select a good baseline. We recommend that developers check that the baseline has a near-zero score— as discussed in Section 3, this allows us to interpret the attributions as a function of the input. But there is more to a good baseline: For instance, for an object recogntion network it is possible to create an adversarial example that has a zero score for a given input label (say elephant), by applying a tiny, carefully-designed perturbation to an image with a very different label (say microscope) (cf. (Goodfellow et al., 2015)). The attributions can then include undesirable artifacts of this adversarially constructed baseline. So we would additionally like the baseline to convey a complete absence of signal, so that the features that are apparent from the attributions are properties only of the input, and not of the baseline. For instance, in an object recognition network, a black image signifies the absence of objects. The black image isn’t unique in this sense—an image consisting of noise has the same property. However, using black as a baseline may result in cleaner visualizations of “edge” features. For text based networks, we have found that the allzero input embedding vector is a good baseline. The action of training causes unimportant words tend to have small norms, and so, in the limit, unimportance corresponds to the all-zero baseline. Notice that the black image corresponds to a valid input to an object recognition network, and is also intuitively what we humans would consider absence of signal. In contrast, the all-zero input vector for a text network does not correspond to a valid input; it nevertheless works for the mathematical reason described above.\nComputing Integrated Gradients. The integral of integrated gradients can be efficiently approximated via a summation. We simply sum the gradients at points occurring at sufficiently small intervals along the straightline path from the baseline x′ to the input x.\nIntegratedGradsapproxi (x) ::=\n(xi − x′i)× Σmk=1 ∂F (x′+ k m×(x−x ′))) ∂xi × 1m\n(3)\nHere m is the number of steps in the Riemman approximation of the integral. Notice that the approximation simply involves computing the gradient in a for loop which should be straightforward and efficient in most deep learning frameworks. For instance, in TensorFlow, it amounts\nto calling tf.gradients in a loop over the set of inputs (i.e., x′ + km × (x − x\n′) for k = 1, . . . ,m), which could also be batched. In practice, we find that somewhere between 20 and 300 steps are enough to approximate the integral (within 5%); we recommend that developers check that the attributions approximately adds up to the difference beween the score at the input and that at the baseline (cf. Proposition 1), and if not increase the step-size m."
  }, {
    "heading": "6. Applications",
    "text": "The integrated gradients technique is applicable to a variety of deep networks. Here, we apply it to two image models, two natural language models, and a chemistry model."
  }, {
    "heading": "6.1. An Object Recognition Network",
    "text": "We study feature attribution in an object recognition network built using the GoogleNet architecture (Szegedy et al., 2014) and trained over the ImageNet object recognition dataset (Russakovsky et al., 2015). We use the integrated gradients method to study pixel importance in predictions made by this network. The gradients are computed for the output of the highest-scoring class with respect to pixel of the input image. The baseline input is the black image, i.e., all pixel intensities are zero.\nIntegrated gradients can be visualized by aggregating them along the color channel and scaling the pixels in the actual image by them. Figure 2 shows visualizations for a bunch of images2. For comparison, it also presents the corresponding visualization obtained from the product of the image with the gradients at the actual image. Notice that integrated gradients are better at reflecting distinctive features of the input image."
  }, {
    "heading": "6.2. Diabetic Retinopathy Prediction",
    "text": "Diabetic retinopathy (DR) is a complication of the diabetes that affects the eyes. Recently, a deep network (Gulshan et al., 2016) has been proposed to predict the severity grade for DR in retinal fundus images. The model has good predictive accuracy on various validation datasets.\nWe use integrated gradients to study feature importance for this network; like in the object recognition case, the baseline is the black image. Feature importance explanations are important for this network as retina specialists may use it to build trust in the network’s predictions, decide the grade for borderline cases, and obtain insights for further testing and screening.\nFigure 3 shows a visualization of integrated gradients for a retinal fundus image. The visualization method is a bit dif-\n2More examples can be found at https://github.com/ ankurtaly/Attributions\nferent from that used in Figure 2. We aggregate integrated gradients along the color channel and overlay them on the actual image in gray scale with positive attribtutions along the green channel and negative attributions along the red channel. Notice that integrated gradients are localized to a few pixels that seem to be lesions in the retina. The interior of the lesions receive a negative attribution while the periphery receives a positive attribution indicating that the network focusses on the boundary of the lesion."
  }, {
    "heading": "6.3. Question Classification",
    "text": "Automatically answering natural language questions (over semi-structured data) is an important problem in artificial intelligence (AI). A common approach is to semantically parse the question to its logical form (Liang, 2016) using a set of human-authored grammar rules. An alternative approach is to machine learn an end-to-end model provided there is enough training data. An interesting question is whether one could peek inside machine learnt models to derive new rules. We explore this direction for a sub-problem of semantic parsing, called question classification, using the method of integrated gradients.\nThe goal of question classification is to identify the type of answer it is seeking. For instance, is the quesiton seeking a yes/no answer, or is it seeking a date? Rules for solving this problem look for trigger phrases in the question, for e.g., a “when” in the beginning indicates a date seeking question. We train a model for question classification using the the text categorization architecture proposed by (Kim, 2014) over the WikiTableQuestions dataset (Pasupat & Liang, 2015). We use integrated gradients to attribute predictions down to the question terms in order to identify new trigger phrases for answer type. The baseline input is the all zero embedding vector.\nFigure 4 lists a few questions with constituent terms highlighted based on their attribution. Notice that the attributions largely agree with commonly used rules, for e.g., “how many” indicates a numeric seeking question. In addition, attributions help identify novel question classification rules, for e.g., questions containing “total number” are seeking numeric answers. Attributions also point out undesirable correlations, for e.g., “charles” is used as trigger for a yes/no question."
  }, {
    "heading": "6.4. Neural Machine Translation",
    "text": "We applied our technique to a complex, LSTM-based Neural Machine Translation System (Wu et al., 2016). We\nattribute the output probability of every output token (in form of wordpieces) to the input tokens. Such attributions “align” the output sentence with the input sentence. For baseline, we zero out the embeddings of all tokens except the start and end markers. Figure 5 shows an example of such an attribution-based alignments. We observed that the results make intuitive sense. E.g. “und” is mostly attributed to “and”, and “morgen” is mostly attributed to “morning”. We use 100 − 1000 steps (cf. Section 5) in the integrated gradient approximation; we need this because the network is highly nonlinear."
  }, {
    "heading": "6.5. Chemistry Models",
    "text": "We apply integrated gradients to a network performing Ligand-Based Virtual Screening which is the problem of predicting whether an input molecule is active against a certain target (e.g., protein or enzyme). In particular, we consider a network based on the molecular graph convolution architecture proposed by (Kearnes et al., 2016).\nThe network requires an input molecule to be encoded by hand as a set of atom and atom-pair features describing the molecule as an undirected graph. Atoms are featurized using a one-hot encoding specifying the atom type (e.g., C, O, S, etc.), and atom-pairs are featurized by specifying either the type of bond (e.g., single, double, triple, etc.) between the atoms, or the graph distance between them. The baseline input is obtained zeroing out the feature vectors for atom and atom-pairs.\nWe visualize integrated gradients as heatmaps over the the atom and atom-pair features with the heatmap intensity depicting the strength of the contribution. Figure 6 shows the visualization for a specific molecule. Since integrated gradients add up to the final prediction score (see Proposition 1), the magnitudes can be use for accounting the contributions of each feature. For instance, for the molecule in\nthe figure, atom-pairs that have a bond between them cumulatively contribute to 46% of the prediction score, while all other pairs cumulatively contribute to only −3%.\nIdentifying Degenerate Features. We now discuss how attributions helped us spot an anomaly in the W1N2 architecture in (Kearnes et al., 2016). On applying the integrated gradients method to this network, we found that several atoms in the same molecule received identical attribution despite being bonded to different atoms. This is surprising as one would expect two atoms with different neighborhoods to be treated differently by the network.\nOn investigating the problem further, in the network architecture, the atoms and atom-pair features were not fully convolved. This caused all atoms that have the same atom type, and same number of bonds of each type to contribute identically to the network."
  }, {
    "heading": "7. Other Related work",
    "text": "We already covered closely related work on attribution in Section 2. We mention other related work. Over the last few years, there has been a vast amount work on demystifying the inner workings of deep networks. Most of this work has been on networks trained on computer vision tasks, and deals with understanding what a specific neuron computes (Erhan et al., 2009; Le, 2013) and interpreting the representations captured by neurons during a prediction (Mahendran & Vedaldi, 2015; Dosovitskiy & Brox, 2015; Yosinski et al., 2015). In contrast, we focus on understanding the network’s behavior on a specific input in terms of the base level input features. Our technique quantifies the importance of each feature in the prediction.\nOne approach to the attribution problem proposed first by (Ribeiro et al., 2016a;b), is to locally approximate the behavior of the network in the vicinity of the input being explained with a simpler, more interpretable model. An appealing aspect of this approach is that it is completely\nagnostic to the implementation of the network and satisfies implemenation invariance. However, this approach does not guarantee sensitivity. There is no guarantee that the local region explored escapes the “flat” section of the prediction function in the sense of Section 2. The other issue is that the method is expensive to implement for networks with “dense” input like image networks as one needs to explore a local region of size proportional to the number of pixels and train a model for this space. In contrast, our technique works with a few calls to the gradient operation.\nAttention mechanisms (Bahdanau et al., 2014) have gained popularity recently. One may think that attention could be used a proxy for attributions, but this has issues. For instance, in a LSTM that also employs attention, there are many ways for an input token to influence an output token: the memory cell, the recurrent state, and “attention”. Focussing only an attention ignores the other modes of influence and results in an incomplete picture."
  }, {
    "heading": "8. Conclusion",
    "text": "The primary contribution of this paper is a method called integrated gradients that attributes the prediction of a deep network to its inputs. It can be implemented using a few calls to the gradients operator, can be applied to a variety of deep networks, and has a strong theoretical justification.\nA secondary contribution of this paper is to clarify desirable features of an attribution method using an axiomatic framework inspired by cost-sharing literature from economics. Without the axiomatic approach it is hard to tell whether the attribution method is affected by data artifacts, network’s artifacts or artifacts of the method. The axiomatic approach rules out artifacts of the last type.\nWhile our and other works have made some progress on understanding the relative importance of input features in a deep network, we have not addressed the interactions between the input features or the logic employed by the network. So there remain many unanswered questions in terms of debugging the I/O behavior of a deep network."
  }, {
    "heading": "ACKNOWLEDGMENTS",
    "text": "We would like to thank Samy Bengio, Kedar Dhamdhere, Scott Lundberg, Amir Najmi, Kevin McCurley, Patrick Riley, Christian Szegedy, Diane Tang for their feedback. We would like to thank Daniel Smilkov and Federico Allocati for identifying bugs in our descriptions. We would like to thank our anonymous reviewers for identifying bugs, and their suggestions to improve presentation."
  }],
  "year": 2017,
  "references": [{
    "title": "Values of Non-Atomic Games",
    "authors": ["R.J. Aumann", "L.S. Shapley"],
    "year": 1974
  }, {
    "title": "How to explain individual classification decisions",
    "authors": ["Baehrens", "David", "Schroeter", "Timon", "Harmeling", "Stefan", "Kawanabe", "Motoaki", "Hansen", "Katja", "Müller", "KlausRobert"],
    "venue": "Journal of Machine Learning Research,",
    "year": 2010
  }, {
    "title": "Neural machine translation by jointly learning to align and translate",
    "authors": ["Bahdanau", "Dzmitry", "Cho", "Kyunghyun", "Bengio", "Yoshua"],
    "venue": "CoRR, abs/1409.0473,",
    "year": 2014
  }, {
    "title": "Layerwise relevance propagation for neural networks with local renormalization layers",
    "authors": ["Binder", "Alexander", "Montavon", "Grégoire", "Bach", "Sebastian", "Müller", "Klaus-Robert", "Samek", "Wojciech"],
    "year": 2016
  }, {
    "title": "Algorithmic transparency via quantitative input influence: Theory and experiments with learning systems",
    "authors": ["A. Datta", "S. Sen", "Y. Zick"],
    "venue": "In 2016 IEEE Symposium on Security and Privacy (SP),",
    "year": 2016
  }, {
    "title": "Inverting visual representations with convolutional networks",
    "authors": ["Dosovitskiy", "Alexey", "Brox", "Thomas"],
    "year": 2015
  }, {
    "title": "Visualizing higher-layer features of a deep network",
    "authors": ["Erhan", "Dumitru", "Bengio", "Yoshua", "Courville", "Aaron", "Vincent", "Pascal"],
    "venue": "Technical Report 1341,",
    "year": 2009
  }, {
    "title": "Paths and consistency in additive cost sharing",
    "authors": ["Friedman", "Eric J"],
    "venue": "International Journal of Game Theory,",
    "year": 2004
  }, {
    "title": "Explaining and harnessing adversarial examples",
    "authors": ["Goodfellow", "Ian", "Shlens", "Jonathon", "Szegedy", "Christian"],
    "venue": "In International Conference on Learning Representations,",
    "year": 2015
  }, {
    "title": "Development and validation of a deep learning algorithm for detection of diabetic retinopathy in retinal fundus",
    "authors": ["Gulshan", "Varun", "Peng", "Lily", "Coram", "Marc"],
    "venue": "photographs. JAMA,",
    "year": 2016
  }, {
    "title": "Molecular graph convolutions: moving beyond fingerprints",
    "authors": ["Kearnes", "Steven", "McCloskey", "Kevin", "Berndl", "Marc", "Pande", "Vijay", "Riley", "Patrick"],
    "venue": "Journal of Computer-Aided Molecular Design,",
    "year": 2016
  }, {
    "title": "Convolutional neural networks for sentence classification",
    "authors": ["Kim", "Yoon"],
    "venue": "In ACL,",
    "year": 2014
  }, {
    "title": "Building high-level features using large scale unsupervised learning",
    "authors": ["Le", "Quoc V"],
    "venue": "In International Conference on Acoustics, Speech, and Signal Processing (ICASSP),",
    "year": 2013
  }, {
    "title": "Learning executable semantic parsers for natural language understanding",
    "authors": ["Liang", "Percy"],
    "venue": "Commun. ACM,",
    "year": 2016
  }, {
    "title": "An unexpected unity among methods for interpreting model predictions",
    "authors": ["Lundberg", "Scott", "Lee", "Su-In"],
    "venue": "CoRR, abs/1611.07478,",
    "year": 2016
  }, {
    "title": "Understanding deep image representations by inverting them",
    "authors": ["Mahendran", "Aravindh", "Vedaldi", "Andrea"],
    "venue": "In Conference on Computer Vision and Pattern Recognition (CVPR),",
    "year": 2015
  }, {
    "title": "Compositional semantic parsing on semi-structured tables",
    "authors": ["Pasupat", "Panupong", "Liang", "Percy"],
    "venue": "In ACL,",
    "year": 2015
  }, {
    "title": "why should I trust you?”: Explaining the predictions of any classifier",
    "authors": ["Ribeiro", "Marco Túlio", "Singh", "Sameer", "Guestrin", "Carlos"],
    "venue": "In 22nd ACM International Conference on Knowledge Discovery and Data Mining,",
    "year": 2016
  }, {
    "title": "Model-agnostic interpretability of machine learning",
    "authors": ["Ribeiro", "Marco Túlio", "Singh", "Sameer", "Guestrin", "Carlos"],
    "year": 2016
  }, {
    "title": "Evaluating the visualization of what a deep neural network has learned",
    "authors": ["Samek", "Wojciech", "Binder", "Alexander", "Montavon", "Grégoire", "Bach", "Sebastian", "Müller", "Klaus-Robert"],
    "year": 2015
  }, {
    "title": "The assignment game : the core",
    "authors": ["Shapley", "Lloyd S", "Shubik", "Martin"],
    "venue": "International Journal of Game Theory,",
    "year": 1971
  }, {
    "title": "Not just a black box: Learning important features through propagating activation differences",
    "authors": ["Shrikumar", "Avanti", "Greenside", "Peyton", "Shcherbina", "Anna", "Kundaje", "Anshul"],
    "year": 2016
  }, {
    "title": "Learning important features through propagating activation",
    "authors": ["Shrikumar", "Avanti", "Greenside", "Peyton", "Kundaje", "Anshul"],
    "venue": "differences. CoRR,",
    "year": 2017
  }, {
    "title": "Deep inside convolutional networks: Visualising image classification models and saliency",
    "authors": ["Simonyan", "Karen", "Vedaldi", "Andrea", "Zisserman", "Andrew"],
    "year": 2013
  }, {
    "title": "Striving for simplicity: The all convolutional net",
    "authors": ["Springenberg", "Jost Tobias", "Dosovitskiy", "Alexey", "Brox", "Thomas", "Riedmiller", "Martin A"],
    "year": 2014
  }, {
    "title": "Axiomatic attribution for deep networks (with proofs and examples)",
    "authors": ["Sundararajan", "Mukund", "Taly", "Ankur", "Yan", "Qiqi"],
    "venue": "CoRR, abs/1703.01365,",
    "year": 2017
  }, {
    "title": "Understanding neural networks through deep visualization",
    "authors": ["Yosinski", "Jason", "Clune", "Jeff", "Nguyen", "Anh Mai", "Fuchs", "Thomas", "Lipson", "Hod"],
    "year": 2015
  }, {
    "title": "Visualizing and understanding convolutional networks",
    "authors": ["Zeiler", "Matthew D", "Fergus", "Rob"],
    "venue": "In ECCV,",
    "year": 2014
  }],
  "id": "SP:f1e6464b8e8a46649eeac68347d047c4b232eadd",
  "authors": [{
    "name": "Mukund Sundararajan",
    "affiliations": []
  }, {
    "name": "Ankur Taly",
    "affiliations": []
  }, {
    "name": "Qiqi Yan",
    "affiliations": []
  }],
  "abstractText": "We study the problem of attributing the prediction of a deep network to its input features, a problem previously studied by several other works. We identify two fundamental axioms— Sensitivity and Implementation Invariance that attribution methods ought to satisfy. We show that they are not satisfied by most known attribution methods, which we consider to be a fundamental weakness of those methods. We use the axioms to guide the design of a new attribution method called Integrated Gradients. Our method requires no modification to the original network and is extremely simple to implement; it just needs a few calls to the standard gradient operator. We apply this method to a couple of image models, a couple of text models and a chemistry model, demonstrating its ability to debug networks, to extract rules from a network, and to enable users to engage with models better. 1. Motivation and Summary of Results We study the problem of attributing the prediction of a deep network to its input features. Definition 1. Formally, suppose we have a function F : R → [0, 1] that represents a deep network, and an input x = (x1, . . . , xn) ∈ R. An attribution of the prediction at input x relative to a baseline input x′ is a vector AF (x, x ′) = (a1, . . . , an) ∈ R where ai is the contribution of xi to the prediction F (x). For instance, in an object recognition network, an attribution method could tell us which pixels of the image were responsible for a certain label being picked (see Figure 2). The attribution problem was previously studied by various papers (Baehrens et al., 2010; Simonyan et al., 2013; Equal contribution Google Inc., Mountain View, USA. Correspondence to: Mukund Sundararajan <mukunds@google.com>, Ankur Taly <ataly@google.com>. Proceedings of the 34 th International Conference on Machine Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017 by the author(s). Shrikumar et al., 2016; Binder et al., 2016; Springenberg et al., 2014). The intention of these works is to understand the inputoutput behavior of the deep network, which gives us the ability to improve it. Such understandability is critical to all computer programs, including machine learning models. There are also other applications of attribution. They could be used within a product driven by machine learning to provide a rationale for the recommendation. For instance, a deep network that predicts a condition based on imaging could help inform the doctor of the part of the image that resulted in the recommendation. This could help the doctor understand the strengths and weaknesses of a model and compensate for it. We give such an example in Section 6.2. Attributions could also be used by developers in an exploratory sense. For instance, we could use a deep network to extract insights that could be then used in a rulebased system. In Section 6.3, we give such an example. A significant challenge in designing an attribution technique is that they are hard to evaluate empirically. As we discuss in Section 4, it is hard to tease apart errors that stem from the misbehavior of the model versus the misbehavior of the attribution method. To compensate for this shortcoming, we take an axiomatic approach. In Section 2 we identify two axioms that every attribution method must satisfy. Unfortunately most previous methods do not satisfy one of these two axioms. In Section 3, we use the axioms to identify a new method, called integrated gradients. Unlike previously proposed methods, integrated gradients do not need any instrumentation of the network, and can be computed easily using a few calls to the gradient operation, allowing even novice practitioners to easily apply the technique. In Section 6, we demonstrate the ease of applicability over several deep networks, including two images networks, two text processing networks, and a chemistry network. These applications demonstrate the use of our technique in either improving our understanding of the network, performing debugging, performing rule extraction, or aiding an end user in understanding the network’s prediction. Remark 1. Let us briefly examine the need for the baseline in the definition of the attribution problem. A common way for humans to perform attribution relies on counterAxiomatic Attribution for Deep Networks factual intuition. When we assign blame to a certain cause we implicitly consider the absence of the cause as a baseline for comparing outcomes. In a deep network, we model the absence using a single baseline input. For most deep networks, a natural baseline exists in the input space where the prediction is neutral. For instance, in object recognition networks, it is the black image. The need for a baseline has also been pointed out by prior work on attribution (Shrikumar et al., 2016; Binder et al., 2016). 2. Two Fundamental Axioms We now discuss two axioms (desirable characteristics) for attribution methods. We find that other feature attribution methods in literature break at least one of the two axioms. These methods include DeepLift (Shrikumar et al., 2016; 2017), Layer-wise relevance propagation (LRP) (Binder et al., 2016), Deconvolutional networks (Zeiler & Fergus, 2014), and Guided back-propagation (Springenberg et al., 2014). As we will see in Section 3, these axioms will also guide the design of our method. Gradients. For linear models, ML practitioners regularly inspect the products of the model coefficients and the feature values in order to debug predictions. Gradients (of the output with respect to the input) is a natural analog of the model coefficients for a deep network, and therefore the product of the gradient and feature values is a reasonable starting point for an attribution method (Baehrens et al., 2010; Simonyan et al., 2013); see the third column of Figure 2 for examples. The problem with gradients is that they break sensitivity, a property that all attribution methods should satisfy. 2.1. Axiom: Sensitivity(a) An attribution method satisfies Sensitivity(a) if for every input and baseline that differ in one feature but have different predictions then the differing feature should be given a non-zero attribution. (Later in the paper, we will have a part (b) to this definition.) Gradients violate Sensitivity(a): For a concrete example, consider a one variable, one ReLU network, f(x) = 1 − ReLU(1−x). Suppose the baseline is x = 0 and the input is x = 2. The function changes from 0 to 1, but because f becomes flat at x = 1, the gradient method gives attribution of 0 to x. Intuitively, gradients break Sensitivity because the prediction function may flatten at the input and thus have zero gradient despite the function value at the input being different from that at the baseline. This phenomenon has been reported in previous work (Shrikumar et al., 2016). Practically, the lack of sensitivity causes gradients to focus on irrelevant features (see the “fireboat” example in Figure 2). Other back-propagation based approaches. A second set of approaches involve back-propagating the final prediction score through each layer of the network down to the individual features. These include DeepLift, Layer-wise relevance propagation (LRP), Deconvolutional networks (DeConvNets), and Guided back-propagation. These methods differ in the specific backpropagation logic for various activation functions (e.g., ReLU, MaxPool, etc.). Unfortunately, Deconvolution networks (DeConvNets), and Guided back-propagation violate Sensitivity(a). This is because these methods back-propogate through a ReLU node only if the ReLU is turned on at the input. This makes the method similar to gradients, in that, the attribution is zero for features with zero gradient at the input despite a non-zero gradient at the baseline. We defer the specific counterexamples to the full version of this paper (Sundararajan et al., 2017). Methods like DeepLift and LRP tackle the Sensitivity issue by employing a baseline, and in some sense try to compute “discrete gradients” instead of (instantaeneous) gradients at the input. (The two methods differ in the specifics of how they compute the discrete gradient). But the idea is that a large, discrete step will avoid flat regions, avoiding a breakage of sensitivity. Unfortunately, these methods violate a different requirement on attribution methods. 2.2. Axiom: Implementation Invariance Two networks are functionally equivalent if their outputs are equal for all inputs, despite having very different implementations. Attribution methods should satisfy Implementation Invariance, i.e., the attributions are always identical for two functionally equivalent networks. To motivate this, notice that attribution can be colloquially defined as assigning the blame (or credit) for the output to the input features. Such a definition does not refer to implementation details. We now discuss intuition for why DeepLift and LRP break Implementation Invariance; a concrete example is provided in the full version of this paper (Sundararajan et al., 2017). First, notice that gradients are invariant to implementation. In fact, the chain-rule for gradients ∂f ∂g = ∂f ∂h · ∂h ∂g is essentially about implementation invariance. To see this, think of g and f as the input and output of a system, and h being some implementation detail of the system. The gradient of output f to input g can be computed either directly by ∂f ∂g , ignoring the intermediate function h (implementation detail), or by invoking the chain rule via h. This is exactly how backpropagation works. Methods like LRP and DeepLift replace gradients with discrete gradients and still use a modified form of backpropaAxiomatic Attribution for Deep Networks gation to compose discrete gradients into attributions. Unfortunately, the chain rule does not hold for discrete gradients in general. Formally f(x1)−f(x0) g(x1)−g(x0) 6= f(x1)−f(x0) h(x1)−h(x0) · h(x1)−h(x0) g(x1)−g(x0) , and therefore these methods fail to satisfy implementation invariance. If an attribution method fails to satisfy Implementation Invariance, the attributions are potentially sensitive to unimportant aspects of the models. For instance, if the network architecture has more degrees of freedom than needed to represent a function then there may be two sets of values for the network parameters that lead to the same function. The training procedure can converge at either set of values depending on the initializtion or for other reasons, but the underlying network function would remain the same. It is undesirable that attributions differ for such reasons. 3. Our Method: Integrated Gradients We are now ready to describe our technique. Intuitively, our technique combines the Implementation Invariance of Gradients along with the Sensitivity of techniques like LRP or DeepLift. Formally, suppose we have a function F : R → [0, 1] that represents a deep network. Specifically, let x ∈ R be the input at hand, and x′ ∈ R be the baseline input. For image networks, the baseline could be the black image, while for text models it could be the zero embedding vector. We consider the straightline path (in R) from the baseline x′ to the input x, and compute the gradients at all points along the path. Integrated gradients are obtained by cumulating these gradients. Specifically, integrated gradients are defined as the path intergral of the gradients along the straightline path from the baseline x′ to the input x. The integrated gradient along the i dimension for an input x and baseline x′ is defined as follows. Here, ∂F (x) ∂xi is the gradient of F (x) along the i dimension. IntegratedGradsi(x) ::= (xi−x ′ i)× ∫ 1 α=0 ∂F (x′+α×(x−x′))",
  "title": "Axiomatic Attribution for Deep Networks"
}