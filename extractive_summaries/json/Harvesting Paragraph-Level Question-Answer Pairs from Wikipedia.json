{
  "sections": [{
    "text": "Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (Long Papers), pages 1907–1917 Melbourne, Australia, July 15 - 20, 2018. c©2018 Association for Computational Linguistics\n1907"
  }, {
    "heading": "1 Introduction",
    "text": "Recently, there has been a resurgence of work in NLP on reading comprehension (Hermann et al., 2015; Rajpurkar et al., 2016; Joshi et al., 2017) with the goal of developing systems that can answer questions about the content of a given passage or document. Large-scale QA datasets are indispensable for training expressive statistical models for this task and play a critical role in advancing the field. And there have been a number of efforts in this direction. Miller et al. (2016), for example, develop a dataset for open-domain question answering; Rajpurkar et al. (2016) and Joshi et al. (2017) do so for reading comprehension (RC); and Hill et al. (2015) and Hermann\net al. (2015), for the related task of answering cloze questions (Winograd, 1972; Levesque et al., 2011). To create these datasets, either crowdsourcing or (semi-)synthetic approaches are used. The (semi-)synthetic datasets (e.g., Hermann et al. (2015)) are large in size and cheap to obtain; however, they do not share the same characteristics as explicit QA/RC questions (Rajpurkar et al., 2016). In comparison, high-quality crowdsourced datasets are much smaller in size, and the annotation process is quite expensive because the labeled examples require expertise and careful design (Chen et al., 2016).\nThus, there is a need for methods that can automatically generate high-quality question-answer pairs. Serban et al. (2016) propose the use of recurrent neural networks to generate QA pairs from structured knowledge resources such as Freebase. Their work relies on the existence of automatically acquired KBs, which are known to have errors and suffer from incompleteness. They are also nontrivial to obtain. In addition, the questions in the resulting dataset are limited to queries regarding a single fact (i.e., tuple) in the KB.\nMotivated by the need for large scale QA pairs and the limitations of recent work, we investigate methods that can automatically “harvest” (generate) question-answer pairs from raw text/unstructured documents, such as Wikipediatype articles.\nRecent work along these lines (Du et al., 2017; Zhou et al., 2017) (see Section 2) has proposed the use of attention-based recurrent neural models trained on the crowdsourced SQuAD dataset (Rajpurkar et al., 2016) for question generation. While successful, the resulting QA pairs are based on information from a single sentence. As described in Du et al. (2017), however, nearly 30% of the questions in the human-generated questions of SQuAD rely on information beyond a single sentence. For example, in Figure 1, the second and third questions require coreference information (i.e., recognizing that “His” in sentence 2 and “He” in sentence 3 both corefer with “Tesla” in sentence 1) to answer them.\nThus, our research studies methods for incorporating coreference information into the training of a question generation system. In particular, we propose gated Coreference knowledge for Neural Question Generation (CorefNQG), a neural sequence model with a novel gating mechanism that leverages continuous representations of coreference clusters — the set of mentions used to refer to each entity — to better encode linguistic knowledge introduced by coreference, for paragraph-level question generation.\nIn an evaluation using the SQuAD dataset, we find that CorefNQG enables better question generation. It outperforms significantly the baseline neural sequence models that encode information from a single sentence, and a model that encodes all preceding context and the input sentence itself. When evaluated on only the portion of SQuAD that requires coreference resolution, the gap be-\ntween our system and the baseline systems is even larger.\nBy applying our approach to the 10,000 topranking Wikipedia articles, we obtain a question answering/reading comprehension dataset with over one million QA pairs; we provide a qualitative analysis in Section 6. The dataset and the source code for the system are available at https://github.com/xinyadu/ HarvestingQA."
  }, {
    "heading": "2 Related Work",
    "text": ""
  }, {
    "heading": "2.1 Question Generation",
    "text": "Since the work by Rus et al. (2010), question generation (QG) has attracted interest from both the NLP and NLG communities. Most early work in QG employed rule-based approaches to transform input text into questions, usually requiring the application of a sequence of well-designed general rules or templates (Mitkov and Ha, 2003; Labutov et al., 2015). Heilman and Smith (2010) introduced an overgenerate-and-rank approach: their system generates a set of questions and then ranks them to select the top candidates. Apart from generating questions from raw text, there has also been research on question generation from symbolic representations (Yao et al., 2012; Olney et al., 2012).\nWith the recent development of deep representation learning and large QA datasets, there has been research on recurrent neural network based approaches for question generation. Serban et al. (2016) used the encoder-decoder framework to generate QA pairs from knowledge base triples; Reddy et al. (2017) generated questions from a knowledge graph; Du et al. (2017) studied how to generate questions from sentences using an attention-based sequence-to-sequence model and investigated the effect of exploiting sentencevs. paragraph-level information. Du and Cardie (2017) proposed a hierarchical neural sentencelevel sequence tagging model for identifying question-worthy sentences in a text passage. Finally, Duan et al. (2017) investigated how to use question generation to help improve question answering systems on the sentence selection subtask.\nIn comparison to the related methods from above that generate questions from raw text, our method is different in its ability to take into account contextual information beyond the sentencelevel by introducing coreference knowledge."
  }, {
    "heading": "2.2 Question Answering Datasets and Creation",
    "text": "Recently there has been an increasing interest in question answering with the creation of many datasets. Most are built using crowdsourcing; they are generally comprised of fewer than 100,000 QA pairs and are time-consuming to create. WebQuestions (Berant et al., 2013), for example, contains 5,810 questions crawled via the Google Suggest API and is designed for knowledge base QA with answers restricted to Freebase entities. To tackle the size issues associated with WebQuestions, Bordes et al. (2015) introduce SimpleQuestions, a dataset of 108,442 questions authored by English speakers. SQuAD (Rajpurkar et al., 2016) is a dataset for machine comprehension; it is created by showing a Wikipedia paragraph to human annotators and asking them to write questions based on the paragraph. TriviaQA (Joshi et al., 2017) includes 95k question-answer authored by trivia enthusiasts and corresponding evidence documents.\n(Semi-)synthetic generated datasets are easier to build to large-scale (Hill et al., 2015; Hermann et al., 2015). They usually come in the form of cloze-style questions. For example, Hermann et al. (2015) created over a million examples by pairing CNN and Daily Mail news articles with their summarized bullet points. Chen et al. (2016) showed that this dataset is quite noisy due to the method of data creation and concluded that performance of QA systems on the dataset is almost saturated.\nClosest to our work is that of Serban et al. (2016). They train a neural triple-to-sequence model on SimpleQuestions, and apply their system to Freebase to produce a large collection of human-like question-answer pairs."
  }, {
    "heading": "3 Task Definition",
    "text": "Our goal is to harvest high quality questionanswer pairs from the paragraphs of an article of interest. In our task formulation, this consists of two steps: candidate answer extraction and answer-specific question generation. Given an input paragraph, we first identify a set of question-worthy candidate answers ans = (ans1, ans2, ..., ansl), each a span of text as denoted in color in Figure 1. For each candidate answer ansi, we then aim to generate a question Q — a sequence of tokens y1, ..., yN — based on the\nsentence S that contains candidate ansi such that:\n• Q asks about an aspect of ansi that is of potential interest to a human;\n• Q might rely on information from sentences that precede S in the paragraph.\nMathematically then,\nQ = argmax Q\nP (Q|S,C) (1)\nwhere P (Q|S,C) = ∏N\nn=1 P (yn|y<n, S, C) where C is the set of sentences that precede S in the paragraph."
  }, {
    "heading": "4 Methodology",
    "text": "In this section, we introduce our framework for harvesting the question-answer pairs. As described above, it consists of the question generator CorefNQG (Figure 2) and a candidate answer extraction module. During test/generation time, we (1) run the answer extraction module on the input text to obtain answers, and then (2) run the question generation module to obtain the corresponding questions."
  }, {
    "heading": "4.1 Question Generation",
    "text": "As shown in Figure 2, our generator prepares the feature-rich input embedding — a concatenation of (a) a refined coreference position feature embedding, (b) an answer feature embedding, and (c) a word embedding, each of which is described below. It then encodes the textual input using an LSTM unit (Hochreiter and Schmidhuber, 1997). Finally, an attention-copy equipped decoder is used to decode the question.\nMore specifically, given the input sentence S (containing an answer span) and the preceding context C, we first run a coreference resolution system to get the coref-clusters for S and C and use them to create a coreference transformed input sentence: for each pronoun, we append its most representative non-pronominal coreferent mention. Specifically, we apply the simple feedforward network based mention-ranking model of Clark and Manning (2016) to the concatenation of C and S to get the coref-clusters for all entities in C and S. The C&M model produces a score/representation s for each mention pair (m1,m2),\ns(m1,m2) = Wmhm(m1,m2) + bm (2)\n…\nSentence encoder\n...\nwhere Wm is a 1 × d weight matrix and b is the bias. hm(m1,m2) is representation of the last hidden layer of the three layer feedforward neural network.\nFor each pronoun in S, we then heuristically identify the most “representative” antecedent from its coref-cluster. (Proper nouns are preferred.) We append the new mention after the pronoun. For example, in Table 1, “the panthers” is the most representative mention in the coref-cluster for “they”. The new sentence with the appended coreferent mention is our coreference transformed input sentence S ′ (see Figure 2).\nCoreference Position Feature Embedding For each token in S ′ , we also maintain one position feature fc = (c1, ..., cn), to denote pronouns (e.g., “they”) and antecedents (e.g., “the panthers”). We use the BIO tagging scheme to label the associated spans in S ′ . “B_ANT” denotes the start of an antecedent span, tag “I_ANT” continues the antecedent span and tag “O” marks tokens that do not form part of a mention span. Similarly, tags “B_PRO” and “I_PRO” denote the pronoun span. (See Table 1, “coref. feature”.)\nRefined Coref. Position Feature Embedding Inspired by the success of gating mecha-\nnisms for controlling information flow in neural networks (Hochreiter and Schmidhuber, 1997; Dauphin et al., 2017), we propose to use a gating network here to obtain a refined representation of the coreference position feature vectors fc = (c1, ..., cn). The main idea is to utilize the mention-pair score (see Equation 2) to help the neural network learn the importance of the coreferent phrases. We compute the refined (gated) coreference position feature vector fd = (d1, ..., dn) as follows,\ngi = ReLU(Waci +Wbscorei + b)\ndi = gi ci (3)\nwhere denotes an element-wise product between two vectors and ReLU is the rectified linear activation function. scorei denotes the mentionpair score for each antecedent token (e.g., “the” and “panthers”) with the pronoun (e.g., “they”); scorei is obtained from the trained model (Equation 2) of the C&M. If token i is not added later as an antecedent token, scorei is set to zero. Wa, Wb are weight matrices and b is the bias vector.\nAnswer Feature Embedding We also include an answer position feature embedding to generate answer-specific questions; we denote the answer span with the usual BIO tagging scheme (see,\ne.g., “the arizona cardinals” in Table 1). During training and testing, the answer span feature (i.e., “B_ANS”, “I_ANS” or “O”) is mapped to its feature embedding space: fa = (a1, ..., an).\nWord Embedding To obtain the word embedding for the tokens themselves, we just map the tokens to the word embedding space: x = (x1, ..., xn).\nFinal Encoder Input As noted above, the final input to the LSTM-based encoder is a concatenation of (1) the refined coreference position feature embedding (light blue units in Figure 2), (2) the answer position feature embedding (red units), and (3) the word embedding for the token (green units),\nei = concat(di, ai, xi) (4)\nEncoder As for the encoder itself, we use bidirectional LSTMs to read the input e = (e1, ..., en) in both the forward and backward directions. After encoding, we obtain two sequences of hidden vectors, namely, −→ h = ( −→ h1, ..., −→ hn) and ←− h = ( ←− h1, ..., ←− hn). The final output state of the encoder is the concatenation of −→ h and ←− h where\nhi = concat( −→ hi , ←− hi) (5)\nQuestion Decoder with Attention & Copy On top of the feature-rich encoder, we use LSTMs with attention (Bahdanau et al., 2015) as the decoder for generating the question y1, ..., ym one token at a time. To deal with rare/unknown words, the decoder also allows directly copying words from the source sentence via pointing (Vinyals et al., 2015).\nAt each time step t, the decoder LSTM reads the previous word embedding wt−1 and previous hidden state st−1 to compute the new hidden state,\nst = LSTM(wt−1, st−1) (6) Then we calculate the attention distribution αt as in Bahdanau et al. (2015),\net,i = h T i Wcst−1 αt = softmax(et) (7)\nwhere Wc is a weight matrix and attention distribution αt is a probability distribution over the source sentence words. With αt, we can obtain the context vector h∗t ,\nh∗t = n∑\ni=1\nαithi (8)\nThen, using the context vector h∗t and hidden state st, the probability distribution over the target (question) side vocabulary is calculated as,\nPvocab = softmax(Wdconcat(h∗t , st)) (9)\nInstead of directly using Pvocab for training/generating with the fixed target side vocabulary, we also consider copying from the source sentence. The copy probability is based on the context vector h∗t and hidden state st,\nλcopyt = σ (Weh ∗ t +Wfst) (10)\nand the probability distribution over the source sentence words is the sum of the attention scores of the corresponding words,\nPcopy(w) = n∑ i=1 αit ∗ 1{w == wi} (11)\nFinally, we obtain the probability distribution over the dynamic vocabulary (i.e., union of original target side and source sentence vocabulary) by summing over Pcopy and Pvocab,\nP (w) = λcopyt Pcopy(w) + (1− λ copy t )Pvocab(w)\n(12) where σ is the sigmoid function, and Wd, We, Wf are weight matrices."
  }, {
    "heading": "4.2 Answer Span Identification",
    "text": "We frame the problem of identifying candidate answer spans from a paragraph as a sequence labeling task and base our model on the BiLSTM-CRF approach for named entity recognition (Huang et al., 2015). Given a paragraph of n tokens, instead of directly feeding the sequence of word vectors x = (x1, ..., xn) to the LSTM units, we first construct the feature-rich embedding x ′ for each token, which is the concatenation of the word embedding, an NER feature embedding, and a character-level representation of the word (Lample et al., 2016). We use the concatenated vector as the “final” embedding x ′ for the token,\nx ′ i = concat(xi,CharRepi,NERi) (13)\nwhere CharRepi is the concatenation of the last hidden states of a character-based biLSTM. The intuition behind the use of NER features is that SQuAD answer spans contain a large number of named entities, numeric phrases, etc.\nThen a multi-layer Bi-directional LSTM is applied to (x\n′ 1, ..., x ′ n) and we obtain the output state\nzt for time step t by concatenation of the hidden states (forward and backward) at time step t from the last layer of the BiLSTM. We apply the softmax to (z1, ..., zn) to get the normalized score representation for each token, which is of size n× k, where k is the number of tags.\nInstead of using a softmax training objective that minimizes the cross-entropy loss for each individual word, the model is trained with a CRF (Lafferty et al., 2001) objective, which minimizes the negative log-likelihood for the entire correct sequence: − log(py),\npy = exp(q(x ′ ,y))∑\ny′∈Y′ exp(q(x ′ ,y′))\n(14)\nwhere q(x ′ ,y) = ∑n t=1 Pt,yt + ∑n−1 t=0 Ayt,yt+1 , Pt,yt is the score of assigning tag yt to the t th token, and Ayt,yt+1 is the transition score from tag yt to yt+1, the scoring matrix A is to be learned. Y ′ represents all the possible tagging sequences."
  }, {
    "heading": "5 Experiments",
    "text": ""
  }, {
    "heading": "5.1 Dataset",
    "text": "We use the SQuAD dataset (Rajpurkar et al., 2016) to train our models. It is one of the largest general purpose QA datasets derived from Wikipedia with over 100k questions posed by crowdworkers on a set of Wikipedia articles. The answer to each question is a segment of text from the corresponding Wiki passage. The crowdworkers were users of Amazon’s Mechanical Turk located in the US or Canada. To obtain high-quality articles, the authors sampled 500 articles from the top 10,000 articles obtained by Nayuki’s Wikipedia’s internal PageRanks. The question-answer pairs were generated by annotators from a paragraph; and although the dataset is typically used to evaluate reading comprehension, it has also been used in an open domain QA setting (Chen et al., 2017; Wang et al., 2018). For training/testing answer extraction systems, we pair each paragraph in the dataset with the gold answer spans that it contains. For the question generation system, we pair each sentence that contains an answer span with the corresponding gold question as in Du et al. (2017).\nTo quantify the effect of using predicted (rather than gold standard) answer spans on question generation (e.g., predicted answer span boundaries can be inaccurate), we also train the models on an augmented “Training set w/ noisy examples”\n(see Table 2). This training set contains all of the original training examples plus new examples for predicted answer spans (from the top-performing answer extraction model, bottom row of Table 3) that overlap with a gold answer span. We pair the new training sentence (w/ predicted answer span) with the gold question. The added examples comprise 42.21% of the noisy example training set.\nFor generation of our one million QA pair corpus, we apply our systems to the 10,000 topranking articles of Wikipedia."
  }, {
    "heading": "5.2 Evaluation Metrics",
    "text": "For question generation evaluation, we use BLEU (Papineni et al., 2002) and METEOR (Denkowski and Lavie, 2014).1 BLEU measures average n-gram precision vs. a set of reference questions and penalizes for overly short sentences. METEOR is a recall-oriented metric that takes into account synonyms, stemming, and paraphrases.\nFor answer candidate extraction evaluation, we use precision, recall and F-measure vs. the gold standard SQuAD answers. Since answer boundaries are sometimes ambiguous, we compute Binary Overlap and Proportional Overlap metrics in addition to Exact Match. Binary Overlap counts every predicted answer that overlaps with a gold answer span as correct, and Proportional Overlap give partial credit proportional to the amount of overlap (Johansson and Moschitti, 2010; Irsoy and Cardie, 2014)."
  }, {
    "heading": "5.3 Baselines and Ablation Tests",
    "text": "For question generation, we compare to the stateof-the-art baselines and conduct ablation tests as follows: Du et al. (2017)’s model is an attention-based RNN sequence-to-sequence neural network (without using the answer location information feature). Seq2seq + copyw/ answer is the attention-based sequence-to-sequence model augmented with a copy mechanism, with answer features concatenated with the word embeddings during encoding. Seq2seq + copyw/ full context + answer is the same model as the previous one, but we allow access to the full context (i.e., all the preceding sentences and the input sentence itself). We denote it as ContextNQG henceforth for simplicity. CorefNQG is the coreference-based model proposed in this paper. CorefNQG–gating is an\n1We use the evaluation scripts of Du et al. (2017).\nablation test, the gating network is removed and the coreference position embedding is not refined. CorefNQG–mention-pair score is also an ablation test where all mention-pair scorei are set to zero.\nFor answer span extraction, we conduct experiments to compare the performance of an off-theshelf NER system and BiLSTM based systems.\nFor training and implementation details, please see the Supplementary Material."
  }, {
    "heading": "6 Results and Analysis",
    "text": ""
  }, {
    "heading": "6.1 Automatic Evaluation",
    "text": "Table 2 shows the BLEU-{3, 4} and METEOR scores of different models. Our CorefNQG outperforms the seq2seq baseline of Du et al. (2017) by a large margin. This shows that the copy mechanism, answer features and coreference resolution all aid question generation. In addition, CorefNQG outperforms both Seq2seq+Copy models significantly, whether or not they have access to the full context. This demonstrates that the coreference knowledge encoded with the gating network explicitly helps with the training and generation: it is more difficult for the neural sequence model to learn the coreference knowledge in a latent way. (See input 1 in Figure 3 for an example.) Building end-to-end models that take into account coreference knowledge in a latent way is an interesting direction to explore. In the ablation tests, the performance drop of CorefNQG–gating\nshows that the gating network is playing an important role for getting refined coreference position feature embedding, which helps the model learn the importance of an antecedent. The performance drop of CorefNQG–mention-pair score shows the mention-pair score introduced from the external system (Clark and Manning, 2016) helps the neural network better encode coreference knowledge.\nTo better understand the effect of coreference resolution, we also evaluate our model and the baseline models on just that portion of the test set that requires pronoun resolution (36.42% of the examples) and show the results in Table 4. The gaps of performance between our model and the baseline models are still significant. Besides, we see that all three systems’ performance drop on this partial test set, which demonstrates the hardness of generating questions for the cases that require pronoun resolution (passage context).\nWe also show in Table 2 the results of the QG models trained on the training set augmented with noisy examples with predicted answer spans.\nThere is a consistent but acceptable drop for each model on this new training set, given the inaccuracy of predicted answer spans. We see that CorefNQG still outperforms the baseline models across all metrics.\nFigure 3 provides sample output for input sentences that require contextual coreference knowledge. We see that ContextNQG fails in all cases; our model misses only the third example due to an error introduced by coreference resolution — the “city” and “it” are considered coreferent. We can also see that human-generated questions are more natural and varied in form with better paraphrasing.\nIn Table 3, we show the evaluation results for different answer extraction models. First we see that all variants of BiLSTM models outperform the off-the-shelf NER system (that proposes all NEs as answer spans), though the NER system has a higher recall. The BiLSTM-CRF that encodes the character-level and NER features for each token performs best in terms of F-measure."
  }, {
    "heading": "6.2 Human Study",
    "text": "We hired four native speakers of English to rate the systems’ outputs. Detailed guidelines for the raters are listed in the supplementary materials.\nThe evaluation can also be seen as a measure of the quality of the generated dataset (Section 6.3). We randomly sampled 11 passages/paragraphs from the test set; there are in total around 70 questionanswer pairs for evaluation.\nWe consider three metrics — “grammaticality”, “making sense” and “answerability”. The evaluators are asked to first rate the grammatical correctness of the generated question (before being shown the associated input sentence or any other textual context). Next, we ask them to rate the degree to which the question “makes sense” given the input sentence (i.e., without considering the correctness of the answer span). Finally, evaluators rate the “answerability” of the question given the full context.\nTable 5 shows the results of the human evaluation. Bold indicates top scores. We see that the original human questions are preferred over the two NQG systems’ outputs, which is understandable given the examples in Figure 3. The humangenerated questions make more sense and correspond better with the provided answers, particularly when they require information in the preceding context. How exactly to capture the preceding context so as to ask better and more diverse questions is an interesting future direction for research. In terms of grammaticality, however, the neural models do quite well, achieving very close to human performance. In addition, we see that our method (CorefNQG) performs statistically significantly better across all metrics in comparison to the baseline model (ContextNQG), which has access to the entire preceding context in the passage."
  }, {
    "heading": "6.3 The Generated Corpus",
    "text": "Our system generates in total 1,259,691 questionanswer pairs, nearly 126 questions per article. Figure 5 shows the distribution of different types of\nquestions in our dataset vs. the SQuAD training set. We see that the distribution for “In what”, “When”, “How long”, “Who”, “Where”, “What does” and “What do” questions in the two datasets is similar. Our system generates more “What is”, “What was” and “What percentage” questions, while the proportions of “What did”, “Why” and “Which” questions in SQuAD are larger than ours. One possible reason is that the “Why”, “What did” questions are more complicated to ask (sometimes involving world knowledge) and the answer spans are longer phrases of various types that are harder to identify. “What is” and “What was” questions, on the other hand, are often safer for the neural networks systems to ask.\nIn Figure 4, we show some examples of the generated question-answer pairs. The answer extractor identifies the answer span boundary well and all three questions correspond to their answers. Q2 is valid but not entirely accurate. For more examples, please refer to our supplementary materials.\nTable 6 shows the performance of a topperforming system for the SQuAD dataset (Document Reader (Chen et al., 2017)) when applied to the development and test set portions of our generated dataset. The system was trained on the training set portion of our dataset. We use the SQuAD evaluation scripts, which calculate exact match (EM) and F-1 scores.2 Performance of the\n2F-1 measures the average overlap between the predicted answer span and ground truth answer (Rajpurkar et al., 2016).\nneural machine reading model is reasonable. We also train the DocReader on our training set and test the models’ performance on the original dev set of SQuAD; for this, the performance is around 45.2% on EM and 56.7% on F-1 metric. DocReader trained on the original SQuAD training set achieves 69.5% EM, 78.8% F-1 indicating that our dataset is more difficult and/or less natural than the crowd-sourced QA pairs of SQuAD."
  }, {
    "heading": "7 Conclusion",
    "text": "We propose a new neural network model for better encoding coreference knowledge for paragraphlevel question generation. Evaluations with different metrics on the SQuAD machine reading dataset show that our model outperforms state-ofthe-art baselines. The ablation study shows the effectiveness of different components in our model. Finally, we apply our question generation framework to produce a corpus of 1.26 million questionanswer pairs, which we hope will benefit the QA research community. It would also be interesting to apply our approach to incorporating coreference knowledge to other text generation tasks."
  }, {
    "heading": "Acknowledgments",
    "text": "We thank the anonymous reviewers and members of Cornell NLP group for helpful comments."
  }],
  "year": 2018,
  "references": [{
    "title": "Neural machine translation by jointly learning to align and translate",
    "authors": ["Dzmitry Bahdanau", "Kyunghyun Cho", "Yoshua Bengio."],
    "venue": "International Conference on Learning Representations Workshop (ICLR).",
    "year": 2015
  }, {
    "title": "Semantic parsing on freebase from question-answer pairs",
    "authors": ["Jonathan Berant", "Andrew Chou", "Roy Frostig", "Percy Liang."],
    "venue": "Proceedings of the 2013 Conference on Empirical Methods in Natural Language Processing. Association",
    "year": 2013
  }, {
    "title": "Large-scale simple question answering with memory networks",
    "authors": ["Antoine Bordes", "Nicolas Usunier", "Sumit Chopra", "Jason Weston."],
    "venue": "arXiv preprint arXiv:1506.02075 .",
    "year": 2015
  }, {
    "title": "A thorough examination of the cnn/daily mail reading comprehension task",
    "authors": ["Danqi Chen", "Jason Bolton", "Christopher D. Manning."],
    "venue": "Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics (Volume",
    "year": 2016
  }, {
    "title": "Reading wikipedia to answer opendomain questions",
    "authors": ["Danqi Chen", "Adam Fisch", "Jason Weston", "Antoine Bordes."],
    "venue": "Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers). Association",
    "year": 2017
  }, {
    "title": "Improving coreference resolution by learning entitylevel distributed representations",
    "authors": ["Kevin Clark", "Christopher D. Manning."],
    "venue": "Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers). As-",
    "year": 2016
  }, {
    "title": "Language modeling with gated convolutional networks",
    "authors": ["Yann N Dauphin", "Angela Fan", "Michael Auli", "David Grangier."],
    "venue": "International Conference on Machine Learning. pages 933–941.",
    "year": 2017
  }, {
    "title": "Meteor universal: Language specific translation evaluation for any target language",
    "authors": ["Michael Denkowski", "Alon Lavie."],
    "venue": "Proceedings of the Ninth Workshop on Statistical Machine Translation. Association for Computational Lin-",
    "year": 2014
  }, {
    "title": "Identifying where to focus in reading comprehension for neural question generation",
    "authors": ["Xinya Du", "Claire Cardie."],
    "venue": "Proceedings of the 2017 Conference on Empirical Methods in Natural Language Processing. Association",
    "year": 2017
  }, {
    "title": "Learning to ask: Neural question generation for reading comprehension",
    "authors": ["Xinya Du", "Junru Shao", "Claire Cardie."],
    "venue": "Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers). Association",
    "year": 2017
  }, {
    "title": "Question generation for question answering",
    "authors": ["Nan Duan", "Duyu Tang", "Peng Chen", "Ming Zhou."],
    "venue": "Proceedings of the 2017 Conference on Empirical Methods in Natural Language Processing. Association for Computational Linguistics, pages 866–874.",
    "year": 2017
  }, {
    "title": "Good question! statistical ranking for question generation",
    "authors": ["Michael Heilman", "Noah A. Smith."],
    "venue": "Human Language Technologies: The 2010 Annual Conference of the North American Chapter of the Association for Computational Lin-",
    "year": 2010
  }, {
    "title": "Teaching machines to read and comprehend",
    "authors": ["Karl Moritz Hermann", "Tomas Kocisky", "Edward Grefenstette", "Lasse Espeholt", "Will Kay", "Mustafa Suleyman", "Phil Blunsom."],
    "venue": "Advances in Neural Information Processing Systems. pages 1693–",
    "year": 2015
  }, {
    "title": "The goldilocks principle: Reading children’s books with explicit memory representations",
    "authors": ["Felix Hill", "Antoine Bordes", "Sumit Chopra", "Jason Weston."],
    "venue": "arXiv preprint arXiv:1511.02301 .",
    "year": 2015
  }, {
    "title": "Long short-term memory",
    "authors": ["Sepp Hochreiter", "Jürgen Schmidhuber."],
    "venue": "Neural computation 9(8):1735–1780.",
    "year": 1997
  }, {
    "title": "Bidirectional lstm-crf models for sequence tagging",
    "authors": ["Zhiheng Huang", "Wei Xu", "Kai Yu."],
    "venue": "arXiv preprint arXiv:1508.01991 .",
    "year": 2015
  }, {
    "title": "Opinion mining with deep recurrent neural networks",
    "authors": ["Ozan Irsoy", "Claire Cardie."],
    "venue": "Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP). Association for Computational Linguistics, pages 720–728.",
    "year": 2014
  }, {
    "title": "Syntactic and semantic structure for opinion expression detection",
    "authors": ["Richard Johansson", "Alessandro Moschitti."],
    "venue": "Proceedings of the Fourteenth Conference on Computational Natural Language Learning. Association for Computational Linguis-",
    "year": 2010
  }, {
    "title": "Triviaqa: A large scale distantly supervised challenge dataset for reading comprehension",
    "authors": ["Mandar Joshi", "Eunsol Choi", "Daniel Weld", "Luke Zettlemoyer."],
    "venue": "Proceedings of the 55th Annual Meeting of the Association for Computational Lin-",
    "year": 2017
  }, {
    "title": "Deep questions without deep understanding",
    "authors": ["Igor Labutov", "Sumit Basu", "Lucy Vanderwende."],
    "venue": "Proceedings of the 53rd Annual Meeting of the Association for Computational Linguistics and the 7th International Joint Conference on Natural Lan-",
    "year": 2015
  }, {
    "title": "Conditional random fields: Probabilistic models for segmenting and labeling sequence data",
    "authors": ["John Lafferty", "Andrew McCallum", "Fernando CN Pereira"],
    "year": 2001
  }, {
    "title": "Neural architectures for named entity recognition",
    "authors": ["Guillaume Lample", "Miguel Ballesteros", "Sandeep Subramanian", "Kazuya Kawakami", "Chris Dyer."],
    "venue": "Proceedings of the 2016 Conference of the North American Chapter of the Association for Computa-",
    "year": 2016
  }, {
    "title": "The winograd schema challenge",
    "authors": ["Hector J Levesque", "Ernest Davis", "Leora Morgenstern."],
    "venue": "Aaai spring symposium: Logical formalizations of commonsense reasoning. volume 46, page 47.",
    "year": 2011
  }, {
    "title": "Key-value memory networks for directly reading documents",
    "authors": ["Alexander Miller", "Adam Fisch", "Jesse Dodge", "AmirHossein Karimi", "Antoine Bordes", "Jason Weston."],
    "venue": "Proceedings of the 2016 Conference on Empirical Meth-",
    "year": 2016
  }, {
    "title": "Computer-aided generation of multiple-choice tests",
    "authors": ["Ruslan Mitkov", "Le An Ha."],
    "venue": "Proceedings of the HLT-NAACL 03 workshop on Building educational applications using natural language processing-Volume 2. Association for Com-",
    "year": 2003
  }, {
    "title": "Question generation from concept maps",
    "authors": ["Andrew M Olney", "Arthur C Graesser", "Natalie K Person."],
    "venue": "Dialogue & Discourse 3(2):75–99.",
    "year": 2012
  }, {
    "title": "Bleu: a method for automatic evaluation of machine translation",
    "authors": ["Kishore Papineni", "Salim Roukos", "Todd Ward", "Wei-Jing Zhu."],
    "venue": "Proceedings of 40th Annual Meeting of the Association for Computational Linguis-",
    "year": 2002
  }, {
    "title": "Squad: 100,000+ questions for machine comprehension of text",
    "authors": ["Pranav Rajpurkar", "Jian Zhang", "Konstantin Lopyrev", "Percy Liang."],
    "venue": "Proceedings of the 2016 Conference on Empirical Methods in Natural Language Processing (EMNLP). Association",
    "year": 2016
  }, {
    "title": "Generating natural language question-answer pairs from a knowledge graph using a rnn based question generation model",
    "authors": ["Sathish Reddy", "Dinesh Raghu", "Mitesh M. Khapra", "Sachindra Joshi."],
    "venue": "Proceedings of the 15th Conference of the Eu-",
    "year": 2017
  }, {
    "title": "The first question generation shared task evaluation challenge",
    "authors": ["Vasile Rus", "Brendan Wyse", "Paul Piwek", "Mihai Lintean", "Svetlana Stoyanchev", "Cristian Moldovan."],
    "venue": "Proceedings of the 6th International Natural Language Generation Conference. Associa-",
    "year": 2010
  }, {
    "title": "Generating factoid questions with recurrent neural networks: The 30m factoid question-answer corpus",
    "authors": ["Iulian Vlad Serban", "Alberto García-Durán", "Caglar Gulcehre", "Sungjin Ahn", "Sarath Chandar", "Aaron Courville", "Yoshua Bengio"],
    "year": 2016
  }, {
    "title": "Pointer networks",
    "authors": ["Oriol Vinyals", "Meire Fortunato", "Navdeep Jaitly."],
    "venue": "Advances in Neural Information Processing Systems. pages 2692–2700.",
    "year": 2015
  }, {
    "title": "Reinforced ranker-reader for open-domain question answering",
    "authors": ["Shuohang Wang", "Mo Yu", "Xiaoxiao Guo", "Zhiguo Wang", "Tim Klinger", "Wei Zhang", "Shiyu Chang", "Gerald Tesauro", "Bowen Zhou", "Jing Jiang"],
    "year": 2018
  }, {
    "title": "Multi-perspective context matching for machine comprehension",
    "authors": ["Zhiguo Wang", "Haitao Mi", "Wael Hamza", "Radu Florian."],
    "venue": "arXiv preprint arXiv:1612.04211 .",
    "year": 2016
  }, {
    "title": "Understanding natural language",
    "authors": ["Terry Winograd."],
    "venue": "Cognitive psychology 3(1):1–191.",
    "year": 1972
  }, {
    "title": "Semantics-based question generation and implementation",
    "authors": ["Xuchen Yao", "Gosse Bouma", "Yi Zhang."],
    "venue": "Dialogue & Discourse 3(2):11–42.",
    "year": 2012
  }, {
    "title": "Neural question generation from text: A preliminary study",
    "authors": ["Qingyu Zhou", "Nan Yang", "Furu Wei", "Chuanqi Tan", "Hangbo Bao", "Ming Zhou."],
    "venue": "arXiv preprint arXiv:1704.01792 .",
    "year": 2017
  }],
  "id": "SP:c9222ec56fd6e15b2198536ac069884519e1307e",
  "authors": [{
    "name": "Xinya Du",
    "affiliations": []
  }, {
    "name": "Claire Cardie",
    "affiliations": []
  }],
  "abstractText": "We study the task of generating from Wikipedia articles question-answer pairs that cover content beyond a single sentence. We propose a neural network approach that incorporates coreference knowledge via a novel gating mechanism. Compared to models that only take into account sentence-level information (Heilman and Smith, 2010; Du et al., 2017; Zhou et al., 2017), we find that the linguistic knowledge introduced by the coreference representation aids question generation significantly, producing models that outperform the current state-of-theart. We apply our system (composed of an answer span extraction system and the passage-level QG system) to the 10,000 top-ranking Wikipedia articles and create a corpus of over one million questionanswer pairs. We also provide a qualitative analysis for this large-scale generated corpus from Wikipedia.",
  "title": "Harvesting Paragraph-Level Question-Answer Pairs from Wikipedia"
}