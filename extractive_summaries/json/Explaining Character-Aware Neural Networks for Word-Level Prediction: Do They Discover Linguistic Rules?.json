{
  "sections": [{
    "text": "Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing, pages 3275–3284 Brussels, Belgium, October 31 - November 4, 2018. c©2018 Association for Computational Linguistics\n3275"
  }, {
    "heading": "1 Introduction",
    "text": "Character-level features are an essential part of many Natural Language Processing (NLP) tasks. These features are for instance used for language modeling (Kim et al., 2016), part-of-speech tagging (Plank et al., 2016) and machine translation (Luong and Manning, 2016). They are especially useful in the context of part-of-speech and morphological tagging, where for example the suffix -s can easily differentiate plural words from singular words in English or Spanish.\nThe use of character-level features is not new. Rule-based taggers were amongst the earliest systems that used character-level features/rules for grammatical tagging (Klein and Simmons, 1963). Other approaches rely on fixed lists of affixes (Ratnaparkhi, 1996; Toutanova et al., 2003). Next, these features are used by a tagging model, such\nas a rule-based model or statistical model. Rulebased taggers are transparent models that allow us to easily trace back why the tagger made a certain decision (e.g., Brill (1994)). Similarly, statistical models are merely a weighted sum of features.\nFor example, Brill (1994)’s transformationbased error-driven tagger uses a set of templates to derive rules by fixing errors. The following rule template:\n\"Change the most-likely tag X to Y if the last (1,2,3,4) characters of the word are x\",\nresulted in the rule:\n\"Change the tag common noun to plural common noun if the word has suffix -s\".\nSubsequently, whenever the tagger makes a tagging mistake, it is easy to trace back why this happened. Following the above rule, the word mistress will mistakingly be tagged as a plural common noun while it actually is a common noun1.\nThis is in stark contrast with the most recent generation of part-of-speech and morphological taggers which mainly rely on neural networks.\n1In Brill (1994), an additional rule encodes an exception to this rule to correctly tag the word mistress.\nWords are split into individual characters and are in general either aggregated using a Bidirectional Long Short-Term Memory network (BiLSTM) (Plank et al., 2016) or Convolutional Neural Network (CNN) (dos Santos and Zadrozny, 2014). However, it is currently unknown which characterlevel patterns these neural network models learn and whether these patterns coincide with our linguistic knowledge. Moreover, different neural network architectures are currently only compared quantitatively and lack a qualitative analysis.\nIn this paper, we investigate which character patterns neural networks learn and to what extent those patterns comprise any known linguistic rules. We do this for three morphologically different languages: Finnish, Spanish and Swedish. A Spanish example is shown in Figure 1. By visualizing the contributions of each character, we observe that the model indeed uses the suffix -s to correctly predict that the word is plural.\nOur main contributions are as follows:\n• We show how word-level tagging decisions can be traced back to specific sets of characters and interactions between them.\n• We extend the contextual decomposition method (Murdoch et al., 2018) to CNNs.\n• We quantitatively compare CNN and BiLSTM models in the context of morphological tagging by performing an evaluation on three manually segmented and morphologically annotated corpora.\n• We found out that the studied neural models are able to implicitly discover character patterns that coincide with the same rules linguists use to indicate the morphological function of subword segments.\nOur implementation is available online2."
  }, {
    "heading": "2 Related Work",
    "text": "Neural network-based taggers currently outperform statistical taggers in morphological tagging (Heigold et al., 2017) and part-of-speech tagging (Plank et al., 2016) for a wide variety of languages. Character-level features form a crucial part of many of these systems. Generally, two neural network architectures are considered for aggregating the individual characters: a BiLSTM (Ling\n2https://github.com/FredericGodin/ ContextualDecomposition-NLP\net al., 2015; Plank et al., 2016) or a CNN (dos Santos and Zadrozny, 2014; Bjerva et al., 2016; Heigold et al., 2017). These architectures outperform similar models that use manually defined features (Ling et al., 2015; dos Santos and Zadrozny, 2014). However, it is still unclear which useful character-level features they have learned. Architectures are compared quantitatively but lack insight into learned patterns. Moreover, Vania and Lopez (2017) showed in the context of language modeling that training a BiLSTM on ground truth morphological features still yields better results than eight other character-based neural network architectures. Hence, this raises the question which patterns neural networks learn and whether these patterns coincide with manually-defined linguistic rules.\nWhile a number of interpretation techniques have been proposed for images (Springenberg et al., 2014; Selvaraju et al., 2017; Shrikumar et al., 2017), these are generally not applicable in the context of NLP where LSTMs are mainly used. Moreover, gradient-based techniques are not trustworthy when strongly saturating activation functions such as tanh and sigmoid are used (e.g., Li et al. (2016a)). Hence, current interpretations in NLP are limited to visualizing the magnitude of the LSTM hidden states of each word (Linzen et al., 2016; Radford et al., 2017; Strobelt et al., 2018), removing words (Li et al., 2016b; Kádár et al., 2017) or changing words (Linzen et al., 2016) and measuring the impact, or training surrogate tasks (Adi et al., 2017; Chrupała et al., 2017; Belinkov et al., 2017). These techniques only provide limited local interpretations and do not model fine-grained interactions of groups of inputs or intermediate representations. In contrast, Murdoch et al. (2018) recently introduced an LSTM interpretation technique called Contextual Decomposition (CD), providing a solution to the aforementioned issues. We will build upon this interpretation technique and introduce an extension for CNNs, making it possible to compare different neural network architectures within a single interpretation framework."
  }, {
    "heading": "3 Method",
    "text": "For visualizing the contributions of character sets, we use the recently introduced Contextual Decomposition (CD) framework, as originally developed for LSTMs (Murdoch et al., 2018), and extend it to\nCNNs. First, we introduce the concept of CD, followed by the extension for CNNs. For details on CD for LSTMs, we refer the reader to the aforementioned paper. Finally, we explain how the CD of the final classification layer is done."
  }, {
    "heading": "3.1 Contextual decomposition",
    "text": "The idea behind CD is that, in the context of character-level decomposition, we can decompose the output value of the network for a certain class into two distinct groups of contributions: (1) contributions originating from a specific character or set of characters within a word and (2) contributions originating from all the other characters within the same word.\nMore generally, we can decompose every output value z of every neural network component into a relevant contribution β and an irrelevant contribution γ:\nz = β + γ (1)"
  }, {
    "heading": "3.2 Decomposing CNN layers",
    "text": "A CNN typically consist of three components: the convolution itself, an activation function and an optional max-pooling operation. We will discuss each component in the next paragraphs.\nDecomposing the convolution Given a sequence of character embeddings x1, ...,xT ∈ Rd1 of length T , we can calculate the convolution of size n of a single filter over the sequence x1:T by applying the following equation to each n-length subsequence {xt+i, i = 0, .., n − 1}, denoted as xt:t+n−1:\nzt = n−1∑ i=0 Wi · xt+i + b, (2)\nwith zt ∈ R and where W ∈ Rd1×n and b ∈ R are the weight matrix and bias of the convolutional filter. Wi denotes the i-th column of the weight matrix W .\nWhen we want to calculate the contribution of a subset of characters, where S is the set of corresponding character position indexes and S ⊆ {1, ..., T}, we should decompose the output of the filter zt into three parts:\nzt = βt + γt + b. (3)\nThat is, the relevant contribution βt originating from the selected subset of characters with indexes S, the irrelevant contribution γt originating\nfrom the remaining characters in the sequence, and a bias which is deemed neutral (Murdoch et al., 2018).\nThis can be achieved by decomposing the convolution itself as follows:\nβt = n−1∑ i=0 Wi · xt+i (t+ i) ∈ S, (4)\nγt = n−1∑ i=0 Wi · xt+i (t+ i) /∈ S, (5)\nLinearizing the activation function After applying a linear transformation to the input, a nonlinearity is typically applied. In CNNs, the ReLU activation function is often used.\nIn Murdoch et al. (2018), a linearization method for the non-linear activation function f is proposed, based on the differences of partial sums of all N components yi involved in the preactivation sum zt. In other words, we want to split fReLU (zt) = fReLU ( ∑N i=1 yi) into a sum of individual linearized contributions LfReLU (yi), namely fReLU ( ∑N i=1 yi) = ∑N i=1 LfReLU (yi). To that end, we compute LfReLU (yk), the linearized contribution of yk as the average difference of partial sums over all possible permutations π1, ..., πMN of all N components yi involved:\nLf (yk) =\n1\nMN MN∑ i=1 [f( π−1i (k)∑ l=1 yπi(l))− f( π−1i (k)−1∑ l=1 yπi(l))]\n(6)\nConsequently, we can decompose the output ct after the activation function as follows:\nct =fReLU (zt) (7)\n=fReLU (βz,t + γz,t + b) (8)\n=LReLU (βz,t)\n+ [LReLU (γz,t) + LReLU (b)] (9)\n=βc,t + γc,t (10)\nFollowing Murdoch et al. (2018), βc,t contains the contributions that can be directly attributed to the specific set of input indexes S. Hence, the bias b is part of γc,t. Note that, while the decomposition in Eq. (10) is exact in terms of the total sum, the individual attribution to relevant (βc,t) and irrelevant (γc,t) is an approximation, due to the linearization.\nMax-pooling over time When applying a fixedsize convolution over a variable-length sequence, the output is again of variable size. Hence, a maxpooling operation is executed over the time dimension, resulting in a fixed-size representation that is independent of the sequence length:\nc = max t (ct). (11)\nInstead of applying a max operation over the βc,t and γc,t contributions separately, we first determine the position t of the highest ct value and propagate the corresponding βc,t and γc,t values."
  }, {
    "heading": "3.3 Calculating the final contribution scores",
    "text": "The final layer is a classification layer, which is the same for a CNN- or LSTM-based architecture. The probability pj of predicting class j is defined as follows:\npj = eWj ·x+bj∑C i=1 e Wi·x+bi , (12)\nin which W ∈ Rd2×C is a weight matrix and Wi the i-th column, x ∈ Rd2 the input, b ∈ Rd2 the bias vector and bi the i-th element, d2 the input vector size and C the total number of classes.\nThe input x is either the output c of a CNN or h of a LSTM. Consequently, we can decompose x into β and γ contributions. In practice, we only consider the preactivation and decompose it as follows:\nWj · x+ bj =Wj · β +Wj · γ + bj . (13)\nFinally, the contribution of a set of characters with indexes S to the final score of class j is equal to Wj · β. The latter score is used throughout the paper for visualizing contributions of sets of characters."
  }, {
    "heading": "4 Experimental Setup",
    "text": "We execute experiments on morphological tagging in three different languages: Finnish, Spanish and Swedish. We describe the dataset in Section 4.1, whereas model and training details can be found in Section 4.2."
  }, {
    "heading": "4.1 Dataset",
    "text": "For our experiments, we use the Universal Dependencies 1.4 (UD) dataset (Nivre et al., 2016), which contains morphological features for a large number of sentences. Additionally, we acquired\nmanually-annotated character-level morphological segmentations and labels for a subset of the test set for three morphological different languages: Finnish, Spanish and Swedish. 3\nFor each language, Silfverberg and Hulden (2017) selected the first non-unique 300 words from the UD test set and manually segmented each word according to the associated lemma and morphological features in the dataset. Whenever possible, they assigned each feature to a specific subset of characters. For example, the Spanish word \"económicas\" is segmented as follows:\n• económic : lemma=económico\n• a : gender=feminine\n• s : number=plural\nFor our experiments, we are only interested in word/feature pairs for which a feature can be assigned to a specific subset of characters. Hence, we filter the test set on those specific word/feature pairs. In the above example, we have two word/feature pairs. This resulted in 278, 340 and 137 word/feature pairs for Finnish, Spanish and Swedish, respectively. Using the same procedure, we selected relevant feature classes, resulting in 12, 6 and 9 feature classes for Finnish, Spanish and Swedish, respectively.4 For each class, when a feature was not available, we introduced an additional Not Applicable (NA) label.\nWe always train and validate on the full UD dataset for which we have filtered out all duplicate words. After that, we perform our analysis on either the UD test set or the annotated subset of manually segmented and annotated words. An overview can be found in Table 1.\n3Available online: http://github.com/mpsilfve/ud-segmen ter/commit/5959214d494cbc13e53e1b26650813ff950d2ee3\n4Full list available as supplementary material"
  }, {
    "heading": "4.2 Model",
    "text": "We experiment with both a CNN and BiLSTM architecture for character-level modeling of words.\nAt the input, we split every word into characters and add a start-of-word (ˆ) and an end-of-word ($) character. With every character, we associate a character embedding of size 50.\nOur CNN architecture is inspired by Kim et al. (2016) and consists of a set of filters of varying width, followed by a ReLU activation function and a max-over-time pooling operation. We adopt their small-CNN parameter choices and have 25, 50, 75, 100, 125 and 150 convolutional filters of size 1, 2, 3, 4, 5 and 6, respectively. We do not add an additional highway layer.\nFor the character-level BiLSTM architecture, we follow the variant used in Plank et al. (2016). That is, we simply run a BiLSTM over all the characters and concatenate the final forward and backward hidden state. To obtain a similar number of parameters as the CNN model, we set the hidden state size to 100 units for each LSTM.\nFinally, the word-level representation generated by either the CNN or BiLSTM architecture is classified by a multinomial logistic regression layer. Each morphological class type has a different layer. We do not take into account context to rule out any influence originating from somewhere other than the characters of the word itself.\nTraining details For morphological tagging, we train a single model for all classes at once. We minimize the joint loss by summing the cross-entropy losses of each class. We orthogonally initialize all weight matrices, except for the embeddings, which are uniformly initialized ([- 0.01;0.01]). All models are trained using Adam (Kingma and Ba, 2015) with minibatches of size 20 and learning rate 0.001. No specific regularization is used. We select our final model based on early stopping on the validation set."
  }, {
    "heading": "5 Experiments",
    "text": "First, we verify that the CD algorithm works correctly by executing a controlled experiment with a synthetic token. Next, we quantitatively and qualitatively evaluate on the full test set."
  }, {
    "heading": "5.1 Validation of contextual decomposition for convolutional neural networks",
    "text": "To verify that the contextual decomposition of CNNs works correctly, we devise an experiment\nin which we add a synthetic token to a word of a certain class, testing whether this token gets a high attribution score with respect to that specific class.\nGiven a word w and a corresponding binary label t, we add a synthetic character c to the beginning of word w with probability psyn if that word belongs to the class t = 1 and with probability 1 − psyn if that word belongs to the class t = 0. Consequently, if psyn = 1, the model should predict the label with a 100% accuracy, thus attributing this to the synthetic character c. When psyn = 0.5, the synthetic character does not provide any additional information about the label t, and c should thus have a small contribution.\nExperimental setup We train a CNN model on the Spanish dataset and only use words having the morphological label number. This label has two classes plur and sing, and assign those classes to the binary labels zero and one, respectively. Furthermore, we add a synthetic character to each word with probability psyn, varying psyn from 1 to 0.5 with steps of 0.1. We selected 112 unique word/feature pairs from our test set with label sing or plur. While plurality is marked by the suffix s, a variety of suffixes are used for the singular form. Therefore, we focus on the latter class (t = 1). The corresponding suffix is called the Ground Truth (GT) character.\nTo measure the impact of psyn, we add a synthetic character to each word of the class t = 1 and\ncalculate the contribution of each character by using the CD algorithm. We run the experiment five times with a different random seed and report the average correct attribution. The attribution is correct if the contribution of the synthetic/GT character is the highest contribution of all character contributions.\nResults The results of our evaluation are depicted in Figure 2. When psyn = 1, all words of the class t = 1 contain the synthetic character, and consequently, the accuracy for predicting t = 1 is indeed 100%. Moreover, the correct prediction is effectively attributed to the synthetic character (‘syn. char attr.’ in Figure 2 at 100%), with the GT character being deemed irrelevant. When the synthetic character probability psyn is lowered, the synthetic character is less trustworthy and the GT character becomes more important (increasing ‘GT char attr.’ in Figure 2). Finally, when psyn = 0.5, the synthetic character is equally plausible in both classes. Hence, the contribution of the synthetic character becomes irrelevant and the model attributes the prediction to other characters.\nConsequently, we can conclude that whenever there is a clear character-level pattern, the model learns the pattern and the CD algorithm is able to accurately attribute it to the correct character."
  }, {
    "heading": "5.2 Evaluation of character-level attribution",
    "text": "In this section, we measure and analyze (1) which characters contribute most to the final prediction of a certain label and (2) whether those contributions coincide with our linguistic knowledge about a language. To that end, we train a model to predict morphological features, given a particular word. The model does not have prior word seg-\nmentation information and thus needs to discover useful character patterns by itself. After training, we calculate the attribution scores of each character pattern within a word with respect to the correct feature class using CD, and evaluate whether this coincides with the ground truth attribution.\nModel We train CNN and BiLSTM models on Finnish, Spanish and Swedish. The average accuracies on the full test set are reported in Table 2.5 As a reference for the trained models’ ability to predict morphological feature classes, we provide a naive baseline, constructed from the majority vote for each feature type.\nOverall, our neural models yield substantially higher average accuracies than the baseline and perform very similar. Consequently, both the CNN and LSTM models learned useful character patterns for predicting the correct morphological feature classes. Hence, this raises the question whether these patterns coincide with our linguistic knowledge.\nEvaluation For each annotated word/feature pair, we measure if the ground truth character se-\n5The results of the individual classes are provided as supplementary material.\nˆ o l i v a t $ BiLSTM\nCNN\n-3.2 0 3.2\n(a) Example of Finnish. Word (verb): olivat (were), target class: Tense=Past\nˆ g r a t u i t a $ BiLSTM\nCNN\n-2.6 0 2.6\n(b) Example of Spanish. Word (adjective): gratuita (free), target: Gender=Fem.\nquence corresponds to the set or sequence of characters with the same length within the considered word that has the highest contribution for predicting the correct label for that word.\nIn the first setup, we only compare with character sequences having a consecutive set of characters (denoted cons). In the second setup, we compare with any set of characters (denoted all). We rank the contributions of each character set and report top one, two, and three scores. Because startof-word and end-of-word characters are not annotated in the dataset, we do not consider them part of the candidate character sets.\nResults The aggregated results for all classes and character sequence lengths are shown in Fig-\nure 3. In general, we observe that for almost all models and setups, the contextual decomposition attribution coincides with the manually-defined segmentations for at least half of the word/feature pairs. When we only consider the top two consecutive sequences (marked as cons), accuracies range from 76% up to 93% for all three languages. For Spanish and Swedish, the top two accuracies for character sets (marked as all) are still above 67%, despite the large space of possible character sets, whereas all ground truth patterns are consecutive sequences. While the accuracy for Finnish is lower, the top two accuracy is still above 50%.\nExamples for Finnish, Spanish and Swedish are shown in Figure 4. For Finnish, the character with the highest contribution i coincides with the ground truth character for the CNN model. This is not the case for the BiLSTM model which focuses on the character v, even though the correct label is predicted. For Spanish, both models strongly focus on the ground truth character a for predicting the feminine gender. For Swedish, the ground truth character sequence is the suffix or which denotes plurality. Given that or consists of two characters, all contributions of character sets of two characters are visualized. As can be seen, the most important set of two characters is {o,r} for the CNN and {k,r} for the BiLSTM model. However, {o,r} is the second most important character set for the BiLSTM model. Consequently, the BiLSTM model deemed the interaction between a root and suffix character more important than between two suffix characters."
  }, {
    "heading": "5.3 Analysis of learned patterns",
    "text": "In the previous section, we showed that there is a strong relationship between the manually-defined morphological segmentation and the patterns a neural network learns. However, there is still an accuracy gap between the results obtained using consecutive sequences only and results obtained using all possible character sets. Hence, this leads to the question which patterns the neural network focuses on, other than the manually defined patterns we evaluated before. To that end, for each of the three languages, we selected a morphological class of interest and evaluated for all words in the full UD test set that were assigned to that class what the most important character set of length one, two and three was. In other words, we evaluated for each word for which the class was cor-\nrectly predicted, which character set had the highest positive contribution towards predicting that class. The results can be found in Table 3.\nFinnish In Finnish, adding the suffix i to a verb, transforms it in the past tense. Sometimes the character s is added, resulting in the suffix si. The latter is a frequently used bigram pattern by the CNN but less by the BiLSTM. The BiLSTM combines the suffix i with another suffix vat which denotes third person plural in the character pattern iv_t.\nSpanish While there is no single clear-cut rule for the Spanish gender, in general the suffix a denotes the feminine gender in adjectives. However, there exist many nouns that are feminine but do not have the suffix a. Teschner and Russell (1984) identify d, and ión as typical endings of feminine nouns, which our models identified too as for example ad$ or ió/sió.\nSwedish In Swedish, there exist four suffixes for creating a plural form: or, ar, (e)r and n. Both models identified the suffix or. However, similar to Finnish, multiple suffixes are merged. In Swedish, the suffix na only occurs together with one of the first three plural suffixes. Hence, both models correctly identified this pattern as an important pattern for predicting the class number=plural, rather than the linguistically-defined pattern."
  }, {
    "heading": "5.4 Interactions of learned patterns",
    "text": "In the previous section, the pattern a$ showed to be the most important pattern in 34% of the correctly-predicted feminine Spanish words in our dataset. However, there exist many words that end with the character a that are not feminine. For example the third person singular form of the verb gustar is gusta. Hence, this raises the question if the model will classify gusta wrongly as feminine or correctly as NA. As an illustration of the applicability of CD for morphological analysis, we will study this case in more detail.\nFrom the full UD test set, we selected all words that end with the character a and that do not belong to the class gender=feminine. Using the Spanish CNN model, we predicted the gender class for each word and divided the words into two groups: predicted as feminine and predicted as not-feminine (_NA_ or masculine). The resulted in 44 and 199 words. Next, for each word in both groups we calculated the most positively and negatively contributing character set out of all possible character sets of any length within the considered word, using the CD algorithm. We compared the contribution scores in both groups using a Kruskal-Wallis significance test.6 While no significant (p < 0.05) difference could be found between the positive contributions of both groups (p=1.000), a borderline significant difference could be found between the negative\n6The full statistical analysis is provided as supplementary material.\ncontributions of words predicted as feminine and words predicted as not-feminine (p=0.070).\nConsequently, the CNN model’s classification decision is based on finding enough negative evidence to counteract the positive evidence found in the pattern a$, which CD was able to uncover.\nA visualization of this interaction is shown in Figure 5 for the word gusta. While the positive evidence is the strongest for the class feminine, the model identifies the verb stem gust as negative evidence which ultimately leads to the correct final prediction NA."
  }, {
    "heading": "6 Conclusion",
    "text": "While neural network-based models are part of many NLP systems, little is understood on how they handle the input data. We investigated how specific character sequences at the input of a neural network model contribute to word-level tagging decisions at the output, and if those contributions follow linguistically interpretable rules.\nFirst, we presented an analysis and visualization technique to decompose the output of CNN models into separate input contributions, based on the principles outlined by Murdoch et al. (2018) for LSTMs. This allowed us then to quantitatively and qualitatively compare the character-level patterns the CNNs and BiLSTMs learned for the task of morphological tagging. We showed that these patterns generally coincide with the morphological segments as defined by linguists for three morphologically different languages, but that sometimes other linguistically plausible patterns are learned. Finally, we showed that our CD algorithm for CNNs is able to explain why the model made a wrong or correct prediction.\nBy visualizing the contributions of each input unit or combinations thereof, we believe that much can be learned on how a neural network handles\nthe input data, why it makes certain decisions, or even for debugging neural network models."
  }, {
    "heading": "Acknowledgments",
    "text": "The authors would like to thank the anonymous reviewers and members of IDLab for their valuable feedback. FG would like to thank Kim Bettens for helping out with the statistical analysis.\nThe research activities as described in this paper were funded by Ghent University, imec, Flanders Innovation & Entrepreneurship (VLAIO), the Fund for Scientific Research-Flanders (FWOFlanders), and the European Union."
  }],
  "year": 2018,
  "references": [{
    "title": "Fine-grained analysis of sentence embeddings using auxiliary prediction tasks",
    "authors": ["Yossi Adi", "Einat Kermany", "Yonatan Belinkov", "Ofer Lavi", "Yoav Goldberg."],
    "venue": "International Conference on Representation Learning (ICLR).",
    "year": 2017
  }, {
    "title": "What do neural machine translation models learn about morphology? In Proceedings of the Association for Computational Linguistics (ACL)",
    "authors": ["Yonatan Belinkov", "Nadir Durrani", "Fahim Dalvi", "Hassan Sajjad", "James Glass"],
    "year": 2017
  }, {
    "title": "Semantic tagging with deep residual networks",
    "authors": ["Johannes Bjerva", "Barbara Plank", "Johan Bos."],
    "venue": "Proceedings of the International Conference on Computational Linguistics (COLING).",
    "year": 2016
  }, {
    "title": "A report of recent progress in transformation-based error-driven learning",
    "authors": ["Eric Brill."],
    "venue": "Proceedings of the Workshop on Human Language Technology (HLT).",
    "year": 1994
  }, {
    "title": "Representations of language in a model of visually grounded speech signal",
    "authors": ["Grzegorz Chrupała", "Lieke Gelderloos", "Afra Alishahi."],
    "venue": "Proceedings of the Association for Computational Linguistics (ACL).",
    "year": 2017
  }, {
    "title": "An extensive empirical evaluation of character-based morphological tagging for 14 languages",
    "authors": ["Georg Heigold", "Guenter Neumann", "Josef van Genabith."],
    "venue": "Proceedings of the European Chapter of the Association for Computational Linguistics",
    "year": 2017
  }, {
    "title": "Representation of linguistic form and function in recurrent neural networks",
    "authors": ["Ákos Kádár", "Grzegorz Chrupała", "Afra Alishahi."],
    "venue": "Computational Linguistics.",
    "year": 2017
  }, {
    "title": "Character-aware neural language models",
    "authors": ["Yoon Kim", "Yacine Jernite", "David Sontag", "Alexander M. Rush."],
    "venue": "Proceedings of the Thirtieth AAAI Conference on Artificial Intelligence (AAAI).",
    "year": 2016
  }, {
    "title": "Adam: A method for stochastic optimization",
    "authors": ["Diederik P. Kingma", "Jimmy Ba."],
    "venue": "International Conference on Representation Learning (ICLR).",
    "year": 2015
  }, {
    "title": "A computational approach to grammatical coding of english words",
    "authors": ["Sheldon Klein", "Robert F. Simmons."],
    "venue": "Journal of the Association for Computing Machinery.",
    "year": 1963
  }, {
    "title": "Visualizing and understanding neural models in nlp",
    "authors": ["Jiwei Li", "Xinlei Chen", "Eduard Hovy", "Dan Jurafsky."],
    "venue": "Proceedings of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies (NAACL-",
    "year": 2016
  }, {
    "title": "Understanding neural networks through representation erasure",
    "authors": ["Jiwei Li", "Will Monroe", "Dan Jurafsky."],
    "venue": "CoRR, abs/1612.08220.",
    "year": 2016
  }, {
    "title": "Finding function in form: Compositional character models for open vocabulary word representation",
    "authors": ["Wang Ling", "Chris Dyer", "Alan W. Black", "Isabel Trancoso", "Ramon Fermandez", "Silvio Amir", "Luís Marujo", "Tiago Luís."],
    "venue": "Conference on Em-",
    "year": 2015
  }, {
    "title": "Assessing the ability of LSTMs to learn syntax-sensitive dependencies",
    "authors": ["Tal Linzen", "Emmanuel Dupoux", "Yoav Goldberg."],
    "venue": "Transactions of the Association for Computational Linguistics.",
    "year": 2016
  }, {
    "title": "Achieving open vocabulary neural machine translation with hybrid word-character models",
    "authors": ["Minh-Thang Luong", "Christopher D. Manning."],
    "venue": "Proceedings of Association for Computational Linguistics (ACL).",
    "year": 2016
  }, {
    "title": "Beyond word importance: Contextual decomposition to extract interactions from LSTMs",
    "authors": ["W. James Murdoch", "Peter J. Liu", "Bin Yu."],
    "venue": "International Conference on Learning Representations (ICLR).",
    "year": 2018
  }, {
    "title": "Universal dependencies v1: A multilingual",
    "authors": ["Joakim Nivre", "Marie-Catherine de Marneffe", "Filip Ginter", "Yoav Goldberg", "Jan Hajic", "Christopher D. Manning", "Ryan McDonald", "Slav Petrov", "Sampo Pyysalo", "Natalia Silveira", "Reut Tsarfaty", "Daniel Zeman"],
    "year": 2016
  }, {
    "title": "Multilingual part-of-speech tagging with bidirectional long short-term memory models and auxiliary loss",
    "authors": ["Barbara Plank", "Anders Søgaard", "Yoav Goldberg."],
    "venue": "Proceedings of the Association for Computational Linguistics (ACL).",
    "year": 2016
  }, {
    "title": "Learning to generate reviews and discovering sentiment",
    "authors": ["Alec Radford", "Rafal Józefowicz", "Ilya Sutskever."],
    "venue": "CoRR, abs/1704.01444.",
    "year": 2017
  }, {
    "title": "A maximum entropy model for part-of-speech tagging",
    "authors": ["Adwait Ratnaparkhi."],
    "venue": "Conference on Empirical Methods in Natural Language Processing (EMNLP).",
    "year": 1996
  }, {
    "title": "Learning character-level representations for part-of-speech tagging",
    "authors": ["Cícero Nogueira dos Santos", "Bianca Zadrozny."],
    "venue": "International Confernce of Machine Learning (ICML).",
    "year": 2014
  }, {
    "title": "Grad-cam: Visual explanations from deep networks via gradient-based localization",
    "authors": ["Ramprasaath R. Selvaraju", "Michael Cogswell", "Abhishek Das", "Ramakrishna Vedantam", "Devi Parikh", "Dhruv Batra."],
    "venue": "IEEE International Conference on Com-",
    "year": 2017
  }, {
    "title": "Learning important features through propagating activation differences",
    "authors": ["Avanti Shrikumar", "Peyton Greenside", "Anshul Kundaje."],
    "venue": "Proceedings of the International Conference on Machine Learning (ICML).",
    "year": 2017
  }, {
    "title": "Automatic morpheme segmentation and labeling in universal dependencies resources",
    "authors": ["Miikka Silfverberg", "Mans Hulden."],
    "venue": "Proceedings of the NoDaLiDa 2017 Workshop on Universal Dependencies (UDW 2017).",
    "year": 2017
  }, {
    "title": "Striving for simplicity: The all convolutional net",
    "authors": ["Jost Tobias Springenberg", "Alexey Dosovitskiy", "Thomas Brox", "Martin A. Riedmiller."],
    "venue": "CoRR, abs/1412.6806.",
    "year": 2014
  }, {
    "title": "Lstmvis: A tool for visual analysis of hidden state dynamics in recurrent neural networks",
    "authors": ["Hendrik Strobelt", "Sebastian Gehrmann", "Hanspeter Pfister", "Alexander M. Rush."],
    "venue": "IEEE Transactions on Visualization and Computer Graphics.",
    "year": 2018
  }, {
    "title": "The gender patterns of spanish nouns: an inverse dictionarybased analysis",
    "authors": ["Richard Teschner", "William Russell."],
    "venue": "Hispanic Linguistics 1.",
    "year": 1984
  }, {
    "title": "Feature-rich part-ofspeech tagging with a cyclic dependency network",
    "authors": ["Kristina Toutanova", "Dan Klein", "Christopher D. Manning", "Yoram Singer."],
    "venue": "Proceedings of the North American Chapter of the Association for Computational Linguistics on Hu-",
    "year": 2003
  }, {
    "title": "From characters to words to in between: Do we capture morphology? In Proceedings of the Association for Computational Linguistics (ACL)",
    "authors": ["Clara Vania", "Adam Lopez"],
    "year": 2017
  }],
  "id": "SP:b1a3ababa5a65eade0e62a25731c5161266bdcc8",
  "authors": [{
    "name": "Fréderic Godin",
    "affiliations": []
  }, {
    "name": "Kris Demuynck",
    "affiliations": []
  }, {
    "name": "Joni Dambre",
    "affiliations": []
  }, {
    "name": "Wesley De Neve",
    "affiliations": []
  }, {
    "name": "Thomas Demeester",
    "affiliations": []
  }],
  "abstractText": "Character-level features are currently used in different neural network-based natural language processing algorithms. However, little is known about the character-level patterns those models learn. Moreover, models are often compared only quantitatively while a qualitative analysis is missing. In this paper, we investigate which character-level patterns neural networks learn and if those patterns coincide with manually-defined word segmentations and annotations. To that end, we extend the contextual decomposition (Murdoch et al., 2018) technique to convolutional neural networks which allows us to compare convolutional neural networks and bidirectional long short-term memory networks. We evaluate and compare these models for the task of morphological tagging on three morphologically different languages and show that these models implicitly discover understandable linguistic rules.",
  "title": "Explaining Character-Aware Neural Networks for Word-Level Prediction: Do They Discover Linguistic Rules?"
}