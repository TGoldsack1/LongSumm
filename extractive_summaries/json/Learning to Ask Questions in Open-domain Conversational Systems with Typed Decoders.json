{
  "sections": [{
    "text": "Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (Long Papers), pages 2193–2203 Melbourne, Australia, July 15 - 20, 2018. c©2018 Association for Computational Linguistics\n2193"
  }, {
    "heading": "1 Introduction",
    "text": "Learning to ask questions (or, question generation) aims to generate a question to a given input. Deciding what to ask and how is an indicator of machine understanding (Mostafazadeh et al., 2016), as demonstrated in machine comprehension (Du et al., 2017; Zhou et al., 2017b; Yuan et al., 2017) and question answering (Tang et al., 2017; Wang et al., 2017). Raising good questions is essential to conversational systems because a good system can well interact with users by asking and responding (Li et al., 2016). Furthermore, asking\n∗Authors contributed equally to this work. †Corresponding author: Minlie Huang.\nquestions is one of the important proactive behaviors that can drive dialogues to go deeper and further (Yu et al., 2016).\nQuestion generation (QG) in open-domain conversational systems differs substantially from the traditional QG tasks. The ultimate goal of this task is to enhance the interactiveness and persistence of human-machine interactions, while for traditional QG tasks, seeking information through a generated question is the major purpose. The response to a generated question will be supplied in the following conversations, which may be novel but not necessarily occur in the input as that in traditional QG (Du et al., 2017; Yuan et al., 2017; Tang et al., 2017; Wang et al., 2017; Mostafazadeh et al., 2016). Thus, the purpose of this task is to spark novel yet related information to drive the interactions to continue.\nDue to the different purposes, this task is unique in two aspects: it requires to question not only in various patterns but also about diverse yet relevant topics. First, there are various questioning patterns for the same input, such as Yes-no questions and Wh-questions with different interrogatives. Diversified questioning patterns make dialogue interactions richer and more flexible. Instead, traditional QG tasks can be roughly addressed by syntactic transformation (Andrenucci and Sneiders, 2005; Popowich and Winne, 2013), or implicitly modeled by neural models (Du et al., 2017). In such tasks, the information questioned on is pre-specified and usually determines the pattern of questioning. For instance, asking Whoquestion for a given person, or Where-question for a given location.\nSecond, this task requires to address much more transitional topics of a given input, which is the nature of conversational systems. For instance, for the input “I went to dinner with my friends”, we may question about topics such as friend, cuisine,\nprice, place and taste. Thus, this task generally requires scene understanding to imagine and comprehend a scenario (e.g., dining at a restaurant) that can be interpreted by topics related to the input. However, in traditional QG tasks, the core information to be questioned on is pre-specified and rather static, and paraphrasing is more required.\nUndoubtedly, asking good questions in conversational systems needs to address the above issues (questioning with diversified patterns, and addressing transitional topics naturally in a generated question). As shown in Figure 1, a good question is a natural composition of interrogatives, topic words, and ordinary words. Interrogatives indicate the pattern of questioning, topic words address the key information of topic transition, and ordinary words play syntactical and grammatical roles in making a natural sentence.\nWe thus classify the words in a question into three types: interrogative, topic word, and ordinary word automatically. We then devise two decoders, Soft Typed Decoder (STD) and Hard Typed Decoder (HTD), for question generation in conversational systems1. STD deals with word types in a latent and implicit manner, while HTD in a more explicit way. At each decoding position, we firstly estimate a type distribution over word types. STD applies a mixture of type-specific generation distributions where type probabilities are the coefficients. By contrast, HTD reshapes the type distribution by Gumbel-softmax and modulates the generation distribution by type probabilities. Our contributions are as follows:\n• To the best of our knowledge, this is the first study on question generation in the setting of\n1To simplify the task, as a preliminary research, we consider the one-round conversational system.\nconversational systems. We analyze the key differences between this new task and other traditional question generation tasks.\n• We devise soft and hard typed decoders to ask good questions by capturing different roles of different word types. Such typed decoders may be applicable to other generation tasks if word semantic types can be identified."
  }, {
    "heading": "2 Related Work",
    "text": "Traditional question generation can be seen in task-oriented dialogue system (Curto et al., 2012), sentence transformation (Vanderwende, 2008), machine comprehension (Du et al., 2017; Zhou et al., 2017b; Yuan et al., 2017; Subramanian et al., 2017), question answering (Qin, 2015; Tang et al., 2017; Wang et al., 2017; Song et al., 2017), and visual question answering (Mostafazadeh et al., 2016). In such tasks, the answer is known and is part of the input to the generated question. Meanwhile, the generation tasks are not required to predict additional topics since all the information has been provided in the input. They are applicable in scenarios such as designing questions for reading comprehension (Du et al., 2017; Zhou et al., 2017a; Yuan et al., 2017), and justifying the visual understanding by generating questions to a given image (video) (Mostafazadeh et al., 2016).\nIn general, traditional QG tasks can be addressed by the heuristic rule-based reordering methods (Andrenucci and Sneiders, 2005; Ali et al., 2010; Heilman and Smith, 2010), slotfilling with question templates (Popowich and Winne, 2013; Chali and Golestanirad, 2016; Labutov et al., 2015), or implicitly modeled by recent neural models(Du et al., 2017; Zhou et al., 2017b; Yuan et al., 2017; Song et al., 2017; Subramanian et al., 2017). These tasks generally do not require to generate a question with various patterns: for a given answer and a supporting text, the question type is usually decided by the input.\nQuestion generation in large-scale, opendomain dialogue systems is relatively unexplored. Li et al. (2016) showed that asking questions in task-oriented dialogues can offer useful feedback to facilitate learning through interactions. Several questioning mechanisms were devised with handcrafted templates, but unfortunately not applicable to open-domain conversational systems. Similar to our goal, a visual QG task is proposed to generate a question to interact with other people, given\nan image as input (Mostafazadeh et al., 2016)."
  }, {
    "heading": "3 Methodology",
    "text": ""
  }, {
    "heading": "3.1 Overview",
    "text": "The task of question generation in conversational systems can be formalized as follows: given a user post X = x1x2 · · ·xm, the system should generate a natural and meaningful question Y = y1y2 · · · yn to interact with the user, formally as\nY ∗ = argmax Y P(Y |X).\nAs aforementioned, asking good questions in conversational systems requires to question with diversified patterns and address transitional topics naturally in a question. To this end, we classify the words in a sentence into three types: interrogative, topic word, and ordinary word, as shown in Figure 1. During training, the type of each word in a question is decided automatically2. We manually collected about 20 interrogatives. The verbs and nouns in a question are treated as topic words, and all the other words as ordinary words. During test, we resort to PMI (Church and Hanks, 1990) to predict a few topic words for a given post.\nOn top of an encoder-decoder framework, we propose two decoders to effectively use word types in question generation. The first model is soft typed decoder (STD). It estimates a type distribution over word types and three type-specific generation distributions over the vocabulary, and then obtains a mixture of type-specific distributions for word generation.\nThe second one is a hard form of STD, hard typed decoder (HTD), in which we can control the decoding process more explicitly by approximating the operation of argmax with Gumbel-softmax (Jang et al., 2016). In both decoders, the final generation probability of a word is modulated by its word type."
  }, {
    "heading": "3.2 Encoder-Decoder Framework",
    "text": "Our model is based on the general encoderdecoder framework (Cho et al., 2014; Sutskever et al., 2014). Formally, the model encodes an input sequence X = x1x2 · · ·xm into a sequence of hidden states hi, as follows,\nht = GRU(ht−1, e(xt)), 2Though there may be errors in word type classification,\nwe found it works well in response generation.\nwhere GRU denotes gated recurrent units (Cho et al., 2014), and e(x) is the word vector of word x. The decoder generates a word sequence by sampling from the probability P(yt|y<t, X) (y<t = y1y2 · · · yt−1, the generated subsequence) which can be computed via\nP(yt|y<t, X) = MLP(st, e(yt−1), ct), st = GRU(st−1, e(yt−1), ct),\nwhere st is the state of the decoder at the time step t, and this GRU has different parameters with the one of the encoder. The context vector ct is an attentive read of the hidden states of the encoder as ct = ∑T i=1 αt,ihi, where the weight αt,i is scored by another MLP(st−1, hi) network."
  }, {
    "heading": "3.3 Soft Typed Decoder (STD)",
    "text": "In a general encoder-decoder model, the decoder tends to generate universal, meaningless questions like “What’s up?” and “So what?”. In order to generate more meaningful questions, we propose a soft typed decoder. It assumes that each word has a latent type among the set {interrogative, topic word, ordinary word}. The soft typed decoder firstly estimates a word type distribution over latent types in the given context, and then computes type-specific generation distributions over the entire vocabulary for different word types. The final probability of generating a word is a mixture of type-specific generation distributions where the coefficients are type probabilities.\nThe final generation distribution P(yt|y<t, X) from which a word can be sampled, is given by\nP(yt|y<t, X) = k∑\ni=1\nP(yt|tyt = ci, y<t, X) · P(tyt = ci|y<t, X), (1)\nwhere tyt denotes the word type at time step t and ci is a word type. Apparently, this formulation states that the final generation probability is a mixture of the type-specific generation probabilities P(yt|tyt = ci, y<t, X), weighted by the probability of the type distributionP(tyt = ci|y<t, X). We name this decoder as soft typed decoder. In this model, word type is latent because we do not need to specify the type of a word explicitly. In other words, each word can belong to any of the three types, but with different probabilities given the current context.\nThe probability distribution over word types C = {c1, c2, · · · , ck} (k = 3 in this paper) (termed\nas type distribution) is given by\nP(tyt|y<t, X) = softmax(W0st + b0), (2)\nwhere st is the hidden state of the decoder at time step t, W0 ∈ Rk×d, and d is the dimension of the hidden state.\nThe type-specific generation distribution is given by\nP(yt|tyt = ci, y<t, X) = softmax(Wcist + bci),\nwhere Wci ∈ R|V |×d and |V | is the size of the entire vocabulary. Note that the type-specific generation distribution is parameterized by Wci , indicating that the distribution for each word type has its own parameters.\nInstead of using a single distribution P(yt|y<t, X) as in a general Seq2Seq decoder, our soft typed decoder enriches the model by applying multiple type-specific generation distributions. This enables the model to express more information about the next word to be generated. Also note that the generation distribution is over the same vocabulary, and therefore there is no need to specify word types explicitly."
  }, {
    "heading": "3.4 Hard Typed Decoder (HTD)",
    "text": "In the soft typed decoder, we assume that each word is a distribution over the word types. In this sense, the type of a word is implicit. We do not need to specify the type of each word explicitly. In the hard typed decoder, words in the entire vocabulary are dynamically classified into three types for each post, and the decoder first estimates a type distribution at each position and then generates a word with the highest type probability. This pro-\ncess can be formulated as follows:\nc∗ = arg max ci P(tyt = ci|y<t, X), (3) P(yt|y<t, X) = P(yt|tyt = c∗, y<t, X). (4)\nThis is essentially the hard form of Eq. 1, which just selects the type with the maximal probability. However, this argmax process may cause two problems. First, such a cascaded decision process (firstly selecting the most probable word type and secondly choosing a word from that type) may lead to severe grammatical errors if the first selection is wrong. Second, argmax is discrete and nondifferentiable, and it breaks the back-propagation path during training.\nTo make best use of word types in hard typed decoder, we address the above issues by applying Gumbel-Softmax (Jang et al., 2016) to approximate the operation of argmax. There are several steps in the decoder (see Figure 2):\nFirst, the type of each word (interrogative, topic, or ordinary) in a question is decided automatically during training, as aforementioned.\nSecond, the generation probability distribution is estimated as usual,\nP(yt|y<t, X) = softmax(W0st + b0). (5)\nFurther, the type probability distribution at each decoding position is estimated as follows,\nP(tyt|y<t, X) = softmax(W1st + b1). (6)\nThird, the generation probability for each word is modulated by its corresponding type probabil-\nity:\nP ′(yt|y<t, X) = P(yt|y<t, X)·m(yt),\nm(yt) =\n{ 1 , c(yt) = c ∗\n0 , c(yt) 6= c∗ (7)\nwhere c(yt) looks up the word type of word yt, and c∗ is the type with the highest probability as defined in Eq. 3. This formulation has exactly the effect of argmax, where the decoder will only generate words of type with the highest probability.\nTo make P∗(yt|y<t, X) a distribution, we normalize these values by a normalization factor Z:\nZ = 1∑\nyt∈V P ′(yt|y<t, X) where V is the decoding vocabulary. Then, the final probability can be denoted by\nP∗(yt|y<t, X) = Z · P ′(yt|y<t, X). (8)\nAs mentioned, in order to have an effect of argmax but still maintain the differentiability, we resort to Gumbel-Softmax (Jang et al., 2016), which is a differentiable surrogate to the argmax function. The type probability distribution is then adjusted to the following form:\nm(yt) = GS(P(tyt = c(yt)|y<t, X)), GS(πi) = e(log(πi)+gi)/τ∑k j=1 e (log(πj)+gj)/τ , (9)\nwhere π1, π2, · · · , πk represents the probabilities of the original categorical distribution, gj are i.i.d samples drawn from Gumbel(0,1)3 and τ is a constant that controls the smoothness of the distribution. When τ → 0, Gumbel-Softmax performs like argmax, while if τ → ∞, Gumbel-Softmax performs like a uniform distribution. In our experiments, we set τ a constant between 0 and 1, making Gumbel-Softmax smoother than argmax, but sharper than normal softmax.\nNote that in HTD, we apply dynamic vocabularies for different responses during training. The words in a response are classified into the three types dynamically. A specific type probability will only affect the words of that type. During test, for each post, topic words are predicted with PMI, interrogatives are picked from a small dictionary, and the rest of words in the vocabulary are treated as ordinary words.\n3If u ∼ Uniform(0, 1), then g = −log(−log(u)) ∼ Gumbel(0, 1)."
  }, {
    "heading": "3.5 Loss Function",
    "text": "We adopt negative data likelihood (equivalent to cross entropy) as the loss function, and additionally, we apply supervision on the mixture weights of word types, formally as follows:\nΦ1 = ∑ t − logP(yt = ỹt|y<t, X), (10)\nΦ2 = ∑ t − logP(tyt = t̃yt|y<t, X), (11)\nΦ = Φ1 + λΦ2, (12)\nwhere t̃yt represents the reference word type and ỹt represents the reference word at time t. λ is a factor to balance the two loss terms, and we set λ=0.8 in our experiments.\nNote that for HTD, we substitute P∗(yt = wj |y<t, X) (as defined by Eq. 8) into Eq. 10."
  }, {
    "heading": "3.6 Topic Word Prediction",
    "text": "The only difference between training and inference is the means of choosing topic words. During training, we identify the nouns and verbs in a response as topic words; whereas during inference, we adopt PMI (Church and Hanks, 1990) and Rel(ki, X) to predict a set of topic words ki for an input post X , as defined below:\nPMI(wx, wy) = log p(wx, wy)\np1(wx) ∗ p2(wy) , Rel(ki, X) = ∑ wx∈X ePMI(wx,ki),\nwhere p1(w)/p2(w) represent the probability of word w occurring in a post/response, respectively, and p(wx, wy) is the probability of word wx occurring in a post and wy in a response.\nDuring inference, we predict at most 20 topic words for an input post. Too few words will affect the grammaticality since the predicted set contains infrequent topic words, while too many words introduce more common topics leading to more general responses."
  }, {
    "heading": "4 Experiment",
    "text": ""
  }, {
    "heading": "4.1 Dataset",
    "text": "To estimate the probabilities in PMI, we collected about 9 million post-response pairs from Weibo. To train our question generation models, we distilled the pairs whereby the responses are in question form with the help of around 20 hand-crafted\ntemplates. The templates contain a list of interrogatives and other implicit questioning patterns. Such patterns detect sentences led by words like what, how many, how about or sentences ended with a question mark. After that, we removed the pairs whose responses are universal questions that can be used to reply many different posts. This is a simple yet effective way to avoid situations where the type probability distribution is dominated by interrogatives and ordinary words.\nUltimately, we obtained the dataset comprising about 491,000 post-response pairs. We randomly selected 5,000 pairs for testing and another 5,000 for validation. The average number of words in post/response is 8.3/9.3 respectively. The dataset contains 66,547 different words, and 18,717 words appear more than 10 times. The dataset is available at: http://coai.cs.tsinghua.edu. cn/hml/dataset/."
  }, {
    "heading": "4.2 Baselines",
    "text": "We compared the proposed decoders with four state-of-the-art baselines. Seq2Seq: A simple encoder-decoder with attention mechanisms (Luong et al., 2015). MA: The mechanism-aware (MA) model applies multiple responding mechanisms represented by real-valued vectors (Zhou et al., 2017a). The number of mechanisms is set to 4 and we randomly picked one response from the generated responses for evaluation to avoid selection bias. TA: The topic-aware (TA) model generates informative responses by incorporating topic words predicted from the input post (Xing et al., 2017). ERM: Elastic responding machine (ERM) adaptively selects a subset of responding mechanisms using reinforcement learning (Zhou et al., 2018a). The settings are the same as the original paper."
  }, {
    "heading": "4.3 Experiment Settings",
    "text": "Parameters were set as follows: we set the vocabulary size to 20, 000 and the dimension of word vectors as 100. The word vectors were pretrained with around 9 million post-response pairs from Weibo and were being updated during the training of the decoders. We applied the 4-layer GRU units (hidden states have 512 dimensions). These settings were also applied to all the baselines. λ in Eq. 12 is 0.8. We set different values of τ in Gumbel-softmax at different stages of training. At the early stage, we set τ to a small value (0.6) to obtain a sharper reformed distri-\nbution (more like argmax). After several steps, we set τ to a larger value (0.8) to apply a more smoothing distribution. Our codes are available at: https://github.com/victorywys/ Learning2Ask_TypedDecoder."
  }, {
    "heading": "4.4 Automatic Evaluation",
    "text": "We conducted automatic evaluation over the 5, 000 test posts. For each post, we obtained responses from the six models, and there are 30, 000 post-response pairs in total."
  }, {
    "heading": "4.4.1 Evaluation Metrics",
    "text": "We adopted perplexity to quantify how well a model fits the data. Smaller values indicate better performance. To evaluate the diversity of the responses, we employed distinct-1 and distinct-2 (Li et al., 2015). These two metrics calculates the proportion of the total number of distinct unigrams or bigrams to the total number of generated tokens in all the generated responses.\nFurther, we calculated the proportion of the responses containing at least one topic word in the list predicted by PMI. This is to evaluate the ability of addressing topic words in response. We term this metric as topical response ratio (TRR). We predicted 20 topic words with PMI for each post."
  }, {
    "heading": "4.4.2 Results",
    "text": "Comparative results are presented in Table 1. STD and HTD perform fairly well with lower perplexities, higher distinct-1 and distinct-2 scores, and remarkably better topical response ratio (TRR). Note that MA has the lowest perplexity because the model tends to generate more universal responses.\nOur decoders have better distinct-1 and distinct2 scores than baselines do, and HTD performs much better than the strongest baseline TA. Noticeably, the means of using topic information in our models differs substantially from that in TA. Our decoders predict whether a topic word should be decoded at each position, whereas TA takes as\ninput topic word embeddings at all decoding positions.\nOur decoders have remarkably better topic response ratios (TRR), indicating that they are more likely to include topic words in generation."
  }, {
    "heading": "4.5 Manual Evaluation",
    "text": "We resorted to a crowdsourcing service for manual annotation. 500 posts were sampled for manual annotation4. We conducted pair-wise comparison between two responses generated by two models for the same post. In total, there are 4,500 pairs to be compared. For each response pair, five judges were hired to give a preference between the two responses, in terms of the following three metrics. Tie was allowed, and system identifiers were masked during annotation."
  }, {
    "heading": "4.5.1 Evaluation Metrics",
    "text": "Each of the following metrics is evaluated independently on each pair-wise comparison: Appropriateness: measures whether a question is reasonable in logic and content, and whether it is questioning on the key information. Inappropriate questions are either irrelevant to the post, or have grammatical errors, or universal questions. Richness: measures whether a response contains topic words that are relevant to a given post. Willingness to respond: measures whether a user will respond to a generated question. This metric is to justify how likely the generated questions can elicit further interactions. If people are willing to respond, the interactions can go further.\n4During the sampling process, we removed those posts that are only interpretable with other context or background."
  }, {
    "heading": "4.5.2 Results",
    "text": "The label of each pair-wise comparison is decided by majority voting from five annotators. Results shown in Table 2 indicate that STD and HTD outperform all the baselines in terms of all the metrics. This demonstrates that our decoders produce more appropriate questions, with richer topics. Particularly, our decoders have substantially better willingness scores, indicating that questions generated by our models are more likely to elicit further interactions. Noticeably, HTD outperforms STD significantly, indicating that it is beneficial to specify word types explicitly and apply dynamic vocabularies in generation.\nWe also observed that STD outperforms Seq2Seq and TA, but the differences are not significant in appropriateness. This is because STD generated about 7% non-question responses which were judged as inappropriate, while Seq2Seq and TA generated universal questions (inappropriate too but beat STD in annotation) to these posts."
  }, {
    "heading": "4.5.3 Annotation Statistics",
    "text": "The proportion of the pair-wise annotations in which at least three of five annotators assign the same label to a record is 90.57%/93.11%/96.62% for appropriateness/ richness/willingness, respectively. The values show that we have fairly good agreements with majority voting."
  }, {
    "heading": "4.6 Questioning Pattern Distribution",
    "text": "To analyze whether the model can question with various patterns, we manually annotated the questioning patterns of the responses to 100 sampled posts. The patterns are classified into 11 types including Yes-No, How-, Why-, What-, When-, and Who- questions. We then calculated the KL diver-\ngence between the pattern type distribution by a model and that by human (i.e., gold responses).\nResults in Table 3 show that the pattern distribution by our model is closer to that in humanwritten responses, indicating that our decoders can better learn questioning patterns from human language. Further investigation reveals that the baselines tend to generate simple questions like What?(什么？) or Really?(真的吗), and constantly focus on using one or two question patterns whereas our decoders use more diversified patterns as appeared in the human language."
  }, {
    "heading": "4.7 Examples of the Generated Questions",
    "text": "Table 4 presents some generated questions by our decoders, which are more appropriate. On the contrary, Seq2Seq, MA and ERM tend to generate more universal questions. These examples also clearly show that asking questions in open-domain conversational systems requires scene understanding, which is verified by this scene example of singing at karaoke(在卡拉ok唱歌).\nTo further understand how to ask good questions in conversational systems, we presented more generated question examples by human and our typed decoders. The first example (Post-1) in Table 5 shows that a good question can be composed of only interrogatives and ordinary words. This shows the complexity of this task and also the necessity of modeling interrogatives. Post-2 indicates a typical questioning pattern which is ques-\ntioning on a particular topic word (效果-effect) of the input. While for Post-3, the questions are asking about transitional topics of the input (上 班-work → 部门-department; 体育中心-sports center → 体育学院-college of Physical Education), indicating a typical case of topic transition in our task (also seen in Post-4,寿司-sushi→日式 料理-Japanese food). This example also demonstrates that for the same input, there are various questioning patterns: a How-question asked by human, a Which-question by STD, and a Yes-No question by HTD. As for Post-4, the gold question requires a background that is only shared between the poster and responder, while STD and HTD tend to raise more general questions due to the lack of such shared knowledge."
  }, {
    "heading": "4.8 Visualization of Type Distribution",
    "text": "To gain more insights into how a word type influence the generation process, we visualized the type probability at each decoding position in HTD. This example (Figure 3) shows that the model can capture word types well at different positions. For instance, at the first and second positions, ordinary words have the highest probabilities for generating 你-you and 喜欢-like, and at the third position, a\ntopic word兔子-rabbit is predicted while the last two positions are for interrogatives (a particle and a question mark)."
  }, {
    "heading": "4.9 Error Analysis",
    "text": "We presented error type distribution by manually analyzing 100 bad responses sampled from STD and HTD respectively, where bad means the response by our model is worse than that by some baseline during the pair-wise annotation.\nThere are 4 typical error types: no topic words (NoT) in a response (mainly universal questions), wrong topics (WrT) where topic words are irrelevant, type generation error (TGE) where a wrong word type is predicted (See Eq. 2) and it causes grammatical errors, and other errors.\nThe error distribution is shown in Table 6. For STD, most of the errors are attributed to no topic or wrong topics, while for HTD, the majority of errors fall into wrong topics.\nThere are typical cases for these error types: (1) Posts such as “I am so happy today!” contains\nno topic words or rare topic words. In this case, our method is unable to predict the topic words so that the models tend to generate universal questions. This happens more frequently in STD because the topic words are not specified explicitly. (2) Posts contains multiple topic words, but the model sometimes focuses on an inappropriate one. For instance, for Post-2 in Table 7, HTD focused on 海报-poster but 合作-cooperation is a proper one to be focused on. (3) For complex posts, the models failed to predict the correct word type in response. For Post-3, STD generated a declarative sentence and HTD generated a question which, however, is not adequate within the context.\nThese cases show that controlling the questioning patterns and the informativeness of the content faces with the compatibility issue, which is challenging in language generation. These errors are also partially due to the imperfect ability of topic word prediction by PMI, which is challenging itself in open-domain conversational systems."
  }, {
    "heading": "5 Conclusion and Future Work",
    "text": "We present two typed decoders to generate questions in open-domain conversational systems. The decoders firstly estimate a type distribution over word types, and then use the type distribution to modulate the final word generation distribution. Through modeling the word types in language generation, the proposed decoders are able to question with various patterns and address novel yet related transitional topics in a generated question. Results show that our models can generate more appropriate questions, with richer topics, thereby more likely to elicit further interactions.\nThe work can be extended to multi-turn conversation generation by including an additional detector predicting when to ask a question. The detector can be implemented by a classifier or some heuristics. Furthermore, the typed decoders are applicable to the settings where word types can be easily obtained, such as in emotional text generation (Ghosh et al., 2017; Zhou et al., 2018b)."
  }, {
    "heading": "Acknowledgements",
    "text": "This work was partly supported by the National Science Foundation of China under grant No.61272227/61332007 and the National Basic Research Program (973 Program) under grant No. 2013CB329403. We would like to thank Prof. Xiaoyan Zhu for her generous support."
  }],
  "year": 2018,
  "references": [{
    "title": "Automation of question generation from sentences",
    "authors": ["Husam Ali", "Yllias Chali", "Sadid A Hasan."],
    "venue": "Proceedings of QG2010: The Third Workshop on Question Generation. pages 58–67.",
    "year": 2010
  }, {
    "title": "Automated question answering: review of the main approaches",
    "authors": ["A. Andrenucci", "E. Sneiders."],
    "venue": "ICITA. pages 514–519.",
    "year": 2005
  }, {
    "title": "Ranking automatically generated questions using common human queries",
    "authors": ["Yllias Chali", "Sina Golestanirad."],
    "venue": "INLG. pages 217–221.",
    "year": 2016
  }, {
    "title": "Learning phrase representations using rnn encoder-decoder for statistical machine translation",
    "authors": ["Kyunghyun Cho", "Bart Van Merriënboer", "Caglar Gulcehre", "Dzmitry Bahdanau", "Fethi Bougares", "Holger Schwenk", "Yoshua Bengio."],
    "venue": "EMNLP. pages",
    "year": 2014
  }, {
    "title": "Word association norms, mutual information, and lexicography",
    "authors": ["Kenneth Ward Church", "Patrick Hanks."],
    "venue": "Computational linguistics 16(1):22–29.",
    "year": 1990
  }, {
    "title": "Question generation based on lexico-syntactic patterns learned from the web. Dialogue Discourse",
    "authors": ["Sérgio Curto", "Ana Cristina Mendes", "Luı́sa Coheur"],
    "year": 2012
  }, {
    "title": "Learning to ask: Neural question generation for reading comprehension",
    "authors": ["Xinya Du", "Junru Shao", "Claire Cardie."],
    "venue": "ACL. pages 1342–1352.",
    "year": 2017
  }, {
    "title": "Affect-lm: A neural language model for customizable affective text generation",
    "authors": ["Sayan Ghosh", "Mathieu Chollet", "Eugene Laksana", "Louis-Philippe Morency", "Stefan Scherer."],
    "venue": "ACL. pages 634– 642.",
    "year": 2017
  }, {
    "title": "Good question! statistical ranking for question generation",
    "authors": ["Michael Heilman", "Noah A. Smith."],
    "venue": "NAACL HLT . pages 609–617.",
    "year": 2010
  }, {
    "title": "Categorical reparameterization with gumbel-softmax",
    "authors": ["Eric Jang", "Shixiang Gu", "Ben Poole."],
    "venue": "arXiv preprint arXiv:1611.01144 .",
    "year": 2016
  }, {
    "title": "Deep questions without deep understanding",
    "authors": ["Igor Labutov", "Sumit Basu", "Lucy Vanderwende."],
    "venue": "ACL (1). pages 889–898.",
    "year": 2015
  }, {
    "title": "A diversity-promoting objective function for neural conversation models",
    "authors": ["Jiwei Li", "Michel Galley", "Chris Brockett", "Jianfeng Gao", "Bill Dolan."],
    "venue": "NAACL-HLT . pages 110–119.",
    "year": 2015
  }, {
    "title": "Learning through dialogue interactions by asking questions",
    "authors": ["Jiwei Li", "Alexander H Miller", "Sumit Chopra", "Marc’Aurelio Ranzato", "Jason Weston"],
    "year": 2016
  }, {
    "title": "Effective approaches to attentionbased neural machine translation",
    "authors": ["Minh-Thang Luong", "Hieu Pham", "Christopher D Manning."],
    "venue": "EMNLP. pages 1412–1421.",
    "year": 2015
  }, {
    "title": "Generating natural questions about an image",
    "authors": ["Nasrin Mostafazadeh", "Ishan Misra", "Jacob Devlin", "Margaret Mitchell", "Xiaodong He", "Lucy Vanderwende."],
    "venue": "ACL. pages 1802–1813.",
    "year": 2016
  }, {
    "title": "Generating natural language questions to support learning on-line",
    "authors": ["David Lindberg Fred Popowich", "John Nesbit Phil Winne."],
    "venue": "ENLG pages 105– 114.",
    "year": 2013
  }, {
    "title": "Question Paraphrase Generation for Question Answering System",
    "authors": ["Haocheng Qin."],
    "venue": "Master’s thesis, University of Waterloo.",
    "year": 2015
  }, {
    "title": "A unified query-based generative model for question generation and question answering",
    "authors": ["Linfeng Song", "Zhiguo Wang", "Wael Hamza."],
    "venue": "arXiv preprint arXiv:1709.01058 .",
    "year": 2017
  }, {
    "title": "Neural models for key phrase detection and question generation",
    "authors": ["Sandeep Subramanian", "Tong Wang", "Xingdi Yuan", "Saizheng Zhang", "Adam Trischler", "Yoshua Bengio."],
    "venue": "arXiv preprint arXiv:1706.04560 .",
    "year": 2017
  }, {
    "title": "Sequence to sequence learning with neural networks",
    "authors": ["Ilya Sutskever", "Oriol Vinyals", "Quoc V Le."],
    "venue": "NIPS. pages 3104–3112.",
    "year": 2014
  }, {
    "title": "Question answering and question generation as dual tasks",
    "authors": ["Duyu Tang", "Nan Duan", "Tao Qin", "Ming Zhou."],
    "venue": "arXiv preprint arXiv:1706.02027 .",
    "year": 2017
  }, {
    "title": "The importance of being important: Question generation",
    "authors": ["Lucy Vanderwende."],
    "venue": "Proceedings of the 1st Workshop on the Question Generation Shared Task Evaluation Challenge.",
    "year": 2008
  }, {
    "title": "A joint model for question answering and question generation",
    "authors": ["Tong Wang", "Xingdi Yuan", "Adam Trischler."],
    "venue": "arXiv preprint arXiv:1706.01450 .",
    "year": 2017
  }, {
    "title": "Topic aware neural response generation",
    "authors": ["Chen Xing", "Wei Wu", "Yu Wu", "Jie Liu", "Yalou Huang", "Ming Zhou", "Wei-Ying Ma."],
    "venue": "AAAI. pages 3351– 3357.",
    "year": 2017
  }, {
    "title": "Strategy and policy learning for nontask-oriented conversational systems",
    "authors": ["Zhou Yu", "Ziyu Xu", "Alan W Black", "Alex I. Rudnicky."],
    "venue": "SIGDIAL. pages 404–412.",
    "year": 2016
  }, {
    "title": "Machine comprehension by text-to-text neural question generation",
    "authors": ["Xingdi Yuan", "Tong Wang", "Caglar Gulcehre", "Alessandro Sordoni", "Philip Bachman", "Sandeep Subramanian", "Saizheng Zhang", "Adam Trischler."],
    "venue": "The Workshop on Representation",
    "year": 2017
  }, {
    "title": "Mechanism-aware neural machine for dialogue response generation",
    "authors": ["Ganbin Zhou", "Ping Luo", "Rongyu Cao", "Fen Lin", "Bo Chen", "Qing He."],
    "venue": "AAAI. pages 3400–3407.",
    "year": 2017
  }, {
    "title": "Elastic responding machine for dialog generation with dynamically mechanism selecting",
    "authors": ["Ganbin Zhou", "Ping Luo", "Yijun Xiao", "Fen Lin", "Bo Chen", "Qing He."],
    "venue": "AAAI Conference on Artificial Intelligence, AAAI.",
    "year": 2018
  }, {
    "title": "Emotional chatting machine: Emotional conversation generation with internal and external memory",
    "authors": ["Hao Zhou", "Minlie Huang", "Tianyang Zhang", "Xiaoyan Zhu", "Bing Liu."],
    "venue": "AAAI .",
    "year": 2018
  }, {
    "title": "Neural question generation from text: A preliminary study",
    "authors": ["Qingyu Zhou", "Nan Yang", "Furu Wei", "Chuanqi Tan", "Hangbo Bao", "Ming Zhou."],
    "venue": "arXiv preprint arXiv:1704.01792 .",
    "year": 2017
  }],
  "id": "SP:48bff8eae05fb5369b0026742eaa79178e107fbb",
  "authors": [{
    "name": "Yansen Wang",
    "affiliations": []
  }, {
    "name": "Chenyi Liu",
    "affiliations": []
  }, {
    "name": "Minlie Huang",
    "affiliations": []
  }, {
    "name": "Liqiang Nie",
    "affiliations": []
  }],
  "abstractText": "Asking good questions in large-scale, open-domain conversational systems is quite significant yet rather untouched. This task, substantially different from traditional question generation, requires to question not only with various patterns but also on diverse and relevant topics. We observe that a good question is a natural composition of interrogatives, topic words, and ordinary words. Interrogatives lexicalize the pattern of questioning, topic words address the key information for topic transition in dialogue, and ordinary words play syntactical and grammatical roles in making a natural sentence. We devise two typed decoders (soft typed decoder and hard typed decoder) in which a type distribution over the three types is estimated and used to modulate the final generation distribution. Extensive experiments show that the typed decoders outperform state-of-the-art baselines and can generate more meaningful questions.",
  "title": "Learning to Ask Questions in Open-domain Conversational Systems with Typed Decoders"
}