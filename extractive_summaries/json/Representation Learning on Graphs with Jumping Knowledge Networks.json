{
  "sections": [{
    "heading": "1. Introduction",
    "text": "Graphs are a ubiquitous structure that widely occurs in data analysis problems. Real-world graphs such as social networks, financial networks, biological networks and citation networks represent important rich information which is not seen from the individual entities alone, for example, the communities a person is in, the functional role of a molecule, and the sensitivity of the assets of an enterprise to external shocks. Therefore, representation learning of nodes in graphs aims to extract high-level features from a node as well as its neighborhood, and has proved extremely useful for many applications, such as node classification, clustering, and link prediction (Perozzi et al., 2014; Monti et al.,\n1Massachusetts Institute of Technology (MIT) 2National Institute of Informatics, Tokyo. Correspondence to: Keyulu Xu <keyulu@mit.edu>, Stefanie Jegelka <stefje@mit.edu>.\nProceedings of the 35 th International Conference on Machine Learning, Stockholm, Sweden, PMLR 80, 2018. Copyright 2018 by the author(s).\n2017; Grover & Leskovec, 2016; Tang et al., 2015).\nRecent works focus on deep learning approaches to node representation. Many of these approaches broadly follow a neighborhood aggregation (or “message passing” scheme), and those have been very promising (Kipf & Welling, 2017; Hamilton et al., 2017; Gilmer et al., 2017; Veličković et al., 2018; Kearnes et al., 2016). These models learn to iteratively aggregate the hidden features of every node in the graph with its adjacent nodes’ as its new hidden features, where an iteration is parametrized by a layer of the neural network. Theoretically, an aggregation process of k iterations makes use of the subtree structures of height k rooted at every node. Such schemes have been shown to generalize the Weisfeiler-Lehman graph isomorphism test (Weisfeiler & Lehman, 1968) enabling to simultaneously learn the topology as well as the distribution of node features in the neighborhood (Shervashidze et al., 2011; Kipf & Welling, 2017; Hamilton et al., 2017).\nYet, such aggregation schemes sometimes lead to surprises. For example, it has been observed that the best performance with one of the state-of-the-art models, Graph Convolutional Networks (GCN), is achieved with a 2-layer model. Deeper versions of the model that, in principle, have access to more information, perform worse (Kipf & Welling, 2017). A similar degradation of learning for computer vision problems is resolved by residual connections (He et al., 2016a) that greatly aid the training of deep models. But, even with residual connections, GCNs with more layers do not perform as well as the 2-layer GCN on many datasets, e.g. citation networks.\nMotivated by observations like the above, in this paper, we address two questions. First, we study properties and resulting limitations of neighborhood aggregation schemes. Second, based on this analysis, we propose an architecture that, as opposed to existing models, enables adaptive, structure-aware representations. Such representations are particularly interesting for representation learning on large complex graphs with diverse subgraph structures.\nModel analysis. To better understand the behavior of different neighborhood aggregation schemes, we analyze the effective range of nodes that any given node’s representation draws from. We summarize this sensitivity analysis by what\nwe name the influence distribution of a node. This effective range implicitly encodes prior assumptions on what are the “nearest neighbors” that a node should draw information from. In particular, we will see that this influence is heavily affected by the graph structure, raising the question whether “one size fits all”, in particular in graphs whose subgraphs have varying properties (such as more tree-like or more expander-like).\nIn particular, our more formal analysis connects influence distributions with the spread of a random walk at a given node, a well-understood phenomenon as a function of the graph structure and eigenvalues (Lovász, 1993). For instance, in some cases and applications, a 2-step random walk influence that focuses on local neighborhoods can be more informative than higher-order features where some of the information may be “washed out” via averaging.\nChanging locality. To illustrate the effect and importance of graph structure, recall that many real-world graphs possess locally strongly varying structure. In biological and citation networks, the majority of the nodes have few connections, whereas some nodes (hubs) are connected to many other nodes. Social and web networks usually consist of an expander-like core part and an almost-tree (bounded treewidth) part, which represent well-connected entities and the small communities respectively (Leskovec et al., 2009; Maehara et al., 2014; Tsonis et al., 2006).\nBesides node features, this subgraph structure has great impact on the result of neighborhood aggregation. The speed of expansion or, equivalently, growth of the influence radius, is characterized by the random walk’s mixing time, which changes dramatically on subgraphs with different structures (Lovász, 1993). Thus, the same number of iterations (layers) can lead to influence distributions of very different locality. As an example, consider the social network in Figure 1 from GooglePlus (Leskovec & Mcauley, 2012). The figure illustrates the expansions of a random walk starting at the square node. The walk (a) from a node within the core rapidly includes almost the entire graph. In contrast, the walk (b) starting at a node in the tree part includes only a very small fraction of all nodes. After 5 steps, the same walk has reached the core and, suddenly, spreads quickly. Translated to graph representation models, these spreads become the influence distributions or, in other words, the averaged features yield the new feature of the walk’s starting node. This shows that in the same graph, the same number of steps can lead to very different effects. Depending on the application, wide-range or smallrange feature combinations may be more desirable. A too rapid expansion may average too broadly and thereby lose information, while in other parts of the graph, a sufficient neighborhood may be needed for stabilizing predictions.\nJK networks. The above observations raise the question\nwhether it is possible to adaptively adjust (i.e., learn) the influence radii for each node and task. To achieve this, we explore an architecture that learns to selectively exploit information from neighborhoods of differing locality. This architecture selectively combines different aggregations at the last layer, i.e., the representations “jump” to the last layer. Hence, we name the resulting networks Jumping Knowledge Networks (JK-Nets). We will see that empirically, when adaptation is an option, the networks indeed learn representations of different orders for different graph substructures. Moreover, in Section 6, we show that applying our framework to various state-of-the-art neighborhood-aggregation models consistently improves their performance."
  }, {
    "heading": "2. Background and Neighborhood aggregation schemes",
    "text": "We begin by summarizing some of the most common neighborhood aggregation schemes and, along the way, introduce our notation. Let G = (V,E) be a simple graph with node features Xv ∈ Rdi for v ∈ V . Let G̃ be the graph obtained by adding a self-loop to every v ∈ V . The hidden feature of node v learned by the l-th layer of the model is denoted by h (l) v ∈ Rdh . Here, di is the dimension of the input features and dh is the dimension of the hidden features, which, for simplicity of exposition, we assume to be the same across layers. We also use h(0)v = Xv for the node feature. The neighborhood N(v) = {u ∈ V | (v, u) ∈ E} of node v is the set of adjacent nodes of v. The analogous neighborhood Ñ(v) = {v} ∪ {u ∈ V | (v, u) ∈ E} on G̃ includes v.\nA typical neighborhood aggregation scheme can generically be written as follows: for a k-layer model, the l-th layer (l = 1..k) updates h(l)v for every v ∈ V simultaneously as\nh(l)v = σ ( Wl · AGGREGATE ({ h(l−1)u ,∀u ∈ Ñ(v) })) (1)\nwhere AGGREGATE is an aggregation function defined by the specific model, Wl is a trainable weight matrix on the lth layer shared by all nodes, and σ is a non-linear activation function, e.g. a ReLU.\nGraph Convolutional Networks (GCN). Graph Convolutional Networks (GCN) (Kipf & Welling, 2017), initially motivated by spectral graph convolutions (Hammond et al., 2011; Defferrard et al., 2016), are a specific instantiation of this framework (Gilmer et al., 2017), of the form\nh(l)v = ReLU ( Wl · ∑ u∈Ñ(v) (deg(v)deg(u))−1/2 h(l−1)u ) (2)\nwhere deg(v) is the degree of node v in G. Hamilton et al. (2017) derived a variant of GCN that also works in inductive settings (previously unseen nodes), by using a different normalization to average:\nh(l)v = ReLU ( Wl · 1\nd̃eg(v) ∑ u∈Ñ(v) h(l−1)u ) (3)\nwhere d̃eg(v) is the degree of node v in G̃.\nNeighborhood Aggregation with Skip Connections. Instead of aggregating a node and its neighbors at the same time as in Eqn. (1), a number of recent approaches aggregate the neighbors first and then combine the resulting neighborhood representation with the node’s representation from the last iteration. More formally, each node is updated as\nh (l) N(v) = σ ( Wl · AGGREGATEN ( {h(l−1)u ,∀u ∈ N(v)} )) h(l)v = COMBINE ( h(l−1)v , h (l) N(v)\n) where AGGREGATEN and COMBINE are defined by the specific model. The COMBINE step is key to this paradigm and can be viewed as a form of a ”skip connection” between different layers.For COMBINE, GraphSAGE (Hamilton et al., 2017) uses concatenation after a feature transform. Column Networks (Pham et al., 2017) interpolate the neighborhood representation and the node’s previous representation, and Gated GNN (Li et al., 2016) uses the Gated Recurrent Unit (GRU) (Cho et al., 2014). Another wellknown variant of skip connections, residual connections, use the identity mapping to help signals propagate (He et al., 2016a;b).\nThese skip connections are input- but not output-unit specific: If we ”skip” a layer for h(l)v (do not aggregate) or use a certain COMBINE, all subsequent units using this representation will be using this skip implicitly. It is impossible that a certain higher-up representation h(l+j)u uses the skip and another one does not. As a result, skip connections cannot adaptively adjust the neighborhood sizes of the final-layer representations independently.\nNeighborhood Aggregation with Directional Biases. Some recent models, rather than treating the features of\nadjacent nodes equally, weigh “important” neighbors more. This paradigm can be viewed as neighborhood-aggregation with directional biases because a node will be influenced by some directions of expansion more than the others.\nGraph Attention Networks (GAT) (Veličković et al., 2018) and VAIN (Hoshen, 2017) learn to select the important neighbors via an attention mechanism. The max-pooling operation in GraphSAGE (Hamilton et al., 2017) implicitly selects the important nodes. This line of work is orthogonal to ours, because it modifies the direction of expansion whereas our model operates on the locality of expansion. Our model can be combined with these models to add representational power. In Section 6, we demonstrate that our framework works with not only simple neighborhood-aggregation models (GCN), but also with skip connections (GraphSAGE) and directional biases (GAT)."
  }, {
    "heading": "3. Influence Distribution and Random Walks",
    "text": "Next, we explore some important properties of the above aggregation schemes. Related to ideas of sensitivity analysis and influence functions in statistics (Koh & Liang, 2017) that measure the influence of a training point on parameters, we study the range of nodes whose features affect a given node’s representation. This range gives insight into how large a neighborhood a node is drawing information from.\nWe measure the sensitivity of node x to node y, or the influence of y on x, by measuring how much a change in the input feature of y affects the representation of x in the last layer. For any node x, the influence distribution captures the relative influences of all other nodes.\nDefinition 3.1 (Influence score and distribution). For a simple graph G = (V,E), let h(0)x be the input feature and h\n(k) x be the learned hidden feature of node x ∈ V at the k-th (last) layer of the model. The influence score I(x, y) of node x by any node y ∈ V is the sum of the absolute values\nof the entries of the Jacobian matrix [ ∂h(k)x ∂h (0) y ] . We define the influence distribution Ix of x ∈ V by normalizing the influence scores: Ix(y) = I(x, y)/ ∑ z I(x, z), or\nIx(y) = e T\n[ ∂h (k) x\n∂h (0) y\n] e /(∑\nz∈V eT\n[ ∂h (k) x\n∂h (0) z\n] e )\nwhere e is the all-ones vector.\nLater, we will see connections of influence distributions with random walks. For completeness, we also define random walk distributions.\nDefinition 3.2. Consider a random walk on G̃ starting at a node v0; if at the t-th step we are at a node vt, we move to any neighbor of vt (including vt) with equal probability.\nThe t-step random walk distribution Pt of v0 is\nPt (i) = Prob (vt = i) . (4)\nAnalogous definitions apply for random walks with nonuniform transition probabilities.\nAn important property of the random walk distribution is that it becomes more spread out as t increases and converges to the limit distribution if the graph is non-bipartite. The rate of convergence depends on the structure of the subgraph and can be bounded by the spectral gap (or the conductance) of the random walk’s transition matrix (Lovász, 1993)."
  }, {
    "heading": "3.1. Model Analysis",
    "text": "The influence distribution for different aggregation models and nodes can give insights into the information captured by the respective representations. The following results show that the influence distributions of common aggregation schemes are closely connected to random walk distributions. This observation hints at specific implications – strengths and weaknesses – that we will discuss.\nWith a randomization assumption of the ReLU activations similar to that in (Kawaguchi, 2016; Choromanska et al., 2015), we can draw connections between GCNs and random walks:\nTheorem 1. Given a k-layer GCN with averaging as in Equation (3), assume that all paths in the computation graph of the model are activated with the same probability of success ρ. Then the influence distribution Ix for any node\nx ∈ V is equivalent, in expectation, to the k-step random walk distribution on G̃ starting at node x.\nWe prove Theorem 1 in the appendix.\nIt is straightforward to modify the proof of Theorem 1 to show a nearly equivalent result for the version of GCN in Equation (2). The only difference is that each random walk path v0p, v 1 p, ..., v k p from node x (v 0 p) to y (v k p), in-\nstead of probability ρ ∏k l=1 1\nd̃eg(vlp) , now has probability\nρ Q ∏k−1 l=1 1\nd̃eg(vlp) · (d̃eg(x)d̃eg(y))−1/2, where Q is a nor-\nmalizing factor. Thus, the difference in probability is small, especially when the degree of x and y are close.\nSimilarly, we can show that neighborhood aggregation schemes with directional biases resemble biased random walk distributions. This follows by substituting the corresponding probabilities into the proof of Theorem 1.\nEmpirically, we observe that, despite somewhat simplifying assumptions, our theory is close to what happens in practice. We visualize the heat maps of the influence distributions for a node (labeled square) for trained GCNs, and compare with the random walk distributions starting at the same node. Figure 2 shows example results. Darker colors correspond to higher influence probabilities. To show the effect of skip connections, Figure 3 visualizes the analogous heat maps for one example—GCN with residual connections. Indeed, we observe that the influence distributions of networks with residual connections approximately correspond to lazy random walks: each step has a higher probability of staying at\nthe current node. Local information is retained with similar probabilities for all nodes in each iteration; this cannot adapt to diverse needs of specific upper-layer nodes. Further visualizations may be found in the appendix.\nFast Collapse on Expanders. To better understand the implication of Theorem 1 and the limitations of the corresponding neighborhood aggregation algorithms, we revisit the scenario of learning on a social network shown in Figure 1. Random walks starting inside an expander converge rapidly in O(log |V |) steps to an almost-uniform distribution (Hoory et al., 2006). After O(log |V |) iterations of neighborhood aggregation, by Theorem 1 the representation of every node is influenced almost equally by any other node in the expander. Thus, the node representations will be representative of the global graph and carry limited information about individual nodes. In contrast, random walks starting at the bounded tree-width (almost-tree) part converge slowly, i.e., the features retain more local information. Models that impose a fixed random walk distribution inherit these discrepancies in the speed of expansion and influence neighborhoods, which may not lead to the best representations for all nodes."
  }, {
    "heading": "4. Jumping Knowledge Networks",
    "text": "The above observations raise the question whether the fixed but structure-dependent influence radius size induced by\ncommon aggregation schemes really achieves the best representations for all nodes and tasks. Large radii may lead to too much averaging, while small radii may lead to instabilities or insufficient information aggregation. Hence, we propose two simple yet powerful architectural changes – jump connections and a subsequent selective but adaptive aggregation mechanism.\nFigure 4 illustrates the main idea: as in common neighborhood aggregation networks, each layer increases the size of the influence distribution by aggregating neighborhoods from the previous layer. At the last layer, for each node, we carefully select from all of those itermediate representations (which “jump” to the last layer), potentially combining a few. If this is done independently for each node, then the model can adapt the effective neighborhood size for each node as needed, resulting in exactly the desired adaptivity.\nOur model permits general layer-aggregation mechanisms. We explore three approaches; others are possible too. Let h (1) v , ..., h (k) v be the jumping representations of node v (from k layers) that are to be aggregated.\nConcatenation. A concatenation [ h (1) v , ..., h (k) v ] is the\nmost straightforward way to combine the layers, after which we may perform a linear transformation. If the transformation weights are shared across graph nodes, this approach is not node-adaptive. Instead, it optimizes the weights to combine the subgraph features in a way that works best for the dataset overall. One may expect concatenation to be suitable for small graphs and graphs with regular structure that require less adaptivity; also because weight-sharing helps reduce overfitting.\nMax-pooling. An element-wise max ( h (1) v , ..., h (k) v ) selects the most informative layer for each feature coordinate. For example, feature coordinates that represent more local properties can use the feature coordinates learned from the close neighbors and those representing global status would favor features from the higher-up layers. Max-pooling is adaptive and has the advantage that it does not introduce any additional parameters to learn.\nLSTM-attention. An attention mechanism identifies the most useful neighborhood ranges for each node v by computing an attention score s(l)v for each layer l (∑ l s (l) v = 1 ) , which represents the importance of the feature learned on the l-th layer for node v. The aggregated representation for node v is a weighted average of the layer features∑ l s (l) v · h(l)v . For LSTM attention, we input h(1)v , ..., h(k)v into a bi-directional LSTM (Hochreiter & Schmidhuber, 1997) and generate the forward-LSTM and backward-LSTM hidden features f (l)v and b (l) v for each layer l. A linear mapping of the concatenated features [f (l)v ||b(l)v ] yields the scalar importance score s(l)v . A Softmax layer applied to {s(l)v }kl=1\nyields the attention of node v on its neighborhood in different ranges. Finally we take the sum of [f (l)v ||b(l)v ] weighted by SoftMax({s(l)v }kl=1) to get the final layer representation. Another possible implementation combines LSTM with max-pooling. LSTM-attention is node adaptive because the attention scores are different for each node. We shall see that the this approach shines on large complex graphs, although it may overfit on small graphs (fewer training nodes) due to its relatively higher complexity."
  }, {
    "heading": "4.1. JK-Net Learns to Adapt",
    "text": "The key idea for the design of layer-aggregation functions is to determine the importance of a node’s subgraph features at different ranges after looking at the learned features on all layers, rather than to optimize and fix the same weights for all nodes. Under the same assumption on the ReLU activation distribution as in Theorem 1, we show below that layer-wise max-pooling implicitly learns the influence locality adaptively for different nodes. The proof for layerwise attention follows similarly.\nProposition 1. Assume that paths of the same length in the computation graph are activated with the same probability. The influence score I(x, y) for any x, y ∈ V under a k-layer JK-Net with layer-wise max-pooling is equivalent in expectation to a mixture of 0, .., k-step random walk distributions on G̃ at y starting at x, the coefficients of which depend on the values of the layer features h(l)x .\nWe prove Proposition 1 in the appendix. Contrasting this result with the influence distributions of other aggregation mechanisms, we see that JK-networks indeed differ in their node-wise adaptivity of neighborhood ranges.\nFigure 5 illustrates how a 6-layer JK-Net with max-pooling aggregation learns to adapt to different subgraph structures on a citation network. Within a tree-like structure, the influence stays in the “small community” the node belongs to. In contrast, 6-layer models whose influence distributions follow random walks, e.g. GCNs, would reach out too far into irrelevant parts of the graph, and models with few layers may not be able to cover the entire “community”, as illustrated in Figure 1, and Figures 7, 8 in the appendix. For\na node affiliated to a “hub”, which presumably plays the role of connecting different types of nodes, JK-Net learns to put most influence on the node itself and otherwise spreads out the influence. GCNs, however, would not capture the importance of the node’s own features in such a structure because the probability at an affiliate node is small after a few random walk steps. For hubs, JK-Net spreads out the influence across the neighboring nodes in a reasonable range, which makes sense because the nodes connected to the hubs are presumably as informative as the hubs’ own features. For comparison, Table 6 in the appendix includes more visualizations of how models with random walk priors behave."
  }, {
    "heading": "4.2. Intermediate Layer Aggregation and Structures",
    "text": "Looking at Figure 4, one may wonder whether the same inter-layer connections could be drawn between all layers. The resulting architecture is approximately a graph correspondent of DenseNets, which were introduced for computer vision problems (Huang et al., 2017), if the layer-wise concatenation aggregation is applied. This version, however, would require many more features to learn. Viewing the DenseNet setting (images) from a graph-theoretic perspective, images correspond to regular, in fact, near-planar graphs. Such graphs are far from being expanders, and do not pose the challenges of graphs with varying subgraph structures. Indeed, as we shall see, models with concatenation aggregation perform well on graphs with more regular structures such as images and well-structured communities. As a more general framework, JK-Net admits general layerwise aggregation models and enables better structure-aware representations on graphs with complex structures."
  }, {
    "heading": "5. Other Related Work",
    "text": "Spectral graph convolutional neural networks apply convolution on graphs by using the graph Laplacian eigenvectors as the Fourier atoms (Bruna et al., 2014; Shuman et al., 2013; Defferrard et al., 2016). A major drawback of the spectral methods, compared to spatial approaches like neighborhoodaggregation, is that the graph Laplacian needs to be known in advance. Hence, they cannot generalize to unseen graphs."
  }, {
    "heading": "6. Experiments",
    "text": "We evaluate JK-Nets on four benchmark datasets. (I) The task on citation networks (Citeseer, Cora) (Sen et al., 2008) is to classify academic papers into different subjects. The dataset contains bag-of-words features for each document (node) and citation links (edges) between documents. (II) On Reddit (Hamilton et al., 2017), the task is to predict the community to which different Reddit posts belong. Reddit is an online discussion forum where users comment in different topical communities. Two posts (nodes) are connected if some user commented on both posts. The dataset contains word vectors as node features. (III) For protein-protein interaction networks (PPI) (Hamilton et al., 2017), the task is to classify protein functions. PPI consists of 24 graphs, each corresponds to a human tissue. Each node has positional gene sets, motif gene sets and immunological signatures as features and gene ontology sets as labels. 20 graphs are used for training, 2 graphs are used for validation and the rest for testing. Statistics of the datasets are summarized in Table 1.\nSettings. In the transductive setting, we are only allowed to access a subset of nodes in one graph as training data, and validate/test on others. Our experiments on Citeseer, Cora and Reddit are transductive. In the inductive setting, we use a number of full graphs as training data and use other completely unseen graphs as validation/testing data. Our experiments on PPI are inductive.\nWe compare against three baselines: Graph Convolutional Networks (GCN) (Kipf & Welling, 2017), GraphSAGE (Hamilton et al., 2017) and Graph Attention Networks (GAT) (Veličković et al., 2018)."
  }, {
    "heading": "6.1. Citeseer & Cora",
    "text": "For experiments on Citeseer and Cora, we choose GCN as the base model since on our data split, it is outperforming GAT. We construct JK-Nets by choosing MaxPooling (JKMaxPool), Concatenation (JK-Concat), or LSTM-attention (JK-LSTM) as final aggregation layer. When taking the final aggregation, besides normal graph convolutional layers, we also take the first linear-transformed representation into account. The final prediction is done via a fully connected layer on top of the final aggregated representation. We split nodes in each graph into 60%, 20% and 20% for training, validation and testing. We vary the number of layers from 1\nto 6 for each model and choose the best performing model with respect to the validation set. Throughout the experiments, we use the Adam optimizer (Kingma & Ba, 2014) with learning rate 0.005. We fix the dropout rate to be 0.5, the dimension of hidden features to be within {16, 32}, and add an L2 regularization of 0.0005 on model parameters. The results are shown in Table 2.\nResults. We observe in Table 2 that JK-Nets outperform both GCN and GAT baselines in terms of prediction accuracy. Though JK-Nets perform well in general, there is no consistent winner and performance varies slightly across datasets.\nTaking a closer look at results on Cora, both GCN and GAT achieve their best accuracies with only 2 or 3 layers, suggesting that local information is a stronger signal for classification than global ones. However, the fact that JKNets achieve the best performance with 6 layers indicates that global together with local information will help boost performance. This is where models like JK-Nets can be particularly beneficial. LSTM-attention may not be suitable for such small graphs because of its relatively high complexity."
  }, {
    "heading": "6.2. Reddit",
    "text": "The Reddit data is too large to be handled well by current implementations of GCN or GAT. Hence, we use the more scalable GraphSAGE as the base model for JK-Net. It has skip connections and different modes of node aggregation. We experiment with Mean and MaxPool node aggregators, which take mean and max-pooling of a linear transformation of representations of the sampled neighbors. Combining each of GraphSAGE modes with MaxPooling, Concatenation or LSTM-attention as the last aggregation layer gives 6 JK-Net variants. We follow exactly the same setting of GraphSAGE as in the original paper (Hamilton et al., 2017), where the model consists of 2 hidden layers, each with 128 hidden units and is trained with Adam with learning rate of 0.01 and no weight decay. Results are shown in Table 3.\nResults. With MaxPool as node aggregator and Concat as layer aggregator, JK-Net achieves the best Micro-F1 score\namong GarphSAGE and JK-Net variants. Note that the original GraphSAGE already performs fairly well with a Micro-F1 of 0.95. JK-Net reduces the error by 30%. The communities in the Reddit dataset were explicitly chosen from the well-behaved middle-sized communities to avoid the noisy cores and tree-like small communities (Hamilton et al., 2017). As a result, this graph is more regular than the original Reddit data, and hence not exhibit the problems of varying subgraph structures. In such a case, the added flexibility of the node-specific neighborhood choices may not be as relevant, and the stabilizing properties of concatenation instead come into play."
  }, {
    "heading": "6.3. PPI",
    "text": "We demonstrate the power of adaptive JK-Nets, e.g., JKLSTM, with experiments on the PPI data, where the subgraphs have more diverse and complex structures than those in the Reddit community detection dataset. We use both GraphSAGE and GAT as base models for JK-Net. The implementation of GraphSAGE and GAT are quite different: GraphSAGE is sample-based, where neighbors of a node are sampled to be a fixed number, while GAT considers all neighbors. Such differences cause large gaps in terms of both scalability and performances. Given that GraphSAGE scales to much larger graphs, it appears particularly valuable to evaluate how much JK-Net can improve upon GraphSAGE.\nFor GraphSAGE we follow the setup as in the Reddit experiments, except that we use 3 layers when possible, and compare the performance after 10 and 30 epochs of training. The results are shown in Table 4. For GAT and its JK-Net variants we stack two hidden layers with 4 attention heads computing 256 features (for a total of 1024 features), and a final prediction layer with 6 attention heads computing 121 features each. They are further averaged and input into sigmoid activations. We employ skip connections across intermediate attentional layers. These models are trained with Batch-size 2 and Adam optimizer with learning rate of 0.005. The results are shown in Table 5.\nResults. JK-Nets with the LSTM-attention aggregators outperform the non-adaptive models GraphSAGE, GAT and JK-Nets with concatenation aggregators. In particular, JKLSTM outperforms GraphSAGE by 0.128 in terms of micro-\nF1 score after 30 epochs of training. Structure-aware node adaptive models are especially beneficial on such complex graphs with diverse structures."
  }, {
    "heading": "7. Conclusion",
    "text": "Motivated by observations that reveal great differences in neighborhood information ranges for graph node embeddings, we propose a new aggregation scheme for node representation learning that can adapt neigborhood ranges to nodes individually. This JK-network can improve representations in particular for graphs that have subgraphs of diverse local structure, and may hence not be well captured by fixed numbers of neighborhood aggregations. Interesting directions for future work include exploring other layer aggregators and studying the effect of the combination of various layer-wise and node-wise aggregators on different types of graph structures."
  }, {
    "heading": "Acknowledgements",
    "text": "This research was supported by NSF CAREER award 1553284, and JST ERATO Kawarabayashi Large Graph Project, Grant Number JPMJER1201, Japan."
  }],
  "year": 2018,
  "references": [{
    "title": "On the properties of neural machine translation: Encoderdecoder approaches",
    "authors": ["K. Cho", "B. Van Merriënboer", "D. Bahdanau", "Y. Bengio"],
    "venue": "In Workshop on Syntax, Semantics and Structure in Statistical Translation,",
    "year": 2014
  }, {
    "title": "Open problem: The landscape of the loss surfaces of multilayer networks",
    "authors": ["A. Choromanska", "Y. LeCun", "G.B. Arous"],
    "venue": "In Conference on Learning Theory (COLT),",
    "year": 2015
  }, {
    "title": "Convolutional neural networks on graphs with fast localized spectral filtering",
    "authors": ["M. Defferrard", "X. Bresson", "P. Vandergheynst"],
    "venue": "In Advances in Neural Information Processing Systems (NIPS),",
    "year": 2016
  }, {
    "title": "Neural message passing for quantum chemistry",
    "authors": ["J. Gilmer", "S.S. Schoenholz", "P.F. Riley", "O. Vinyals", "G.E. Dahl"],
    "venue": "In International Conference on Machine Learning (ICML),",
    "year": 2017
  }, {
    "title": "node2vec: Scalable feature learning for networks",
    "authors": ["A. Grover", "J. Leskovec"],
    "venue": "In ACM SIGKDD Conference on Knowledge Discovery and Data Mining (KDD),",
    "year": 2016
  }, {
    "title": "Inductive representation learning on large graphs",
    "authors": ["W.L. Hamilton", "R. Ying", "J. Leskovec"],
    "venue": "In Advances in Neural Information Processing Systems (NIPS),",
    "year": 2017
  }, {
    "title": "Wavelets on graphs via spectral graph theory",
    "authors": ["D.K. Hammond", "P. Vandergheynst", "R. Gribonval"],
    "venue": "Applied and Computational Harmonic Analysis,",
    "year": 2011
  }, {
    "title": "Deep residual learning for image recognition",
    "authors": ["K. He", "X. Zhang", "S. Ren", "J. Sun"],
    "venue": "In Proceedings of the IEEE conference on computer vision and pattern recognition,",
    "year": 2016
  }, {
    "title": "Identity mappings in deep residual networks",
    "authors": ["K. He", "X. Zhang", "S. Ren", "J. Sun"],
    "venue": "In European Conference on Computer Vision,",
    "year": 2016
  }, {
    "title": "Long short-term memory",
    "authors": ["S. Hochreiter", "J. Schmidhuber"],
    "venue": "Neural computation,",
    "year": 1997
  }, {
    "title": "Expander graphs and their applications",
    "authors": ["S. Hoory", "N. Linial", "A. Wigderson"],
    "venue": "Bulletin of the American Mathematical Society,",
    "year": 2006
  }, {
    "title": "Attentional multi-agent predictive modeling",
    "authors": ["Hoshen", "Y. Vain"],
    "venue": "In Advances in Neural Information Processing Systems (NIPS),",
    "year": 2017
  }, {
    "title": "Densely connected convolutional networks",
    "authors": ["G. Huang", "Z. Liu", "K.Q. Weinberger", "L. van der Maaten"],
    "venue": "In IEEE Conference on Computer Vision and Pattern Recognition (CVPR),",
    "year": 2017
  }, {
    "title": "Deep learning without poor local minima",
    "authors": ["K. Kawaguchi"],
    "venue": "In Advances in Neural Information Processing Systems (NIPS),",
    "year": 2016
  }, {
    "title": "Molecular graph convolutions: moving beyond fingerprints",
    "authors": ["S. Kearnes", "K. McCloskey", "M. Berndl", "V. Pande", "P. Riley"],
    "venue": "Journal of computer-aided molecular design,",
    "year": 2016
  }, {
    "title": "Adam: A method for stochastic optimization",
    "authors": ["D.P. Kingma", "J. Ba"],
    "venue": "arXiv preprint arXiv:1412.6980,",
    "year": 2014
  }, {
    "title": "Semi-supervised classification with graph convolutional networks",
    "authors": ["T.N. Kipf", "M. Welling"],
    "venue": "International Conference on Learning Representations (ICLR),",
    "year": 2017
  }, {
    "title": "Understanding black-box predictions via influence functions",
    "authors": ["P.W. Koh", "P. Liang"],
    "venue": "In International Conference on Machine Learning (ICML),",
    "year": 2017
  }, {
    "title": "Learning to discover social circles in ego networks",
    "authors": ["J. Leskovec", "J.J. Mcauley"],
    "venue": "In Advances in Neural Information Processing Systems (NIPS),",
    "year": 2012
  }, {
    "title": "Community structure in large networks: Natural cluster sizes and the absence of large well-defined clusters",
    "authors": ["J. Leskovec", "K.J. Lang", "A. Dasgupta", "M.W. Mahoney"],
    "venue": "Internet Mathematics,",
    "year": 2009
  }, {
    "title": "Gated graph sequence neural networks",
    "authors": ["Y. Li", "D. Tarlow", "M. Brockschmidt", "R. Zemel"],
    "venue": "International Conference on Learning Representations (ICLR),",
    "year": 2016
  }, {
    "title": "Random walks on graphs",
    "authors": ["L. Lovász"],
    "venue": "Combinatorics, Paul erdos is eighty,",
    "year": 1993
  }, {
    "title": "Computing personalized pagerank quickly by exploiting graph structures",
    "authors": ["T. Maehara", "T. Akiba", "Y. Iwata", "Kawarabayashi", "K.-i"],
    "venue": "Proceedings of the VLDB Endowment,",
    "year": 2014
  }, {
    "title": "Geometric deep learning on graphs and manifolds using mixture model cnns",
    "authors": ["F. Monti", "D. Boscaini", "J. Masci", "E. Rodolà", "J. Svoboda", "M.M. Bronstein"],
    "venue": "In IEEE Conference on Computer Vision and Pattern Recognition (CVPR),",
    "year": 2017
  }, {
    "title": "Deepwalk: Online learning of social representations",
    "authors": ["B. Perozzi", "R. Al-Rfou", "S. Skiena"],
    "venue": "In ACM SIGKDD Conference on Knowledge Discovery and Data Mining (KDD),",
    "year": 2014
  }, {
    "title": "Column networks for collective classification",
    "authors": ["T. Pham", "T. Tran", "D.Q. Phung", "S. Venkatesh"],
    "venue": "In AAAI Conference on Artificial Intelligence,",
    "year": 2017
  }, {
    "title": "Collective classification in network data",
    "authors": ["P. Sen", "G. Namata", "M. Bilgic", "L. Getoor", "B. Galligher", "T. Eliassi-Rad"],
    "venue": "AI magazine,",
    "year": 2008
  }, {
    "title": "Weisfeiler-lehman graph kernels",
    "authors": ["N. Shervashidze", "P. Schweitzer", "Leeuwen", "E.J. v", "K. Mehlhorn", "K.M. Borgwardt"],
    "venue": "Journal of Machine Learning Research,",
    "year": 2011
  }, {
    "title": "The emerging field of signal processing on graphs: Extending high-dimensional data analysis to networks and other irregular domains",
    "authors": ["D.I. Shuman", "S.K. Narang", "P. Frossard", "A. Ortega", "P. Vandergheynst"],
    "venue": "IEEE Signal Processing Magazine,",
    "year": 2013
  }, {
    "title": "Line: Large-scale information network embedding",
    "authors": ["J. Tang", "M. Qu", "M. Wang", "M. Zhang", "J. Yan", "Q. Mei"],
    "venue": "In Proceedings of the International World Wide Web Conference (WWW),",
    "year": 2015
  }, {
    "title": "What do networks have to do with climate",
    "authors": ["A.A. Tsonis", "K.L. Swanson", "P.J. Roebber"],
    "venue": "Bulletin of the American Meteorological Society,",
    "year": 2006
  }, {
    "title": "A reduction of a graph to a canonical form and an algebra arising during this reduction",
    "authors": ["B. Weisfeiler", "A. Lehman"],
    "venue": "Nauchno-Technicheskaya Informatsia,",
    "year": 1968
  }],
  "id": "SP:0c8652d3b86b3f402e71f8a11b2ea53fe9321053",
  "authors": [{
    "name": "Keyulu Xu",
    "affiliations": []
  }, {
    "name": "Chengtao Li",
    "affiliations": []
  }, {
    "name": "Yonglong Tian",
    "affiliations": []
  }, {
    "name": "Tomohiro Sonobe",
    "affiliations": []
  }, {
    "name": "Ken-ichi Kawarabayashi",
    "affiliations": []
  }, {
    "name": "Stefanie Jegelka",
    "affiliations": []
  }],
  "abstractText": "Recent deep learning approaches for representation learning on graphs follow a neighborhood aggregation procedure. We analyze some important properties of these models, and propose a strategy to overcome those. In particular, the range of “neighboring” nodes that a node’s representation draws from strongly depends on the graph structure, analogous to the spread of a random walk. To adapt to local neighborhood properties and tasks, we explore an architecture – jumping knowledge (JK) networks – that flexibly leverages, for each node, different neighborhood ranges to enable better structure-aware representation. In a number of experiments on social, bioinformatics and citation networks, we demonstrate that our model achieves state-of-the-art performance. Furthermore, combining the JK framework with models like Graph Convolutional Networks, GraphSAGE and Graph Attention Networks consistently improves those models’ performance.",
  "title": "Representation Learning on Graphs with Jumping Knowledge Networks "
}