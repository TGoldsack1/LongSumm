{
  "sections": [{
    "heading": "1. Introduction",
    "text": "Generative models for graphs have a longstanding history, with applications including data augmentation, anomaly detection and recommendation (Chakrabarti & Faloutsos, 2006). Explicit probabilistic models such as Barabási-Albert or stochastic blockmodels are the de-facto standard in this field (Goldenberg et al., 2010). However, it has also been shown on multiple occasions that our intuitions about structure and behavior of graphs may be misleading. For instance, heavy-tailed degree distributions in real graphs were in strong disagreement with the models existing at the time of their discovery (Barabási & Albert, 1999). More recent works like Dong et al. (2017) and Broido & Clauset (2018) keep bringing up other surprising characteristics of realworld networks that question the validity of the established models. This leads us to the question: “How do we define a model that captures all the essential (potentially still unknown) properties of real graphs?”\n*Equal contribution 1Technical University of Munich, Germany. Correspondence to: Daniel Zügner <zuegnerd@in.tum.de>.\nProceedings of the 35 th International Conference on Machine Learning, Stockholm, Sweden, PMLR 80, 2018. Copyright 2018 by the author(s).\nAn increasingly popular way to address this issue in other fields is by switching from explicit (prescribed) models to implicit ones. This transition is especially notable in computer vision, where generative adversarial networks (GANs) (Goodfellow et al., 2014) significantly advanced the state of the art over the classic prescribed approaches like mixtures of Gaussians (Blanken et al., 2007). GANs achieve unparalleled results in scenarios such as image and 3D objects generation (e.g., Karras et al., 2017; Berthelot et al., 2017; Wu et al., 2016). However, despite their massive success when dealing with real-valued data, adapting GANs to handle discrete objects like graphs or text remains an open research problem (Goodfellow, 2016). In fact, discreteness is only one of the obstacles when applying GANs to network data. Large repositories of graphs that all come from the same distribution are not available. This means that in a typical setting one has to learn from a single graph. Additionally, any model operating on a graph necessarily has to be permutation invariant, as graphs are isomorphic under node reordering.\nIn this work we introduce NetGAN – the first implicit generative model for graphs and networks that tackles all of the above challenges. We formulate the problem of learning the graph topology as learning the distribution of biased random walks over the graph. Like in the typical GAN setting, the generator G – in our case defined as a stochastic neural network with discrete output samples – learns to generate random walks that are plausible in the real graph, while the discriminator D then has to distinguish them from the true ones that are sampled from the original graph.\nThe main requirement for a graph generative model is the ability to generate realistic graphs. In the experimental section we compare NetGAN to other established prescribed models on this task. We observe that our proposed method consistently reproduces most known patterns inherent to real-world networks without explicitly specifying any of them in the model definition (e.g., degree distribution, as seen in Fig. 1). However, a model that simply replicates the original graph would also trivially fulfill this requirement, which clearly isn’t our goal. In order to prove that this is not the case we examine the generalization properties of NetGAN by evaluating its link prediction performance. As our experiments show, our model exhibits competitive performance in this task and even achieves state-of-the-art\nresults on some datasets. This result is especially impressive, since NetGAN is not trained explicitly for performing link prediction. To summarize, our main contributions are:\n• We introduce NetGAN1 – the first of its kind GAN architecture that generates graphs via random walks. Our model tackles the associated challenges of staying permutation invariant, learning from a single graph and generating discrete output.\n• We show that our method preserves important topological properties, without having to explicitly specifying them in the model definition. Moreover, we demonstrate how latent space interpolation leads to producing graphs with smoothly changing characteristics.\n• We highlight the generalization properties of NetGAN by its link prediction performance that is competitive with the state of the art on real-word datasets, despite the model not being trained explicitly for this task."
  }, {
    "heading": "2. Related Work",
    "text": "So far, no GAN architectures applicable to real-world networks have been proposed. Liu et al. (2017) propose a GAN architecture for learning topological features of subgraphs. Tavakoli et al. (2017) apply GANs to graph data by trying to directly generate adjacency matrices. Because their model produces the entire adjacency matrix – including the zero entries – it requires computations and memory quadratic in the number of nodes. Such quadratic complexity is infeasible in practice, allowing to process only small graphs, with reported runtime of over 60 hours for a graph with only 154 nodes. In contrast, NetGAN operates on random walks – it considers only the non-zero entries of the adjacency matrix efficiently exploiting the sparsity of real-world graphs – and is readily applicable to graphs with thousands of nodes.\n1 Code available at: https://www.kdd.in.tum.de/netgan\nDeep learning methods for graph data have mostly been studied in the context of node embeddings (Perozzi et al., 2014; Grover & Leskovec, 2016; Kipf & Welling, 2016). The main idea behind these approaches is that of modeling the probabilities of each individual edge’s existence, p(Auv), as some function of the respective node embeddings, f(hu,hv), where f is represented by a neural network. The recently proposed GraphGAN (Wang et al., 2017) is another instance of such prescribed edge-level probabilistic models, where f is optimized using the GAN objective instead of the traditional cross-entropy. Deep embedding based methods achieve state-of-the-art scores in tasks like link prediction and node classification. Nevertheless, as we show in Sec. 3.2, using such approaches for generating entire graphs produces samples that don’t preserve any of the patterns inherent to real-world networks.\nPrescribed generative models for graphs have a long history and are well-studied. For a survey we refer the reader to Chakrabarti & Faloutsos (2006) and Goldenberg et al. (2010). Typically, prescribed generative approaches are designed to capture and reproduce some predefined subset of graph properties (e.g., degree distribution, community structure, clustering coefficient). Notable examples include the configuration model (Bender & Canfield, 1978; Molloy & Reed, 1995), variants of the degree-corrected stochastic blockmodel (Karrer & Newman, 2011; Bojchevski & Günnemann), Exponential Random Graph Models (Holland & Leinhardt, 1981), Multiplicative Attribute Graph model (Kim & Leskovec, 2011), and the block two-level ErdősRéniy random graph model (Seshadhri et al., 2012). In Sec. 4 we compare with some of these prescribed models on the tasks of graph generation and link prediction.\nDue to the challenging nature of the problem, only few approaches able to generate discrete data using GANs exist. Most approaches focus on generating discrete sequences such as text, with some of them using reinforcement learn-\ning techniques to enable backpropagation through sampling discrete random variables (Yu et al., 2017; Kusner & Hernández-Lobato, 2016; Li et al., 2017; Liang et al., 2017). Other approaches modify the GAN objective to tackle the same challenge (Che et al., 2017; Hjelm et al., 2017). Focusing on non-sequential discrete data, Choi et al. (2017) generate high-dimensional discrete features (e.g. binary indicators, counts) in patient records. None of these methods have considered graph structured data."
  }, {
    "heading": "3. Model",
    "text": "In this section we introduce NetGAN - a Generative Adversarial Network model for graph / network data. Its core idea lies in capturing the topology of a graph by learning a distribution over the random walks. Given an input graph of N nodes, defined by a binary adjacency matrix A ∈ {0, 1}N×N , we first sample a set of random walks of length T from A. This collection of random walks serves as a training set for our model. We use the biased secondorder random walk sampling strategy described in Grover & Leskovec (2016), as it better captures both local and global graph structure. An important advantage of using random walks is their invariance under node reordering. Additionally, random walks only include the nonzero entries of A, thus efficiently exploiting the sparsity of real-world graphs.\nLike any typical GAN architecture, NetGAN consists of two main components - a generator G and a discriminator D. The goal of the generator is to generate synthetic random walks that are plausible in the input graph. At the same time, the discriminator learns to distinguish the synthetic random walks from the real ones that come from the training set. BothG andD are trained end-to-end using backpropagation. At any point of the training process it is possible to use G to generate a set of random walks, which can then be used to produce an adjacency matrix of a new generated graph. In the rest of this section we describe each stage of this process and our design choices in more detail. An overview of our model’s complete architecture can be seen in Fig. 2."
  }, {
    "heading": "3.1. Architecture",
    "text": "Generator. The generator G defines an implicit probabilistic model for generating random walks: (v1, ...,vT ) ∼ G. We model G as a sequential process based on a neural network fθ parametrized by θ. At each step t, fθ produces two values: the probability distribution over the next node to be sampled, parametrized by the logits pt, and the current memory state of the model, denoted as mt. The next node vt, represented as a one-hot vector, is sampled from a categorical distribution vt ∼ Cat(σ(pt)), where σ(·) denotes the softmax function, and together with mt is passed into fθ at the next step t+ 1. Similarly to the classic GAN setting, a latent code z drawn from a multivariate standard normal\ndistribution is passed through a parametric function gθ′ to initialize m0. The generative process of G is summarized in the box below.\nz ∼ N (0, Id) m0 = gθ′(z)\nv1 ∼ Cat(σ(p1)), (p1,m1) = fθ(m0,0) v2 ∼ Cat(σ(p2)), (p2,m2) = fθ(m1,v1)\n... ...\nvT ∼ Cat(σ(pT )), (pT ,mT ) = fθ(mT−1,vT−1)\nIn this work we focus our attention on the Long short-term memory (LSTM) architecture for fθ, introduced by Hochreiter & Schmidhuber (1997). The memory state mt of an LSTM is represented by the cell state Ct, and the hidden state ht. The latent code z goes through two separate streams, each consisting of two fully connected layers with tanh activation, and then used to initialize (C0,h0).\nA natural question might arise: ”Why use a model with memory and temporal dependencies, when the random walks are Markov processes?” (2nd order Markov for biased RWs). Or put differently, what’s the benefit of using random walks of length greater than 2? In theory, a model with large enough capacity could simply memorize all existing edges in the graph and recreate them. However, for large graphs achieving this in practice is not feasible. More importantly, pure memorization is not the goal of NetGAN, rather we want to have generalization and to generate graphs with similar properties, not exact replicas. Having longer random walks combined with memory helps the model to learn the topology and general patterns in the data (e.g., community structure). Our experiments in Sec. 4.2 confirm this, showing that longer random walks are indeed beneficial.\nAfter each time step, to generate the next node in the random walk, the network fθ should output the logits pt of lengthN . However, operating in such high dimensional space leads to an unnecessary computational overhead. To tackle this issue, the LSTM outputs ot ∈ RH instead, with H N , which is then up-projected to RN using the matrix W up ∈ RH×N . This enables us to efficiently handle large-scale graphs.\nSampling the next node in the random walk vt presents another challenge. Since sampling from a categorical distribution is a non-differentiable operation it blocks the flow of gradients and precludes backpropagation. We solve this problem by using the Straight-Through Gumbel estimator by Jang et al. (2016). More specifically, we perform the following transformation: First, we let v∗t = σ ((pt + g)/τ)), where τ is a temperature parameter, and gi’s are i.i.d. samples from a Gumbel distribution with zero mean and unit scale. Then, the next sample is\nchosen as vt = onehot(arg maxv∗t ). While the one-hot sample vt is passed as input to the next time step, during the backward pass the gradients will flow through the differentiable v∗t . The choice of τ allows to trade-off between better flow of gradients (large τ , more uniform v∗t ) and more exact calculations (small τ , v∗t ≈ vt).\nNow that a new node vt is sampled, it needs to be projected back to a lower-dimensional representation before feeding into the LSTM. This is done by means of down-projection matrix W down ∈ RN×H .\nDiscriminator. The discriminator D is based on the standard LSTM architecture. At every time step t, a one-hot vector vt, denoting the node at the current position, is fed as input. After processing the entire sequence of T nodes, the discriminator outputs a single score that represents the probability of the random walk being real."
  }, {
    "heading": "3.2. Training",
    "text": "Wasserstein GAN. We train our model based on the Wasserstein GAN (WGAN) framework (Arjovsky et al., 2017), as it prevents mode collapse and leads to more stable training overall. To enforce the Lipschitz constraint of the discriminator, we use the gradient penalty as in Gulrajani et al. (2017). The model parameters {θ, θ′} are trained using stochastic gradient descent with Adam (Kingma & Ba, 2014). Weights are regularized with an L2 penalty.\nEarly stopping. Because we are interested in generalizing the input graph, the “trivial” solution where the generator has memorized all existing edges is of no interest to us. This means that we need to control how closely the generated graphs resemble the original one. To achieve this, we propose two possible early stopping strategies, either of which can be used depending on the task at hand. The\nfirst strategy, named VAL-CRITERION is concerned with the generalization properties of NetGAN. During training, we keep a sliding window of the random walks generated in the last 1,000 iterations and use them to construct a matrix of transition counts. This matrix is then used to evaluate the link prediction performance on a validation set (i.e. ROC and AP scores, for more details see Sec. 4.2). We stop with training when the validation performance stops improving.\nThe second strategy, named EO-CRITERION makes NetGAN very flexible and gives the user control over the graph generation. We stop training when we achieve a user specified edge overlap between the generated graphs (see next section) and the original one at a given iteration. Based on her end task the user can choose to generate graphs with either small or large edge overlap with the original, while maintaining structural similarity. This will lead to generated graphs that either generalize better or are closer replicas respectively, yet still capture the properties of the original."
  }, {
    "heading": "3.3. Assembling the Adjacency Matrix",
    "text": "After finishing the training, we use the generator G to construct a score matrix S of transition counts, i.e. we count how often an edge appears in the set of generated random walks (typically, using a much larger number of random walks than for early stopping, e.g., 500K). While the raw counts matrix S is sufficient for link prediction purposes, we need to convert it to a binary adjacency matrix Â if we wish to reason about the synthetic graph. First, S is symmetrized by setting sij = sji = max{sij , sji}. Because we cannot explicitly control the starting node of the random walks generated by G, some high-degree nodes will likely be overrepresented. Thus, a simple binarization strategy like thresholding or choosing top-k entries might lead to leaving out the low-degree nodes and producing singletons.\nTo address this issue, we use the following approach: (i) We ensure that every node i has at least one edge by sampling a neighbor j with probability pij =\nsij∑ v siv\n. If an edge was already sampled before, we repeat the procedure; (ii) We continue sampling edges without replacement using for each edge (i, j) the probability pij =\nsij∑ u,v suv\n, until we reach the desired amount of edges (e.g., as many edges as in the original graph). To obtain an undirected graph for every edge (i, j) we also include (j, i). Note that this procedure is not guaranteed to produce a fully connected graph."
  }, {
    "heading": "4. Experiments",
    "text": "In this section we evaluate the quality of the graphs generated by NetGAN by computing various graph statistics. We quantify the generalization power of the proposed model by evaluating its link prediction performance. Furthermore, we demonstrate how we can generate graphs with smoothly changing properties via latent space interpolation. Additional experiments are provided in the supp. mat.\nDatasets. For the experiments we use five well-known citation datasets and the Political Blogs dataset. For the large CORA dataset and its commonly used subset of machine learning papers denoted with CORA-ML we use the same preprocessing as in Bojchevski & Günnemann (2018). For all the experiments we treat the graphs as undirected and only consider the largest connected component (LCC). Information about the datasets is listed in Table 2."
  }, {
    "heading": "4.1. Graph Generation",
    "text": "Setup. In this task, we fit NetGAN to the CORA-ML and CITESEER citation networks in order to evaluate quality of the generated graphs. We compare to the following baselines: configuration model (Molloy & Reed, 1995), degree-corrected stochastic blockmodel (DC-SBM) (Karrer & Newman, 2011), exponential random graph model (ERGM) (Holland & Leinhardt, 1981) and the block twolevel Erdős-Réniy random graph model (BTER) (Seshadhri et al., 2012). Additionally, we use the variational graph autoencoder (VGAE) (Kipf & Welling, 2016) as a representative of network embedding approaches. We randomly hide 15% of the edges (which are used for the stopping criterion; see Sec. 3.2) and fit all the models on the remaining graph. We sample 5 graphs from each of the trained models and report their average statistics in Table 1. Definitions of the statistics, additional metrics, standard deviations and details about the baselines are given in the supplementary material.\nEvaluation. The general trend that becomes apparent from the results in Table 1 (and Table 2 in supplementary material) is that prescribed models excel at recovering the statistics that they directly model (e.g., degree sequence for DC-SBM). At the same time, these models struggle when dealing with graph properties that they don’t account for (e.g., assortativity for BTER). On the other hand, NetGAN is able to capture all the graph properties well, although none of them are explicitly specified in its model definition. We also see that VGAE is not able to produce realistic graphs. This is expected, since the main purpose of VGAE is learning node embeddings, and not generating entire graphs.\nThe final column shows the average rank of each method for all statistics, with NetGAN performing the best. ERGM seems to be performing surprisingly well, however it suffers from severe overfitting – using the same fitted ERGM for the link prediction task we get both AUC and AP scores close to 0.5 (worst possible value). In contrast, NetGAN does a good job both at preserving properties in generated graphs, as well as generalizing, as we see in Sec. 4.2.\nIs the good performance of NetGAN in this experiment only due to the overlapping edges (existing in the input graph)? To rule out this possibility we perform the following experiment: We take the graph generated by NetGAN, fix the overlapping edges and rewire the rest according to the configuration model. The properties of the resulting graph (row #3 in Table 1) deviate strongly from the input graph. This confirms that NetGAN does not simply memorize some edges and generates the rest at random, but rather captures the underlying structure of the network.\nIn line with our intuition, we can see that higher EO leads to generated graphs with statistics closer to the original. Figs. 3b and 3c show how the graph statistics evolve during the training process. Fig. 3c shows that the edge overlap smoothly increasing with the number of epochs. We provide plots for other statistics and for CITESEER in the supp. mat."
  }, {
    "heading": "4.2. Link Prediction",
    "text": "Setup. Link prediction is a common graph mining task where the goal is to predict the existence of unobserved links in a given graph. We use it to evaluate the generalization properties of NetGAN. We hold out 10% of edges from the graph for validation and 5% as the test set, along with the same amount of randomly selected non-edges, while ensuring that the training network remains connected. We measure the performance with two commonly used metrics: area under the ROC curve (AUC) and average precision (AP). To evaluate NetGAN’s performance, we sample a given number of random walks (500K/100M) from the trained generator and we use the observed transition counts between any two nodes as a measure of how likely there is an edge between them. We compare with DC-SBM, node2vec and VGAE, as well as Adamic/Adar(Adamic & Adar, 2003).\nEvaluation. The results are listed in Table 3. There is no overall dominant method, with different methods achieving\nbest results on different datasets. NetGAN shows competitive performance for all datasets, even achieving state-of-theart results for some of them (CITESEER and POLBLOGS), despite not being explicitly trained for this task.\nInterestingly, the NetGAN performance increases when increasing the number of random walks sampled from the generator. This is especially true for the larger networks (CORA, DBLP, PUBMED), since given their size we need more random walks to cover the entire graph. This suggests that for an additional computational cost one can get significant gains in link prediction performance. Note, that while 100M may seem like a large number, the sampling procedure can be trivially parallelized.\nSensitivity analysis. Although NetGAN has many hyperparameters – typical for a GAN model – in practice most of them are not critical for performance, as long as they are within a reasonable range (e.g. H ≥ 30).\nOne important exception is the the random walk length T . To choose the optimal value, we evaluate the change in link prediction performance as we vary T on CORAML. We train multiple models with different random walk\nlengths, and evaluate the scores ensuring each one observes equal number of transitions. Results averaged over 5 runs are given in Fig. 6. We empirically confirm that the model benefits from using longer random walks as opposed to just edges (i.e. T=2). The performance gain for T = 20 over T = 16 is marginal and does not outweigh the additional computational cost, thus we set T = 16 for all experiments."
  }, {
    "heading": "4.3. Latent Variable Interpolation",
    "text": "Setup. Latent space interpolation is a good way to gain insight into what kind of structure the generator was able to capture. To be able to visualize the properties of the generated graphs we train our model using a 2-dimensional noise vector z drawn as before from a bivariate standard normal distribution. This corresponds to a 2-dimensional latent space Ω = R2. Then, instead of sampling z from the entire latent space Ω, we now sample from subregions of Ω and visualize the results. Specifically, we divide Ω into 20× 20 subregions (bins) of equal probability mass using the standard normal cumulative distribution function Φ. For each bin we generate 62.5K random walks. We evaluate properties of both the generated random walks themselves, as well as properties of the resulting graphs obtained by sampling a binary adjacency matrix for each bin.\nEvaluation. In Fig. 4a and 4b we see properties of the generated random walks; in Fig. 4c and 4d, we visualize properties of graphs sampled from the random walks in the respective bins. In all four heatmaps, we see distinct patterns, e.g. higher average degree of starting nodes for the bottom right region of Fig. 4a, or higher degree distribution inequality in the top-right area of Fig. 4c. While Fig. 4c and 4d show that certain regions of z correspond to generated graphs with very different degree distributions, recall that sampling from the entire latent space (Ω) yields graphs with degree distribution similar to the original graph (see Fig. 1c). The model was trained on CORA-ML. More heatmaps for other metrics (16 in total) and visualizations for CITESEER can be found in the supplementary material.\nThis experiment clearly demonstrates that by interpolating in the latent space we can obtain graphs with smoothly changing properties. The smooth transitions in the heatmaps provide evidence that our model learns to map specific parts of the latent space to specific properties of the graph.\nWe can also see this mapping from latent space to the generated graph properties in the community distribution histograms on a 10 × 10 grid in Fig. 5. Marked by (*) and (Ω) we see the community distributions for the input graph and the graph obtained by sampling on the complete latent\nspace respectively. In Fig. 5b and 5c, we see the evolution of selected community shares when following a trajectory from top to bottom, and left to right, respectively. The community histograms resulting from sampling random walks from opposing regions of the latent space are very different; again the transitions between these histograms are smooth, as can be seen in the trajectories in Fig. 5b and 5c."
  }, {
    "heading": "5. Discussion and Future Work",
    "text": "When evaluating different graph generative models in Sec. 3.2, we observed a major limitation of explicit models. While the prescribed approaches excel at recovering the properties directly included in their definition, they perform significantly worse with respect to the rest. This clearly indicates the need for implicit graph generators such as NetGAN. Indeed, we notice that our model is able to consistently capture all the important graph characteristics (see Table 1). Moreover, NetGAN generalizes beyond the input graph, as can be seen by its strong link prediction performance in Sec. 4.2. Still, being the first model of its kind, NetGAN possesses certain limitations, and a number of related questions could be addressed in follow-up works:\nScalability. We have observed in Sec. 4.2 that it takes a large number of generated random walks to get representative transition counts for large graphs. While sampling random walks from NetGAN is trivially parallelizable, a possible extension of our model is to use a conditional generator, i.e. the generator can be provided a desired starting node, thus ensuring a more even coverage. On the other hand, the sampling procedure itself can be sped up by incorporating a hierarchical softmax output layer - a method commonly used in natural language processing.\nEvaluation. It is nearly impossible to judge whether a graph is realistic by visually inspecting it (unlike images, for example). In this work we already quantitatively evaluate the performance of NetGAN on a large number of standard graph statistics. However, developing new measures applicable to (implicit) graph generative models will deepen our understanding of their behavior, and is an important direction for future work.\nExperimental scope. In the current work we focus on the setting of a single large graph. Adaptation to other scenarios, such as a collection of smaller i.i.d. graphs, that frequently occur in other fields (e.g., chemistry, biology), would be an important extension of our model. Studying the influence of the graph topology (e.g., sparsity, diameter) on NetGAN’s performance will shed more light on the model’s properties.\nOther types of graphs. While plain graphs are ubiquitous, many of important applications deal with attributed, k-partite or heterogeneous networks. Adapting the NetGAN model to handle these other modalities of the data is a promising direction for future research. Especially important would be an adaptation to the dynamic / inductive setting, where new nodes are added over time."
  }, {
    "heading": "6. Conclusion",
    "text": "In this work we introduce NetGAN - an implicit generative model for network data. NetGAN is able to generate graphs that capture important topological properties of complex networks, such as community structure and degree distribution, without having to manually specify any of them. Moreover, our proposed model shows strong generalization properties, as highlighted by its competitive link prediction performance on a number of datasets. NetGAN can also be used for generating graphs with continuously varying characteristics using latent space interpolation. Combined our results provide strong evidence that implicit generative models for graphs are well-suited for capturing the complex nature of real-world networks."
  }, {
    "heading": "Acknowledgments",
    "text": "This research was supported by the German Research Foundation, Emmy Noether grant GU 1409/2-1, and by the Technical University of Munich - Institute for Advanced Study, funded by the German Excellence Initiative and the European Union Seventh Framework Programme under grant agreement no 291763, co-funded by the European Union."
  }],
  "year": 2018,
  "references": [{
    "title": "The political blogosphere and the 2004 US election: divided they blog",
    "authors": ["L.A. Adamic", "N. Glance"],
    "venue": "In Proceedings of the international workshop on Link discovery,",
    "year": 2005
  }, {
    "title": "Emergence of scaling in random networks",
    "authors": ["Barabási", "A.-L", "R. Albert"],
    "venue": "Science, 286(5439):509–512,",
    "year": 1999
  }, {
    "title": "The asymptotic number of labeled graphs with given degree sequences",
    "authors": ["E.A. Bender", "E.R. Canfield"],
    "venue": "Journal of Combinatorial Theory, Series A,",
    "year": 1978
  }, {
    "title": "Boundary equilibrium generative adversarial networks",
    "authors": ["D. Berthelot", "T. Schumm", "Metz", "L. Began"],
    "venue": "arXiv preprint arXiv:1703.10717,",
    "year": 2017
  }, {
    "title": "Bayesian robust attributed graph clustering: Joint learning of partial anomalies and group structure",
    "authors": ["A. Bojchevski", "S. Günnemann"],
    "venue": "In Proceedings of the AAAI Conference on Artificial Intelligence,",
    "year": 2018
  }, {
    "title": "Deep gaussian embedding of graphs: Unsupervised inductive learning via ranking",
    "authors": ["A. Bojchevski", "S. Günnemann"],
    "venue": "In International Conference on Learning Representations,",
    "year": 2018
  }, {
    "title": "Scale-free networks are rare",
    "authors": ["A.D. Broido", "A. Clauset"],
    "venue": "arXiv preprint arXiv:1801.03400,",
    "year": 2018
  }, {
    "title": "Graph mining: Laws, generators, and algorithms",
    "authors": ["D. Chakrabarti", "C. Faloutsos"],
    "venue": "Computing Surveys (CSUR),",
    "year": 2006
  }, {
    "title": "Maximum-likelihood augmented discrete generative adversarial networks",
    "authors": ["T. Che", "Y. Li", "R. Zhang", "R.D. Hjelm", "W. Li", "Y. Song", "Y. Bengio"],
    "venue": "arXiv preprint arXiv:1702.07983,",
    "year": 2017
  }, {
    "title": "Generating multi-label discrete electronic health records using generative adversarial networks",
    "authors": ["E. Choi", "S. Biswal", "B. Malin", "J. Duke", "W.F. Stewart", "J. Sun"],
    "venue": "arXiv preprint arXiv:1703.06490,",
    "year": 2017
  }, {
    "title": "Structural diversity and homophily: A study across more than one hundred big networks",
    "authors": ["Y. Dong", "R.A. Johnson", "J. Xu", "N.V. Chawla"],
    "venue": "In Proceedings of the SIGKDD International Conference on Knowledge Discovery and Data Mining,",
    "year": 2017
  }, {
    "title": "A survey of statistical network models",
    "authors": ["A. Goldenberg", "A.X. Zheng", "S.E. Fienberg", "Airoldi", "E. M"],
    "venue": "Foundations and Trends in Machine Learning,",
    "year": 2010
  }, {
    "title": "tutorial: Generative adversarial networks",
    "authors": ["I. Goodfellow"],
    "venue": "arXiv preprint arXiv:1701.00160,",
    "year": 2016
  }, {
    "title": "Generative adversarial nets",
    "authors": ["I. Goodfellow", "J. Pouget-Abadie", "M. Mirza", "B. Xu", "D. Warde-Farley", "S. Ozair", "A. Courville", "Y. Bengio"],
    "venue": "In Advances in neural information processing systems,",
    "year": 2014
  }, {
    "title": "node2vec: Scalable feature learning for networks",
    "authors": ["A. Grover", "J. Leskovec"],
    "venue": "In Proceedings of the SIGKDD international conference on Knowledge discovery and data mining,",
    "year": 2016
  }, {
    "title": "Improved training of Wasserstein GANs",
    "authors": ["I. Gulrajani", "F. Ahmed", "M. Arjovsky", "V. Dumoulin", "A. Courville"],
    "venue": "arXiv preprint arXiv:1704.00028,",
    "year": 2017
  }, {
    "title": "ERGM: Fit, Simulate and Diagnose Exponential-Family Models for Networks",
    "authors": ["M.S. Handcock", "D.R. Hunter", "C.T. Butts", "S.M. Goodreau", "P.N. Krivitsky", "M. Morris"],
    "venue": "The Statnet Project,",
    "year": 2017
  }, {
    "title": "Boundary-seeking generative adversarial networks",
    "authors": ["R.D. Hjelm", "A.P. Jacob", "T. Che", "K. Cho", "Y. Bengio"],
    "venue": "arXiv preprint arXiv:1702.08431,",
    "year": 2017
  }, {
    "title": "Long short-term memory",
    "authors": ["S. Hochreiter", "J. Schmidhuber"],
    "venue": "Neural Computation,",
    "year": 1997
  }, {
    "title": "An exponential family of probability distributions for directed graphs",
    "authors": ["P.W. Holland", "S. Leinhardt"],
    "venue": "Journal of the american Statistical association,",
    "year": 1981
  }, {
    "title": "Categorical reparameterization with Gumbel-softmax",
    "authors": ["E. Jang", "S. Gu", "B. Poole"],
    "venue": "arXiv preprint arXiv:1611.01144,",
    "year": 2016
  }, {
    "title": "Progressive growing of gans for improved quality, stability, and variation",
    "authors": ["T. Karras", "T. Aila", "S. Laine", "J. Lehtinen"],
    "venue": "arXiv preprint arXiv:1710.10196,",
    "year": 2017
  }, {
    "title": "Stochastic blockmodels and community structure in networks",
    "authors": ["B. Karrer", "M.E. Newman"],
    "venue": "Physical Review E,",
    "year": 2011
  }, {
    "title": "Modeling social networks with node attributes using the multiplicative attribute graph model",
    "authors": ["M. Kim", "J. Leskovec"],
    "venue": "arXiv preprint arXiv:1106.5053,",
    "year": 2011
  }, {
    "title": "Adam: A method for stochastic optimization",
    "authors": ["D. Kingma", "J. Ba"],
    "venue": "arXiv preprint arXiv:1412.6980,",
    "year": 2014
  }, {
    "title": "Variational graph auto-encoders",
    "authors": ["T.N. Kipf", "M. Welling"],
    "venue": "arXiv preprint arXiv:1611.07308,",
    "year": 2016
  }, {
    "title": "GANs for sequences of discrete elements with the Gumbel-softmax distribution",
    "authors": ["M.J. Kusner", "J.M. Hernández-Lobato"],
    "venue": "arXiv preprint arXiv:1611.04051,",
    "year": 2016
  }, {
    "title": "Adversarial learning for neural dialogue generation",
    "authors": ["J. Li", "W. Monroe", "T. Shi", "A. Ritter", "D. Jurafsky"],
    "venue": "arXiv preprint arXiv:1701.06547,",
    "year": 2017
  }, {
    "title": "Recurrent topic-transition GAN for visual paragraph generation",
    "authors": ["X. Liang", "Z. Hu", "H. Zhang", "C. Gan", "E.P. Xing"],
    "venue": "arXiv preprint arXiv:1703.07022,",
    "year": 2017
  }, {
    "title": "Can GAN learn topological features of a graph",
    "authors": ["W. Liu", "Chen", "P.-Y", "H. Cooper", "M.H. Oh", "S. Yeung", "T. Suzumura"],
    "venue": "arXiv preprint arXiv:1707.06197,",
    "year": 2017
  }, {
    "title": "Automating the construction of internet portals with machine learning",
    "authors": ["A.K. McCallum", "K. Nigam", "J. Rennie", "K. Seymore"],
    "venue": "Information Retrieval,",
    "year": 2000
  }, {
    "title": "A critical point for random graphs with a given degree sequence",
    "authors": ["M. Molloy", "B. Reed"],
    "venue": "Random structures & algorithms,",
    "year": 1995
  }, {
    "title": "Deepwalk: Online learning of social representations",
    "authors": ["B. Perozzi", "R. Al-Rfou", "S. Skiena"],
    "venue": "In Proceedings of the SIGKDD international conference on Knowledge discovery and data mining,",
    "year": 2014
  }, {
    "title": "Collective classification in network data",
    "authors": ["P. Sen", "G. Namata", "M. Bilgic", "L. Getoor", "B. Galligher", "T. Eliassi-Rad"],
    "venue": "AI magazine,",
    "year": 2008
  }, {
    "title": "Community structure and scale-free collections of Erdős-Rényi graphs",
    "authors": ["C. Seshadhri", "T.G. Kolda", "A. Pinar"],
    "venue": "Physical Review E,",
    "year": 2012
  }, {
    "title": "Learning social graph topologies using generative adversarial neural networks. 2017",
    "authors": ["S. Tavakoli", "A. Hajibagheri", "G. Sukthankar"],
    "year": 2017
  }, {
    "title": "GraphGAN: Graph representation learning with generative adversarial nets",
    "authors": ["H. Wang", "J. Wang", "M. Zhao", "W. Zhang", "F. Zhang", "X. Xie", "M. Guo"],
    "venue": "arXiv preprint arXiv:1711.08267,",
    "year": 2017
  }, {
    "title": "Learning a probabilistic latent space of object shapes via 3d generative-adversarial modeling",
    "authors": ["J. Wu", "C. Zhang", "T. Xue", "B. Freeman", "J. Tenenbaum"],
    "venue": "In Advances in Neural Information Processing Systems,",
    "year": 2016
  }, {
    "title": "SeqGAN: Sequence generative adversarial nets with policy gradient",
    "authors": ["L. Yu", "W. Zhang", "J. Wang", "Y. Yu"],
    "venue": "In AAAI,",
    "year": 2017
  }],
  "id": "SP:59b09a4c5aa1dc9a956483a6fc94b1b44ce49557",
  "authors": [{
    "name": "Aleksandar Bojchevski",
    "affiliations": []
  }, {
    "name": "Oleksandr Shchur",
    "affiliations": []
  }, {
    "name": "Daniel Zügner",
    "affiliations": []
  }, {
    "name": "Stephan Günnemann",
    "affiliations": []
  }],
  "abstractText": "We propose NetGAN – the first implicit generative model for graphs able to mimic real-world networks. We pose the problem of graph generation as learning the distribution of biased random walks over the input graph. The proposed model is based on a stochastic neural network that generates discrete output samples and is trained using the Wasserstein GAN objective. NetGAN is able to produce graphs that exhibit well-known network patterns without explicitly specifying them in the model definition. At the same time, our model exhibits strong generalization properties, as highlighted by its competitive link prediction performance, despite not being trained specifically for this task. Being the first approach to combine both of these desirable properties, NetGAN opens exciting avenues for further research.",
  "title": "NetGAN: Generating Graphs via Random Walks"
}