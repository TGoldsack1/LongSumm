{
  "sections": [{
    "heading": "1. Introduction",
    "text": "Two important challenges in reinforcement learning (RL) are the problems of representation learning and of automatic discovery of skills. Proto-value functions (PVFs) are a well-known solution for the problem of representation learning (Mahadevan, 2005; Mahadevan & Maggioni, 2007); while the problem of skill discovery is generally posed under the options framework (Sutton et al., 1999; Precup, 2000), which models skills as options.\nIn this paper, we tie together representation learning and option discovery by showing how PVFs implicitly define options. One of our main contributions is to introduce the concepts of eigenpurpose and eigenbehavior. Eigenpurposes are intrinsic reward functions that incentivize the agent to traverse the state space by following the principal directions of the learned representation. Each intrinsic reward function leads to a different eigenbehavior, which is\n1University of Alberta 2Google DeepMind. Correspondence to: Marlos C. Machado <machado@ualberta.ca>.\nProceedings of the 34 th International Conference on Machine Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017 by the author(s).\nthe optimal policy for that reward function. In this paper we introduce an algorithm for option discovery that leverages these ideas. The options we discover are task-independent because, as PVFs, the eigenpurposes are obtained without any information about the environment’s reward structure. We first present these ideas in the tabular case and then show how they can be generalized to the function approximation case.\nExploration, while traditionally a separate problem from option discovery, can also be addressed through the careful construction of options (McGovern & Barto, 2001; Şimşek et al., 2005; Solway et al., 2014; Kulkarni et al., 2016). In this paper, we provide evidence that not all options capable of accelerating planning are useful for exploration. We show that options traditionally used in the literature to speed up planning hinder the agents’ performance if used for random exploration during learning. Our options have two important properties that allow them to improve exploration: (i) they operate at different time scales, and (ii) they can be easily sequenced. Having options that operate at different time scales allows agents to make finely timed actions while also decreasing the likelihood the agent will explore only a small portion of the state space. Moreover, because our options are defined across the whole state space, multiple options are available in every state, which allows them to be easily sequenced."
  }, {
    "heading": "2. Background",
    "text": "We generally indicate random variables by capital letters (e.g., R\nt ), vectors by bold letters (e.g., ✓), functions by lowercase letters (e.g., v), and sets by calligraphic font (e.g., S)."
  }, {
    "heading": "2.1. Reinforcement Learning",
    "text": "In the RL framework (Sutton & Barto, 1998), an agent aims to maximize cumulative reward by taking actions in an environment. These actions affect the agent’s next state and the rewards it experiences. We use the MDP formalism throughout this paper. An MDP is a 5-tuple hS,A, r, p, i. At time t the agent is in state s\nt 2 S where it takes action a\nt 2 A that leads to the next state s t+1 2 S according to the transition probability kernel p(s0|s, a), which encodes Pr(S t+1 = s 0|S t = s,A t\n= a). The agent also observes a reward R t+1 ⇠ r(s, a). The agent’s goal is to learn a\npolicy µ : S ⇥ A ! [0, 1] that maximizes the expected discounted return G\nt\n. = E p,µ ⇥P1 k=0 k R t+k+1|st ⇤ , where\n2 [0, 1) is the discount factor.\nIt is common to use the policy improvement theorem (Bellman, 1957) when learning to maximize G\nt . One technique is to alternate between solving the Bellman equations for the action-value function q\nµk(s, a),\nq µk(s, a) . = E µk,p\n⇥ G\nt |S t = s,A t = a\n⇤\n=\nX\ns 0 ,r\np(s 0 , r|s, a) ⇥ r +\nX\na\n0\nµ\nk\n(a 0|s0)q µk(s 0 , a 0 )\n⇤\nand making the next policy, µ k+1, greedy w.r.t. qµk ,\nµ k+1 . = argmax\na2A q µk(s, a),\nuntil converging to an optimal policy µ⇤.\nSometimes it is not feasible to learn a value for each stateaction pair due to the size of the state space. Generally, this is addressed by parameterizing q\nµ (s, a) with a set of weights ✓ 2 Rn such that q\nµ (s, a) ⇡ q µ (s, a,✓). It is common to approximate q\nµ through a linear function, i.e., q\nµ (s, a,✓) = ✓> (s, a), where (s, a) denotes a linear feature representation of state s when taking action a."
  }, {
    "heading": "2.2. The Options Framework",
    "text": "The options framework extends RL by introducing temporally extended actions called skills or options. An option ! is a 3-tuple ! = hI,⇡, T i where I 2 S denotes the option’s initiation set, ⇡ : A⇥S ! [0, 1] denotes the option’s policy, and T 2 S denotes the option’s termination set. After the agent decides to follow option ! from a state in I, actions are selected according to ⇡ until the agent reaches a state in T . Intuitively, options are higher-level actions that extend over several time steps, generalizing MDPs to semiMarkov decision processes (SMDPs) (Puterman, 1994).\nTraditionally, options capable of moving agents to bottleneck states are sought after. Bottleneck states are those states that connect different densely connected regions of the state space (e.g., doorways) (Şimşek & Barto, 2004; Solway et al., 2014). They have been shown to be very efficient for planning as these states are the states most frequently visited when considering the shortest distance between any two states in an MDP (Solway et al., 2014)."
  }, {
    "heading": "2.3. Proto-Value Functions",
    "text": "Proto-value functions (PVFs) are learned representations that capture large-scale temporal properties of an environment (Mahadevan, 2005; Mahadevan & Maggioni, 2007). They are obtained by diagonalizing a diffusion model, which is constructed from the MDP’s transition matrix. A diffusion model captures information flow on a graph, and\nit is commonly defined by the combinatorial graph Laplacian matrix L = D A, where A is the graph’s adjacency matrix and D the diagonal matrix whose entries are the row sums of A. Notice that the adjacency matrix A easily generalizes to a weight matrix W . PVFs are defined to be the eigenvectors obtained after the eigendecomposition of L. Different diffusion models can be used to generate PVFs, such as the normalized graph Laplacian L = D 12 (D A)D 12 , which we use in this paper."
  }, {
    "heading": "3. Option Discovery through the Laplacian",
    "text": "PVFs capture the large-scale geometry of the environment, such as symmetries and bottlenecks. They are task independent, in the sense that they do not use information related to reward functions. Moreover, they are defined over the whole state space since each eigenvector induces a realvalued mapping over each state. We can imagine that options with these properties should also be useful. In this section we show how to use PVFs to discover options.\nLet us start with an example. Consider the traditional 4- room domain depicted in Figure 1c. Gray squares represent walls and white squares represent accessible states. Four actions are available: up, down, right, and left. The transitions are deterministic and the agent is not allowed to move into a wall. Ideally, we would like to discover options that move the agent from room to room. Thus, we should be able to automatically distinguish between the different rooms in the environment. This is exactly what PVFs do, as depicted in Figure 2 (left). Instead of interpreting a PVF as a basis function, we can interpret the PVF in our example as a desire to reach the highest point of the plot, corresponding to the centre of the room. Because the sign of an eigenvector is arbitrary, a PVF can also be interpreted as a desire to reach the lowest point of the plot, corresponding to the opposite room. In this paper we use the eigenvectors in both directions (i.e., both signs).\nAn eigenpurpose formalizes the interpretation above by defining an intrinsic reward function. We can see it as defining a purpose for the agent, that is, to maximize the discounted sum of these rewards.\nDefinition 3.1 (Eigenpurpose). An eigenpurpose is the intrinsic reward function re\ni\n(s, s 0 ) of a proto-value function\ne 2 R|S| such that\nr e i (s, s 0 ) = e > ( (s0) (s)), (1)\nwhere (x) denotes the feature representation of state x.\nNotice that an eigenpurpose, in the tabular case, can be written as re\ni\n(s, s 0 ) = e[s 0 ] e[s].\nWe can now define a new MDP to learn the option associated with the purpose, Me\ni = hS,A[{?}, re i , p, i, where\nthe reward function is defined as in (1) and the action set is augmented by the action terminate (?), which allows the agent to leave Me\ni without any cost. The state space and the transition probability kernel remain unchanged from the original problem. The discount rate can be chosen arbitrarily, although it impacts the timescale the option encodes.\nWith Me i we define a new state-value function ve ⇡ (s), for policy ⇡, as the expected value of the cumulative discounted intrinsic reward if the agent starts in state s and follows policy ⇡ until termination. Similarly, we define a new action-value function qe\n⇡ (s, a) as the expected value of the cumulative discounted intrinsic reward if the agent starts in state s, takes action a, and then follows policy ⇡ until termination. We can also describe the optimal value function for any eigenpurpose obtained through e:\nv e ⇤(s) = max\n⇡\nv e ⇡ (s) and qe⇤(s, a) = max ⇡ q e ⇡ (s, a).\nThese definitions naturally lead us to eigenbehaviors.\nDefinition 3.2 (Eigenbehavior). An eigenbehavior is a policy e : S ! A that is optimal with respect to the eigenpurpose re\ni\n, i.e., e(s) = argmax a2A q e ⇤(s, a).\nFinding the optimal policy ⇡e⇤ now becomes a traditional RL problem, with a different reward function. Importantly, this reward function tends to be dense, avoiding challenging situations due to exploration issues. In this paper we use policy iteration to solve for an optimal policy.\nIf each eigenpurpose defines an option, its corresponding eigenbehavior is the option’s policy. Thus, we need to define the option’s initiation and termination set. An option should be available in every state where it is possible to achieve its purpose, and to terminate when it is achieved.\nWhen defining the MDP to learn the option, we augmented the agent’s action set with the terminate action, allowing the agent to interrupt the option anytime. We want options to terminate when the agent achieves its purpose, i.e., when it is unable to accumulate further positive intrinsic rewards. With the defined reward function, this happens when the agent reaches the state with largest value in the eigenpurpose (or a local maximum when < 1). Any subsequent reward will be negative. We are able to formalize this con-\ndition by defining q (s,?) .= 0 for all e. When the terminate action is selected, control is returned to the higher level policy (Dietterich, 2000). An option following a policy e terminates when qe\n(s, a)  0 for all a 2 A. We define the initiation set to be all states in which there exists an action a 2 A such that qe\n(s, a) > 0. Thus, the option’s policy is ⇡e(s) = argmax\na2A[{?} q e ⇡ (s, a). We refer to the options discovered with our approach as eigenoptions. The eigenoption corresponding to the example at the beginning of this section is depicted in Figure 2 (right).\nFor any eigenoption, there is always at least one state in which it terminates, as we now show. Theorem 3.1 (Option’s Termination). Consider an eigenoption o = hI\no\n,⇡\no , T o i and < 1. Then, in an MDP with finite state space, T\no\nis nonempty.\nProof. We can write the Bellman equation in the matrix form: v = r+ Tv, where v is a finite column vector with one entry per state encoding its value function. From (1) we have r = Tw w with w = (s)>e, where e denotes the eigenpurpose of interest. Therefore:\nv +w = Tw + Tv\n= (1 )Tw + T (v +w) = (1 )(I T ) 1Tw.\n||v +w||1 = (1 )||(I T ) 1Tw||1 ||v +w||1  (1 )||(I T ) 1T ||1||w||1\n||v +w||1  (1 ) 1 (1 ) ||w||1\n||v +w||1  ||w||1\nWe can shift w by any finite constant without changing the reward, i.e., Tw w = T (w+ ) (w+ ) because T1 = 1 since P j T i,j\n= 1. Hence, we can assume w 0. Let s ⇤ = argmax\ns\nw\ns ⇤ , so that w s ⇤ = ||w||1. Clearly vs⇤ \n0, otherwise ||v +w||1 |vs⇤ + ws⇤ | = vs⇤ + ws⇤ > w\ns ⇤ = ||w||1, arriving at a contradiction.\nThis result is applicable in both the tabular and linear function approximation case. An algorithm that does not rely on knowing the underlying graph is provided in Section 5."
  }, {
    "heading": "4. Empirical Evaluation",
    "text": "We used three MDPs in our empirical study (c.f. Figure 1): an open room, an I-Maze, and the 4-room domain. Their transitions are deterministic and gray squares denote walls. Agents have access to four actions: up, down, right, and left. When an action that would have taken the agent into a wall is chosen, the agent’s state does not change. We demonstrate three aspects of our framework:1\n• How the eigenoptions present specific purposes. Interestingly, options leading to bottlenecks are not the first ones we discover.\n• How eigenoptions improve exploration by reducing the expected number of steps required to navigate between any two states.\n• How eigenoptions help agents to accumulate reward faster. We show how few options may hurt the agents’ performance while enough options speed up learning."
  }, {
    "heading": "4.1. Discovered Options",
    "text": "In the PVF theory, the “smoothest” eigenvectors, corresponding to the smallest eigenvalues, are preferred (Mahadevan & Maggioni, 2007). The same intuition applies to eigenoptions, with the eigenpurposes corresponding to the smallest eigenvalues being preferred. Figures 3, 4, and 5 depict the first eigenoptions discovered in the three domains used for evaluation.\nEigenoptions do not necessarily look for bottleneck states, 1Python code can be found at: https://github.com/mcmachado/options\nallowing us to apply our algorithm in many environments in which there are no obvious, or meaningful, bottlenecks. We discover meaningful options in these environments, such as walking down a corridor, or going to the corners of an open room. Interestingly, doorways are not the first options we discover in the 4-room domain (the fifth eigenoption is the first to terminate at the entrance of a doorway). In the next sections we provide empirical evidence that eigenoptions are useful, and often more so than bottleneck options."
  }, {
    "heading": "4.2. Exploration",
    "text": "A major challenge for agents to explore an environment is to be decisive, avoiding the dithering commonly observed in random walks (Machado & Bowling, 2016; Osband et al., 2016). Options provide such decisiveness by operating in a higher level of abstraction. Agents performing a random walk, when equipped with options, are expected to cover larger distances in the state space, navigating back and forth between subgoals instead of dithering around the starting state. However, options need to satisfy two conditions to improve exploration: (1) they have to be available in several parts of the state space, ensuring the agent always has access to many different options; and (2) they have to operate at different time scales. For instance, in the 4-room domain, it is unlikely an agent randomly selects enough primitive actions leading it to a corner if all options move the agent between doorways. An important result in this section is to show that it is very unlikely for an agent to explore the whole environment if it keeps going back and forth between similar high-level goals.\nEigenoptions satisfy both conditions. As demonstrated in Section 4.1, eigenoptions are often defined in the whole state space, allowing sequencing. Moreover, PVFs can be seen as a “frequency” basis, with different PVFs being associated with different frequencies (Mahadevan & Maggioni, 2007). The corresponding eigenoptions also operate\nat different frequencies, with the length of a trajectory until termination varying. This behavior can be seen when comparing the second and fourth eigenoptions in the 10 ⇥ 10 grid (Figure 3). The fourth eigenoption terminates, on expectation, twice as often as the second eigenoption.\nIn this section we show that eigenoptions improve exploration. We do so by introducing a new metric, which we call diffusion time. Diffusion time encodes the expected number of steps required to navigate between two states randomly chosen in the MDP while following a random walk. A small expected number of steps implies that it is more likely that the agent will reach all states with a random walk. We discuss how this metric can be computed in the Appendix.\nFigure 6 depicts, for our the three environments, the diffusion time with options and the diffusion time using only primitive actions. We add options incrementally in order of increasing eigenvalue when computing the diffusion time for different sets of options.\nThe first options added hurt exploration, but when enough options are added, exploration is greatly improved when compared to a random walk using only primitive actions. The fact that few options hurt exploration may be surprising at first, based on the fact that few useful options are generally sought after in the literature. However, this is a major difference between using options for planning and for learning. In planning, options shortcut the agents’ trajectories, pruning the search space. All other actions are still taken into consideration. When exploring, a uniformly random policy over options and primitive actions skews where\nagents spend their time. Options that are much longer than primitive actions reduce the likelihood that an agent will deviate much from the options’ trajectories, since sampling an option may undo dozens of primitive actions. This biasing is often observed when fewer options are available.\nThe discussion above can be made clearer with an example. In the 4-room domain, if the only options available are those leading the agent to doorways (c.f. Appendix), it is less likely the agent will reach the outer corners. To do so the agent would have to select enough consecutive primitive actions without sampling an option. Also, it is very likely agents will be always moving between rooms, never really exploring inside a room. These issues are mitigated with eigenoptions. The first eigenoptions lead agents to individual rooms, but other eigenoptions operate in different time scales, allowing agents to explore different parts of rooms.\nFigure 6d supports the intuition that options leading to bottleneck states are not sufficient, by themselves, for exploration. It shows how the diffusion time in the 4-room domain is increased when only bottleneck options are used. As in the PVF literature, the ideal number of options to be used by an agent can be seen as a model selection problem."
  }, {
    "heading": "4.3. Accumulating Rewards",
    "text": "We now illustrate the usefulness of our options when the agent’s goal is to accumulate reward. We also study the impact of an increasing number of options in such a task. In these experiments, the agent starts at the bottom left cor-\nner and its goal is to reach the top right corner. The agent observes a reward of 0 until the goal is reached, when it observes a reward of +1. We used Q-Learning (Watkins & Dayan, 1992) (↵ = 0.1, = 0.9) to learn a policy over primitive actions. The behavior policy chooses uniformly over primitive actions and options, following them until termination. Figure 7 depicts, after learning for a given number of episodes, the average over 100 trials of the agents’ final performance. Episodes were 100 time steps long, and we learned for 250 episodes in the 10 ⇥ 10 grid and in the I-Maze, and for 500 episodes in the 4-room domain.\nIn most scenarios eigenoptions improve performance. As in the previous section, exceptions occur when only a few options are added to the agent’s action set. The best results were obtained using 64 options. Despite being an additional parameter, our results show that the agent’s performance is fairly robust across different numbers of options.\nEigenoptions are task-independent by construction. Additional results in the appendix show how the same set of eigenoptions is able to speed-up learning in different tasks. In the appendix we also compare eigenoptions to random options, that is, options that use a random state as subgoal."
  }, {
    "heading": "5. Approximate Option Discovery",
    "text": "So far we have assumed that agents have access to the adjacency matrix representing the underlying MDP. However, in practical settings this is generally not true. In fact, the number of states in these settings is often so large that agents rarely visit the same state twice. These problems are generally tackled with sample-based methods and some sort of function approximation.\nIn this section we propose a sample-based approach for option discovery that asymptotically discovers eigenoptions. We then extend this algorithm to linear function approximation. We provide anecdotal evidence in Atari 2600 games that this relatively naı̈ve sample-based approach to function approximation discovers purposeful options."
  }, {
    "heading": "5.1. Sample-based Option Discovery",
    "text": "In the online setting, agents must sample trajectories. Naturally, one can sample trajectories until one is able to perfectly construct the MDP’s adjacency matrix, as suggested by Mahadevan & Maggioni (2007). However, this approach does not easily extend to linear function approximation. In this section we provide an approach that does not build the adjacency matrix allowing us to extend the concept of eigenpurposes to linear function approximation.\nIn our algorithm, a sample transition is added to a matrix T if it was not previously encountered. The transition is added as the difference between the current and previous observations, i.e., (s0) (s). In the tabular case we define (s) to be the one-hot encoding of state s. Once enough transitions have been sampled, we perform a singular value decomposition on the matrix T such that T = U⌃V\n>. We use the columns of V , which correspond to the right-eigenvectors of T , to generate the eigenpurposes. The intrinsic reward and the termination criterion for an eigenbehavior are the same as before.\nMatrix T is known as the incidence matrix. If all transitions in the graph are sampled once, for tabular representations, this algorithm discovers the same options we obtain with the combinatorial Laplacian. The theorem below states the equivalence between the obtained eigenpurposes.\nTheorem 5.1. Consider the SVD of T = U T ⌃ T V > T , with each row of T consisting of the difference between observations, i.e., (s0) (s). In the tabular case, if all transitions in the MDP have been sampled once, the orthonormal eigenvectors of L are the columns of V >\nT\n.\nProof. Given the SVD decomposition of a matrix A = U⌃V\n>, the columns of V are the eigenvectors of A > A (Strang, 2005). We know that T>T = 2L, where L = D W (Lemma 5.1, c.f. Appendix). Thus, the columns of V\nT are the eigenvectors of T>T , which can be rewritten as 2(D W ). Therefore, the columns of V\nT are also the eigenvectors of L.\nThere is a trade-off between reconstructing the adjacency matrix and constructing the incidence matrix. In MDPs in which states are sparsely connected, such as the I-Maze, the latter is preferred since it has fewer transitions than states. However, what makes this result interesting is the fact that our algorithm can be easily generalized to linear function approximation."
  }, {
    "heading": "5.2. Function Approximation",
    "text": "An adjacency matrix is not very useful when the agent has access only to features of the state. However, we can use the intuition about the incidence matrix to propose an algorithm compatible with linear function approximation.\nIn fact, to apply the algorithm proposed in the previous section, we just need to define what constitutes a new transition. We define two vectors, t and t0, to be identical if and only if t t0 = 0. We then use a set data structure to avoid duplicates when storing (s0) (s). This is a naı̈ve approach, but it provides encouraging evidence eigenoptions generalize to linear function approximation. We expect more involved methods to perform even better.\nWe tested our method in the ALE (Bellemare et al., 2013). The agent’s representation consists of the emulator’s RAM state (1,024 bits). The final incidence matrix in which we ran the SVD had 25,000 rows, which we sampled uniformly from the set of observed transitions. We provide further details of the experimental setup in the appendix.\nIn the tabular case we start selecting eigenpurposes generated by the eigenvectors with smallest eigenvalue, because these are the “smoothest” ones. However, it is not clear such intuition holds here because we are in the function approximation setting and the matrix of transitions does not contain all possible transitions. Therefore, we analyzed, for each game, all 1,024 discovered options.\nWe approximate these options greedily ( = 0) with the ALE emulator’s look-ahead. The next action a0 for an eigenpurpose e is selected as argmax b2A R s 0 p(s 0|s, b) re i (s, s 0 ).\nEven with such a myopic action selection mechanism we\nwere able to obtain options that clearly demonstrate intent. In FREEWAY, a game in which a chicken is expected to cross the road while avoiding cars, we observe options in which the agent clearly wants to reach a specific lane in the street. Figure 8 (left) depicts where the chicken tends to be when the option is executed. On the right we see a histogram representing the chicken’s height during an episode. We can clearly see how the chicken’s height varies for different options, and how a random walk over primitive actions (rand) does not explore the environment properly. Remarkably, option #445 scores 28 points at the end of the episode, without ever explicitly taking the reward signal into consideration. This performance is very close to those obtained by state-of-the-art algorithms.\nIn MONTEZUMA’S REVENGE, a game in which the agent needs to navigate through a room to pickup a key so it can open a door, we also observe the agent having the clear intent of reaching particular positions on the screen, such as staircases, ropes and doors (Figure 9). Interestingly, the options we discover are very similar to those handcrafted by Kulkarni et al. (2016) when evaluating the usefulness of options to tackle such a game. A video of the highlighted options can be found online.2"
  }, {
    "heading": "6. Related Work",
    "text": "Most algorithms for option discovery can be seen as topdown approaches. Agents use trajectories leading to informative rewards3 as a starting point, decomposing and refining them into options. There are many approaches based on this principle, such as methods that use the observed rewards to generate intrinsic rewards leading to new value functions (e.g., McGovern & Barto, 2001; Menache et al., 2002; Konidaris & Barto, 2009), methods that use the observed rewards to climb a gradient (e.g., Mankowitz et al., 2016; Vezhnevets et al., 2016; Bacon et al., 2017), or to do\n2 https://youtu.be/2BVicx4CDWA\n3We define an informative reward to be the signal that informs the agent it has reached a goal. For example, when trying to escape from a maze, we consider 0 to be an informative reward if the agent observes rewards of value 1 in every time step it is inside the maze. A different example is a positive reward observed by an agent that typically observes rewards of value 0.\nprobabilistic inference (Daniel et al., 2016). However, such approaches are not applicable in large state spaces with sparse rewards. If informative rewards are unlikely to be found by an agent using only primitive actions, requiring long or specific sequences of actions, options are equally unlikely to be discovered.\nOur algorithm can be seen as a bottom-up approach, in which options are constructed before the agent observes any informative reward. These options are composed to generate the desired policy. Options discovered this way tend to be independent of an agent’s intention, and are potentially useful in many different tasks (Gregor et al., 2016). Such options can also be seen as being useful for exploration by allowing agents to commit to a behavior for an extended period of time (Machado & Bowling, 2016). Among the approaches to discover options without using extrinsic rewards are the use of global or local graph centrality measures (Şimşek & Barto, 2004; Şimşek et al., 2005; Şimşek & Barto, 2008) and clustering of states (Mannor et al., 2004; Bacon, 2013; Lakshminarayanan et al., 2016). Interestingly, Şimşek et al. (2005) and Lakshminarayanan et al. (2016) also use the graph Laplacian in their algorithm, but to identify bottleneck states.\nBaranes & Oudeyer (2013) and Moulin-Frier & Oudeyer (2013) show how one can build policies to explicitly assist agents to explore the environment. The proposed algorithms self-generate subgoals in order to maximize learning progress. The policies built can be seen as options. Recently, Solway et al. (2014) proved that “optimal hierarchy minimizes the geometric mean number of trial-and-error attempts necessary for the agent to discover the optimal policy for any selected task (...)”. Our experiments confirm this result, although we propose diffusion time as a different metric to evaluate how options improve exploration.\nThe idea of discovering options by learning to control parts of the environment is also related to our work. Eigenpurposes encode different rates of change in the agents representation of the world, while the corresponding options aim at maximizing such change. Others have also proposed ways to discover options based on the idea of learning to control the environment. Hengst (2002), for instance, proposes an algorithm that explicitly models changes in the variables that form the agent’s representation. Recently, Gregor et al. (2016) proposed an algorithm in which agents discover options by maximizing a notion of empowerment (Salge et al., 2014), where the agent aims at getting to states with a maximal set of available intrinsic options.\nContinual Curiosity driven Skill Acquisition (CCSA) (Kompella et al., In Press) is the closest approach to ours. CCSA also discovers skills that maximize an intrinsic reward obtained by some extracted representation. While we use PVFs, CCSA uses Incremental Slow Feature Analysis\n(SFA) (Kompella et al., 2011) to define the intrinsic reward function. Sprekeler (2011) has shown that, given a specific choice of adjacency function, PVFs are equivalent to SFA (Wiskott & Sejnowski, 2002). SFA becomes an approximation of PVFs if the function space used in the SFA does not allow arbitrary mappings from the observed data to an embedding. Our method differs in how we define the initiation and termination sets, as well as in the objective being maximized. CCSA acquires skills that produce a large variation in the slow-feature outputs, leading to options that seek for bottlenecks. Our approach does not seek for bottlenecks, focusing on traversing different directions of the learned representation."
  }, {
    "heading": "7. Conclusion",
    "text": "Being able to properly abstract MDPs into SMDPs can reduce the overall expense of learning (Sutton et al., 1999; Solway et al., 2014), mainly when the learned options are reused in multiple tasks. On the other hand, the wrong hierarchy can hinder the agents’ learning process, moving the agent away from desired goal states. Current algorithms for option discovery often depend on an initial informative reward signal, which may not be readily available in large MDPs. In this paper, we introduced an approach that is effective in different environments, for a multitude of tasks.\nOur algorithm uses the graph Laplacian, being directly related to the concept of proto-value functions. The learned representation informs the agent what are meaningful options to be sought after. The discovered options can be seen as traversing each one of the dimensions in the learned representation. We believe successful algorithms in the future will be able to simultaneously discover representations and options. Agents will use their learned representation to discover options, which will be used to further explore the environment, improving the agent’s representation.\nInterestingly, the options first discovered by our approach do not necessarily find bottlenecks, which are commonly sought after. In this paper we showed how bottleneck options can hinder exploration strategies if naively added to the agent’s action set, and how the options we discover can help an agent to explore. Also, we have shown how the discovered options can be used to accumulate reward in a multitude of tasks, leveraging their exploratory properties.\nThere are several exciting avenues for future work. As noted, SFA can be seen as an approximation to PVFs. It would be interesting to compare such an approach to eigenoptions. It would also be interesting to see if the options we discover can be generated incrementally and with incomplete graphs. Finally, one can also imagine extensions to the proposed algorithm where a hierarchy of options is built."
  }, {
    "heading": "Acknowledgements",
    "text": "The authors would like to thank Will Dabney, Rémi Munos and Csaba Szepesvári for useful discussions. This work was supported by grants from Alberta Innovates Technology Futures and the Alberta Machine Intelligence Institute (Amii). Computing resources were provided by Compute Canada through CalculQuébec."
  }],
  "year": 2017,
  "references": [{
    "title": "On the Bottleneck Concept for Options Discovery: Theoretical Underpinnings and Extension in Continuous State Spaces",
    "authors": ["Bacon", "Pierre-Luc"],
    "year": 2013
  }, {
    "title": "The option-critic architecture",
    "authors": ["Bacon", "Pierre-Luc", "Harb", "Jean", "Precup", "Doina"],
    "venue": "In Proceedings of the National Conference on Artificial Intelligence (AAAI),",
    "year": 2017
  }, {
    "title": "Active learning of inverse models with intrinsically motivated goal exploration in robots",
    "authors": ["Baranes", "Adrien", "Oudeyer", "Pierre-Yves"],
    "venue": "Robotics and Autonomous Systems,",
    "year": 2013
  }, {
    "title": "The Arcade Learning Environment: An Evaluation Platform for General Agents",
    "authors": ["Bellemare", "Marc G", "Naddaf", "Yavar", "Veness", "Joel", "Bowling", "Michael"],
    "venue": "Journal of Artificial Intelligence Research,",
    "year": 2013
  }, {
    "title": "Dynamic Programming",
    "authors": ["Bellman", "Richard E"],
    "year": 1957
  }, {
    "title": "Using Relative Novelty to Identify Useful Temporal Abstractions in Reinforcement Learning",
    "authors": ["Şimşek", "Özgür", "Barto", "Andrew G"],
    "venue": "In Proceedings of the International Conference on Machine Learning (ICML),",
    "year": 2004
  }, {
    "title": "Skill Characterization Based on Betweenness",
    "authors": ["Şimşek", "Özgür", "Barto", "Andrew G"],
    "venue": "In Proceedings of Advances in Neural Information Processing Systems (NIPS),",
    "year": 2008
  }, {
    "title": "Identifying Useful Subgoals in Reinforcement Learning by Local Graph Partitioning",
    "authors": ["Şimşek", "Özgür", "Wolfe", "Alicia P", "Barto", "Andrew G"],
    "venue": "In Proceedings of the International Conference on Machine Learning (ICML),",
    "year": 2005
  }, {
    "title": "Probabilistic Inference for Determining Options in Reinforcement Learning",
    "authors": ["Daniel", "Christian", "van Hoof", "Herke", "Peters", "Jan", "Neumann", "Gerhard"],
    "venue": "Machine Learning,",
    "year": 2016
  }, {
    "title": "Hierarchical Reinforcement Learning with the MAXQ Value Function Decomposition",
    "authors": ["Dietterich", "Thomas G"],
    "venue": "Journal of Artificial Intelligence Research (JAIR),",
    "year": 2000
  }, {
    "title": "Discovering Hierarchy in Reinforcement Learning with HEXQ",
    "authors": ["Hengst", "Bernhard"],
    "venue": "In Proceedings of the International Conference on Machine Learning (ICML),",
    "year": 2002
  }, {
    "title": "Incremental Slow Feature Analysis",
    "authors": ["Kompella", "Varun Raj", "Luciw", "Matthew D", "Schmidhuber", "Jürgen"],
    "venue": "In Proceedings of the International Joint Conference on Artificial Intelligence (IJCAI),",
    "year": 2011
  }, {
    "title": "Continual Curiosity-Driven Skill Acquisition from High-Dimensional Video Inputs for Humanoid Robots",
    "authors": ["Kompella", "Varun Raj", "Stollenga", "Marijn", "Luciw", "Matthew", "Schmidhuber", "Juergen"],
    "venue": "Artificial Intelligence,",
    "year": 2015
  }, {
    "title": "Skill Discovery in Continuous Reinforcement Learning Domains using Skill Chaining",
    "authors": ["Konidaris", "George", "Barto", "Andrew"],
    "venue": "In Proceedings of Advances in Neural Information Processing Systems (NIPS),",
    "year": 2009
  }, {
    "title": "Hierarchical Deep Reinforcement Learning: Integrating Temporal Abstraction and Intrinsic Motivation",
    "authors": ["Kulkarni", "Tejas D", "Narasimhan", "Karthik R", "Saeedi", "Ardavan", "Tenenbaum", "Joshua B"],
    "venue": "ArXiv e-prints,",
    "year": 2016
  }, {
    "title": "Option Discovery in Hierarchical Reinforcement Learning using Spatio-Temporal Clustering",
    "authors": ["Lakshminarayanan", "Aravind", "Krishnamurthy", "Ramnandan", "Kumar", "Peeyush", "Ravindran", "Balaraman"],
    "venue": "CoRR, abs/1605.05359,",
    "year": 2016
  }, {
    "title": "Learning Purposeful Behaviour in the Absence of Rewards",
    "authors": ["Machado", "Marlos C", "Bowling", "Michael"],
    "venue": "CoRR, abs/1410.4604,",
    "year": 2016
  }, {
    "title": "Proto-Value Functions: Developmental Reinforcement Learning",
    "authors": ["Mahadevan", "Sridhar"],
    "venue": "In Proceedings of the International Conference on Machine Learning (ICML),",
    "year": 2005
  }, {
    "title": "Proto-value Functions: A Laplacian Framework for Learning Representation and Control in Markov Decision Processes",
    "authors": ["Mahadevan", "Sridhar", "Maggioni", "Mauro"],
    "venue": "Journal of Machine Learning Research (JMLR),",
    "year": 2007
  }, {
    "title": "Adaptive Skills Adaptive Partitions (ASAP)",
    "authors": ["Mankowitz", "Daniel J", "Mann", "Timothy Arthur", "Mannor", "Shie"],
    "venue": "In Proceedings of Advances in Neural Information Processing Systems (NIPS),",
    "year": 2016
  }, {
    "title": "Dynamic Abstraction in Reinforcement Learning via Clustering",
    "authors": ["Mannor", "Shie", "Menache", "Ishai", "Hoze", "Amit", "Klein", "Uri"],
    "venue": "In Proceedings of the International Conference on Machine Learning (ICML),",
    "year": 2004
  }, {
    "title": "Automatic Discovery of Subgoals in Reinforcement Learning using Diverse Density",
    "authors": ["McGovern", "Amy", "Barto", "Andrew G"],
    "venue": "In Proceedings of the International Conference on Machine Learning (ICML),",
    "year": 2001
  }, {
    "title": "QCut - Dynamic Discovery of Sub-goals in Reinforcement Learning",
    "authors": ["Menache", "Ishai", "Mannor", "Shie", "Shimkin", "Nahum"],
    "venue": "In Proceedings of the European Conference on Machine Learning (ECML),",
    "year": 2002
  }, {
    "title": "Generalization and Exploration via Randomized Value Functions",
    "authors": ["Osband", "Ian", "Roy", "Benjamin Van", "Wen", "Zheng"],
    "venue": "In Proceedings of the International Conference on Machine Learning (ICML),",
    "year": 2016
  }, {
    "title": "Temporal Abstraction in Reinforcement Learning",
    "authors": ["Precup", "Doina"],
    "venue": "PhD thesis, University of Massachusetts Amherst,",
    "year": 2000
  }, {
    "title": "Markov Decision Processes: Discrete Stochastic Dynamic Programming",
    "authors": ["Puterman", "Martin L"],
    "year": 1994
  }, {
    "title": "Empowerment – An Introduction",
    "authors": ["Salge", "Christoph", "Glackin", "Cornelius", "Polani", "Daniel"],
    "venue": "In Guided SelfOrganization: Inception,",
    "year": 2014
  }, {
    "title": "Optimal Behavioral Hierarchy",
    "authors": ["Solway", "Alec", "Diuk", "Carlos", "Córdova", "Natalia", "Yee", "Debbie", "Barto", "Andrew G", "Niv", "Yael", "Botvinick", "Matthew M"],
    "venue": "PLOS Computational Biology,",
    "year": 2014
  }, {
    "title": "On the Relation of Slow Feature Analysis and Laplacian Eigenmaps",
    "authors": ["Sprekeler", "Henning"],
    "venue": "Neural Computation,",
    "year": 2011
  }, {
    "title": "Linear Algebra and Its Applications",
    "authors": ["Strang", "Gilbert"],
    "year": 2005
  }, {
    "title": "Reinforcement Learning: An Introduction",
    "authors": ["Sutton", "Richard S", "Barto", "Andrew G"],
    "year": 1998
  }, {
    "title": "Between MDPs and semi-MDPs: A Framework for Temporal Abstraction in Reinforcement Learning",
    "authors": ["Sutton", "Richard S", "Precup", "Doina", "Singh", "Satinder"],
    "venue": "Artificial Intelligence,",
    "year": 1999
  }, {
    "title": "Strategic Attentive Writer for Learning Macro-Actions",
    "authors": ["mon", "Graves", "Alex", "Vinyals", "Oriol", "Agapiou", "John", "Kavukcuoglu", "Koray"],
    "venue": "In Proceedings of Advances in Neural Information Processing Systems (NIPS),",
    "year": 2016
  }, {
    "title": "Technical Note: Q-Learning",
    "authors": ["Watkins", "Christopher J.C. H", "Dayan", "Peter"],
    "venue": "Machine Learning,",
    "year": 1992
  }, {
    "title": "Slow Feature Analysis: Unsupervised Learning of Invariances",
    "authors": ["Wiskott", "Laurenz", "Sejnowski", "Terrence J"],
    "venue": "Neural Computation,",
    "year": 2002
  }],
  "id": "SP:61306634d9661216a5bb58b05858867f7c250383",
  "authors": [{
    "name": "Marlos C. Machado",
    "affiliations": []
  }, {
    "name": "Marc G. Bellemare",
    "affiliations": []
  }, {
    "name": "Michael Bowling",
    "affiliations": []
  }],
  "abstractText": "Representation learning and option discovery are two of the biggest challenges in reinforcement learning (RL). Proto-value functions (PVFs) are a well-known approach for representation learning in MDPs. In this paper we address the option discovery problem by showing how PVFs implicitly define options. We do it by introducing eigenpurposes, intrinsic reward functions derived from the learned representations. The options discovered from eigenpurposes traverse the principal directions of the state space. They are useful for multiple tasks because they are discovered without taking the environment’s rewards into consideration. Moreover, different options act at different time scales, making them helpful for exploration. We demonstrate features of eigenpurposes in traditional tabular domains as well as in Atari 2600 games.",
  "title": "A Laplacian Framework for Option Discovery in Reinforcement Learning"
}