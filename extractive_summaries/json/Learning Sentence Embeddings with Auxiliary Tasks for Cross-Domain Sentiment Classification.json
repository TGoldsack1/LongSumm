{
  "sections": [{
    "text": "Proceedings of the 2016 Conference on Empirical Methods in Natural Language Processing, pages 236–246, Austin, Texas, November 1-5, 2016. c©2016 Association for Computational Linguistics"
  }, {
    "heading": "1 Introduction",
    "text": "With the growing need of correctly identifying the sentiments expressed in subjective texts such as product reviews, sentiment classification has received continuous attention in the NLP community for over a decade (Pang et al., 2002; Pang and Lee, 2004; Hu and Liu, 2004; Choi and Cardie, 2008; Nakagawa et al., 2010). One of the big challenges of sentiment classification is how to adapt a sentiment classifier trained on one domain to a different new domain. This is because sentiments are often expressed with domain-specific words and expressions. For example, in the Movie domain, words such as moving and engaging are usually positive, but they may not be relevant in the Restaurant domain. Since labeled data is expensive to obtain, it would be very useful if we could adapt a model trained on a source domain to a target domain.\nMuch work has been done in sentiment analysis to address this domain adaptation problem (Blitzer\net al., 2007; Pan et al., 2010; Bollegala et al., 2011; Ponomareva and Thelwall, 2012; Bollegala et al., 2016). Among them, an appealing method is the Structural Correspondence Learning (SCL) method (Blitzer et al., 2007), which uses pivot feature prediction tasks to induce a projected feature space that works well for both the source and the target domains. The intuition behind is that these pivot prediction tasks are highly correlated with the original task. For sentiment classification, Blitzer et al. (2007) first chose pivot words which have high mutual information with the sentiment labels, and then set up the pivot prediction tasks to be the predictions of each of these pivot words using the other words.\nHowever, the original SCL method is based on traditional discrete feature representations and linear classifiers. In recent years, with the advances of deep learning in NLP, multi-layer neural network models such as RNNs and CNNs have been widely used in sentiment classification and achieved good performance (Socher et al., 2013; Dong et al., 2014a; Dong et al., 2014b; Kim, 2014; Tang et al., 2015). In these models, dense, real-valued feature vectors and non-linear classification functions are used. By using real-valued word embeddings pre-trained from a large corpus, these models can take advantage of the embedding space that presumably better captures the syntactic and semantic similarities between words. And by using non-linear functions through multi-layer neural networks, these models represent a more expressive hypothesis space. Therefore, it would be interesting to explore how these neural network models could be extended for cross-domain sentiment classification.\n236\nThere has been some recent studies on neural network-based domain adaptation (Glorot et al., 2011; Chen et al., 2012; Yang and Eisenstein, 2014). They use Stacked Denoising Auto-encoders (SDA) to induce a hidden representation that presumably works well across domains. However, SDA is fully unsupervised and does not consider the end task we need to solve, i.e., the sentiment classification task. In contrast, the idea behind SCL is to use carefullychosen auxiliary tasks that correlate with the end task to induce a hidden representation. Another line of work aims to learn a low dimensional representation for each feature in both domains based on predicting its neighboring features (Yang and Eisenstein, 2015; Bollegala et al., 2015). Different from these methods, we aim to directly learn sentence embeddings that work well across domains.\nIn this paper, we aim to extend the main idea behind SCL to neural network-based solutions to sentiment classification to address the domain adaptation problem. Specifically, we borrow the idea of using pivot prediction tasks from SCL. But instead of learning thousands of pivot predictors and performing singular value decomposition on the learned weights, which all relies on linear transformations, we introduce only two auxiliary binary prediction tasks and directly learn a non-linear transformation that maps an input to a dense embedding vector. Moreover, different from SCL and the auto-encoderbased methods, in which the hidden feature representation and the final classifier are learned sequentially, we propose to jointly learn the hidden feature representation together with the sentiment classification model itself, and we show that joint learning works better than sequential learning.\nWe conduct experiments on a number of different source and target domains for sentence-level sentiment classification. We show that our proposed method is able to achieve the best performance compared with a number of baselines for most of these domain pairs."
  }, {
    "heading": "2 Related Work",
    "text": "Domain Adaptation: Domain adaptation is a general problem in NLP and has been well studied in recent years (Blitzer et al., 2006; Daumé III, 2007; Jiang and Zhai, 2007; Dredze and Crammer, 2008; Titov, 2011; Yu and Jiang, 2015). For sentiment classification, most existing domain adaptation methods are based on traditional discrete feature representations and linear classifiers. One line of work focuses on inducing a general lowdimensional cross-domain representation based on the co-occurrences of domain-specific and domainindependent features (Blitzer et al., 2007; Pan et al., 2010; Pan et al., 2011). Another line of work tries to derive domain-specific sentiment words (Bollegala et al., 2011; Li et al., 2012). Our proposed method is similar to the first line of work in that we also aim to learn a general, cross-domain representation (sentence embeddings in our case). Neural Networks for Sentiment Classification: A recent trend of deep learning enhances various kinds of neural network models for sentiment classification, including Convolutional Neural Networks (CNNs), Recursive Neural Network (ReNNs) and Recurrent Neural Network (RNNs), which have been shown to achieve competitive results across different benchmarks (Socher et al., 2013; Dong et al., 2014a; Dong et al., 2014b; Kim, 2014; Tang et al., 2015). Inspired by their success in standard indomain settings, it is intuitive for us to apply these neural network models to domain adaptation settings. Denoising Auto-encoders for Domain Adaptation: Denoising Auto-encoders have been extensively studied in cross-domain sentiment classification, since the representations learned through multilayer neural networks are robust against noise during domain adaptation. The initial application of this idea is to directly employ stacked denoising autoencoders (SDA) by reconstructing the original features from data that are corrupted with noise (Glorot et al., 2011), and Chen et al. (2012) proposed to analytically marginalize out the corruption during SDA training. Later Yang and Eisenstein (2014) further showed that their proposed structured dropout noise strategy can dramatically improve the efficiency without sacrificing the accuracy. However, these methods are still based on traditional discrete representation and do not exploit the idea of using auxiliary tasks that are related to the end task. In contrast, the sentence embeddings learned from our method are derived from real-valued feature vectors and rely on related auxiliary tasks."
  }, {
    "heading": "3 Method",
    "text": "In this section we present our sentence embeddingbased domain adaptation method for sentiment classification. We first introduce the necessary notation and an overview of our method. we then delve into the details of the method."
  }, {
    "heading": "3.1 Notation and Method Overview",
    "text": "We assume that each input is a piece of text consisting of a sequence of words. For the rest of this paper, we assume each input is a sentence, although our method is general enough for longer pieces of text. Let x = (x1, x2, . . .) denote a sentence where each xi ∈ {1, 2, . . . , V } is a word in the vocabulary and V is the vocabulary size. Let the sentiment label ofx be y ∈ {+,−}where + denotes a positive sentiment and − a negative sentiment. We further assume that we are given a set of labeled training sentences from a source domain, denoted by Ds = {(xsi , ysi )}N s\ni=1. Also, we have a set of unlabeled sentences from a target domain, denoted by Dt = {xti}N t\ni=1. Our goal is to learn a good sentiment classifier from both Ds and Dt such that the classifier works well on the target domain.\nA baseline solution without considering any domain difference is to simply train a classifier using Ds, and with the recent advances in neural networkbased methods to sentence classification, we consider a baseline that uses a multi-layer neural network such as a CNN or an RNN to perform the classification task. To simplify the discussion and focus on the domain adaptation ideas we propose, we will leave the details of the neural network model we use in Section 3.5. For now, we assume that a multilayer neural network is used to transform each input x into a sentence embedding vector z. Let us use fΘ to denote the transformation function parameterized by Θ, that is, z = fΘ(x). Next, we assume that a linear classifier such as a softmax classifier is learned to map z to a sentiment label y.\nWe introduce two auxiliary tasks which presumably are highly correlated with the sentiment classification task itself. Labels for these auxiliary tasks can be automatically derived from unlabeled data in both the source and the target domains. With the help of the two auxiliary tasks, we learn a non-linear transformation function fΘ′ from unlabeled data and\nuse it to derive a sentence embedding vector z′ from sentence x, which supposedly works better across domains. Finally we use the source domain’s training data to learn a linear classifier on the representation z ⊕ z′, where ⊕ is the operator that concatenates two vectors. Figure 1 gives the outline of our method."
  }, {
    "heading": "3.2 Auxiliary Tasks",
    "text": "Our two auxiliary tasks are about whether an input sentence contains a positive or negative domainindependent sentiment word. The intuition is the following. If we have a list of domain-independent positive sentiment words, then an input sentence that contains one of these words, regardless of the domain the sentence is from, is more likely to contain an overall positive sentiment. For example, a sentence containing the word good is likely to be overall positive. Moreover, the rest of the sentence excluding the word good may contain domain-specific words or expressions that also convey a positive sentiment. For example, in the sentence “The laptop is good and goes really fast,” we can see that the word fast is a domain-specific sentiment word, and its sentiment polarity correlates with that of the word good, which is domain-independent. Therefore, we can hide the domain-independent positive words in a sentence and try to use the other words in the sentence to predict whether the original sentence contains a domain-independent positive word. There are two things to note about this auxiliary task: (1) The label of the task can be automatically derived provided that we have the domain-independent positive word list. (2) The task is closely related to the original task of sentence-level sentiment classification. Similarly, we can introduce a task to predict the existence of a domain-independent negative sentiment word in a sentence.\nFormally, let us assume that we have two domainindependent sentiment word lists, one for the positive sentiment and the other for the negative sentiment. Details of how these lists are obtained will be given in Section 3.5. Borrowing the term from SCL, we refer to these sentiment words as pivot words. For each sentence x, we replace all the occurrences of these pivot words with a special token UNK. Let g(·) be a function that denotes this procedure, that is, g(x) is the resulting sentence with\n31\nUNK tokens. We then introduce two binary labels for g(x). The first label u indicates whether the original sentence x contains at least one domainindependent positive sentiment word, and the second label v indicates whether x contains at least one domain-independent negative sentiment word. Figure 1 shows an example sentence x, its modified version g(x) and the labels u and v for x. We further use Da = {(xi, ui, vi)}Nai=1 to denote a set of training sentences for the auxiliary tasks. Note that the sentences in Da can be from the sentences in Ds and Dt, but they can also be from other unlabeled sentences."
  }, {
    "heading": "3.3 Sentence Embeddings for Domain Adaptation",
    "text": "With the two auxiliary tasks, we can learn a neural network model in a standard way to produce sentence embeddings that work well for the auxiliary tasks. Specifically, we still use Θ′ to denote the parameters of the neural network that produces the sentence embeddings (and fΘ′ the corresponding transformation function), and we use β+ and β− to denote the parameters of two softmax classifiers for the two auxiliary tasks, respectively. Using crossentropy loss, we can learn Θ′ by minimizing the following loss function:\nJ(Θ′,β+,β−)\n= − ∑\n(x,u,v)∈Da\n( log p(u|fΘ′(g(x));β+)\n+ log p(v|fΘ′(g(x));β−) ) ,\nwhere p(y|z;β) is the probability of label y given vector z and parameter β under softmax regression.\nWith the learned Θ′, we can derive a sentence embedding z′ from any sentence. Although we could simply use this embedding z′ for sentiment classification through another softmax classifier, this may not be ideal because z′ is transformed from g(x), which has the domain-independent sentiment words removed. Similar to SCL and some other previous work, we concatenate the embedding vector z′ with the standard embedding vector z for the final classification."
  }, {
    "heading": "3.4 Joint Learning",
    "text": "Although we can learn Θ′ using Da as a first step, here we also explore a joint learning setting. In this setting, Θ′ is learned together with the neural network model used for the end task, i.e., sentiment classification. This way, the learning of Θ′ depends not only on Da but also on Ds, i.e., the sentimentlabeled training data from the source domain.\nSpecifically, we use Θ to denote the parameters for a neural network that takes the original sentence x and transforms it to a sentence embedding (and fΘ the corresponding transformation function). We use γ to denote the parameters of a softmax classifier that operates on the concatenated sentence embedding z ⊕ z′ for sentiment classification. With joint learning, we try to minimize the following loss func-\ntion:\nJ(Θ,Θ′,γ,β+,β−)\n= − ∑\n(x,y)∈Ds\n( log p(y|fΘ(x)⊕ fΘ′(g(x));γ) )\n− ∑\n(x,u,v)∈Da\n( log p(u|fΘ′(g(x));β+)\n+ log p(v|fΘ′(g(x));β−) ) .\nWe can see that this loss function contains two parts. The first part is the cross-entropy loss based on the true sentiment labels of the sentences in Ds. The second part is the loss based on the auxiliary tasks and the data Da, which are derived from unlabeled sentences.\nFinally, to make a prediction on a sentence, we use the learned Θ and Θ′ to derive a sentence embedding fΘ(x) ⊕ fΘ′(g(x)), and then use the softmax classifier parameterized by the learned γ to make the final prediction."
  }, {
    "heading": "3.5 Implementation Details",
    "text": "In this section we explain some of the model details.\nPivot Word Selection Recall that the two auxiliary tasks depend on two domain-independent sentiment word lists, i.e., pivot word lists. Different from Blitzer et al. (2007), we employ weighted log-likelihood ratio (WLLR) to select the most positive and negative words in both domains as pivots. The reason is that in our preliminary experiments we observe that mutual information (used by Blitzer et al. (2007)) is biased towards low frequency words. Some high frequency words including good and great are scored low. In comparison, WLLR does not have this issue. The same observation was also reported previously by Li et al. (2009).\nMore specifically, we first tokenize the sentences in Ds and Dt and perform part-of-speech tagging using the NLTK toolkit. Next, we extract only adjectives, adverbs and verbs with a frequency of at least 3 in the source domain and at least 3 in the target domain. We also remove negation words such as not and stop words using a stop word list. We then measure each remaining candidate word’s relevance to the positive and the negative classes based on Ds\nby computing the following scores:\nr(w, y) = p̃(w|y) log p̃(w|y) p̃(w|ȳ) ,\nwhere w is a word, y ∈ {+,−} is a sentiment label, ȳ is the opposite label of y, and p̃(w|y) is the empirical probability of observing w in sentences labeled with y. We can then rank the candidate words in decreasing order of r(w,+) and r(w,−). Finally, we select the top 25% from each ranked list as the final lists of pivot words for the positive and the negative sentiments. Some manual inspection shows that most of these words are indeed domain-independent sentiment words.\nNeural Network Model Our framework is general and potentially we can use any neural network model to transform an input sentence to a sentence embedding vector. In this paper, we adopt a CNN-based approach because it has been shown to work well for sentiment classification. Specifically, each word (including the token UNK) is represented by a word embedding vector. Let W ∈ Rd×V denote the lookup table for words, where each column is a d-dimensional embedding vector for a word type. Two separate CNNs are used to process x and g(x), and their mechanisms are the same. For a word xi in each CNN, the embedding vectors inside a window of size n centered at i are concatenated into a new vector, which we refer to as ei ∈ Rnd. A convolution operation is then performed by applying a filter F ∈ Rh×nd on ei to produce a hidden vector hi = m(Fei + b), where b ∈ Rh is a bias vector and m is an elementwise non-linear transformation function. Note that we pad the original sequence in front and at the back to ensure that at each position i we have n vectors to be combined into hi. After the convolution operation is applied to the whole sequence, we obtain H = [h1,h2, . . .], and we apply a max-over-time pooling operator to take the maximum value of each row of H to obtain an overall hidden vector, i.e., z for x and z′ for g(x).\nIt is worth noting that the two neural networks corresponding to fΘ and fΘ′ share the same word embedding lookup table. This lookup table is initialized with word embeddings from word2vec1 and\n1https://code.google.com/p/word2vec/\nis updated during our learning process. Note that the token UNK is initialized as a zero vector and never updated."
  }, {
    "heading": "3.6 Differences from SCL",
    "text": "Although our method is inspired by SCL, there are a number of major differences: (1) Our method is based on neural network models with continuous, dense feature representations and non-linear transformation functions. SCL is based on discrete, sparse feature vectors and linear transformations. (2) Although our pivot word selection is similar to that of SCL, in the end we only use two auxiliary tasks while SCL uses much more pivot prediction tasks. (3) We can directly learn the transformation function f ′Θ that produces the hidden representation, while SCL relies on SVD to learn the projection function. (4) We perform joint learning of the auxiliary tasks and the end task, i.e., sentiment classification, while SCL performs the learning in a sequential manner."
  }, {
    "heading": "4 Experiments",
    "text": ""
  }, {
    "heading": "4.1 Data Sets and Experiment Settings",
    "text": "To evaluate our proposed method, we conduct experiments using five benchmark data sets. The data sets are summarized in Table 1. Movie12 and Movie23 are movie reviews labeled by Pang and Lee (2005) and Socher et al. (2013), respectively. Camera4 are reviews of digital products such as MP3 players and cameras (Hu and Liu, 2004). Laptop and Restaurant5 are laptop and restaurant reviews taken\n2https://www.cs.cornell.edu/people/pabo/ movie-review-data/\n3http://nlp.stanford.edu/sentiment/ 4http://www.cs.uic.edu/˜liub/FBS/\nsentiment-analysis.html 5Note that the original data set is for aspect-level sentiment analysis. We remove sentences with opposite polarities towards different aspects, and use the consistent polarity as the sentencelevel sentiment of each remaining sentence.\nfrom SemEval 2015 Task 12. We consider 18 pairs of data sets where the two data sets come from different domains.6 For neural network-based methods, we randomly pick 200 sentences from the target domain as the development set for parameter tuning, and the rest of the data from the target domain as the test data."
  }, {
    "heading": "4.2 Baselines and Hyperparameters",
    "text": "We consider the following baselines: Naive is a non-domain-adaptive baseline based on bag-of-word representations. SCL is our implementation of the Structural Correspondence Learning method. We set the number of induced features K to 100 and rescale factor α = 5, and we use 1000 pivot words based on our preliminary experiments. mDA is our implementation of marginalized Denoising Auto-encoders (Chen et al., 2012), one of the state-of-the-art domain adaptation methods, which learns a shared hidden representation by reconstructing pivot features from corrupted inputs. Following Yang and Eisenstein (2014), we employ the efficient and effective structured dropout noise strategy without any parameter. The top 500 features are chosen as pivots based on our preliminary experiments. NaiveNN is a non-domain-adaptive baseline based on CNN, as described in Section 3.5. Aux-NN is a simple combination of our auxiliary tasks with NaiveNN, which treats the derived label of two auxiliary tasks as two features and then appends them to the hidden representation learned from CNN, followed by a softmax classifier. SCL-NN is a naive combination of SCL with NaiveNN, which appends the induced representation from SCL to the hidden representation learned from CNN, followed by a softmax classifier. mDA-NN is similar to SCL-NN but uses the hidden representation derived from mDA. Sequential is our proposed method without joint learning, which first learns Θ′ based on Da and then learns Θ and γ based on Ds with fixed Θ′. Joint is our proposed joint learning method, that is, we jointly learn Θ and Θ′.\n6Because Movie1 and Movie2 come from the same domain, we do not take this pair.\nFor Naive, SCL and mDA, we use LibLinear7 to train linear classifiers and use its default hyperparameters. In all the tasks, we use unigrams and bigrams with a frequency of at least 4 as features for classification. For the word embeddings, we set the dimension d to 300. For CNN, we set the window size to 3. Also, the size of the hidden representations z and z′ is set to 100. Following Kim (2014), the non-linear activation function in CNN is Relu, the mini-batch size is 50, the dropout rate α equals 0.5, and the hyperparameter for the l2 norms is set to be 3. For Naive, SCL and mDA, we do not use the 200 sentences in the development set for tuning parameters. Hence, for fair comparison, we also include settings where the 200 sentences are added to the training set. We denote these settings by ++."
  }, {
    "heading": "4.3 Results",
    "text": "In Table 2, we report the results of all the methods. It is easy to see that the performance of Naive is very limited, and the incorporation of 200 reviews in the development set (Naive++) brings in 4.3% of improvement on average. SCL++ and mDA++ can further improve the average accuracy respectively\n7http://www.csie.ntu.edu.tw/cjlin/ liblinear/\nby 0.8% and 1.9%, which verifies the usefulness of these two domain adaptation methods. However, we can easily see that the performance of these domain adaptation methods based on discrete, bag-of-word representations is even much lower than the nondomain-adaptive method on continuous representations (NaiveNN). This confirms that it is useful to develop domain adaptation methods based on embedding vectors and neural network models.\nMoreover, we can find that the performance of simply appending two features from auxiliary tasks to NaiveNN (i.e., Aux-NN) is quite close to that of NaiveNN on most data set pairs, which shows that it is not ideal for domain adaptation. In addition, although the shared hidden representations derived from SCL and mDA are based on traditional bag-of-word representations, SCL-NN and mDANN can still improve the performance of NaiveNN on most data set pairs, which indicates that the derived shared hidden representations by SCL and by mDA can generalize better across domains and are generally useful for domain adaptation.\nFinally, it is easy to see that our method with joint learning outperforms SCL-NN on almost all the data set pairs. And in comparison with mDANN, our method with joint learning can also outper-\nform it on most data set pairs, especially when the size of the labeled data in the source domain is relatively large. Furthermore, we can easily observe that for our method, joint learning generally works better than sequential learning. All these observations show the advantage of our joint learning method.\nIn Table 3, we also show the comparison between mDA-NN and our model under a setting some labeled target data is used. Specifically, we randomly select 100 sentences from the development set and mix them with the training set. We can observe that our method Joint outperforms NaiveNN and mDANN by 1.2% and 0.6%, respectively, which further confirms the effectiveness of our model. But, in comparison with the setting where no target data is available, the average improvement of our method over NaiveNN is relatively small.\nHence, to give a deeper analysis, we further show the comparison of Joint and NaiveNN with respect to the number of labeled target data in Figure 2. Note that for space limitation, we only present the results on MV2→ RT and MV2→ CR. Similar trends have been observed on other data set pairs. As we can see from Figure 2, the difference between the performance of NaiveNN and that of Joint gradually decreases with the increase of the number of labeled\ntarget data. This indicates that our joint model is much more effective when no or small number of labeled target data is available."
  }, {
    "heading": "4.4 Case Study",
    "text": "To obtain a better understanding of our method, we conduct a case study where the source is CR and the target is RT.\nFor each sentiment polarity, we try to extract the most useful trigrams for the final predictions. Recall that our CNN models use a window size of 3, which corresponds to trigrams. By tracing the final prediction scores back through the neural network, we are able to locate the trigrams which have contributed the most through max-pooling. In Table 4, we present the most useful trigrams of each polarity extracted by NaiveNN and by the two components of our sequential and joint method. Sequentialoriginal and Joint-original refer to the CNN corresponding to fΘ while Sequential-auxiliary and Joint-auxiliary refer to the CNN corresponding to fΘ′ , which is related to the auxiliary tasks.\nIn Table 4, we can easily observe that for NaiveNN, the most important trigrams are domainindependent, which contain some general sentiment words like good, great and disappointing. For our sequential model, the most important trigrams captured by Sequential-original are similar to NaiveNN, but due to the removal of the pivot words in each sentence, the most important trigrams extracted by Sequential-auxiliary are domain-specific, including target-specific sentiment words like oily, friendly and target-specific aspect words like flavor, atmosphere. But since aspect words are irrelevant to our sentiment classification\ntask, it might bring in some noise and affect the performance of our sequential model. In contrast to Sequential-auxiliary, Joint-auxiliary is jointly learnt with the sentiment classification task, and it is easy to see that most of its extracted trigrams are target-specific sentiment words. Also, for Jointoriginal, since we share the word embeddings of two components and do not remove any pivot, it is intuitive to see that the extracted trigrams contain both domain-independent and domain-specific sentiment words. These observations agree with our motivations behind the model.\nFinally, we also sample several sentences from the test dataset, i.e., RT, to get a deeper insight of our joint model. Although NaiveNN and Sequential correctly predict sentiments of the following two sentences:"
  }, {
    "heading": "1. “I’ve also been amazed at all the new additions in the past few years: A new Jazz Bar, the most fantastic Dining Garden, the Best Thin Crust Pizzas,",
    "text": "and now a Lasagna Menu which is to die for!”"
  }, {
    "heading": "2. “The have a great cocktail with Citrus Vodka",
    "text": "and lemon and lime juice and mint leaves that is to die for!” Both of them give wrong predictions on another three sentences containing to die for:\n3. “Try their chef’s specials– they are to die for.” 4. “Their tuna tartar appetizer is to die for.”"
  }, {
    "heading": "5. “It’s to die for!”.",
    "text": "However, since to die for co-occurs with some\ngeneral sentiment words like fantastic, best and great in previous two sentences, our joint model can implicitly learn that to die for is highly correlated with the positive sentiment via our auxiliary tasks, and ultimately make correct predictions for the latter three sentences. This further indicates that our joint model can identify more domain-specific sentiment words in comparison with NaiveNN and Sequential, and therefore improve the performance."
  }, {
    "heading": "5 Conclusions",
    "text": "We presented a domain adaptation method for sentiment classification based on sentence embeddings. Our method induces a sentence embedding that works well across domains, based on two auxiliary tasks. We also jointly learn the cross-domain sentence embedding and the sentiment classifier. Experiment results show that our proposed joint method can outperform several highly competitive domain adaptation methods on 18 source-target pairs using five benchmark data sets. Moreover, further analysis confirmed that our method is able to pick up domain-specific sentiment words."
  }, {
    "heading": "Acknowledgment",
    "text": "This research is supported by the Singapore National Research Foundation under its International Research Centre@Singapore Funding Initiative and administered by the IDM Programme Office, Media Development Authority (MDA)."
  }],
  "year": 2016,
  "references": [{
    "title": "Domain adaptation with structural correspondence learning",
    "authors": ["John Blitzer", "Ryan McDonald", "Fernando Pereira."],
    "venue": "Proceedings of the 2006 Conference on Empirical Methods in Natural Language Processing, pages 120–128. Association for Compu-",
    "year": 2006
  }, {
    "title": "Biographies, bollywood, boom-boxes and blenders: Domain adaptation for sentiment classification",
    "authors": ["John Blitzer", "Mark Dredze", "Fernando Pereira."],
    "venue": "Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics, pages 440–447,",
    "year": 2007
  }, {
    "title": "Using multiple sources to construct a sentiment sensitive thesaurus for cross-domain sentiment classification",
    "authors": ["Danushka Bollegala", "David Weir", "John Carroll."],
    "venue": "Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics:",
    "year": 2011
  }, {
    "title": "Unsupervised cross-domain word representation learning",
    "authors": ["Danushka Bollegala", "Takanori Maehara", "Ken-ichi Kawarabayashi."],
    "venue": "Proceedings of the 53rd Annual Meeting of the Association for Computational Linguistics and the 7th International Joint Con-",
    "year": 2015
  }, {
    "title": "Cross-domain sentiment classification using sentiment sensitive embeddings",
    "authors": ["Danushka Bollegala", "Tingting Mu", "John Goulermas."],
    "venue": "IEEE Transactions on Knowledge & Data Engineering, 6(2):398–410.",
    "year": 2016
  }, {
    "title": "Marginalized denoising autoencoders for domain adaptation",
    "authors": ["Minmin Chen", "Zhixiang Eddie Xu", "Kilian Q. Weinberger", "Fei Sha."],
    "venue": "Proceedings of the 29th International Conference on Machine Learning.",
    "year": 2012
  }, {
    "title": "Learning with compositional semantics as structural inference for subsentential sentiment analysis",
    "authors": ["Yejin Choi", "Claire Cardie."],
    "venue": "Proceedings of the Conference on Empirical Methods in Natural Language Processing, pages 793–801. Association for Compu-",
    "year": 2008
  }, {
    "title": "Frustratingly easy domain adaptation",
    "authors": ["Hal Daumé III."],
    "venue": "Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics, pages 256– 263.",
    "year": 2007
  }, {
    "title": "Adaptive recursive neural network for target-dependent twitter sentiment classification",
    "authors": ["Li Dong", "Furu Wei", "Chuanqi Tan", "Duyu Tang", "Ming Zhou", "Ke Xu."],
    "venue": "Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics (Vol-",
    "year": 2014
  }, {
    "title": "Adaptive multi-compositionality for recursive neural models with applications to sentiment analysis",
    "authors": ["Li Dong", "Furu Wei", "Ming Zhou", "Ke Xu."],
    "venue": "Twenty-Eighth AAAI Conference on Artificial Intelligence.",
    "year": 2014
  }, {
    "title": "Online methods for multi-domain learning and adaptation",
    "authors": ["Mark Dredze", "Koby Crammer."],
    "venue": "Proceedings of the Conference on Empirical Methods in Natural Language Processing, pages 689–697.",
    "year": 2008
  }, {
    "title": "Domain adaptation for large-scale sentiment classification: A deep learning approach",
    "authors": ["Xavier Glorot", "Antoine Bordes", "Yoshua Bengio."],
    "venue": "In Proceedings of the Twenty-eight International Conference on Machine Learning.",
    "year": 2011
  }, {
    "title": "Mining and summarizing customer reviews",
    "authors": ["Minqing Hu", "Bing Liu."],
    "venue": "Proceedings of the tenth ACM SIGKDD international conference on Knowledge discovery and data mining, pages 168–177. ACM.",
    "year": 2004
  }, {
    "title": "Instance weighting for domain adaptation in nlp",
    "authors": ["Jing Jiang", "ChengXiang Zhai."],
    "venue": "Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics, pages 264–271.",
    "year": 2007
  }, {
    "title": "Convolutional neural networks for sentence classification",
    "authors": ["Yoon Kim."],
    "venue": "Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 1746–1751. Association for Computational Linguistics, October.",
    "year": 2014
  }, {
    "title": "A framework of feature selection methods for text categorization",
    "authors": ["Shoushan Li", "Rui Xia", "Chengqing Zong", "Chu-Ren Huang."],
    "venue": "Proceedings of the Joint Conference of the 47th Annual Meeting of the ACL and the 4th International Joint Conference on Natural",
    "year": 2009
  }, {
    "title": "Cross-domain co-extraction of sentiment and topic lexicons",
    "authors": ["Fangtao Li", "Sinno Jialin Pan", "Ou Jin", "Qiang Yang", "Xiaoyan Zhu."],
    "venue": "Proceedings of the 50th Annual Meeting of the Association for Computational Linguistics: Long Papers-Volume 1, pages 410–419.",
    "year": 2012
  }, {
    "title": "Dependency tree-based sentiment classification using crfs with hidden variables",
    "authors": ["Tetsuji Nakagawa", "Kentaro Inui", "Sadao Kurohashi."],
    "venue": "Human Language Technologies: The 2010 Annual Conference of the North American Chapter of the Association for Com-",
    "year": 2010
  }, {
    "title": "Cross-domain sentiment classification via spectral feature alignment",
    "authors": ["Sinno Jialin Pan", "Xiaochuan Ni", "Jian-Tao Sun", "Qiang Yang", "Zheng Chen."],
    "venue": "245",
    "year": 2010
  }, {
    "title": "Domain adaptation via transfer component analysis",
    "authors": ["Sinno Jialin Pan", "Ivor W Tsang", "James T Kwok", "Qiang Yang."],
    "venue": "Neural Networks, IEEE Transactions on, 22(2):199–210.",
    "year": 2011
  }, {
    "title": "A sentimental education: Sentiment analysis using subjectivity summarization based on minimum cuts",
    "authors": ["Bo Pang", "Lillian Lee."],
    "venue": "Proceedings of the 42nd annual meeting on Association for Computational Linguistics, page 271. Association for Computational Lin-",
    "year": 2004
  }, {
    "title": "Seeing stars: Exploiting class relationships for sentiment categorization with respect to rating scales",
    "authors": ["Bo Pang", "Lillian Lee."],
    "venue": "Proceedings of the 43rd Annual Meeting on Association for Computational Linguistics, pages 115–124. Association for",
    "year": 2005
  }, {
    "title": "Thumbs up?: sentiment classification using machine learning techniques",
    "authors": ["Bo Pang", "Lillian Lee", "Shivakumar Vaithyanathan."],
    "venue": "Proceedings of the ACL02 conference on Empirical methods in natural language processing-Volume 10, pages 79–86. Associa-",
    "year": 2002
  }, {
    "title": "Do neighbours help?: an exploration of graph-based algorithms for cross-domain sentiment classification",
    "authors": ["Natalia Ponomareva", "Mike Thelwall."],
    "venue": "Proceedings of the 2012 Joint Conference on Empirical Methods in Natural Language Processing and",
    "year": 2012
  }, {
    "title": "Recursive deep models for semantic compositionality over a sentiment treebank",
    "authors": ["Richard Socher", "Alex Perelygin", "Jean Wu", "Jason Chuang", "Christopher D. Manning", "Andrew Ng", "Christopher Potts."],
    "venue": "Proceedings of the 2013 Conference on Empirical Meth-",
    "year": 2013
  }, {
    "title": "Document modeling with gated recurrent neural network for sentiment classification",
    "authors": ["Duyu Tang", "Bing Qin", "Ting Liu."],
    "venue": "Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing, pages 1422–1432, Lisbon, Por-",
    "year": 2015
  }, {
    "title": "Domain adaptation by constraining inter-domain variability of latent feature representation",
    "authors": ["Ivan Titov."],
    "venue": "Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies, pages 62–71.",
    "year": 2011
  }, {
    "title": "Fast easy unsupervised domain adaptation with marginalized structured dropout",
    "authors": ["Yi Yang", "Jacob Eisenstein."],
    "venue": "Proceedings of the 52nd Annual Meeting",
    "year": 2014
  }, {
    "title": "Unsupervised multi-domain adaptation with feature embeddings",
    "authors": ["Yi Yang", "Jacob Eisenstein."],
    "venue": "Proceedings of the North American Chapter of the Association for Computational Linguistics, pages 672– 682.",
    "year": 2015
  }, {
    "title": "A hassle-free unsupervised domain adaptation method using instance similarity features",
    "authors": ["Jianfei Yu", "Jing Jiang."],
    "venue": "Proceedings of the 53rd Annual Meeting of the Association for Computational Linguistics and the 7th International Joint Conference on Nat-",
    "year": 2015
  }],
  "id": "SP:2d38f7aab07d4435b2110602db4138ef20da4cc0",
  "authors": [{
    "name": "Jianfei Yu",
    "affiliations": []
  }, {
    "name": "Jing Jiang",
    "affiliations": []
  }],
  "abstractText": "In this paper, we study cross-domain sentiment classification with neural network architectures. We borrow the idea from Structural Correspondence Learning and use two auxiliary tasks to help induce a sentence embedding that supposedly works well across domains for sentiment classification. We also propose to jointly learn this sentence embedding together with the sentiment classifier itself. Experiment results demonstrate that our proposed joint model outperforms several state-of-theart methods on five benchmark datasets.",
  "title": "Learning Sentence Embeddings with Auxiliary Tasks for Cross-Domain Sentiment Classification"
}