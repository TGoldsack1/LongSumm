{
  "sections": [{
    "text": "Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (Long Papers), pages 142–151 Melbourne, Australia, July 15 - 20, 2018. c©2018 Association for Computational Linguistics\n142"
  }, {
    "heading": "1 Introduction",
    "text": "Automatic summarization aims to shorten a text document while maintaining the salient information of the original text. The practical need for such systems is growing with the rapid and continuous increase in textual information sources in multiple domains.\nSummarization tools can be broadly classified into two categories: extractive and abstractive. Extractive summarization selects parts of the input document to create its summary while abstractive summarization generates summaries that may have words or phrases not present in the input document. Abstractive summarization is clearly harder as methods have to address factual and grammatical errors that may be introduced and problems in utilizing external knowledge sources to obtain paraphrasing or generalization. Extractive summarizers obviate the need to\nsolve these problems by selecting the most salient textual units (usually sentences) from the input documents. As a result, they generate summaries that are grammatically and semantically more accurate than those from abstractive methods. While they may have problems like incorrect or unclear referring expressions or lack of coherence, they are computationally simpler and more efficient to generate. Indeed, state-of-the-art extractive summarizers are comparable or often better in performance to competitive abstractive summarizers (see (Nallapati et al., 2017) for a recent empirical comparison).\nClassical approaches to extractive summarization have relied on human-engineered features from the text that are used to score sentences in the input document and select the highestscoring sentences. These include graph or constraint-optimization based approaches as well as classifier-based methods. A review of these approaches can be found in Nenkova et al. (2011). Some of these methods generate summaries from multiple documents. In this paper, we focus on single document summarization.\nModern approaches that show the best performance are based on end-to-end deep learning models that do not require human-crafted features. Neural models have tremendously improved performance in several difficult problems in NLP such as machine translation (Chen et al., 2017) and question-answering (Hao et al., 2017). Deep models with thousands of parameters require large, labeled datasets and for summarization this hurdle of labeled data was surmounted by Cheng and Lapata (2016), through the creation of a labeled dataset of news stories from CNN and Daily Mail consisting of around 280,000 documents and human-generated summaries.\nRecurrent neural networks with encoderdecoder architecture (Sutskever et al., 2014) have\nbeen successful in a variety of NLP tasks where an encoder obtains representations of input sequences and a decoder generates target sequences. Attention mechanisms (Bahdanau et al., 2015) are used to model the effects of different loci in the input sequence during decoding. Pointer networks (Vinyals et al., 2015) use this mechanism to obtain target sequences wherein each decoding step is used to point to elements of the input sequence. This pointing ability has been effectively utilized by state-of-the-art extractive and abstractive summarizers (Cheng and Lapata, 2016; Nallapati et al., 2016; See et al., 2017).\nIn this work, we design SWAP-NET a new deep learning model for extractive summarization. Similar to previous models, we use an encoderdecoder architecture with attention mechanism to select important sentences. Our key contribution is to design an architecture that utilizes key words in the selection process. Salient sentences of a document, that are useful in summaries, often contain key words and, to our knowledge, none of the previous models have explicitly modeled this interaction. We model this interaction through a two-level encoder and decoder, one for words and the other for sentences. An attention-based mechanism, similar to that of Pointer Networks, is used to learn important words and sentences from labeled data. A switch mechanism is used to select between words and sentences during decoding and the final summary is generated using a combination of selected sentences and words. We demonstrate the efficacy of our model on the CNN/Daily Mail corpus where it outperforms state-of-the-art extractive summarizers. Our experiments also suggest that the semantic redundancy in SWAPNET generated summaries is comparable to that of human-generated summaries."
  }, {
    "heading": "2 Problem Formulation",
    "text": "Let D denote an input document, comprising of a sequence of N sentences: s1, . . . , sN . Ignoring sentence boundaries, let w1, . . . , wn be the sequence of n words in document D. An extractive summary aims to obtain a subset of the input sentences that forms a salient summary.\nWe use the interaction between words and sentences in a document to predict important words and sentences. Let the target sequence of indices of important words and sentences be V = v1, . . . , vm, where each index vj can point to ei-\nther a sentence or a word in an input document. We design a supervised sequence-to-sequence recurrent neural network model, SWAP-NET, that uses these target sequences (of sentences and words) to learn salient sentences and key words. Our objective is to find SWAP-NET model parameters M that maximize the probability p(V |M,D) = ∏ j p(vj |v1, . . . , vj−1,M,D) =∏\nj p(vj |v<j ,M,D). We omit M in the following to simplify notation. SWAP-NET predicts both key words and salient sentences, that are subsequently used for extractive summary generation."
  }, {
    "heading": "3 Background",
    "text": "We briefly describe Pointer Networks (Vinyals et al., 2015). Our approach, detailed in the following sections, uses a similar attention mechanism.\nGiven a sequence of n vectors X = x1, ....xn and a sequence of indices R = r1, ....rm, each between 1 and n, the Pointer Network is an encoder-decoder architecture trained to maximize p(R|X; θ) = ∏m j=1 pθ(rj |r1, ....rj−1,X; θ), where θ denotes the model parameters. Let the encoder and decoder hidden states be (e1, ...., en) and (d1, ...., dm) respectively. The attention vector at each output step j is computed as follows:\nuji = v T tanh(Weei +Wddj), i ∈ (1, . . . , n)\nαji = softmax(u j i ), i ∈ (1, . . . , n)\nThe softmax normalizes vector uj to be an attention mask over inputs. In a pointer network, the same attention mechanism is used to select one of the n input vectors with the highest probability, at each decoding step, thus effectively pointing to an input:\np(rj |r1, ....rj−1,X) = softmax(uj)\nHere, v,Wd, and We are learnable parameters of the model."
  }, {
    "heading": "4 SWAP-NET",
    "text": "We use an encoder-decoder architecture with an attention mechanism similar to that of Pointer Networks. To model the interaction between words and sentences in a document we use two encoders and decoders, one at the word level and the other at the sentence level. The sentence-level decoder learns to point to important sentences while the\nword-level decoder learns to point to important words. A switch mechanism is trained to select either a word or a sentence at each decoding step. The final summary is created using the output words and sentences. We now describe the details of the architecture."
  }, {
    "heading": "4.1 Encoder",
    "text": "We use two encoders: a bi-directional LSTM at the word level and a LSTM at the sentence level. Each word wi is represented by a K-dimensional embedding (e.g., via word2vec), denoted by xi. The word embedding xi is encoded as ei using bi-directional LSTM for i = 1, . . . , n. The vector output of BiLSTM at the end of a sentence is used to represent that entire sentence, which is further encoded by the sentence-level LSTM as Ek = LSTM(ekl , Ek−1), where k\nl is the index of the last word in the kth sentence in D and Ek is the hidden state at the kth step of LSTM, for k = 1, . . . , N . See figure 1."
  }, {
    "heading": "4.2 Decoder",
    "text": "We use two decoders – a sentence-level and a word-level decoder, that are both LSTMs, with each decoder pointing to sentences and words re-\nspectively (similar to a pointer network). Thus, we can consider the output of each decoder step to be an index in the input sequence to the encoder. Let m be the number of steps in each decoder. Let T1, . . . , Tm be the sequence of indices generated by the sentence-level decoder, where each index Tj ∈ {1, . . . , N}; and let t1, . . . , tm be the sequence of indices generated by the word-level decoder, where each index tj ∈ {1, . . . , n}."
  }, {
    "heading": "4.3 Network Details",
    "text": "At the jth decoding step, we have to select a sentence or a word which is done through a binary switch Qj that has two states Qj = 0 and Qj = 1 to denote word and sentence selection respectively. So, we first determine the switch probability p(Qj |v<j , D). Let αskj denote the probability of selecting the kth input sentence at the jth decoding step of sentence decoder:\nαskj = p(Tj = k|v<j , Qj = 1, D),\nand let αwij denote the probability of selecting the ith input word at the jth decoding step of word decoder:\nαwij = p(tj = i|v<j , Qj = 0, D),\nboth conditional on the corresponding switch selection. We set vj based on the probability values:\nvj =\n{ k = argmaxk p s kj if maxk p s kj > maxi p w ij\ni = argmaxi p w ij if maxi p w ij > maxk p s kj\npskj = α s kjp(Qj = 1|v<j , D),\npwij = α w ijp(Qj = 0|v<j , D).\nThese probabilities are obtained through the attention weight vectors at the word and sentence levels and the switch probabilities:\nαwij = softmax(v T t φ(whhj + wtei)),\nαskj = softmax(V T T φ(WHHj +WTEk)).\nParameters vt, wh, wt, VT ,WH and WT are trainable parameters. Parameters hj and Hj are the hidden vectors at the jth step of the wordlevel and sentence-level decoder respectively defined as:\nhj = LSTM(hj−1, aj−1, φ(Aj−1)) (1)\nHj = LSTM(Hj−1, Aj−1, φ(aj−1)) (2)\nwhere aj = ∑n i=0 α w ijei, Aj = ∑N k=0 α s kjEk. The non-linear transformation, φ (we choose tanh), is used to connect the word-level encodings to the sentence decoder and the sentence-level encodings to the word decoder. Specifically, the word-level decoder updates its state by considering a sum of sentence encodings, weighted by the attentions from the previous state and mutatis mutandis for the sentence-level decoder.\nThe switch probability p(Qj |v<j , D) at the jth decoding step is given by:\np(Qj = 1|v<j , D) = σ(wTQ(Hj−1, Aj−1, φ(hj−1, aj−1)))\np(Qj = 0|v<j , D) = 1− p(Qj = 1|v<j , D)\nwhere wQ is a trainable parameter and σ denotes the sigmoid function and φ is the chosen nonlinear transformation (tanh).\nDuring training the loss function lj at jth step is set to lj = − log(pskjqsj + pwijqwj ) − log p(Qj |v<j , D). Note that at each decoding step, switch is either qwj = 1, q s j = 0 if the j th output is a word or qwj = 0, q s j = 1 if the j\nth output is a sentence. The switch probability is also considered in the loss function."
  }, {
    "heading": "4.4 Summary Generation",
    "text": "Given a document whose summary is to be generated, its sentences and words are given as input to the trained encoder. At the jth decoding step, either a sentence or a word is chosen based on the probability values αskj and α w ij and the switch probability p(Qj |v<j , D). We assign importance scores to the selected sentences based on their probability values during decoding as well as the probabilities of the selected words that are present in the selected sentences. Thus sentences with words selected by the decoder are given higher importance. Let the kth input sentence sk be selected at the jth decoding step and ith input word wi be selected at the lth decoding step. Then the importance of sk is defined as\nI(sk) = α s kj + λ ∑ wi∈sk αwil (3)\nIn our experiments we choose λ = 1. The final summary consists of three sentences with the highest importance scores."
  }, {
    "heading": "5 Related Work",
    "text": "Traditional approaches to extractive summarization rely on human-engineered features based on, for example, part of speech (Erkan and Radev, 2004) and term frequency (Nenkova et al., 2006). Sentences in the input document are scored using these features, ranked and then selected for the final summary. Methods used for extractive summarization include graph-based approaches (Mihalcea, 2005) and Integer Linear Programming (Gillick and Favre, 2009). There are many classifier-based approaches that select sentences for the extractive summary using methods such as Conditional Random Fields (Shen et al., 2007) and Hidden Markov models (Conroy and O’leary, 2001). A review of these classical approaches can be found in Nenkova et al. (2011).\nEnd-to-end deep learning based neural models that can effectively learn from text data, without human-crafted features, have witnessed rapid development, resulting in improved performance in multiple areas such as machine translation (Chen et al., 2017) and question-answering (Hao et al., 2017), to name a few. Large labelled corpora based on news stories from CNN and Daily Mail, with human generated summaries have become available (Cheng and Lapata, 2016), that have\nspurred the use of deep learning models in summarization. Recurrent neural network based architectures have been designed for both extractive (Cheng and Lapata, 2016; Nallapati et al., 2017) and abstractive (See et al., 2017; Tan et al., 2017) summarization problems. Among these, the work of Cheng and Lapata (2016) and Nallapati et al. (2017) are closest to our work on extractive singledocument summarization.\nAn encoder-decoder architecture with an attention mechanism similar to that of a pointer network is used by Cheng and Lapata (2016). Their hierarchical encoder uses a CNN at the word level leading to sentence representations that are used in an RNN to obtain document representations. They use a hierarchical attention model where the first level decoder predicts salient sentences used for an extractive summary and based on this output, the second step predicts keywords which are used for abstractive summarization. Thus they do not use key words for extractive summarization and for abstractive summarization they generate key words based on sentences predicted independently of key words. SWAP-NET, in contrast, is simpler using only two-level RNNs for word and sentence level representations in both the encoder and decoder. In our model we predict both words and sentences in such a way that their attentions interact with each other and generate extractive summaries considering both the attentions. By modeling the interaction between these key words and important sentences in our decoder architecture, we are able to extract sentences that are closer to the gold summaries.\nSummaRuNNer, the method developed by Nallapati et al. (2017) is not similar to our method in its architecture but only in the aim of extractive summary generation. It does not use an encoderdecoder architecture; instead it is an RNN based binary classifier that decides whether or not to include a sentence in the summary. The RNN is multi-layered representing inputs, words, sentences and the final sentence labels. The decision of selecting a sentence at each step of the RNN is based on the content of the sentence, salience in the document, novelty with respect to previously selected sentences and other positional features. Their approach is considerably simpler than that of Cheng and Lapata (2016) but obtains summaries closer to the gold summaries, and additionally, facilitates interpretable visualization and\ntraining from abstractive summaries. Their experiments show improved performance over both abstractive and extractive summarizers from several previous models (Nallapati et al., 2017).\nWe note that several elements of our architecture have been introduced and used in earlier work. Pointer networks (Vinyals et al., 2015) used the attention mechanism of (Bahdanau et al., 2015) to solve combinatorial optimization problems. They have also been used to point to sentences in extractive (Cheng and Lapata, 2016) and abstractive (Nallapati et al., 2016; See et al., 2017) summarizers. The switch mechanism was introduced to incorporate rare or out-of-vocabulary words (Gulcehre et al., 2016) and are used in several summarizers (e.g. (Nallapati et al., 2016)). However, we use it to select between word and sentence level decoders in our model.\nThe importance of all the three interactions: (i) sentence-sentence, (ii) word-word and (iii) sentence-word, for summarization, have been studied by Wan et al. (2007) using graph-based approaches. In particular, they show that methods that account for saliency using both the following considerations perform better than methods that consider either one of them alone, and SWAP-NET is based on the same principles.\n• A sentence should be salient if it is heavily linked with other salient sentences, and a word should be salient if it is heavily linked with other salient words.\n• A sentence should be salient if it contains many salient words, and a word should be salient if it appears in many salient sentences."
  }, {
    "heading": "6 Data and Experiments",
    "text": ""
  }, {
    "heading": "6.1 Experimental Settings",
    "text": "In our experiments the maximum number of words per document is limited to 800, and the maximum number of sentences per document to 50 (padding is used to maintain the length of word sequences). We also use the symbols <GO> and <EOS> to indicate start and end of prediction by decoders. The total vocabulary size is 150,000 words.\nWe use word embeddings of dimension 100 pretrained using word2vec (Mikolov et al., 2013) on the training dataset. We fix the LSTM hidden state size at 200. We use a batch size of 16 and the ADAM optimizer (Kingma and Ba, 2015) with parameters: learning rate = 0.001, β1 = 0.9, β2 =\n0.999 to train SWAP-NET. We employ gradient clipping to regularize our model and an early stopping criterion based on the validation loss.\nDuring training we find that SWAP-NET learns to predict important sentences faster than to predict words. To speed up learning of word probabilities, we add the term− logαwij to our loss function lj in the final iterations of training. It is possible to get the same sentence or word in multiple (usually consecutive) decoding steps. In that case, in Eq. 3 we consider the maximum value of alpha obtained across these steps and calculate maximum scores of distinct sentences and words.\nWe select 3 top scoring sentences for the summary, as there are 3.11 sentences on average in the gold summary of the training set (similar to settings used by others, e.g., (Narayan et al., 2017))."
  }, {
    "heading": "6.2 Baselines",
    "text": "Two state-of-the-art methods for extractive summarization are SummaRuNNer (Nallapati et al., 2017) and NN, the neural summarizer of Cheng and Lapata (2016). SummaRuNNer can also provide extractive summaries while being trained abstractively (Nallapati et al., 2017); we denote this method by SummaRuNNer-abs. In addition, we compare our method with the Lead-3 summary which consists of the first three sentences from each document. We also compare our method with an abstractive summarizer that uses a similar attention-based encoder-decoder architecture (Nallapati et al., 2016), denoted by ABS."
  }, {
    "heading": "6.3 Benchmark Datasets",
    "text": "For our experiments, we use the CNN/DailyMail corpus (Hermann et al., 2015). We use the anonymized version of this dataset, from Cheng and Lapata (2016), which has labels for important sentences, that are used for training. To obtain labels for words, we extract keywords from each gold summary using RAKE, an unsupervised keyword extraction method (Rose et al., 2010). These keywords are used to label words in the corresponding input document during training. We replace numerical values in the documents by zeros to limit the vocabulary size.\nWe have 193,986 training documents, 12,147 validation documents and 10,346 test documents from the DailyMail corpus and 83,568 training documents, 1,220 validation documents and 1,093 test documents from CNN subset with labels for sentences and words."
  }, {
    "heading": "6.4 Evaluation Metrics",
    "text": "We use the ROUGE toolkit (Lin and Hovy, 2003) for evaluation of the generated summaries in comparison to the gold summaries. We use three variants of this metric: ROUGE-1 (R1), ROUGE-2 (R2) and ROUGE-L (RL) that are computed by matching unigrams, bigrams and longest common subsequences respectively between the two summaries. To compare with (Cheng and Lapata, 2016) and (Nallapati et al., 2017) we use limited length ROUGE recall at 75 and 275 bytes for the Daily-Mail test set, and full length ROUGE-F1 score, as reported by them."
  }, {
    "heading": "6.5 Results on Benchmark Datasets",
    "text": "Performance on Daily Mail Data\nTable 1 shows the performance of SWAP-NET, state-of-the-art baselines NN and SummaRuNNer and other baselines, using ROUGE recall with summary length of 75 bytes, on the entire Daily Mail test set. The performance of SWAP-NET is comparable to that of SummaRuNNer and better than NN and other baselines. Table 2 compares the same algorithms using ROUGE recall with summary length of 275 bytes. SWAP-NET outperforms both state-of-the-art summarizers SummaRuNNer as well as NN.\nPerformance on CNN/DailyMail Data SWAP-NET has the best performance on the combined CNN and Daily Mail corpus, outperforming\nthe previous best reported F-score by SummaRuNNer, as seen in table 3, with a consistent improvement of over 2 ROUGE points in all three metrics."
  }, {
    "heading": "6.6 Discussion",
    "text": "SWAP-NET outperforms state-of-the-art extractive summarizers SummaRuNNer (Nallapati et al., 2017) and NN (Cheng and Lapata, 2016) on benchmark datasets. Our model is similar, although simpler, than that of NN and the main difference between SWAP-NET and these baselines is its explicit modeling of the interaction between key words and salient sentences.\nAutomatic keyword extraction has been studied extensively (Hasan and Ng, 2014). We use a popular and well tested method, RAKE (Rose et al., 2010) to obtain key words in the training documents. A disadvantage with such methods is that they do not guarantee representation, via extracted keywords, of all the topics in the text (Hasan and Ng, 2014). So, if RAKE key words are directly applied to the input test document (without using word decoder trained on RAKE words, obtained from gold summary as done in SWAP-NET), then there is a possibility of missing sentences from the missed topics. So, we train SWAP-NET to predict key words and also model their interactions with sentences.\nWe investigate the importance of modeling this interaction and the role of key words in the final summary. Table 4 shows statistics that reflect the importance of key words in extractive summaries. Key word coverage measures the proportion of key\nwords from those in the gold summary present in the generated summary. SWAP-NET obtains nearly 74% of the key words. In comparison Lead3 has only about 62% of the key words from the gold summary.\nSentences with key words measures the proportion of sentences containing at least one key word. It is not surprising that in SWAP-NET summaries 98% of the sentences, on average, contain at least one key word: this is by design of SWAP-NET. However, note that Lead-3 which has poorer performance in all the benchmark datasets has much fewer sentences with key words. This highlights the importance of key words in finding salient sentences for extractive summaries.\nWe also find the SWAP-NET obtains summaries that have less semantic redundancy. Table 6 shows the average distance between pairs of sentences from the gold summary, and summaries generated from SWAP-NET and Lead-3. Distances are measured using cosine distance of paragraph vectors of each sentence (Le and Mikolov, 2014) from randomly selected 500 documents of the Daily Mail test set. Paragraph vectors have been found to be effective semantic representations of sentences (Le and Mikolov, 2014) and experiments in (Dai et al., 2015) also show that paragraph vectors can be effectively used to measure semantic similarity using cosine distance. For training we use GENSIM (Řehůřek and Sojka, 2010) with embedding size 200 and initial learning rate 0.025. The model is trained on 500 documents from DailyMail dataset for 10 epochs and learning rate is decreased by 0.002 at each epoch.\nThe average pair-wise distance of SWAP-NET is very close to that of the gold summary, both\nnearly 0.8. In contrast, the average pairwise distance in Lead-3 summaries is 0.553 indicating higher redundancy. This highly desirable feature of SWAP-NET is likely due to use of of key words, that is affecting the choice of sentences in the final summary.\nTable 5 shows a sample gold summary from the Daily Mail dataset and the generated summary from SWAP-NET and, for comparison, from Lead-3. We observe the presence of key words in all the overlapping segments of text with the gold summary indicating the importance of key words in finding salient sentences. Modeling this interaction, we believe, is the reason for the superior performance of SWAP-NET in our experiments.\nAn implementation of SWAP-NET and all the generated summaries from the test sets are available online in a github repository1."
  }, {
    "heading": "7 Conclusion",
    "text": "We present SWAP-NET, a neural sequence-tosequence model for extractive summarization that outperforms state-of-the-art extractive summarizers SummaRuNNer (Nallapati et al., 2017) and NN (Cheng and Lapata, 2016) on large scale benchmark datasets. The architecture of SWAPNET is simpler than that of NN but due to its effective modeling of interaction between salient sentences and key words in a document, SWAPNET achieves superior performance. SWAP-NET models this interaction using a new two-level pointer network based architecture with a switching mechanism. Our experiments also suggest that modeling sentence-keyword interaction has the desirable property of less semantic redundancy in summaries generated by SWAP-NET."
  }, {
    "heading": "8 Acknowledgment",
    "text": "The authors thank the ACL reviewers for their valuable comments. Vaibhav Rajan acknowledges the support from Singapore Ministry of Education Academic Research Fund Tier 1 towards funding this research."
  }],
  "year": 2018,
  "references": [{
    "title": "Neural machine translation by jointly learning to align and translate",
    "authors": ["Dzmitry Bahdanau", "Kyunghyun Cho", "Yoshua Bengio."],
    "venue": "International Conference on Learning Representations. 1https://github.com/aishj10/swap-net",
    "year": 2015
  }, {
    "title": "Improved neural machine translation with a syntax-aware encoder and decoder",
    "authors": ["Huadong Chen", "Shujian Huang", "David Chiang", "Jiajun Chen."],
    "venue": "Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics.",
    "year": 2017
  }, {
    "title": "Neural summarization by extracting sentences and words",
    "authors": ["Jianpeng Cheng", "Mirella Lapata."],
    "venue": "Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics.",
    "year": 2016
  }, {
    "title": "Text summarization via hidden markov models",
    "authors": ["John M Conroy", "Dianne P O’leary"],
    "venue": "In Proceedings of the 24th annual international ACM SIGIR conference on research and development in information retrieval,",
    "year": 2001
  }, {
    "title": "Document embedding with paragraph vectors",
    "authors": ["Andrew M Dai", "Christopher Olah", "Quoc V Le."],
    "venue": "arXiv preprint arXiv:1507.07998.",
    "year": 2015
  }, {
    "title": "Lexrank: Graph-based lexical centrality as salience in text summarization",
    "authors": ["Günes Erkan", "Dragomir R Radev."],
    "venue": "Journal of Artificial Intelligence Research, 22:457–479.",
    "year": 2004
  }, {
    "title": "A scalable global model for summarization",
    "authors": ["Dan Gillick", "Benoit Favre."],
    "venue": "Proceedings of the Workshop on Integer Linear Programming for Natural Langauge Processing, Association for Computational Linguistics, pages 10–18.",
    "year": 2009
  }, {
    "title": "Pointing the unknown words",
    "authors": ["Caglar Gulcehre", "Sungjin Ahn", "Ramesh Nallapati", "Bowen Zhou", "Yoshua Bengio."],
    "venue": "Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics, pages 140–149.",
    "year": 2016
  }, {
    "title": "An endto-end model for question answering over knowledge base with cross-attention combining global knowledge",
    "authors": ["Yanchao Hao", "Yuanzhe Zhang", "Kang Liu", "Shizhu He", "Zhanyi Liu", "Hua Wu", "Jun Zhao."],
    "venue": "Proceedings of the 55th Annual",
    "year": 2017
  }, {
    "title": "Automatic keyphrase extraction: A survey of the state of the art",
    "authors": ["Kazi Saidul Hasan", "Vincent Ng."],
    "venue": "Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics, volume 1, pages 1262–1273.",
    "year": 2014
  }, {
    "title": "Teaching machines to read and comprehend",
    "authors": ["Karl Moritz Hermann", "Tomas Kocisky", "Edward Grefenstette", "Lasse Espeholt", "Will Kay", "Mustafa Suleyman", "Phil Blunsom."],
    "venue": "Advances in Neural Information Processing Systems, pages 1693–",
    "year": 2015
  }, {
    "title": "Adam: A method for stochastic optimization",
    "authors": ["Diederik P Kingma", "Jimmy Ba."],
    "venue": "Proceedings of the International Conference on Learning Representations.",
    "year": 2015
  }, {
    "title": "Distributed representations of sentences and documents",
    "authors": ["Quoc Le", "Tomas Mikolov."],
    "venue": "Proceedings of the International Conference on Machine Learning, pages 1188–1196.",
    "year": 2014
  }, {
    "title": "Automatic evaluation of summaries using n-gram cooccurrence statistics",
    "authors": ["Chin-Yew Lin", "Eduard Hovy."],
    "venue": "Proceedings of the North American Chapter of the Association for Computational Linguistics on Human Language Technology-",
    "year": 2003
  }, {
    "title": "Language independent extractive summarization",
    "authors": ["Rada Mihalcea."],
    "venue": "Proceedings of the ACL 2005 on Interactive poster and demonstration sessions, pages 49–52.",
    "year": 2005
  }, {
    "title": "Distributed representations of words and phrases and their compositionality",
    "authors": ["Tomas Mikolov", "Ilya Sutskever", "Kai Chen", "Greg S Corrado", "Jeff Dean."],
    "venue": "Advances in Neural Information Processing Systems, pages 3111–3119.",
    "year": 2013
  }, {
    "title": "Summarunner: A recurrent neural network based sequence model for extractive summarization of documents",
    "authors": ["Ramesh Nallapati", "Feifei Zhai", "Bowen Zhou."],
    "venue": "Proceedings of Thirty-First AAAI Conference on Artificial Intelligence (AAAI-17), pages",
    "year": 2017
  }, {
    "title": "Abstractive text summarization using sequence-to-sequence RNNs and beyond",
    "authors": ["Ramesh Nallapati", "Bowen Zhou", "Caglar Gulcehre", "Bing Xiang"],
    "venue": "In Proceedings of the 20th SIGNLL Conference on Computational Natural Language Learning",
    "year": 2016
  }, {
    "title": "Neural extractive summarization with side information",
    "authors": ["Shashi Narayan", "Nikos Papasarantopoulos", "Shay B Cohen", "Mirella Lapata."],
    "venue": "arXiv preprint arXiv:1704.04530.",
    "year": 2017
  }, {
    "title": "A compositional context sensitive multi-document summarizer: exploring the factors that influence summarization",
    "authors": ["Ani Nenkova", "Lucy Vanderwende", "Kathleen McKeown."],
    "venue": "Proceedings of the 29th Annual International ACM SIGIR Conference",
    "year": 2006
  }, {
    "title": "Software Framework for Topic Modelling with Large Corpora",
    "authors": ["Radim Řehůřek", "Petr Sojka."],
    "venue": "Proceedings of the LREC 2010 Workshop on New Challenges for NLP Frameworks, pages 45–50.",
    "year": 2010
  }, {
    "title": "Automatic keyword extraction from individual documents",
    "authors": ["Stuart Rose", "Dave Engel", "Nick Cramer", "Wendy Cowley."],
    "venue": "Text Mining: Applications and Theory, pages 1–20.",
    "year": 2010
  }, {
    "title": "Get to the point: Summarization with pointergenerator networks",
    "authors": ["Abigail See", "Peter J Liu", "Christopher D Manning."],
    "venue": "Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics.",
    "year": 2017
  }, {
    "title": "Document summarization using conditional random fields",
    "authors": ["Dou Shen", "Jian-Tao Sun", "Hua Li", "Qiang Yang", "Zheng Chen."],
    "venue": "Proceedings of International Joint Conferences on Artificial Intelligence, volume 7, pages 2862–2867.",
    "year": 2007
  }, {
    "title": "Sequence to sequence learning with neural networks",
    "authors": ["Ilya Sutskever", "Oriol Vinyals", "Quoc V Le."],
    "venue": "Advances in Neural Information Processing Systems, pages 3104–3112.",
    "year": 2014
  }, {
    "title": "Abstractive document summarization with a graphbased attentional neural model",
    "authors": ["Jiwei Tan", "Xiaojun Wan", "Jianguo Xiao."],
    "venue": "Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics, volume 1, pages 1171–1181.",
    "year": 2017
  }, {
    "title": "Pointer networks",
    "authors": ["Oriol Vinyals", "Meire Fortunato", "Navdeep Jaitly."],
    "venue": "Advances in Neural Information Processing Systems, pages 2692–2700.",
    "year": 2015
  }, {
    "title": "Towards an iterative reinforcement approach for simultaneous document summarization and keyword extraction",
    "authors": ["Xiaojun Wan", "Jianwu Yang", "Jianguo Xiao."],
    "venue": "Proceedings of the 45th Annual Meeting of the Association for Computational Linguis-",
    "year": 2007
  }],
  "id": "SP:f5f82b5e42768a25246b0f7ba4c59f6c522fc892",
  "authors": [{
    "name": "Aishwarya Jadhav",
    "affiliations": []
  }, {
    "name": "Vaibhav Rajan",
    "affiliations": []
  }],
  "abstractText": "We present a new neural sequence-tosequence model for extractive summarization called SWAP-NET (Sentences and Words from Alternating Pointer Networks). Extractive summaries comprising a salient subset of input sentences, often also contain important key words. Guided by this principle, we design SWAP-NET that models the interaction of key words and salient sentences using a new twolevel pointer network based architecture. SWAP-NET identifies both salient sentences and key words in an input document, and then combines them to form the extractive summary. Experiments on large scale benchmark corpora demonstrate the efficacy of SWAP-NET that outperforms state-of-the-art extractive summarizers.",
  "title": "Extractive Summarization with SWAP-NET: Sentences and Words from Alternating Pointer Networks"
}