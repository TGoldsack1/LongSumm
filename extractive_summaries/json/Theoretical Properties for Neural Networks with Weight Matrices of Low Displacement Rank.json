{
  "sections": [{
    "heading": "1. Introduction",
    "text": "Neural networks, especially large-scale deep neural networks, have made remarkable success in various applications such as computer vision, natural language processing, etc. (Krizhevsky et al., 2012)(Sutskever et al., 2014). However, large-scale neural networks are both memoryintensive and computation-intensive, thereby posing severe challenges when deploying those large-scale neural network models on memory-constrained and energyconstrained embedded devices. To overcome these limitations, many studies and approaches, such as connection pruning (Han et al., 2015)(Gong et al., 2014), low rank approximation (Denton et al., 2014)(Jaderberg et al., 2014), sparsity regularization (Wen et al., 2016)(Liu et al., 2015)\nCo-first authors: Liang Zhao and Siyu Liao. 1The City University of New York, New York, New York, USA 2Syracuse University, Syracuse, New York, USA. Correspondence to: Bo Yuan <byuan@ccny.cuny.edu>.\nProceedings of the 34 th International Conference on Machine Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017 by the author(s).\netc., have been proposed to reduce the model size of largescale (deep) neural networks.\nLDR Construction and LDR Neural Networks: Among those efforts, low displacement rank (LDR) construction is a type of structure-imposing technique for network model reduction and computational complexity reduction. By regularizing the weight matrices of neural networks using the format of LDR matrices (when weight matrices are square) or the composition of multiple LDR matrices (when weight matrices are non-square), a strong structure is naturally imposed to the construction of neural networks. Since an LDR matrix typically requires O(n) independent parameters and exhibits fast matrix operation algorithms (Pan, 2001), an immense space for network model and computational complexity reduction can be enabled. Pioneering work in this direction (Cheng et al., 2015)(Sindhwani et al., 2015) applied special types of LDR matrices (structured matrices), such as circulant matrices and Toeplitz matrices, for weight representation. Other types of LDR matrices exist such as Cauchy matrices, Vandermonde matrices, etc., as shown in Figure 1.\nBenefits of LDR Neural Networks: Compared with other types of network compression approaches, the LDR construction shows several unique advantages. First, unlike heuristic weight-pruning methods (Han et al., 2015)(Gong et al., 2014) that produce irregular pruned networks, the LDR construction approach always guarantees the strong structure of the trained network, thereby avoiding the stor-\nage space and computation time overhead incurred by the complicated indexing process. Second, as a “train from scratch” technique, LDR construction does not need extra re-training, and hence eliminating the additional complexity to the training process. Third, the reduction in space complexity and computational complexity by using the structured weight matrices are significant. Different from other network compression approaches that can only provide a heuristic compression factor, the LDR construction can enable the model reduction and computational complexity reduction in Big-O complexity: The storage requirement is reduced from O(n2) to O(n), and the computational complexity can be reduced from O(n2) to O(n log n) or O(n log2 n) because of the existence of fast matrix-vector multiplication algorithm (Pan, 2001)(Bini et al., 1996) for LDR matrices. For example, when applying structured matrices to the fully-connected layers of AlexNet using ImageNet dataset (Deng et al., 2009), the storage requirement can be reduced by more than 4,000X while incurring negligible degradation in overall accuracy (Cheng et al., 2015).\nMotivation of This Work: Because of its inherent structure-imposing characteristic, convenient re-trainingfree training process and unique capability of simultaneous Big-O complexity reduction in storage and computation, LDR construction is a promising approach to achieve high compression ratio and high speedup for a broad category of network models. However, since imposing the structure to weight matrices results in substantial reduction of weight storage from O(n2) to O(n), cautious researchers need to know whether the neural networks with LDR construction, referred to as LDR neural networks, will consistently yield the similar accuracy as compared with the uncompressed networks. Although (Cheng et al., 2015)(Sindhwani et al., 2015) have already shown that using LDR construction still results the same accuracy or minor degradation on various datasets, such as ImageNet (Deng et al., 2009), CIFAR (Krizhevsky & Hinton, 2009) etc., the theoretical analysis, which can provide the mathematically solid proofs that the LDR neural networks can converge to the same “effectiveness” as the uncompressed neural networks, is still very necessary in order to promote the wide application of LDR neural networks for emerging and larger-scale applications.\nTechnical Preview and Contributions: To address the above necessity, in this paper we study and provide a solid theoretical foundation of LDR neural networks on the ability to approximate an arbitrary continuous function, the error bound for function approximation, applications on shallow and deep neural networks, etc. More specifically, the main contributions of this paper include:\n• We prove the universal approximation property for LDR neural networks, which states that the LDR neu-\nral networks could approximate an arbitrary continuous function with arbitrary accuracy given enough parameters/neurons. In other words, the LDR neural network will have the same “effectiveness” of classical neural networks without compression. This property serves as the theoretical foundation of the potential broad applications of LDR neural networks.\n• We show that, for LDR matrices defined by O(n) parameters, the corresponding LDR neural networks are still capable of achieving integrated squared error of order O(1/n), which is identical to the error bound of unstructured weight matrices-based neural networks, thereby indicating that there is essentially no loss for restricting to the weight matrices to LDR matrices.\n• We develop a universal training process for LDR neural networks with computational complexity reduction compared with backward propagation process for classical neural networks. The proposed algorithm is the generalization of the training process in (Cheng et al., 2015)(Sindhwani et al., 2015) that restricts the structure of weight matrices to circulant matrices or Toeplitz matrices.\nOutline: The paper is outlined as follows. In Section 2 we review the related work on this topic. Section 3 presents necessary definitions and properties of matrix displacement and LDR neural networks. The problem statement is also presented in this section. In Section 4 we prove the universal approximation property for a broad family of LDR neural networks. Section 5 addresses the approximation potential (error bounds) with a limited amount of neurons on shallow LDR neural networks and deep LDR neural networks, respectively. The proposed detailed procedure for training general LDR neural networks are derived in Section 6. Section 7 concludes the article."
  }, {
    "heading": "2. Related Work",
    "text": "Universal Approximation & Error Bound Analysis: For feedforward neural networks with one hidden layer, (Cybenko, 1989) and (Hornik et al., 1989) proved separately the universal approximation property, which guarantees that for any given continuous function or decision function and any error bound > 0, there always exists a single-hidden layer neural network that approximates the function within integrated error. However, this property does not specify the number of neurons needed to construct such a neural network. In practice, there must be a limit on the maximum amount of neurons due to the computational limit. Moreover, the magnitude of the coefficients can be neither too large nor too small. To address these issues for general neural networks, (Hornik et al., 1989) proved that it is sufficient to approximate functions with weights and bi-\nases whose absolute values are bounded by a constant (depending on the activation function). (Hornik, 1991) further extended this result to an arbitrarily small bound. (Barron, 1993) showed that feedforward networks with one layer of sigmoidal nonlinearities achieve an integrated squared error with order of O(1/n), where n is the number of neurons.\nMore recently, several interesting results were published on the approximation capabilities of deep neural networks. (Delalleau & Bengio, 2011) have shown that there exist certain functions that can be approximated by threelayer neural networks with a polynomial amount of neurons, while two-layer neural networks require exponentially larger amount to achieve the same error. (Montufar et al., 2014) and (Telgarsky, 2016) have shown the exponential increase of linear regions as neural networks grow deeper. (Liang & Srikant, 2016) proved that with log(1/ ) layers, the neural network can achieve the error bound for any continuous function with O(polylog( )) parameters in each layer.\nLDR Matrices in Neural Networks: (Cheng et al., 2015) have analyzed the effectiveness of replacing conventional weight matrices in fully-connected layers with circulant matrices, which can reduce the time complexity from O(n2) to O(n log n), and the space complexity from O(n2) to O(n), respectively. (Sindhwani et al., 2015) have demonstrated significant benefits of using Toeplitz-like matrices to tackle the issue of large space and computation requirement for neural networks training and inference. Experiments show that the use of matrices with low displacement rank offers superior tradeoffs between accuracy and time/space complexity."
  }, {
    "heading": "3. Preliminaries on LDR Matrices and Neural Networks",
    "text": ""
  }, {
    "heading": "3.1. Matrix Displacement",
    "text": "An n × n matrix M is called a structured matrix when it has a low displacement rank γ (Pan, 2001). More precisely, with the proper choice of operator matrices A and B, if the Sylvester displacement\n∇A,B(M) := AM−MB (1)\nand the Stein displacement\n∆A,B(M) := M− AMB (2)\nof matrix M have a rank γ bounded by a value that is independent of the size of M, then matrix M is referred to as a matrix with a low displacement rank (Pan, 2001). In this paper we will call these matrices as LDR matrices. Even a full-rank matrix may have small displacement rank with appropriate choice of displacement operators (A,B).\nFigure 1 illustrates a series of commonly used structured matrices, including a circulant matrix, a Cauchy matrix, a Toeplitz matrix, a Hankel matrix, and a Vandermonde matrix, and Table 1 summarizes their displacement ranks and corresponding displacement operators.\nThe general procedure of handling LDR matrices generally takes three steps: Compression, Computation with Displacements, Decompression. Here compression means to obtain a low-rank displacement of the matrices, and decompression means to converting the results from displacement computations to the answer to the original computational problem. In particular, if one of the displacement operator has the property that its power equals the identity matrix, then one can use the following method to decompress directly: Lemma 3.1. If A is an a-potent matrix (i.e., Aq = aI for some positive integer q ≤ n), then\nM = [ q−1∑ k=0 Ak∆A,B(M)Bk ] (I− aBq)−1. (3)\nProof. See Corollary 4.3.7 in (Pan, 2001).\nOne of the most important characteristics of structured matrices is their low number of independent variables. The number of independent parameters is O(n) for an n-byn structured matrix instead of the order of n2, which indicates that the storage complexity can be potentially reduced to O(n). Besides, the computational complexity for many matrix operations, such as matrix-vector multiplication, matrix inversion, etc., can be significantly reduced when operating on the structured ones. The definition and analysis of structured matrices have been generalized to the case of n-by-m matrices where m 6= n, e.g., the blockcirculant matrices (Pan et al., 2015). Our application of LDR matrices to neural networks would be the general nby-m weight matrices. For certain lemmas and theorems such as Lemma 3.1, only the form on n × n square matrices is needed for the derivation procedure in this paper.\nSo we omit the generalized form of such statements unless necessary."
  }, {
    "heading": "3.2. LDR Neural Networks",
    "text": "In this paper we study the viability of applying LDR matrices in neural networks. Without loss of generality, we focus on a feed-forward neural network with one fully-connected (hidden) layer, which is similar network setup as (Cybenko, 1989). Here the input layer (with n neurons) and the hidden layer (with kn neurons)1 are assumed to be fully connected with a weight matrix W ∈ Rn×kn of displacement rank at most r corresponding to displacement operators (A,B), where r n. The domain for the input vector x is the ndimensional hypercube In := [0, 1]n, and the output layer only contains one neuron. The neural network can be expressed as:\ny = GW,θ(x) = kn∑ j=1 αjσ(wjT x + θj). (4)\nHere σ(·) is the activation function, wj ∈ Rn denotes the jth column of the weight matrix W, and αj , θj ∈ R for j = 1, ..., kn. When the weight matrix W = [w1|w2| · · · |wkn] has a low-rank displacement, we call it an LDR neural network. Matrix displacement techniques ensure that LDR neural network has much lower space requirement and higher computational speed comparing to classical neural networks of the similar size."
  }, {
    "heading": "3.3. Problem Statement",
    "text": "In this paper, we aim at providing theoretical support on the accuracy of function approximation using LDR neural networks, which represents the “effectiveness” of LDR neural networks compared with the original neural networks. Given a continuous function f(x) defined on [0, 1]n, we study the following tasks:\n• For any > 0, find an LDR weight matrix W so that the function defined by equation (4) satisfies\nmax x∈[0,1]n\n|f(x)−GW,θ(x)| < . (5)\n• Fix a positive integer n, find an upper bound so that for any continuous function f(x) there exists a bias vector θ and an LDR matrix with at most n rows satisfying equation (5).\n• Find a multi-layer LDR neural network that achieves error bound (5) but with fewer parameters.\n1Please note that this assumption does not sacrifice any generality because the n-by-m case can be transformed to n-by-kn format with the nearest k using zero padding (Cheng et al., 2015).\nThe first task is handled in Section 4, which is the universal approximation property of LDR neural networks. It states that the LDR neural networks could approximate an arbitrary continuous function arbitrarily well and is the underpinning of the widespread applications. The error bounds for shallow and deep neural networks are derived in Section 5. In addition, we derived explicit back-propagation expressions for LDR neural networks in Section 6."
  }, {
    "heading": "4. The Universal Approximation Property of LDR Neural Networks",
    "text": "We call a family of matrices S to have representation property if for any vector v ∈ Rn, there exists a matrix M ∈ SA,B such that v is a column of M . Note that all five types of LDR matrices shown in Fig. 1 have this representation property because of their explicit pattern. In this section we will prove that this property also holds for many other LDR families. Based on this result, we are able to prove the universal approximation property of neural networks utilizing only LDR matrices.\nTheorem 4.1. Let A, B be two n× n non-singular diagonalizable matrices. Define SrA,B as the set of matrices M such that ∆A,B(M) has rank at most r. Then the representation property holds for SrA,B ifA andB satisfy\ni) Aq = aI for some positive integer q ≤ n and a scalar a 6= 0; ii) (I− aBq) is nonsingular; iii) the eigenvalues of B have distinguishable absolute values.\nProof. It suffices to prove for the case r = 1, as increasing r only provides more candidate matrices to choose from. By the property of Stein displacement, any matrix M ∈ S can be expressed in terms of A, B, and its displacement as follows:\nM = q−1∑ k=0 Ak∆A,B(M)Bk(I− aBq)−1. (6)\nNext we express ∆A,B(M) as a product of two vectors g · hT since it has rank 1. Also write A = Q−1ΛQ, where Λ = diag(λ1, ..., λn) is a diagonal matrix generated by the eigenvalues of A. Now define ej to be the j-th unit column vector for j = 1, ..., n. Write\nQMej =Q q−1∑ k=0 Ak∆A,B(M)B k(I− aBq)−1ej\n=Q q−1∑ k=0 (Q−1ΛQ)kghTBk(I− aBq)−1ej\n= ( q−1∑ k=0 sh,jΛ k ) Qg.\n(7)\nHere we use sh,j to denote the resulting scalar from matrix product hTBk(I− aBq)−1ej for k = 1, ..., n. Define T := (I − aBq)−1. In order to prove the theorem, we need to show that there exists a vector h and an index k such that the matrix ∑q−1 k=0 sh,jΛ\nk is nonsingular. In order to distinguish scalar multiplication from matrix multiplication, we use notation a ◦M to denote the multiplication of a scalar value and a matrices whenever necessary. Rewrite the expression as\nq−1∑ k=0 sh,jΛ k\n= q−1∑ k=0 hT · ( BkTej ◦ diag(λk1 , ..., λkn) ) =\nq−1∑ k=0 diag(hT ·Bk ·T · [λk1ej | · · · |λknej ])\n=diag ( hT · ( q−1∑ k=0 BkTλk1ej ) , ...,hT · ( q−1∑ k=0 BkTλknej )) .\nThe diagonal matrix ∑q−1 k=0 sh,jΛ\nk is nonsingular if and only if all of its diagonal entries are nonzero. Let bij denote the column vector ∑q−1 k=0 BT\nkλki ej . Unless for every j there is an index ij such that bijj = 0, we can always choose an appropriate vector h so that the resulting diagonal matrix is nonsingular. Next we will show that the former case is not possible using proof by contradiction. Assume that there is a column bijj = 0 for every j = 1, 2, · · · , n, we must have:\n0 =[bi11|bi22| · · · |binn]\n= [ q−1∑ k=0 BkTλki1e1| · · · | q−1∑ k=0 BkTλkinen ] =\nq−1∑ k=0 BkT · diag(λki1 , ..., λ k in).\nSince B is diagonalizable, we write B = P−1ΠP, where Π = diag(η1, ..., ηn). Also we have T = (I− aBq)−1 = P−1(I− aΠq)−1P. Then\n0 = q−1∑ k=0 BTkdiag(λki1 , ..., λ k in)\n= P−1 [ q−1∑ k=0 Πk(I− aΠq)−1diag(λki1 , ..., λ k in) ] P\n= P−1 q−1∑ k=0 diag ( (λi1η1) k, ..., (λinηn) k ) (I− aΠq)−1P\n= P−1diag ( q−1∑ k=0 (λi1η1) k, ..., q−1∑ k=0 (λinηn) k ) (I− aΠq)−1P.\nThis implies that λi1η1, ..., λinηn are solutions to the equation\n1 + x+ x2 + · · ·+ xq−1 = 0. (8)\nBy assumption of matrix B, η1, ..., ηk have different absolute values, and so are λi1η1, ..., λi1η1, since all λk have the same absolute value because Aq = aI. This fact suggests that there are q distinguished solutions of equation (8), which contradicts the fundamental theorem of algebra. Thus it is incorrect to assume that matrix ∑q−1 k=0 sh,jΛ\nk is singular for all h ∈ Rn. With this property proven, given any vector v ∈ Rn, one can take the following procedure to find a matrix M ∈ S and a index j such that the j-th column of M equals v: i) Find a vector h and a index j such that matrix∑q−1 k=0 sh,jΛ k is non-singular;\nii) By equation (7), find\ng :=Q−1 ( q−1∑ k=0 sh,jΛ k )−1 QTv;\niii) Construct M ∈ S with g and h by equation (6). Then its j-th column will equal to v.\nWith the above construction, we have shown that for any vector v ∈ Rn one can find a matrix M ∈ S and a index j such that the j-th column of M equals v, thus the theorem is proved.\nOur main goal of this section is to show that neural networks with many types of LDR matrices (LDR neural networks) can approximate continuous functions arbitrarily well. In particular, we are going to show that Toeplitz matrices and circulant matrices, as specific cases of LDR matrices, have the same property. In order to do so, we need to introduce the following definition of a discriminatory function and state one of its key property as Lemma 4.1.\nDefinition 4.1. A function σ(u) : R → R is called as discriminatory if the zero measure is the only measure µ that satisfies the following property:∫\nIn σ(wTx + θ)dµ(x) = 0,∀w ∈ Rn, θ ∈ R. (9)\nLemma 4.1. [cf. (Cybenko, 1989)] Any bounded, measurable sigmoidal function is discriminatory.\nNow we are ready to present the universal approximation theorem of LDR neural networks with n-by-kn weight matrix W:\nTheorem 4.2 (Universal Approximation Theorem for LDR Neural Networks). Let σ be any continuous discriminatory function and SrA,B be a family of LDR matrices having representation property. Then for any continuous function\nf(x) defined on In and any > 0, there exists a function G(x) in the form of equation (4) so that its weight matrix consists of k submatrices from SrA,B and\nmax x∈In\n|G(x)− f(x)| < . (10)\nProof. Denote the i-th n×n submatrix of W as Wi. Then W can be written as\nW = [ W1|W2|...|Wk ] . (11)\nLet SIn denote the set of all continuous functions defined on In. Let UIn be the linear subspace of SIn that can be expressed in form of equation (4) where W consists of k sub-matrices with displacement rank at most r. We want to show that UIn is dense in the set of all continuous functions SIn .\nSuppose not, by Hahn-Banach Theorem, there exists a bounded linear functional L 6= 0 such that L(Ū(In)) = 0. Moreover, By Riesz Representation Theorem, L can be written as\nL(h) = ∫ In h(x)dµ(x),∀h ∈ S(In),\nfor some measure µ.\nNext we show that for any y ∈ Rn and θ ∈ R, the function σ(yTx + θ) belongs to the set UIn , and thus we must have∫\nIn σ(yTx + θ)dµ(x) = 0. (12)\nFor any vector y ∈ Rn, Theorem 4.1 guarantees that there exists an n×n LDR matrix M = [b1| · · · |bn] and an index j such that bj = y. Now define a vector (α1, ..., αn) such that αj = 1 and α1 = · · · = αn = 0. Also let the value of all bias be θ. Then the LDR neural network function becomes\nG(x) = n∑ i=1 αiσ(b T i x + θ)\n=αjσ(b T j x + θ) = σ(y Tx + θ).\n(13)\nFrom the fact that L(G(x)) = 0, we derive that\n0 =L(G(x))\n= ∫ In n∑ i=1 αiσ(b T i x + θ) = ∫ In σ(yTx + θ)dµ(x).\nSince σ(t) is a discriminatory function by Lemma 4.1. We can conclude that µ is the zero measure. As a result, the function defined as an integral with measure µmust be zero for any input function h ∈ S(In). The last statement contradicts the property that L 6= 0 from the Hahn-Banach\nTheorem, which is obtained based on the assumption that the set UIn of LDR neural network functions are not dense in SIn . As this assumption is not true, we have the universal approximation property of LDR neural networks.\nReference work (Cheng et al., 2015), (Sindhwani et al., 2015) have utilized a circulant matrix or a Toeplitz matrix for weight representation in deep neural networks. Please note that for the general case of n-by-m weight matrices, either the more general Block-circulant matrices should be utilized or padding extra columns or rows of zeroes are needed (Cheng et al., 2015). Circulant matrices and Topelitz matrices are both special form of LDR matrices, and thus we could apply the above universal approximation property of LDR neural networks and provide theoretical support for the use of circulant and Toeplitz matrices in (Cheng et al., 2015), (Sindhwani et al., 2015). Moreover, it is possible to consolidate the choice of parameters so that a block-Toeplitz matrix also shows Toeplitz structure globally. Therefore we arrive at the following corollary.\nCorollary 4.1. Any continuous function can be arbitrarily approximated by neural networks constructed with Toeplitz matrices or circulant matrices (with padding or using Block-circulant matrices)."
  }, {
    "heading": "5. Error Bounds on LDR Neural Networks",
    "text": "With the universal approximation property proved, naturally we seek ways to provide error bound estimates for LDR neural networks. We are able to prove that for LDR matrices defined by O(n) parameters (n represents the number of rows and has the same order as the number of columns), the corresponding structured neural network is capable of achieving integrated squared error of order O(1/n), where n is the number of parameters. This result is asymptotically equivalent to Barron’s aforementioned result on general neural networks, indicating that there is essentially no loss for restricting to LDR matrices.\nThe functions we would like to approximate are those who are defined on a n-dimensional ball Br = {x ∈ Rn : |x| ≤ r} such that ∫ Br |x||f(x)|µ(dx) ≤ C, where µ is an arbitrary measure normalized so that µ(Br) = 1. Let’s call this set ΓC,Br . (Barron, 1993) considered the following set of bounded multiples of a sigmoidal function composed with linear functions:\nGσ = {ασ(yTx + θ) : |α| ≤ 2C,y ∈ Rn, θ ∈ R}. (14)\nHe proved the following theorem:\nTheorem 5.1 ((Barron, 1993)). For every function in ΓC,Br , every sigmoidal function σ, every probability measure, and every k ≥ 1, there exists a linear combination of\nsigmoidal functions fk(x) of the form\nfk(x) = k∑ j=1 αjσ(y T j x + θj), (15)\nsuch that ∫ Br (f(x)− fk(x))2µ(dx) ≤ 4r2C k . (16)\nHere yj ∈ Rn and θj ∈ R for every j = 1, 2, ..., N , Moreover, the coefficients of the linear combination may be restricted to satisfy ∑k j=1 |cj | ≤ 2rC.\nNow we will show how to obtain a similar result for LDR matrices. Fix operator (A,B) and define\nSknσ = { kn∑ j=1 αjσ(y T j x + θj) : |αj | ≤ 2C,yj ∈ Rn,\nθj ∈ R, j = 1, 2, ..., N, and [y(i−1)n+1|y(i−1)n+2| · · · |yin]\nis an LDR matrix, ∀i = 1, ..., k } .\n(17) Moreover, let Gkσ be the set of function that can be expressed as a sum of no more than k terms from Gσ . Define the metric ||f−g||µ = √∫ Br\n(f(x)− g(x))2µ(dx). Theorem 5.1 essentially states that the minimal distance between a function f ∈ ΓC,B and Gmσ is asymptotically O(1/n). The following lemma proves that Gkσ is in fact contained in Sknσ .\nLemma 5.1. For any k ≥ 1, Gkσ ⊂ Sknσ .\nProof. Any function fk(x) ∈ Gkσ can be written in the form\nfk(x) = k∑ j=1 αjσ(y T j x + θj). (18)\nFor each j = 1, ..., k, define a n× n LDR matrix Wj such that one of its column is yj . Let tij be the i-th column of Wj . Let ij correspond to the column index such that tij = yj for all j. Now consider the following function\nG(x) := k∑ j=1 n∑ i=1 βijσ(t T ijx + θj), (19)\nwhere βijj equals αj , and βij = 0 if i 6= ij . Notice that we\nhave the following equality\nG(x) := k∑ j=1 n∑ i=1 βijσ(t T ijx + θj)\n= k∑ j=1 βijjσ(t T ijx + θj)\n= k∑ j=1 αjσ(y T j x + θj) = fk(x).\nNotice that the matrix W = [W1|W2| · · · |Wk] consists k LDR submatrices. Thus fk(x) belongs to the set Sknσ .\nBy Lemma 5.1, we can replace Gkσ with S kn σ in Theorem 5.1 and obtain the following error bound estimates on LDR neural networks: Theorem 5.2. For every disk Br ⊂ Rn, every function in ΓC,Br , every sigmoidal function σ, every normalized measure µ, and every k ≥ 1, there exists neural network defined by a weight matrix consists of k LDR submatrices such that∫\nBr\n(f(x)− fkn(x))2µ(dx) ≤ 4r2C\nk . (20)\nMoreover, the coefficients of the linear combination may be restricted to satisfy ∑N k=1 |ck| ≤ 2rC.\nTheorem 5.2 is the first theoretical result that gives a general error bound on LDR neural networks. Empirically, (Cheng et al., 2015) reported that circulant neural networks are capable of achieving the same level of accuracy as AlexNet with more than 4,000X space saving on fully-connected layers. (Sindhwani et al., 2015) applied Toeplitz-type LDR matrices to several benchmark image classification datasets, retaining the performance of stateof-the-art models with very high compression ratio.\nThe next theorem naturally extended the result from (Liang & Srikant, 2016) to LDR neural networks, indicating that LDR neural networks can also benefit a parameter reduction if one uses more than one layers. More precisely, we have the following statement: Theorem 5.3. Let f be a continuous function on [0, 1] and is 2n + 1 times differentiable in (0, 1) for n = dlog 1 + 1]e. If |f (k)(x)| ≤ k! holds for all x ∈ (0, 1) and k ∈[ 2n+ 1 ] , then for any n× n matrices A and B satisfying the conditions of Theorem 4.1, there exists a LDR neural network GA,B(x) with O(log 1 ) layers, O(log 2 1 ) binary step units, O(log3 1 ) rectifier linear units such that\nmax x∈[0,1]\n|f(x)−GA,B(x)| < .\nProof. The theorem with better bounds and without assumption of being LDR neural network is proved in (Liang\n& Srikant, 2016) as Theorem 4. For each binary step unit or rectifier linear unit in the construction of the general neural network, attach (n − 1) dummy units, and expand the weights associated to this unit from a vector to an LDR matrix based on Theorem 4.1. By doing so we need to expand the number units by a factor of order log 1 , and the asymptotic bounds are relaxed accordingly."
  }, {
    "heading": "6. Training LDR Neural Networks",
    "text": "In this section, we reformulate the gradient computation of LDR neural networks. The computation for propagating through a fully-connected layer can be written as\ny = σ(WTx + θ), (21)\nwhere σ(·) is the activation function, W ∈ Rn×kn is the weight matrix, x ∈ Rn is input vector and θ ∈ Rkn is bias vector. According to Equation (7), if Wi is an LDR matrix with operators (Ai,Bi) satisfying conditions of Theorem 4.1, then it is essentially determined by two matrices Gi ∈ Rn×r,Hi ∈ Rn×r as\nWi = [ q−1∑ k=0 AkiGiH T i B k i ] (I− aBqi ) −1. (22)\nTo fit the back-propagation algorithm, our goal is to compute derivatives ∂O∂Gi , ∂O ∂Hi\nand ∂O∂x for any objective function O = O(W1, . . . ,Wk).\nIn general, given that a := WTx + θ, we can have:\n∂O\n∂W = x(\n∂O ∂a )T , ∂O ∂x = W ∂O ∂a , ∂O ∂θ = ∂O ∂a 1. (23)\nwhere 1 is a column vector full of ones. Let Ĝik := AkiGi, Ĥik := H T i B k i (I − aB q i ) −1, and Wik := ĜikĤik. The derivatives of ∂O∂Wik can be computed as following:\n∂O\n∂Wik =\n∂O\n∂Wi . (24)\nAccording to Equation (23), if we let a = Wik, W = ĜTik and x = Ĥik, then ∂O∂Ĝik and ∂O ∂Ĥik can be derived as:\n∂O ∂Ĝik = [ ∂O ∂ĜTik ]T = [ Ĥik ∂O ∂Wik ]T = ( ∂O ∂Wik )T ĤTik,\n(25)\n∂O\n∂Ĥik = ĜTik\n∂O\n∂Wik . (26)\nSimilarly, let a = Ĝik, W = (Aki ) T and x = Gi, then\n∂O ∂Gi can be derived as:\n∂O\n∂Gi = q−1∑ k=0 (Aki ) T ( ∂O ∂Ĝik )\n= q−1∑ k=0 (Aki ) T ( ∂O ∂Wik )T ĤTik.\n(27)\nSubstituting with a = Ĥik, W = HTi and x = B k i (I − aBqi ) −1, we have ∂O∂Hi derived as:\n∂O\n∂Hi = q−1∑ k=0 Bki (I− aB q i ) −1( ∂O ∂Ĥik )T\n= q−1∑ k=0 Bki (I− aB q i ) −1( ∂O ∂Wik )T Ĝik.\n(28)\nIn this way, derivatives ∂O∂Gi and ∂O ∂Hi can be computed given ∂O∂Wik which is equal to ∂O ∂Wi\n. The essence of backpropagation algorithm is to propagate gradients backward from the layer with objective function to the input layer. ∂O ∂Wi\ncan be calculated from previous layer and ∂O∂x will be propagated to the next layer if necessary.\nFor practical use one may want to choose matrices Ai and Bi with fast multiplication method such as diagonal matrices, permutation matrices, banded matrices, etc. Then the space complexity (the number of parameters for storage) of Wi can be O(2n + 2nr) rather than O(n2) of traditional dense matrix. The 2n is for Ai and Bi and 2nr is for Gi and Hi. The time complexity of WTi x will be O(q(3n + 2nr)) compared with O(n2) of dense matrix. Particularly, when Wi is a structured matrix like the Toeplitz matrix, the space complexity will be O(2n). This is because the Toeplitz matrix is defined by 2n parameters. Moreover, its matrix-vector multiplication can be accelerated by using Fast Fourier Transform (for Toeplitz and circulant matrices), resulting in time complexity O(n log n). In this way the back-propagation computation for the layer can be done with near-linear time."
  }, {
    "heading": "7. Conclusion",
    "text": "In this paper, we have proven that the universal approximation property of LDR neural networks. In addition, we also theoretically show that the error bounds of LDR neural networks are at least as efficient as general unstructured neural network. Besides, we also develop the backpropagation based training algorithm for universal LDR neural networks. Our study provides the theoretical foundation of the empirical success of LDR neural networks."
  }],
  "year": 2017,
  "references": [{
    "title": "Universal approximation bounds for superpositions of a sigmoidal function",
    "authors": ["Barron", "Andrew R"],
    "venue": "IEEE Transactions on Information theory,",
    "year": 1993
  }, {
    "title": "Polynomial and matrix computations volume 1: Fundamental algorithms",
    "authors": ["Bini", "Dario", "Pan", "Victor", "Eberly", "Wayne"],
    "venue": "SIAM Review,",
    "year": 1996
  }, {
    "title": "An exploration of parameter redundancy in deep networks with circulant projections",
    "authors": ["Cheng", "Yu", "Felix X", "Feris", "Rogerio S", "Kumar", "Sanjiv", "Choudhary", "Alok", "Chang", "Shi-Fu"],
    "venue": "In Proceedings of the IEEE International Conference on Computer Vision, pp. 2857–2865,",
    "year": 2015
  }, {
    "title": "Approximation by superpositions of a sigmoidal function",
    "authors": ["Cybenko", "George"],
    "venue": "Mathematics of Control, Signals, and Systems (MCSS),",
    "year": 1989
  }, {
    "title": "Shallow vs. deep sum-product networks",
    "authors": ["Delalleau", "Olivier", "Bengio", "Yoshua"],
    "venue": "In Advances in Neural Information Processing Systems,",
    "year": 2011
  }, {
    "title": "Imagenet: A large-scale hierarchical image database",
    "authors": ["Deng", "Jia", "Dong", "Wei", "Socher", "Richard", "Li", "Li-Jia", "Kai", "Fei-Fei"],
    "venue": "In Computer Vision and Pattern Recognition,",
    "year": 2009
  }, {
    "title": "Exploiting linear structure within convolutional networks for efficient evaluation",
    "authors": ["Denton", "Emily L", "Zaremba", "Wojciech", "Bruna", "Joan", "LeCun", "Yann", "Fergus", "Rob"],
    "venue": "In Advances in Neural Information Processing Systems,",
    "year": 2014
  }, {
    "title": "Compressing deep convolutional networks using vector quantization",
    "authors": ["Gong", "Yunchao", "Liu", "Yang", "Ming", "Bourdev", "Lubomir"],
    "venue": "arXiv preprint arXiv:1412.6115,",
    "year": 2014
  }, {
    "title": "Deep compression: Compressing deep neural networks with pruning, trained quantization and huffman coding",
    "authors": ["Han", "Song", "Mao", "Huizi", "Dally", "William J"],
    "venue": "arXiv preprint arXiv:1510.00149,",
    "year": 2015
  }, {
    "title": "Approximation capabilities of multilayer feedforward networks",
    "authors": ["Hornik", "Kurt"],
    "venue": "Neural networks,",
    "year": 1991
  }, {
    "title": "Multilayer feedforward networks are universal approximators",
    "authors": ["Hornik", "Kurt", "Stinchcombe", "Maxwell", "White", "Halbert"],
    "venue": "Neural networks,",
    "year": 1989
  }, {
    "title": "Speeding up convolutional neural networks with low rank expansions",
    "authors": ["Jaderberg", "Max", "Vedaldi", "Andrea", "Zisserman", "Andrew"],
    "venue": "arXiv preprint arXiv:1405.3866,",
    "year": 2014
  }, {
    "title": "Learning multiple layers of features from tiny images",
    "authors": ["Krizhevsky", "Alex", "Hinton", "Geoffrey"],
    "year": 2009
  }, {
    "title": "Imagenet classification with deep convolutional neural networks. In Advances in neural information processing",
    "authors": ["Krizhevsky", "Alex", "Sutskever", "Ilya", "Hinton", "Geoffrey E"],
    "year": 2012
  }, {
    "title": "Why deep neural networks",
    "authors": ["Liang", "Shiyu", "R. Srikant"],
    "venue": "arXiv preprint arXiv:1610.04161,",
    "year": 2016
  }, {
    "title": "Sparse convolutional neural networks",
    "authors": ["Liu", "Baoyuan", "Wang", "Min", "Foroosh", "Hassan", "Tappen", "Marshall", "Pensky", "Marianna"],
    "venue": "In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition,",
    "year": 2015
  }, {
    "title": "On the number of linear regions of deep neural networks",
    "authors": ["Montufar", "Guido F", "Pascanu", "Razvan", "Cho", "Kyunghyun", "Bengio", "Yoshua"],
    "venue": "In Advances in neural information processing systems,",
    "year": 2014
  }, {
    "title": "Structured matrices and polynomials: unified superfast algorithms",
    "authors": ["Pan", "Victor"],
    "venue": "Springer Science & Business Media,",
    "year": 2001
  }, {
    "title": "Estimating the norms of random circulant and toeplitz matrices and their inverses",
    "authors": ["Pan", "Victor Y", "Svadlenka", "John", "Zhao", "Liang"],
    "venue": "Linear algebra and its applications,",
    "year": 2015
  }, {
    "title": "Structured transforms for small-footprint deep learning",
    "authors": ["Sindhwani", "Vikas", "Sainath", "Tara", "Kumar", "Sanjiv"],
    "venue": "In Advances in Neural Information Processing Systems,",
    "year": 2015
  }, {
    "title": "Sequence to sequence learning with neural networks. In Advances in neural information processing",
    "authors": ["Sutskever", "Ilya", "Vinyals", "Oriol", "Le", "Quoc V"],
    "year": 2014
  }, {
    "title": "Benefits of depth in neural networks",
    "authors": ["Telgarsky", "Matus"],
    "venue": "arXiv preprint arXiv:1602.04485,",
    "year": 2016
  }, {
    "title": "Learning structured sparsity in deep neural networks",
    "authors": ["Wen", "Wei", "Wu", "Chunpeng", "Wang", "Yandan", "Chen", "Yiran", "Li", "Hai"],
    "venue": "In Advances in Neural Information Processing Systems,",
    "year": 2016
  }],
  "id": "SP:85d7c583b525be505821adf20eb26e3d30570fb0",
  "authors": [{
    "name": "Liang Zhao",
    "affiliations": []
  }, {
    "name": "Siyu Liao",
    "affiliations": []
  }, {
    "name": "Yanzhi Wang",
    "affiliations": []
  }, {
    "name": "Zhe Li",
    "affiliations": []
  }, {
    "name": "Jian Tang",
    "affiliations": []
  }, {
    "name": "Bo Yuan",
    "affiliations": []
  }],
  "abstractText": "Recently low displacement rank (LDR) matrices, or so-called structured matrices, have been proposed to compress large-scale neural networks. Empirical results have shown that neural networks with weight matrices of LDR matrices, referred as LDR neural networks, can achieve significant reduction in space and computational complexity while retaining high accuracy. We formally study LDR matrices in deep learning. First, we prove the universal approximation property of LDR neural networks with a mild condition on the displacement operators. We then show that the error bounds of LDR neural networks are as efficient as general neural networks with both single-layer and multiple-layer structure. Finally, we propose back-propagation based training algorithm for general LDR neural networks.",
  "title": "Theoretical Properties for Neural Networks with Weight Matrices of Low Displacement Rank"
}