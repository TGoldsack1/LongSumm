{
  "sections": [{
    "text": "Proceedings of the 2016 Conference on Empirical Methods in Natural Language Processing, pages 1379–1388, Austin, Texas, November 1-5, 2016. c©2016 Association for Computational Linguistics\nDeep inference on a large-scale knowledge base (KB) needs a mass of formulas, but it is almost impossible to create all formulas manually. Data-driven methods have been proposed to mine formulas from KBs automatically, where random sampling and approximate calculation are common techniques to handle big data. Among a series of methods, Random Walk is believed to be suitable for knowledge graph data. However, a pure random walk without goals still has a poor efficiency of mining useful formulas, and even introduces lots of noise which may mislead inference. Although several heuristic rules have been proposed to direct random walks, they do not work well due to the diversity of formulas. To this end, we propose a novel goaldirected inference formula mining algorithm, which directs random walks by the specific inference target at each step. The algorithm is more inclined to visit benefic structures to infer the target, so it can increase efficiency of random walks and avoid noise simultaneously. The experiments on both WordNet and Freebase prove that our approach is has a high efficiency and performs best on the task."
  }, {
    "heading": "1 Introduction",
    "text": "Recently, various knowledge bases (KBs), such as Freebase (Bollacker et al., 2008), WordNet (Miller, 1995), Yago (Hoffart et al., 2013), have been built, and researchers begin to explore how to make use of structural information to promote performances of several inference-based NLP applications, such as\ntext entailment, knowledge base completion, question and answering. Creating useful formulas is one of the most important steps in inference, and an accurate and high coverage formula set will bring a great promotion for an inference system. For example, Nationality(x, y) ∧ Nationality(z, y) ∧ Language(z, w)⇒ Language(x, w) is a high-quality formula, which means people with the same nationality probably speak the same language. However, it is a challenge to create formulas for open-domain KBs, where there are a great variety of relation types and it is impossible to construct a complete formula set by hand.\nSeveral data-driven methods, such as Inductive Logic Programming (ILP) (Muggleton and De Raedt, 1994) and Markov Logic Network (MLN) (Richardson and Domingos, 2006), have been proposed to mine formulas automatically from KB data, which transform frequent sub-structures of KBs, e.g., paths or loops, into formulas. Figure 1.a shows a sub-graph extracted from Freebase, and the formula mentioned above about Language can be generated from the loop in Figure 1.d. However, the running time of these traditional probabilistic inference methods is unbearable over large-scale KBs. For example, MLN needs grounding for each candidate formula, i.e., it needs to enumerate all paths. Therefore, the computation complexity of MLN increases exponentially with the scale of a KB.\nIn order to handle large-scale KBs, the random walk is usually employed to replace enumerating all possible sub-structures. However, random walk is inefficient to find useful structures due to its completely randomized mechanism. For example in Fig-\n1379\nure 1.b, the target path (yellow one) has a small probability to be visited, the reason is that the algorithm may select all the neighboring entity to transfer with an equal probability. This phenomenon is very common in KBs, e.g., each entity in Freebase has more than 30 neighbors in average, so there will be about 810,000 paths with length 4, and only several are useful. There have been two types of methods proposed to improve the efficiency of random walks, but they still meet serious problems, respectively. 1) Increasing rounds of random walks. More rounds of random walks will find more structures, but it will simultaneously introduce more noise and thus generate more false formulas. For example, the loop in Figure 1.c exists in Freebase, but it produces a false formula, Gender(x, y) ∧ Gender(z, y) ∧ Language(z, w)⇒ Language(x, w), which means people with the same gender speak the same language. This kind of structures frequently occur in KBs even the formulas are mined with a high confidence, because there are a lot of sparse structures in KBs which will lead to inaccurate confidence. According to our statistics, more than 90 percent of high-confidence formulas produced by random walk are noise. 2) Employing heuristic rules to direct random walks. This method directs random walks to find useful structures by rewriting the state transition probability matrix, but the artificial heuristic rules may only apply to a little part of formulas. For example, PRA (Lao and Cohen, 2010; Lao et al., 2011) assumes the more narrow distributions of elements in a formula are, the higher score the formula will obtain. However, formulas with high scores in PRA are not always true. For example, the formula in Figure 1.c has a high score in PRA, but it is not true. Oppositely, formulas with low scores in PRA are not always useless. For example, the formula, Father(x, y) ∧ Father(y, z) ⇒ Grandfather(x, t), has a low score when x and y both have several sons, but it obviously is the most effective to infer Grandfather. According to our investigations, the situations are common in KBs. In this paper, we propose a Goal-directed Random Walk algorithm to resolve the above problems. The algorithm employs the specific inference target as the direction at each step in the random walk process. In more detail, to achieve such a goaldirected mechanism, at each step of random walk, the algorithm dynamically estimates the potentials for each neighbor by using the ultimate goal, and assigns higher probabilities to the neighbors with higher potentials. Therefore, the algorithm is more inclined to visit structures which are beneficial to infer\nthe target and avoid transferring to noise structures. For example in Figure 1, when the inference target is what language a person speaks, the algorithm is more inclined to walk along Nationality edge than Gender, because Nationality has greater potential than Gender to infer Language. We build a real potential function based on low-rank distributional representations. The reason of replacing symbols by distributional representations is that the distributional representations have less parameters and latent semantic relationship in them can contribute to estimate potentials more precisely. In summary, the contributions of this paper are as follows. • Compared with the basic random walk, our approach direct random walks by the inference target, which increases efficiency of mining useful formulas and has a great capability of resisting noise. • Compared with the heuristic methods, our approach can learn the strategy of random walk automatically and dynamically adjust the strategy for different inference targets, while the heuristic methods need to write heuristic rules by hand and follow the same rule all the time. • The experiments on link prediction task prove that our approach has a high efficiency on mining formulas and has a good performance on both WN18 and FB15K datasets.\nThe rest of this paper is structured as follows, Section 2 introduces the basic random walk for mining formulas. Section 3 describes our approach in detail. The experimental results and related discussions are shown in Section 4. Section 5 introduces some related works, and finally, Section 6 concludes this paper."
  }, {
    "heading": "2 Mining Formulas by Random Walk",
    "text": ""
  }, {
    "heading": "2.1 Frequent Pattern Mining",
    "text": "Mining frequent patterns from source data is a problem that has a long history, and for different specific tasks, there are different types of source data and different definitions of pattern. Mining formulas is more like frequent subgraph mining, which employs paths or loops as frequent patterns and mines them from a KB. For each relation type R, the algorithm enumerates paths from entity H to entity T for each triplet R(H,T ). These paths are normalized to formulas by replacing entities to variables. For example, the loop in Figure 1.d, National-\nity(Bob, America) ∧ Nationality(Stewart, America) ∧ Language(Bob, English) ⇒ Language(Stewart, English), can be normalized to the formula, Nationality(x, y) ∧ Nationality(z, y) ∧ Language(z, w) ⇒ Language(x, w). Support and confidence are employed to estimate a formula, where the support value of a formula f : X ⇒ Y , noted as Sf , is defined as the proportion of paths in the KB which contains the body X , and the confidence value of X ⇒ Y , noted as Cf , is defined as the proportion of the paths that contains X which also meets X ⇒ Y . Cf is calculated as follows,\nCf = Nf NX\n(1)\nwhereNf is the total number of instantiated formula f and NX is the total number of instantiated X ."
  }, {
    "heading": "2.2 Random Walk on Knowledge Graph",
    "text": "Enumerating paths is a time consuming process and does not apply to large-scale KBs. Therefore, random walk on the graph is proposed to collect frequent paths instead of enumerating. Random walk randomly chooses a neighbor to jump unlike enumerating which needs to search all neighbors. To estimate a formula f , the algorithm employs f ’s occurrence number during random walks N\n′ f to approxi-\nmate the total number Nf in Equation (1), and similarly employs N\n′ X to approximate NX . Therefore,\nf ’s confidence Cf can be approximatively estimated by N\n′ f and N ′ X , noted as C ′ f .\nRandom walk maintains a state transition probability matrix P , and Pij means the probability of jumping from entity i to entity j. To make the confidence C\n′ f as close to the true confidence Cf as pos-\nsible, the algorithm sets P as follows,\nPij = { 1/di, j ∈ Adj(i) 0, j /∈ Adj(i) (2)\nwhere di is the out-degree of the entity i, Adj(i) is the set of adjacent entities of i, and ∑N j=1 Pij = 1. Such a transition matrix means the algorithm may jump to all the neighboring entities with an equal probability. Such a random walk is independent from the inference target, so we call this type of random walk as a goalless random walk. The goalless mechanism causes the inefficiency of mining useful structures. When we want to mine paths for R(H,T ), the algorithm cannot arrive at T from H\nin the majority of rounds. Even though the algorithm recalls several paths for R(H,T ), some of them may generate noisy formulas for inferring R(H,T ).\nTo solve the above problem, several methods direct random walks by statically modifying P . For example, PRA sets Prij = P (j|i;r) |Ri| , P (j|i; r) = r(i,j) r(i,∗) , where P (j|i; r) is the probability of reaching node j from node i under the specific relation r, r(i, ∗) is the number of edges from i under r, and Ri is the number of relation types from i. Such a transition matrix implies the more narrow distributions of elements in a formula are, the higher score the formula will obtain, which can be viewed as the heuristic rule of PRA."
  }, {
    "heading": "3 Our Approach",
    "text": ""
  }, {
    "heading": "3.1 Goal-Directed Random Walk",
    "text": "We propose to use the inference target, ρ = R(H,T ), to direct random walks. When predicting ρ, our approach always directs random walks to find useful structures which may generate formulas to infer ρ. For different ρ, random walks are directed by modifying the transition matrix P in different ways. Our approach dynamically calculates Prij when jumping from entity i to entity j under relation r as follows,\nPrij =    Φ(r(i, j), ρ)∑ k∈Adj(i) Φ(r(i, k), ρ) , j ∈ Adj(i)\n0, j /∈ Adj(i) (3)\nwhere Φ(r(i, j), ρ) is the r(i, j)’s potential which measures the potential contribution to infer ρ after walking to j.\nIntuitively, if r(i, j) exits in a path from H to T and this path can generate a benefic formula to infer R(H,T ), the probability of jumping from i to j should larger and thus Φ(r(i, j), ρ) also should be larger. Reversely, if we cannot arrive at T within the maximal steps after jumping to j, or if the path produces a noisy formula leading to a wrong inference, Pij and Φ(r(i, j), ρ) should both be smaller.\nTo explicitly build a bridge between the potential Φ and the inference goal ρ, we maximize the likelihood of paths which can infer ρ. First, we recursively define the likelihood of a path from H to t\nas PpHt = PpHs · Prst , where Prst is defined in Equation (3). We then classify a path pHt into three separate categories: a) t = T and pHt can produce a benefic formula to infer R(H,T ); b) t 6= T ; c) t = T but pHt may generate a noisy formula which misleads inference. Finally, we define the likelihood function as follows,\nmaxPP = ∏\npHt∈P P apHt(1− PpHt) b+c (4)\nwhere P is all paths found in the process of performing random walks for R(H,T ), and t may be equal to T or not. a, b, c are three 0-1 variables corresponding to the above categories a), b), c). Only one in a, b, c can be 1 when PHt belongs to the corresponding category. We then transform maximizing PP to minimizing Lrw = − logPP and employ SGD to train it. In practice, there is not a clear-cut boundary between a) and c), so we divide the loss into two parts: Lrw = Ltrw + λL inf rw . Ltrw is the loss of that t 6= T , and Linfrw is the loss of that pHT generates a noisy formula leading to a wrong inference. λ is a super parameter to balance the two losses. Ltrw and Linfrw have the same expression but are optimized in different stages. Ltrw can be optimized during random walks, while Linfrw should be optimized in the inference stage. We rewrite Lrw for a specific path p as follows,\nLrw(p) = −y logPp − (1− y) log (1− Pp) (5)\nwhere y is the label of the path p and y = 1 if p is beneficial to infer ρ. To obtain the best Φ, we compute gradients of Lrw as follows,\n∇Lrw(p) = (∇Lrw(r12),∇Lrw(r23), ...)\n∇Lrw(rij) = ( ∂Lrw(rij) ∂Φrij , ∂Lrw(rij) ∂Φrik1 , ∂Lrw(rij) ∂Φrik2 , ...)\n∂Lrw(rij)\n∂Φrij = (Pp − y) · (1− Prij ) Φrij · (1− Pp)\n∂Lrw(rij) ∂Φrik = − (Pp − y) · Prij\nΦrij · (1− Pp) (6)\nwhere ∇Lrw(rij) is the component of ∇Lrw(p) at rij . Φ(r(i, j), ρ) and Φ(r(i, k), ρ) are the potentials for all triplets r(i, j) ∈ p and r(i, k) /∈ p, and rij is short for r(i, j). After iteratively updating Φrij and Φrik by the gradient of L t rw, the random walks can\nbe directed to find more paths fromH to T , and consequently it increases efficiency of the random walk. After updating Φrij and Φrik by the gradient ofL inf rw , random walk is more likely to find high-quality paths but not noise. Therefore, the goal-directed random walk increases efficiency of mining benefic formulas and has a great capability of resisting noise."
  }, {
    "heading": "3.2 Distributional Potential Function",
    "text": "The potential Φ(r(i, j), ρ) measures an implicit relationship between two triplets in the KB, so the total number of parameters is the square of the KB size. It is hard to precisely estimate all Φ because of the sparsity of training data. To reduce the number of parameters, we represent each entity or relation in the KB as a low-rank numeric vector which is called embeddings (Bordes et al., 2013), and then we build a potential function Ψ on embeddings as Φ(r(i, j), ρ) = Ψ(Er(i,j), ER(H,T )), where Er(i,j) and ER(H,T ) are the embeddings of triplets. In practice, we set Er(i,j) = [Er, Ej ] and ER(H,T ) = [ER, ET ] because Ei is the same for all triplets r(i, ∗), where [] is a concatenation operator.\nIn the view of the neural network, our goaldirected mechanism is analogous to the attention mechanism. At each step, the algorithm estimates attentions for each neighboring edges by Ψ. Therefore, there are several existing expressions of Ψ, e.g., the dot product (Sukhbaatar et al., 2015) and the single-layer perceptron (Bahdanau et al., 2015). We will not compare different forms of Ψ, the detail comparison has been presented in the work (Luong et al., 2015). We directly employ the simplest dot product for Ψ as follows,\nΨ(Er(i,j), ER(H,T )) = σ(Er(i,j) · ER(H,T )) (7)\nwhere σ is a nonlinear function and we set it as an exponential function. Ψ has no parameters beside KB embeddings which are updated during the training period."
  }, {
    "heading": "3.3 Integrated Inference Model",
    "text": "To handle the dependence between goal-directed random walk and subsequent inference, we combine them into an integrated model and optimize them together. To predict ρ = R(H,T ), the integrated model first collects formulas for R(H,T ), and then\nAlgorithm 1: Train Integrated Inference Model\nInput: KB, Ξ Output: Ψ, W , F 1: For ρ = R(H,T ) ∈ Ξ 2: Repeat ρ-directed Random Walk from H to t 3: Update Ψ by Ltrw 4: If t = T , then F = F ∩ fp 5: Calculate Linf and L inf rw by ρ 6: Update W by Linf 7: Update Ψ by Linfrw 8: Remove f ∈ F with little wf 9: Output Ψ, W , F\nmerges estimations of different formulas as features into a score function χ,\nχ(ρ) = ∑\nf∈Fρ δ(f) (8)\nwhere Fρ is the formula set obtained by random walks for ρ, and δ(f) is an estimation of formula f . The original frequent pattern mining algorithm employs formulas’ confidence as δ(f) directly, but it does not produce good results (Galárraga et al., 2013). There are two ways to solve the problem: one is selecting another more suitable measure of f as δ(f) (Tan et al., 2002); the other is attaching a weight to each formula and learning weights with supervision, e.g., MLN (Richardson and Domingos, 2006) . We employ the latter method and set δ(f) = wf ·nf . Finally, we employ a logistic regression classifier to predict R(H,T ), and the posterior probability of R(H,T ) is shown as follows,\nP (ρ = y|χ) = F(χ)y(1−F(χ))1−y\nF(χ) = 1 1 + e−χ\n(9)\nwhere y is a 0-1 label of ρ. Similar to Ltrw in Equation (5), we treat the negative logarithm of P (ρ = y|χ) as the loss of inference, Linf = − logP (ρ = y|χ), and turn to minimize it. Moreover, the loss Linfrw of the above goal-directed random walk is influenced by the result of predicting R(H,T ), so Φrij and Φrik will be also updated. Algorithm 1 shows the main process of training, where Ξ is the triplet set for training, Ψ is the potential function in Equation (7), F is the formula set, fp is\na formula generated from the path p, and H,T, t are entities in the KB. To predict ρ = R(H,T ), the algorithm first performs multi rounds of random walks, and each random walk can find a path pHt (at line 2). Then the algorithm decides to update Ψ by Ltrw based on whether t is T (at line 3), and adds the formula pf into the formula set when t = T (at line 4). After random walks, the inference model predicts ρ, and computes Linf and L inf rw according to the prediction result (at line 5). FinallyW and Ψ are updated by Linf and L inf rw (at line 6-7), respectively. After training by all triplets in Ξ, the algorithm removes formulas with low weights from F (at line 8) and outputs the model (at line 9). When we infer a new triplet by this model, the process is similar to Algorithm 1."
  }, {
    "heading": "4 Experiments",
    "text": "We first compare our approach with several state-ofart methods on link prediction task to explore our approach’s overall ability of inference. Subsequently, we evaluate formulas mined by different random walk methods to explore whether the goal-directed mechanism can increase efficiency of mining useful structures. Finally, we dive deep into the formulas generated by our approach to analyze the characters of our approach."
  }, {
    "heading": "4.1 Datasets and Evaluation Setup",
    "text": "We conduct experiments on both WN18 and FB15K datasets which are subsets sampled from WordNet (Miller, 1995) and Freebase (Bollacker et al., 2008), respectively, and Table 1 shows the statistics of them. For the link prediction task, we predict the missing h or t for a triplet r(h, t) in test set. The detail evaluation method is that t in r(h, t) is replaced by all entities in the KB and methods need to rank the right answer at the top of the list, and so does h in r(h, t). We report the mean of those true answer ranks and the Hits@10 under both ’raw’ and ’filter’ as TransE (Bordes et al., 2013) does, where Hits@10 is the proportion of correct entities ranked in the top 10.\nsults on relation form of government in FB15K."
  }, {
    "heading": "4.2 Baselines",
    "text": "We employ two types of baselines. One type is based on random walks including: a) the basic random walk algorithm whose state transition probability matrix is shown in Equation (2); b) PRA in (Lao et al., 2011) which is a typical heuristic random walk algorithm. The other type is based on KB embeddings including TransE (Bordes et al., 2013), Rescal (Nickel et al., 2011), TransH (Wang et al., 2014b), TransR (Lin et al., 2015b). These embedding-based methods have no explicit formulas, so we will not evaluate their performances on mining formulas."
  }, {
    "heading": "4.3 Settings",
    "text": "We implement three random walk methods under a unified framework. To predict r(h, ∗) quickly, we first select Top-K candidate instances, t1→K , by TransE as (Wei et al., 2015), and then the algorithm infers each r(h, ti) and ranks them by inference results. We adjust parameters for our approach with the validate dataset, and the optimal configurations are set as follows. The rounds of random walk is 10, learning rate is 0.0001, training epoch is 100, the size of candidate set is 500 for WN18 and 100 for FB15K, the embeddings have 50 dimensionalities for WN18 and 100 dimensionalities for FB15K, and the embeddings are initialized by TransE. For some relations, random walk truly finds no practicable formulas, so we employ TransE to improve per-\nformance for these relations. For embedding-based methods, we use reported results directly since the evaluation datasets are identical."
  }, {
    "heading": "4.4 Results on Link Prediction",
    "text": "We show the results of link prediction for our approach and all baselines in Table 2 (* means the mean of ranks for random walk methods are evaluated in the Top-K subset), and we can obtain the following observations:\n1) Our approach achieves good performances on both WN18 and FB15K. On the FB15K, our approach outperforms all baselines. It indicates that our approach is effective for inference. On the WN18, three random walk methods have similar performances. The reason is that most entities in WN18 only have a small number of neighbors, so RW and PRA can also find useful structures in a few rounds.\n2) For FB15K, the performances of RW and PRA are both poor and even worse than a part of embedding-based methods, but the performance of our approach is still the best. The reason is that there are too many relation types in FB15K, so goalless random walks introduce lots of noise. Oppositely, our approach has a great capability of resisting noise for the goal-directed mechanism.\n3) RW and PRA have similar performances on both datasets, which indicates the heuristic rule of PRA does not apply to all relations and formulas."
  }, {
    "heading": "4.5 Paths Recall by Random Walks",
    "text": "To further explore whether the goal-directed mechanism can increase efficiency of mining paths, we compare the three random walk methods by the number of paths mined. For each triplet R(H,T )\nin the training set, we perform 10 rounds of random walks fromH and record the number of times which arrive at T, noted as Arr@10. We respectively select one relation type from WN18 and FB15K and show the comparison result in Figure 2. We can obtain the following observations:\n1) With the increase of training epochs, Arr@10 of the goal-directed random walk first increases and then stays around a high value on both WN18 and FB15K, but the Arr@10 of RW and PRA always stay the same. This phenomenon indicates that the goal-directed random walk is a learnable model and can be trained to find more useful structures with epochs increasing, but RW and PRA are not.\n2) RW and PRA always have similar Arr@10, which means PRA has not found more formulas. This indicates that the heuristic rule of PRA is not always be beneficial to mining more structures for all relations."
  }, {
    "heading": "4.6 Example Formulas",
    "text": "In Table 3, we show a small number of formulas mined by our approach from FB15K, and the formulas represent different types. Some formulas contain clear logic, e.g, Formula 1 means that if the writer x contributes a story to the film y and y is adapted from the book z, x is the writer of the book z. Some formulas have a high probability of being satisfied, e.g., Formula 3 means the wedding place probably is also the burial place for some people, and Formula 7 means the parent of the person x died of the disease and thus the person x has a high risk of suffering from the disease. Some formulas depend on synonyms, e.g., story by and works written have the similar meaning in Formula 2. However, there are still useless formulas, e.g, Formula 8 is useless be-\ncause the body of the formula is same as the head. Such useless formula can be removed by a superrule, which is that the head of a formula cannot occur in its body."
  }, {
    "heading": "5 Related Work",
    "text": "Our work has two aspects, which are related to mining formula automatically and inference on KBs, respectively.\nInductive Logic Programming (ILP) (Muggleton and De Raedt, 1994) and Association Rule Mining (ARM) (Agrawal et al., 1993) are both early works on mining formulas. FOIT (Quinlan, 1990) and SHERLOCK (Schoenmackers et al., 2010) are typical ILP systems, but the former one usually need a lot of negative facts and the latter one focuses on mining formulas from text. AMIE (Galárraga et al., 2013) is based on ARM and proposes a new measure for formulas instead of the confidence. Several structure learning algorithms (Kok and Domingos, 2005; Kok and Domingos, 2009; Kok and Domingos, 2010) based on Markov Logic Network (MLN) (Richardson and Domingos, 2006) can also learn first order logic formulas automatically, but they are too slow to run on large KBs. ProPPR (Wang et al., 2013; Wang et al., 2014a) performs structure learning by depth first searching on the knowledge graph, which is still not efficient enough to handle webscale KBs. PRA (Lao and Cohen, 2010; Lao et al., 2011) is a method based on random walks and employs heuristic rules to direct random walks. PRA is closely related to our approach, but unlike it, our approach dynamically calculates state transition prob-\nabilities. Another method based on random walks (Wei et al., 2015) merges embedding similarities of candidates into the random walk as a priori, while our approach employs KB embeddings to calculate potentials for neighbors.\nThe majority of mining formula methods can perform inference on KBs, and besides them, a dozen methods based KB embeddings can also achieve the inference goal, and the typical ones of them are TransE (Bordes et al., 2013), Rescal (Nickel et al., 2011), TransH (Wang et al., 2014b), TransR (Lin et al., 2015b). These embedding-based methods take advantage of the implicit relationship between elements of the KB and perform inference by calculating similarities. There are also methods which combine inference formulas and KB embeddings, such as PTransE (Lin et al., 2015a) and ProPPR+MF (Wang and Cohen, 2016)."
  }, {
    "heading": "6 Conclusion and Future Works",
    "text": "In this paper, we introduce a goal-directed random walk algorithm to increase efficiency of mining useful formulas and decrease noise simultaneously. The approach employs the inference target as the direction at each steps in the random walk process and is more inclined to visit structures helpful to inference. In empirical studies, we show our approach achieves good performances on link prediction task over large-scale KBs. In the future, we are interested in exploring mining formulas directly in the distributional spaces which may resolve the sparsity of formulas."
  }, {
    "heading": "7 Acknowledgments",
    "text": "This work was supported by the Natural Science Foundation of China (No. 61533018), the National Basic Research Program of China (No. 2014CB340503) and the National Natural Science Foundation of China (No. 61272332). And this work was also supported by Google through focused research awards program."
  }],
  "year": 2016,
  "references": [{
    "title": "Mining association rules between sets of items in large databases",
    "authors": ["Rakesh Agrawal", "Tomasz Imieliński", "Arun Swami."],
    "venue": "ACM SIGMOD Record, 22(2):207– 216.",
    "year": 1993
  }, {
    "title": "Neural machine translation by jointly learning to align and translate",
    "authors": ["Dzmitry Bahdanau", "Kyunghyun Cho", "Yoshua Bengio."],
    "venue": "International Conference on Learning Representations.",
    "year": 2015
  }, {
    "title": "Freebase: a collaboratively created graph database for structuring human knowledge",
    "authors": ["Kurt Bollacker", "Colin Evans", "Praveen Paritosh", "Tim Sturge", "Jamie Taylor."],
    "venue": "Proceedings of the 2008 ACM SIGMOD international conference on Management of da-",
    "year": 2008
  }, {
    "title": "Translating embeddings for modeling multi-relational data",
    "authors": ["Antoine Bordes", "Nicolas Usunier", "Alberto Garcia-Duran", "Jason Weston", "Oksana Yakhnenko."],
    "venue": "Advances in Neural Information Processing Systems, pages 2787–2795.",
    "year": 2013
  }, {
    "title": "Amie: association rule mining under incomplete evidence in ontological knowledge bases",
    "authors": ["Luis Antonio Galárraga", "Christina Teflioudi", "Katja Hose", "Fabian Suchanek."],
    "venue": "Proceedings of the 22nd international conference on World Wide Web, pages 413–422.",
    "year": 2013
  }, {
    "title": "Yago2: A spatially and temporally enhanced knowledge base from wikipedia",
    "authors": ["Johannes Hoffart", "Fabian M Suchanek", "Klaus Berberich", "Gerhard Weikum."],
    "venue": "Artificial Intelligence, 194:28–61.",
    "year": 2013
  }, {
    "title": "Learning the structure of markov logic networks",
    "authors": ["Stanley Kok", "Pedro Domingos."],
    "venue": "Proceedings of the 22nd international conference on Machine learning, pages 441–448. ACM.",
    "year": 2005
  }, {
    "title": "Learning markov logic network structure via hypergraph lifting",
    "authors": ["Stanley Kok", "Pedro Domingos."],
    "venue": "Proceedings of the 26th annual international conference on machine learning, pages 505–512. ACM.",
    "year": 2009
  }, {
    "title": "Learning markov logic networks using structural motifs",
    "authors": ["Stanley Kok", "Pedro Domingos."],
    "venue": "Pro-",
    "year": 2010
  }, {
    "title": "Relational retrieval using a combination of path-constrained random walks",
    "authors": ["Ni Lao", "William W Cohen."],
    "venue": "Machine learning, 81(1):53–67.",
    "year": 2010
  }, {
    "title": "Random walk inference and learning in a large scale knowledge base",
    "authors": ["Ni Lao", "Tom Mitchell", "William W Cohen."],
    "venue": "Proceedings of the Conference on Empirical Methods in Natural Language Processing, pages 529–539. Association for Computational Lin-",
    "year": 2011
  }, {
    "title": "Modeling relation paths for representation learning of knowledge bases",
    "authors": ["Yankai Lin", "Zhiyuan Liu", "Maosong Sun."],
    "venue": "arXiv preprint arXiv:1506.00379.",
    "year": 2015
  }, {
    "title": "Learning entity and relation embeddings for knowledge graph completion",
    "authors": ["Yankai Lin", "Zhiyuan Liu", "Maosong Sun", "Yang Liu", "Xuan Zhu."],
    "venue": "AAAI, pages 2181–2187.",
    "year": 2015
  }, {
    "title": "Effective approaches to attentionbased neural machine translation",
    "authors": ["Minh-Thang Luong", "Hieu Pham", "Christopher D Manning."],
    "venue": "Conference on Empirical Methods in Natural Language Processing.",
    "year": 2015
  }, {
    "title": "Wordnet: a lexical database for english",
    "authors": ["George A Miller."],
    "venue": "Communications of the ACM, 38(11):39–41.",
    "year": 1995
  }, {
    "title": "Inductive logic programming: Theory and methods",
    "authors": ["Stephen Muggleton", "Luc De Raedt."],
    "venue": "The Journal of Logic Programming, 19:629–679.",
    "year": 1994
  }, {
    "title": "A three-way model for collective learning on multi-relational data",
    "authors": ["Maximilian Nickel", "Volker Tresp", "Hans-Peter Kriegel."],
    "venue": "Proceedings of the 28th international conference on machine learning (ICML-11), pages 809–816.",
    "year": 2011
  }, {
    "title": "Learning logical definitions from relations",
    "authors": ["J. Ross Quinlan."],
    "venue": "Machine learning, 5(3):239–266.",
    "year": 1990
  }, {
    "title": "Markov logic networks",
    "authors": ["Matthew Richardson", "Pedro Domingos."],
    "venue": "Machine learning, 62(12):107–136.",
    "year": 2006
  }, {
    "title": "Learning first-order horn clauses from web text",
    "authors": ["Stefan Schoenmackers", "Oren Etzioni", "Daniel S Weld", "Jesse Davis."],
    "venue": "Proceedings of the 2010 Conference on Empirical Methods in Natural Language Processing, pages 1088–1098. Association for Computational",
    "year": 2010
  }, {
    "title": "End-to-end memory networks",
    "authors": ["Sainbayar Sukhbaatar", "Jason Weston", "Rob Fergus"],
    "venue": "In Advances in Neural Information Processing Systems,",
    "year": 2015
  }, {
    "title": "Selecting the right interestingness measure for association patterns",
    "authors": ["Pang-Ning Tan", "Vipin Kumar", "Jaideep Srivastava."],
    "venue": "Proceedings of the eighth ACM SIGKDD international conference on Knowledge discovery and data mining, pages 32–41. ACM.",
    "year": 2002
  }, {
    "title": "Learning first-order logic embeddings via matrix factorization",
    "authors": ["William Yang Wang", "William W Cohen."],
    "venue": "Proceedings of the 25th International Joint Conference on Artificial Intelligence (IJCAI 2016).",
    "year": 2016
  }, {
    "title": "Programming with personalized pagerank: a locally groundable first-order probabilistic logic",
    "authors": ["William Yang Wang", "Kathryn Mazaitis", "William W Cohen."],
    "venue": "Proceedings of the 22nd ACM international conference on Conference on information & knowledge",
    "year": 2013
  }, {
    "title": "Structure learning via parameter learning",
    "authors": ["William Yang Wang", "Kathryn Mazaitis", "William W Cohen."],
    "venue": "Proceedings of the 23rd ACM International Conference on Conference on Information and Knowledge Management, pages 1199–1208. ACM.",
    "year": 2014
  }, {
    "title": "Knowledge graph embedding by translating on hyperplanes",
    "authors": ["Zhen Wang", "Jianwen Zhang", "Jianlin Feng", "Zheng Chen."],
    "venue": "AAAI, pages 1112–1119. Citeseer.",
    "year": 2014
  }, {
    "title": "Large-scale knowledge base completion: Inferring via grounding network sampling over selected instances",
    "authors": ["Zhuoyu Wei", "Jun Zhao", "Kang Liu", "Zhenyu Qi", "Zhengya Sun", "Guanhua Tian."],
    "venue": "Proceedings of the 24th ACM International on Conference",
    "year": 2015
  }],
  "id": "SP:45348379df0d40b5c1d4df26587e6b80cfe96565",
  "authors": [{
    "name": "Zhuoyu Wei",
    "affiliations": []
  }, {
    "name": "Jun Zhao",
    "affiliations": []
  }, {
    "name": "Kang Liu",
    "affiliations": []
  }],
  "abstractText": "Deep inference on a large-scale knowledge base (KB) needs a mass of formulas, but it is almost impossible to create all formulas manually. Data-driven methods have been proposed to mine formulas from KBs automatically, where random sampling and approximate calculation are common techniques to handle big data. Among a series of methods, Random Walk is believed to be suitable for knowledge graph data. However, a pure random walk without goals still has a poor efficiency of mining useful formulas, and even introduces lots of noise which may mislead inference. Although several heuristic rules have been proposed to direct random walks, they do not work well due to the diversity of formulas. To this end, we propose a novel goaldirected inference formula mining algorithm, which directs random walks by the specific inference target at each step. The algorithm is more inclined to visit benefic structures to infer the target, so it can increase efficiency of random walks and avoid noise simultaneously. The experiments on both WordNet and Freebase prove that our approach is has a high efficiency and performs best on the task.",
  "title": "Mining Inference Formulas by Goal-Directed Random Walks"
}