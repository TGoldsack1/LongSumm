{
  "sections": [{
    "text": "Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (Short Papers), pages 118–124 Vancouver, Canada, July 30 - August 4, 2017. c©2017 Association for Computational Linguistics\nhttps://doi.org/10.18653/v1/P17-2019"
  }, {
    "heading": "1 Introduction",
    "text": "Generative models defining joint distributions over parse trees and sentences are good theoretical models for interpreting natural language data, and appealing tools for tasks such as parsing, grammar induction and language modeling (Collins, 1999; Henderson, 2003; Titov and Henderson, 2007; Petrov and Klein, 2007; Dyer et al., 2016). However, they often impose strong independence assumptions which restrict the use of arbitrary features for effective disambiguation. Moreover, generative parsers are typically trained by maximizing the joint probability of the parse tree and the sentence—an objective that only indirectly relates to the goal of parsing. At test time, these models require a relatively expensive recognition algo-\n1Our code is available at https://github.com/ cheng6076/virnng.git.\nrithm (Collins, 1999; Titov and Henderson, 2007) to recover the parse tree, but the parsing performance consistently lags behind their discriminative competitors (Nivre et al., 2007; Huang, 2008; Goldberg and Elhadad, 2010), which are directly trained to maximize the conditional probability of the parse tree given the sentence, where linear-time decoding algorithms exist (e.g., for transition-based parsers).\nIn this work, we propose a parsing and language modeling framework that marries a generative model with a discriminative recognition algorithm in order to have the best of both worlds. The idea of combining these two types of models is not new. For example, Collins and Koo (2005) propose to use a generative model to generate candidate constituency trees and a discriminative model to rank them. Sangati et al. (2009) follow the opposite direction and employ a generative model to re-rank the dependency trees produced by a discriminative parser. However, previous work combines the two types of models in a goal-oriented, pipeline fashion, which lacks model interpretations and focuses solely on parsing.\nIn comparison, our framework unifies generative and discriminative parsers with a single objective, which connects to expectation maximization and variational inference in grammar induction settings. In a nutshell, we treat parse trees as latent factors generating natural language sentences and parsing as a posterior inference task. We showcase the framework using Recurrent Neural Network Grammars (RNNGs; Dyer et al. 2016), a recently proposed probabilistic model of phrase-structure trees based on neural transition systems. Different from this work which introduces separately trained discriminative and generative models, we integrate the two in an auto-encoder which fits our training objective. We show how the framework enables grammar induction, parsing and language\n118\nmodeling within a single implementation. On the English Penn Treebank, we achieve competitive performance on constituency parsing and state-ofthe-art single-model language modeling score."
  }, {
    "heading": "2 Preliminaries",
    "text": "In this section we briefly describe Recurrent Neural Network Grammars (RNNGs; Dyer et al. 2016), a top-down transition-based algorithm for parsing and generation. There are two versions of RNNG, one discriminative, the other generative. We follow the original paper in presenting the discriminative variant first.\nThe discriminative RNNG follows a shiftreduce parser that converts a sequence of words into a parse tree. As in standard shift-reduce parsers, the RNNG uses a buffer to store unprocessed terminal symbols and a stack to store partially completed syntactic constituents. At each timestep, one of the following three operations2 is performed:\n• NT(X) introduces an open non-terminal X onto the top of the stack, represented as an open parenthesis followed by X, e.g., (NP.\n• SHIFT fetches the terminal in the front of the buffer and pushes it onto the top of the stack.\n• REDUCE completes a subtree by repeatedly popping the stack until an open non-terminal is encountered. The non-terminal is popped as well, after which a composite term representing the entire subtree is pushed back onto the top of the stack, e.g., (NP the cat).\nThe above transition system can be adapted with minor modifications to an algorithm that generates trees and sentences. In generator transitions, there is no input buffer of unprocessed words but there is an output buffer for storing words that have been generated. To reflect the change, the previous SHIFT operation is modified into a GEN operation defined as follows:\n• GEN generates a terminal symbol and add it to the stack and the output buffer.\n2To be precise, the total number of operations under our description is |X|+2 since the NT operation varies with the non-terminal choice X."
  }, {
    "heading": "3 Methodology",
    "text": "Our framework unifies generative and discriminative parsers within a single training objective. For illustration, we adopt the two RNNG variants introduced above with our customized features. Our starting point is the generative model (§ 3.1), which allows us to make explicit claims about the generative process of natural language sentences. Since this model alone lacks a bottom-up recognition mechanism, we introduce a discriminative recognition model (§ 3.2) and connect it with the generative model in an encoder-decoder setting. To offer a clear interpretation of the training objective (§ 3.3), we first consider the parse tree as latent and the sentence as observed. We then discuss extensions that account for labeled parse trees. Finally, we present various inference techniques for parsing and language modeling within the framework (§ 3.4)."
  }, {
    "heading": "3.1 Decoder (Generative Model)",
    "text": "The decoder is a generative RNNG that models the joint probability p(x, y) of a latent parse tree y and an observed sentence x. Since the parse tree is defined by a sequence of transition actions a, we write p(x, y) as p(x, a).3 The joint distribution p(x, a) is factorized into a sequence of transition probabilities and terminal probabilities (when actions are GEN), which are parametrized by a transitional state embedding u:\np(x, a) = p(a)p(x|a)\n=\n|a|∏\nt=1\np(at|ut)p(xt|ut)I(at=GEN) (1)\nwhere I is an indicator function and ut represents the state embedding at time step t. Specifically, the conditional probability of the next action is:\np(at|ut) = |a|∏\nt=1\nexp(atu T t + ba)∑\na′∈A exp(a ′uTt + ba′)\n(2)\nwhere at represents the action embedding at time step t, A the action space and ba the bias. Similarly, the next word probability (when GEN is invoked) is computed as:\np(wt|ut) = |a|∏\nt=1\nexp(wtu T t + bw)∑\nw′∈W exp(w ′uTt + bw′)\n(3)\n3We assume that the action probability does not take the actual terminal choice into account.\nwhereW denotes all words in the vocabulary. To satisfy the independence assumptions imposed by the generative model, ut uses only a restricted set of features defined over the output buffer and the stack — we consider p(a) as a context insensitive prior distribution. Specifically, we use the following features: 1) the stack embedding dt which encodes the stack of the decoder and is obtained with a stack-LSTM (Dyer et al., 2015, 2016); 2) the output buffer embedding ot; we use a standard LSTM to compose the output buffer and ot is represented as the most recent state of the LSTM; and 3) the parent non-terminal embedding nt which is accessible in the generative model because the RNNG employs a depth-first generation order. Finally, ut is computed as:\nut = W2 tanh(W1[dt,ot,nt] + bd) (4)\nwhere Ws are weight parameters and bd the bias."
  }, {
    "heading": "3.2 Encoder (Recognition Model)",
    "text": "The encoder is a discriminative RNNG that computes the conditional probability q(a|x) of the transition action sequence a given an observed sentence x. This conditional probability is factorized over time steps as:\nq(a|x) = |a|∏\nt=1\nq(at|vt) (5)\nwhere vt is the transitional state embedding of the encoder at time step t.\nThe next action is predicted similarly to Equation (2), but conditioned on vt. Thanks to the discriminative property, vt has access to any contextual features defined over the entire sentence and the stack — q(a|x) acts as a context sensitive posterior approximation. Our features4 are: 1) the stack embedding et obtained with a stack-LSTM that encodes the stack of the encoder; 2) the input buffer embedding it; we use a bidirectional LSTM to compose the input buffer and represent each word as a concatenation of forward and backward LSTM states; it is the representation of the word on top of the buffer; 3) to incorporate more global features and a more sophisticated look-ahead mechanism for the buffer, we also use an adaptive buffer embedding īt; the latter is computed by having the stack embedding et attend to\n4Compared to Dyer et al. (2016), the new features we introduce are 3) and 4), which we found empirically useful.\nall remaining embeddings on the buffer with the attention function in Vinyals et al. (2015); and 4) the parent non-terminal embedding nt. Finally, vt is computed as follows:\nvt = W4 tanh(W3[et, it, īt,nt] + be) (6)\nwhere Ws are weight parameters and be the bias."
  }, {
    "heading": "3.3 Training",
    "text": "Consider an auto-encoder whose encoder infers the latent parse tree and the decoder generates the observed sentence from the parse tree.5 The maximum likelihood estimate of the decoder parameters is determined by the log marginal likelihood of the sentence:\nlog p(x) = log ∑\na\np(x, a) (7)\nWe follow expectation-maximization and variational inference techniques to construct an evidence lower bound of the above quantity (by Jensen’s Inequality), denoted as follows:\nlog p(x) ≥ Eq(a|x) log p(x, a)\nq(a|x) = Lx (8)\nwhere p(x, a) = p(x|a)p(a) comes from the decoder or the generative model, and q(a|x) comes from the encoder or the recognition model. The objective function6 in Equation (8), denoted by Lx, is unsupervised and suited to a grammar induction task. This objective can be optimized with the methods shown in Miao and Blunsom (2016).\nNext, consider the case when the parse tree is observed. We can directly maximize the log likelihood of the parse tree for the encoder output log q(a|x) and the decoder output log p(a):\nLa = log q(a|x) + log p(a) (9)\nThis supervised objective leverages extra information of labeled parse trees to regularize the distribution q(a|x) and p(a), and the final objective is:\nL = Lx + La (10) where Lx and La can be balanced with the task focus (e.g, language modeling or parsing).\n5Here, GEN and SHIFT refer to the same action with different definitions for encoding and decoding.\n6See § 4 and Appendix A for comparison between this objective and the importance sampler of Dyer et al. (2016)."
  }, {
    "heading": "3.4 Inference",
    "text": "We consider two inference tasks, namely parsing and language modeling.\nParsing In parsing, we are interested in the parse tree that maximizes the posterior p(a|x) (or the joint p(a, x)). However, the decoder alone does not have a bottom-up recognition mechanism for computing the posterior. Thanks to the encoder, we can compute an approximated posterior q(a|x) in linear time and select the parse tree that maximizes this approximation. An alternative is to generate candidate trees by sampling from q(a|x), re-rank them with respect to the joint p(x, a) (which is proportional to the true posterior), and select the sample that maximizes the true posterior.\nLanguage Modeling In language modeling, our goal is to compute the marginal probability p(x) = ∑ a p(x, a), which is typically intractable. To approximate this quantity, we can use Equation (8) to compute a lower bound of the log likelihood log p(x) and then exponentiate it to get a pessimistic approximation of p(x).7\nAnother way of computing p(x) (without lower bounding) would be to use the variational approximation q(a|x) as the proposal distribution as in the importance sampler of Dyer et al. (2016). However, this is beyond the scope of this work and we leave detailed discussions to Appendix A."
  }, {
    "heading": "4 Related Work",
    "text": "Our framework is related to a class of variational autoencoders (Kingma and Welling, 2014), which use neural networks for posterior approximation in variational inference. This technique has been previously used for topic modeling (Miao et al.,\n7As a reminder, the language modeling objective is exp(NLL/T ), where NLL denotes the total negative log likelihood of the test data and T the token counts.\n2016) and sentence compression (Miao and Blunsom, 2016). Another interpretation of the proposed framework is from the perspective of guided policy search in reinforcement learning (Bachman and Precup, 2015), where a generative parser is trained to imitate the trace of a discriminative parser. Further connections can be drawn with the importance-sampling based inference of Dyer et al. (2016). There, a generative RNNG and a discriminative RNNG are trained separately; during language modeling, the output of the discriminative model serves as the proposal distribution of an importance sampler p(x) = Eq(a|x) p(x,a) q(a|x) . Compared to their work, we unify the generative and discriminative RNNGs in a single framework, and adopt a joint training objective."
  }, {
    "heading": "5 Experiments",
    "text": "We performed experiments on the English Penn Treebank dataset; we used sections 2–21 for training, 24 for validation, and 23 for testing. Following Dyer et al. (2015), we represent each word in three ways: as a learned vector, a pretrained vector, and a POS tag vector. The encoder word embedding is the concatenation of all three vectors while the decoder uses only the first two since we do not consider POS tags in generation. Table 1 presents details on the hyper-parameters we used. To find the MAP parse tree argmaxa p(a, x) (where p(a, x) is used rank the output of q(a|x)) and to compute the language modeling perplexity with the evidence lower bound (where a ∼ q(a|x)), we collect 100 samples from q(a|x), same as Dyer et al. (2016).\nExperimental results for constituency parsing and language modeling are shown in Tables 2 and 3, respectively. As can be seen, the single framework we propose obtains competitive pars-\ning performance. Comparing the two inference methods for parsing, ranking approximated MAP trees from q(a|x) with respect to p(a, x) yields a small improvement, as in Dyer et al. (2016). It is worth noting that our parsing performance lags behind Dyer et al. (2016). We believe this is due to implementation disparities, such as the modeling of the reduce operation. While Dyer et al. (2016) use an LSTM as the syntactic composition function of each subtree, we adopt a rather simple composition function based on embedding averaging for memory concern.\nOn language modeling, our framework achieves lower perplexity compared to Dyer et al. (2016) and baseline models. This gain possibly comes from the joint optimization of both the generative and discriminative components towards a language modeling objective. However, we acknowledge a subtle difference between Dyer et al. (2016) and our approach compared to baseline language models: while the latter incrementally estimate the next word probability, our approach (and Dyer et al. 2016) directly assigns probability to the entire sentence. Overall, the advantage of our framework compared to Dyer et al. (2016) is that it opens an avenue to unsupervised training."
  }, {
    "heading": "6 Conclusions",
    "text": "We proposed a framework that integrates a generative parser with a discriminative recognition model and showed how it can be instantiated with RNNGs. We demonstrated that a unified framework, which relates to expectation maximization and variational inference, enables effective parsing and language modeling algorithms. Evaluation on the English Penn Treebank, revealed that our framework obtains competitive performance on constituency parsing and state-of-the-art results on single-model language modeling. In the future, we would like to perform grammar induction based on Equation (8), with gradient descent and posterior regularization techniques (Ganchev et al., 2010).\nAcknowledgments We thank three anonymous reviewers and members of the ILCC for valuable feedback, and Muhua Zhu and James Cross for help with data preparation. The support of the European Research Council under award number 681760 “Translating Multiple Modalities into Text” is gratefully acknowledged."
  }, {
    "heading": "A Comparison to Importance Sampling",
    "text": "(Dyer et al., 2016)\nIn this appendix we highlight the connections between importance sampling and variational inference, thereby comparing our method with Dyer et al. (2016).\nConsider a simple directed graphical model with discrete latent variables a (e.g., a is the transition action sequence) and observed variables x (e.g., x is the sentence). The model evidence, or the marginal likelihood p(x) = ∑ a p(x, a) is often intractable to compute. Importance sampling transforms the above quantity into an expectation over a distribution q(a), which is known and easy to sample from:\np(x) = ∑\na\np(x, a) q(a)\nq(a) = Eq(a)w(x, a) (11)\nwhere q(a) is the proposal distribution and w(x, a) = p(x,a)q(a) the importance weight.\nThe proposal distribution can potentially depend on the observations x, i.e., q(a) , q(a|x).\nA challenge with importance sampling lies in choosing a proposal distribution which leads to low variance. As shown in Rubinstein and Kroese (2008), the optimal choice of the proposal distribution is in fact the true posterior p(a|x), in which case the importance weight p(a,x)p(a|x) = p(x) is constant with respect to a. In Dyer et al. (2016), the proposal distribution depends on x, i.e., q(a) , q(a|x), and is computed with a separately-trained, discriminative model. This proposal choice is close to optimal, since in a fully supervised setting a is also observed and the discriminative model can be trained to approximate the true posterior well. We hypothesize that the performance of their importance sampler is dependent on this specific proposal distribution. Besides, their training strategy does not generalize to an unsupervised setting.\nIn comparison, variational inference approach approximates the log marginal likelihood log p(x) with the evidence lower bound. It is a natural choice when one aims to optimize Equation (11) directly:\nlog p(x) = log ∑\na\np(x, a) q(a)\nq(a)\n≥ Eq(a) log p(x, a)\nq(a)\n(12)\nwhere q(a) is the variational approximation of the true posterior. Again, the variational approximation can potentially depend on the observation x (i.e., q(a) , q(a|x)) and can be computed with a discriminative model. Equation (12) is a well-defined, unsupervised training objective which allows us to jointly optimize generative (i.e., p(x, a)) and discriminative (i.e., q(a|x)) models. To further support the observed variable a, we augment this objective with supervised terms shown in Equation (10), following Kingma et al. (2014) and Miao and Blunsom (2016).\nEquation (12) can be also used to approximate the marginal likelihood p(x) (e.g., in language modeling) with its lower bound. An alternative choice without lower bounding is to use the variational approximation q(a|x) as the proposal distribution in importance sampling (Equation (11)). Ghahramani and Beal (2000) show that this proposal distribution leads to improved results of importance samplers. However, a potential drawback of importance sampling-based approach is that it\nis prone to numerical underflow. In practice, we observed similar language modeling performance for both methods."
  }],
  "year": 2017,
  "references": [{
    "title": "Inducing history representations for broad coverage statistical parsing",
    "authors": ["James Henderson."],
    "venue": "Proceedings of the 2003 Human Language Technology Conference of the North American Chapter of the Association for Computational Linguistics. Edmon-",
    "year": 2003
  }, {
    "title": "Forest reranking: Discriminative parsing with non-local features",
    "authors": ["Liang Huang."],
    "venue": "Proceedings of ACL-08: HLT . Columbus, Ohio, pages 586–594.",
    "year": 2008
  }, {
    "title": "Semi-supervised learning with deep generative models",
    "authors": ["Diederik P Kingma", "Shakir Mohamed", "Danilo Jimenez Rezende", "Max Welling."],
    "venue": "Advances in Neural Information Processing Systems, MIT Press, pages 3581–3589.",
    "year": 2014
  }, {
    "title": "Autoencoding variational Bayes",
    "authors": ["Diederik P Kingma", "Max Welling."],
    "venue": "Proceedings of the International Conference on Learning Representations. Banff, Canada.",
    "year": 2014
  }, {
    "title": "Language as a latent variable: Discrete generative models for sentence compression",
    "authors": ["Yishu Miao", "Phil Blunsom."],
    "venue": "Proceedings of the 2016 Conference on Empirical Methods in Natural Language Processing. Austin, Texas, pages 319–328.",
    "year": 2016
  }, {
    "title": "Neural variational inference for text processing",
    "authors": ["Yishu Miao", "Lei Yu", "Phil Blunsom."],
    "venue": "Proceedings of The 33rd International Conference on Machine Learning. New York, New York, USA, pages 1727–1736.",
    "year": 2016
  }, {
    "title": "Neural variational inference and learning in belief networks",
    "authors": ["Andriy Mnih", "Karol Gregor."],
    "venue": "Proceedings of the 31st International Conference on Machine Learning. Beijing, China, pages 1791– 1799.",
    "year": 2014
  }, {
    "title": "Maltparser: A language-independent system for data-driven dependency parsing",
    "authors": ["Joakim Nivre", "Johan Hall", "Jens Nilsson", "Atanas Chanev", "Gülsen Eryigit", "Sandra Kübler", "Svetoslav Marinov", "Erwin Marsi."],
    "venue": "Natural Language Engineering",
    "year": 2007
  }, {
    "title": "Glove: Global vectors for word representation",
    "authors": ["Jeffrey Pennington", "Richard Socher", "Christopher Manning."],
    "venue": "Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP). Doha, Qatar, pages 1532–",
    "year": 2014
  }, {
    "title": "Improved inference for unlexicalized parsing",
    "authors": ["Slav Petrov", "Dan Klein."],
    "venue": "Human Language Technologies 2007: The Conference of the North American Chapter of the Association for Computational Linguistics; Proceedings of the Main Confer-",
    "year": 2007
  }, {
    "title": "Simulation and the Monte Carlo method",
    "authors": ["Reuven Y Rubinstein", "Dirk P Kroese."],
    "venue": "John Wiley & Sons.",
    "year": 2008
  }, {
    "title": "A generative re-ranking model for dependency parsing",
    "authors": ["Federico Sangati", "Willem Zuidema", "Rens Bod."],
    "venue": "Proceedings of the 11th International Conference on Parsing Technologies (IWPT’09). Paris, France, pages 238–241.",
    "year": 2009
  }, {
    "title": "Bayesian symbol-refined tree substitution grammars for syntactic parsing",
    "authors": ["Hiroyuki Shindo", "Yusuke Miyao", "Akinori Fujino", "Masaaki Nagata."],
    "venue": "Proceedings of the 50th Annual Meeting of the Association for Computational Linguistics: Long",
    "year": 2012
  }, {
    "title": "Parsing with compositional vector grammars",
    "authors": ["Richard Socher", "John Bauer", "Christopher D. Manning", "Ng Andrew Y."],
    "venue": "Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers). Sofia,",
    "year": 2013
  }, {
    "title": "Constituent parsing with incremental sigmoid belief networks",
    "authors": ["Ivan Titov", "James Henderson."],
    "venue": "Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics. Prague, Czech Republic, pages 632–639.",
    "year": 2007
  }, {
    "title": "Grammar as a foreign language",
    "authors": ["Oriol Vinyals", "Łukasz Kaiser", "Terry Koo", "Slav Petrov", "Ilya Sutskever", "Geoffrey Hinton."],
    "venue": "Advances in Neural Information Processing Systems, MIT Press, pages 2773–2781.",
    "year": 2015
  }, {
    "title": "Fast and accurate shiftreduce constituent parsing",
    "authors": ["Muhua Zhu", "Yue Zhang", "Wenliang Chen", "Min Zhang", "Jingbo Zhu."],
    "venue": "Proceedings of the 51st Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers). Sofia,",
    "year": 2013
  }, {
    "title": "p(a|x) = p(x) is constant with respect to a",
    "authors": ["Dyer"],
    "year": 2016
  }],
  "id": "SP:4a8e87bdb9f5c781e29da762d04e95f868a45b71",
  "authors": [{
    "name": "Jianpeng Cheng",
    "affiliations": []
  }, {
    "name": "Adam Lopez",
    "affiliations": []
  }, {
    "name": "Mirella Lapata",
    "affiliations": []
  }],
  "abstractText": "Generative models defining joint distributions over parse trees and sentences are useful for parsing and language modeling, but impose restrictions on the scope of features and are often outperformed by discriminative models. We propose a framework for parsing and language modeling which marries a generative model with a discriminative recognition model in an encoder-decoder setting. We provide interpretations of the framework based on expectation maximization and variational inference, and show that it enables parsing and language modeling within a single implementation. On the English Penn Treenbank, our framework obtains competitive performance on constituency parsing while matching the state-of-the-art singlemodel language modeling score.1",
  "title": "A Generative Parser with a Discriminative Recognition Algorithm"
}