{
  "sections": [{
    "text": "Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing, pages 565–569 Brussels, Belgium, October 31 - November 4, 2018. c©2018 Association for Computational Linguistics\n565"
  }, {
    "heading": "1 Introduction",
    "text": "With the introduction of large scale machine comprehension datasets, machine comprehension models that are highly accurate and efficient in answering questions given raw texts have been proposed recently (Seo et al., 2016; Xiong et al., 2016; Wang et al., 2017c). While conventional machine comprehension models were given a paragraph that always contains an answer to a question, some researchers have extended the models to an open-domain setting where relevant documents have to be searched from an extremely large knowledge source such as Wikipedia (Chen et al., 2017; Wang et al., 2017a). However, most of the open-domain QA pipelines depend on traditional information retrieval systems\n∗Corresponding author\nwhich use TF-IDF rankings (Chen et al., 2017; Wang et al., 2017b). Despite the efficiency of the traditional retrieval systems, the documents retrieved and ranked at the top by such systems often do not contain answers to questions. However, simply increasing the number of top ranked documents to find answers also increases the number of irrelevant documents. The tradeoff between reading more documents and minimizing noise is frequently observed in previous works that defined the N number of top documents as a hyperparameter to find (Wang et al., 2017a).\nIn this paper, we tackle the problem of ranking the paragraphs of retrieved documents for improving the answer recall of the paragraphs while filtering irrelevant paragraphs. By using our simple but efficient Paragraph Ranker, our QA pipeline considers more documents for a high answer recall, and ranks paragraphs to read only the most relevant ones. The work closest to ours is that of Wang et al. (2017a). However, whereas their main focus is on re-ranking retrieved sentences to maximize the rewards of correctly answering the questions, our focus is to increase the answer recall of paragraphs with less noise. Thus, our work is complementary to the work of Wang et al. (2017a).\nOur work is largely inspired by the field of information retrieval called Learning to Rank (Liu et al., 2009; Severyn and Moschitti, 2015). Most learning to rank models consist of two parts: encoding networks and ranking functions. We use bidirectional long short term memory (Bi-LSTM) as our encoding network, and apply various ranking functions proposed by previous works (Severyn and Moschitti, 2015; Tu et al., 2017). Also, as the time and space complexities of ranking paragraphs are much larger than those of ranking sentences (Severyn and Moschitti, 2015), we resort to negative sampling (Mikolov et al., 2013) for an efficient training of our Paragraph Ranker.\nOur pipeline with Paragraph Ranker improves the exact match scores on the four open-domain QA datasets by 7.8% on average. Even though we did not further customize Document Reader of DrQA (Chen et al., 2017), the large improvement in the exact match scores shows that future researches would benefit from ranking and reading the more relevant paragraphs. By a qualitative analysis of ranked paragraphs, we provide additional evidence supporting our findings."
  }, {
    "heading": "2 Open-Domain QA Pipeline",
    "text": "Most open-domain QA systems are constructed as pipelines that include a retrieval system and a reader model. We additionally built Paragraph Ranker that assists our QA pipeline for a better paragraph selection. For the retrieval system and the reader model, we used Document Retriever and Document Reader of Chen et al. (2017).1 The overview of our pipeline is illustrated in Figure 1."
  }, {
    "heading": "2.1 Paragraph Ranker",
    "text": "Given N number of documents retrieved from Document Retriever, we assume that each document contains K number of paragraphs on average. Instead of feeding all NK number of paragraphs to Document Reader, we select only M number of paragraphs using Paragraph Ranker. Utilizing Paragraph Ranker, we safely increase N for a higher answer recall, and reduce the number of paragraphs to read by selecting only top ranked paragraphs.\nGiven the retrieved paragraphs Pi where i ranges from 1 to NK, and a question Q, we en-\n1https://github.com/facebookresearch/DrQA\ncode each paragraph and the question using two separate RNNs such as Bi-LSTM. Representations of each paragraph and the question are calculated as follows:\npih = BiLSTMp(E(Pi)) qh = BiLSTMq(E(Q))\nwhere BiLSTM(·) returns the concatenation of the last hidden state of forward LSTM and the first hidden state of backward LSTM. E(·) converts tokens in a paragraph or a question into pretrained word embeddings. We use GloVe (Pennington et al., 2014) for the pretrained word embeddings.\nOnce each paragraph and the question are represented as pih and qh, we calculate the probability of each paragraph to contain an answer of the question as follows:\np(Pi|Q) = 1\n1 + e−s(p i h,qh)\nwhere we have used similarity function s(·, ·) to measure the probability of containing answer to the question Q in the paragraph Pi. While Wang and Jiang (2015) adopted high capacity models such as Match-LSTM for measuring the similarity between paragraphs and questions, we use much simpler scoring functions to calculate the similarity more efficiently. We tested three different scoring functions: 1) the dot product of pih and qh, 2) the bilinear form pih T Wqh, and 3) a multilayer perceptron (MLP) (Severyn and Moschitti, 2015). While utilizing MLP takes much more time than the other two functions, recall of MLP was similar to that of the dot product. Also, as recall of the bilinear form was worse than that of the dot product, we use the dot product as our scoring function.\nDue to the large size of NK, it is difficult to train Paragraph Ranker on all the retrieved paragraphs.2 To efficiently train our model, we use a negative sampling of irrelevant paragraphs (Mikolov et al., 2013). Hence, the loss function of our model is as follows:\nJ(Θ) =− log p(Pi|Q) − Ek∼pn [log(1− p(Pk|Q))]\nwhere k indicates indexes of negative samples that do not contain the answer, and Θ denotes trainable parameters of Paragraph Ranker. The distribution of negative samples are defined as pn. We use the distribution of all the Stanford Question Answering Dataset (SQuAD) (Rajpurkar et al., 2016) training paragraphs as pn .\nBased on the rank of each paragraph from Paragraph Ranker and the rank of source document from Document Retriever, we collect top M paragraphs to read. We combine the ranks by the multiplication of probabilities p(Pi|Q) and p̃(Di|Q) to find most relevant paragraphs where p̃(Di|Q) denotes TF-IDF score of a source document Di."
  }, {
    "heading": "2.2 Answer Aggregation",
    "text": "We feed M paragraphs to Document Reader to extract M answers. While Paragraph Ranker increases the probability of including answers in the topM ranked paragraphs, aggregation step should determine the most probable answer among theM extracted answers. Chen et al. (2017) and Clark et al. (2017) used the unnormalized answer probability from the reader. However, as the unnormalized answer probability is very sensitive to noisy answers, Wang et al. (2017b) proposed a more sophisticated aggregation methods such as coveragebased and strength-based re-rankings.\nIn our QA pipeline, we incorporate the coverage-based method by Wang et al. (2017b) with paragraph scores from Paragraph Ranker. Although strength-based answer re-ranking showed good performances on some datasets, it is too complex to efficiently re-rank M answers. Given the M candidate answers [A1, ..., AM ] from each paragraph, we aggregate answers as follows:\nÂ = arg max Ai\np(Ai|Q)\n= arg max Ai\np̃(Ai|Pi, Q)αp(Pi|Q)β p̃(Di|Q)γ\n(1)\n2NK ≈ 350 when N = 5 in SQuAD QA pairs.\nwhere p̃(Ai|Pi, Q) denotes the unnormalized answer probability from a reader given the paragraph Pi and the question Q. Importance of each score is determined by the hyperparamters α, β, and γ. Also, we add up all the probabilities of the duplicate candidate answers for the coverage-based aggregation."
  }, {
    "heading": "3 Experiments",
    "text": ""
  }, {
    "heading": "3.1 Datasets",
    "text": "We evaluate our pipeline with Paragraph Ranker on the four open-domain QA datasets. Wang et al. (2017a) termed SQuAD without relevant paragraphs for the open-domain QA as SQuADOPEN, and we use the same term to denote the opendomain setting SQuAD. CuratedTrec (Baudiš and Šedivỳ, 2015) was created for TREC opendomain QA tasks. WebQuestions (Berant et al., 2013) contains questions from Google Suggest API. WikiMovies (Miller et al., 2016) contains questions regarding movies collected from OMDb and the MovieLens database. We pretrain Document Reader and Paragraph Ranker on the SQuAD training set.3"
  }, {
    "heading": "3.2 Implementation Details",
    "text": "Paragraph Ranker uses 3-layer Bi-LSTM networks with 128 hidden units. On SQuADOPEN and CuratedTrec, we set α, β, and γ of Paragraph Ranker to 1. Due to the different characteristics of questions in WebQuestion and WikiMovies, we find α, β, and γ based on the validation QA pairs of the two datasets. We use N = 20 for the number of documents to retrieve and M = 200 for the number of paragraphs to read for all the four datasets. We use Adamax (Kingma and Ba, 2014) as the optimization algorithm. Dropout is applied to LSTMs and embeddings with p = 0.4."
  }, {
    "heading": "3.3 Results",
    "text": "In our experiments, Paragraph Ranker ranks only paragraphs, and answers are determined by unnormalized scores of the answers. Paragraph Ranker + Answer Agg. sums up the unnormalized probabilities of duplicate answers (i.e., β = γ = 0). Paragraph Ranker + Full Agg. aggregates answers using Equation 1 with the coveragebased aggregation.\n3On SQuAD development set, pretrained Document Reader achieves 69.1% EM, and pretrained Paragraph Ranker achieves 96.7% recall on the top 5 paragraph .\nIn Table 1, we summarize the performance and recall of each model on open-domain QA datasets. We define recall as the probability of read paragraphs containing answers. While Reinforced Reader-Ranker (R3) (Wang et al., 2017a) performs better than DrQA on the three datasets (SQuADOPEN, CuratedTrec, WikiMovies), Paragraph Ranker + Full Agg. outperforms both DrQA and R3. Paragraph Ranker + Full Agg. achieved 3.78%, 24.65%, 2.05%, 0.77% relative improvements in terms of EM on SQuADOPEN, CuratedTrec, WebQuestion, and WikiMovies, respectively (7.8% on average). It is noticeable that our pipeline with Paragraph Ranker + Full Agg. greatly outperforms DrQA + Multitask in SQuADOPEN and CuratedTrec."
  }, {
    "heading": "3.4 Analysis",
    "text": "In Table 2, we show 3 random paragraphs of the top document returned by Document Retriever, and the top 3 paragraphs ranked by Paragraph Ranker from the top 40 documents. As Document Retriever largely depends on matching of query tokens with document tokens, the top ranked document is usually the document with most tokens\nmatching the query. However, Question 1 includes the polysemy of the word “play” which makes it more difficult for Document Retriever to perform effectively. Our Paragraph Ranker well understands that the question is about a sports player not a musician. The top 1-3 paragraphs for the second question came from the 30th, 7th, and 6th documents, respectively, ranked by Document Retriever. This shows that increasing number of documents to rank helps Paragraph Ranker find more relevant paragraphs."
  }, {
    "heading": "4 Conclusion",
    "text": "In this paper, we present an open-domain question answering pipeline and proposed Paragraph Ranker. By using Paragraph Ranker, the QA pipeline benefits from increased answer recall from paragraphs to read, and filters irrelevant documents or paragraphs. With our simple Paragraph Ranker, we achieve state-of-the-art performances on the four open-domain QA datasets with large margins. As future works, we plan to further improve Paragraph Ranker based on the researches on learning to rank."
  }, {
    "heading": "Acknowledgement",
    "text": "This research was supported by National Research Foundation of Korea (NRF-2017R1A2A1A17069645, NRF2017M3C4A7065887), and the Korean MSIT (Ministry of Science and ICT) under the National Program for Excellence in SW (2015-0-00936) supervised by the IITP (Institute for Information & communications Technology Promotion)"
  }],
  "year": 2018,
  "references": [{
    "title": "Modeling of the question answering task in the yodaqa system",
    "authors": ["Petr Baudiš", "Jan Šedivỳ."],
    "venue": "International Conference of the Cross-Language Evaluation Forum for European Languages, pages 222– 228. Springer.",
    "year": 2015
  }, {
    "title": "Semantic parsing on freebase from question-answer pairs",
    "authors": ["Jonathan Berant", "Andrew Chou", "Roy Frostig", "Percy Liang."],
    "venue": "Proceedings of the 2013 Conference on Empirical Methods in Natural Language Processing, pages 1533–1544.",
    "year": 2013
  }, {
    "title": "Reading wikipedia to answer open-domain questions",
    "authors": ["Danqi Chen", "Adam Fisch", "Jason Weston", "Antoine Bordes."],
    "venue": "arXiv preprint arXiv:1704.00051.",
    "year": 2017
  }, {
    "title": "Simple and effective multi-paragraph reading comprehension",
    "authors": ["Christopher Clark", "Matt Gardner."],
    "venue": "arXiv preprint arXiv:1710.10723.",
    "year": 2017
  }, {
    "title": "Adam: A method for stochastic optimization",
    "authors": ["Diederik P Kingma", "Jimmy Ba."],
    "venue": "arXiv preprint arXiv:1412.6980.",
    "year": 2014
  }, {
    "title": "Learning to rank for information retrieval",
    "authors": ["Tie-Yan Liu"],
    "venue": "Foundations and Trends R",
    "year": 2009
  }, {
    "title": "Distributed representations of words and phrases and their compositionality",
    "authors": ["Tomas Mikolov", "Ilya Sutskever", "Kai Chen", "Greg S Corrado", "Jeff Dean."],
    "venue": "Advances in neural information processing systems, pages 3111–3119.",
    "year": 2013
  }, {
    "title": "Key-value memory networks for directly reading documents",
    "authors": ["Alexander Miller", "Adam Fisch", "Jesse Dodge", "AmirHossein Karimi", "Antoine Bordes", "Jason Weston."],
    "venue": "arXiv preprint arXiv:1606.03126.",
    "year": 2016
  }, {
    "title": "Glove: Global vectors for word representation",
    "authors": ["Jeffrey Pennington", "Richard Socher", "Christopher Manning."],
    "venue": "Proceedings of the 2014 conference on empirical methods in natural language processing (EMNLP), pages 1532–1543.",
    "year": 2014
  }, {
    "title": "Squad: 100,000+ questions for machine comprehension of text",
    "authors": ["Pranav Rajpurkar", "Jian Zhang", "Konstantin Lopyrev", "Percy Liang."],
    "venue": "arXiv preprint arXiv:1606.05250.",
    "year": 2016
  }, {
    "title": "Bidirectional attention flow for machine comprehension",
    "authors": ["Minjoon Seo", "Aniruddha Kembhavi", "Ali Farhadi", "Hannaneh Hajishirzi."],
    "venue": "arXiv preprint arXiv:1611.01603.",
    "year": 2016
  }, {
    "title": "Learning to rank short text pairs with convolutional deep neural networks",
    "authors": ["Aliaksei Severyn", "Alessandro Moschitti."],
    "venue": "Proceedings of the 38th International ACM SIGIR Conference on Research and Development in Information Retrieval, pages",
    "year": 2015
  }, {
    "title": "An exploration of approaches to integrating neural reranking models in multi-stage ranking architectures",
    "authors": ["Zhucheng Tu", "Matt Crane", "Royal Sequiera", "Junchen Zhang", "Jimmy Lin."],
    "venue": "arXiv preprint arXiv:1707.08275.",
    "year": 2017
  }, {
    "title": "Learning natural language inference with lstm",
    "authors": ["Shuohang Wang", "Jing Jiang."],
    "venue": "arXiv preprint arXiv:1512.08849.",
    "year": 2015
  }, {
    "title": "R3: Reinforced reader-ranker for open-domain question answering",
    "authors": ["Shuohang Wang", "Mo Yu", "Xiaoxiao Guo", "Zhiguo Wang", "Tim Klinger", "Wei Zhang", "Shiyu Chang", "Gerald Tesauro", "Bowen Zhou", "Jing Jiang."],
    "venue": "arXiv preprint arXiv:1709.00023.",
    "year": 2017
  }, {
    "title": "Evidence aggregation for answer re-ranking in open-domain question answering",
    "authors": ["Shuohang Wang", "Mo Yu", "Jing Jiang", "Wei Zhang", "Xiaoxiao Guo", "Shiyu Chang", "Zhiguo Wang", "Tim Klinger", "Gerald Tesauro", "Murray Campbell."],
    "venue": "arXiv preprint",
    "year": 2017
  }, {
    "title": "Gated self-matching networks for reading comprehension and question answering",
    "authors": ["Wenhui Wang", "Nan Yang", "Furu Wei", "Baobao Chang", "Ming Zhou."],
    "venue": "Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics",
    "year": 2017
  }, {
    "title": "Dynamic coattention networks for question answering",
    "authors": ["Caiming Xiong", "Victor Zhong", "Richard Socher."],
    "venue": "arXiv preprint arXiv:1611.01604.",
    "year": 2016
  }],
  "id": "SP:14bd7f40226ce130611115ff4e18a4e1912dafb0",
  "authors": [{
    "name": "Jinhyuk Lee",
    "affiliations": []
  }, {
    "name": "Seongjun Yun",
    "affiliations": []
  }, {
    "name": "Hyunjae Kim",
    "affiliations": []
  }, {
    "name": "Miyoung Ko",
    "affiliations": []
  }, {
    "name": "Jaewoo Kang",
    "affiliations": []
  }],
  "abstractText": "Recently, open-domain question answering (QA) has been combined with machine comprehension models to find answers in a large knowledge source. As open-domain QA requires retrieving relevant documents from text corpora to answer questions, its performance largely depends on the performance of document retrievers. However, since traditional information retrieval systems are not effective in obtaining documents with a high probability of containing answers, they lower the performance of QA systems. Simply extracting more documents increases the number of irrelevant documents, which also degrades the performance of QA systems. In this paper, we introduce Paragraph Ranker which ranks paragraphs of retrieved documents for a higher answer recall with less noise. We show that ranking paragraphs and aggregating answers using Paragraph Ranker improves performance of open-domain QA pipeline on the four opendomain QA datasets by 7.8% on average.",
  "title": "Ranking Paragraphs for Improving Answer Recall in Open-Domain Question Answering"
}