{
  "sections": [{
    "text": "Recent work on generative text modeling has found that variational autoencoders (VAE) with LSTM decoders perform worse than simpler LSTM language models (Bowman et al., 2015). This negative result is so far poorly understood, but has been attributed to the propensity of LSTM decoders to ignore conditioning information from the encoder. In this paper, we experiment with a new type of decoder for VAE: a dilated CNN. By changing the decoder’s dilation architecture, we control the size of context from previously generated words. In experiments, we find that there is a trade-off between contextual capacity of the decoder and effective use of encoding information. We show that when carefully managed, VAEs can outperform LSTM language models. We demonstrate perplexity gains on two datasets, representing the first positive language modeling result with VAE. Further, we conduct an in-depth investigation of the use of VAE (with our new decoding architecture) for semi-supervised and unsupervised labeling tasks, demonstrating gains over several strong baselines."
  }, {
    "heading": "1. Introduction",
    "text": "Generative models play an important role in NLP, both in their use as language models and because of their ability to effectively learn from unlabeled data. By parameterzing generative models using neural nets, recent work has proposed model classes that are particularly expressive and can pontentially model a wide range of phenomena in language and other modalities. We focus on a specific instance\n1Carnegie Mellon University. Correspondence to: Zichao Yang <zichaoy@cs.cmu.edu>.\nProceedings of the 34 th International Conference on Machine Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017 by the author(s).\nof this class: the variational autoencoder1 (VAE) (Kingma & Welling, 2013).\nThe generative story behind the VAE (to be described in detail in the next section) is simple: First, a continuous latent representation is sampled from a multivariate Gaussian. Then, an output is sampled from a distribution parameterized by a neural decoder, conditioned on the latent representation. The latent representation (treated as a latent variable during training) is intended to give the model more expressive capacity when compared with simpler neural generative models–for example, conditional language models. The choice of decoding architecture and final output distribution, which connect the latent representation to output, depends on the kind of data being modeled. The VAE owes its name to an accompanying variational technique (Kingma & Welling, 2013) that has been successfully used to train such models on image data (Gregor et al., 2015; Salimans et al., 2015; Yan et al., 2016).\nThe application of VAEs to text data has been far less successful (Bowman et al., 2015; Miao et al., 2016). The obvious choice for decoding architecture for a textual VAE is an LSTM, a typical workhorse in NLP. However, Bowman et al. (2015) found that using an LSTM-VAE for text modeling yields higher perplexity on held-out data than using an LSTM language model. In particular, they observe that the LSTM decoder in VAE does not make effective use of the latent representation during training and, as a result, VAE collapses into a simple language model. Related work (Miao et al., 2016; Larochelle & Lauly, 2012; Mnih & Gregor, 2014) has used simpler decoders that model text as a bag of words. Their results indicate better use of latent representations, but their decoders cannot effectively model longer-range dependencies in text and thus underperform in terms of final perplexity.\nMotivated by these observations, we hypothesize that the contextual capacity of the decoder plays an important role in whether VAEs effectively condition on the latent representation when trained on text data. We propose the use of a dilated CNN as a decoder in VAE, inspired by the recent success of using CNNs for audio, image and language\n1The name VAE is often used to refer to both a model class and an associated inference procedure.\nmodeling (van den Oord et al., 2016a; Kalchbrenner et al., 2016a; van den Oord et al., 2016b). In contrast with prior work where extremely large CNNs are used, we exploit the dilated CNN for its flexibility in varying the amount of conditioning context. In the two extremes, depending on the choice of dilation, the CNN decoder can reproduce a simple MLP using a bags of words representation of text, or can reproduce the long-range dependence of recurrent architectures (like an LSTM) by conditioning on the entire history. Thus, by choosing a dilated CNN as the decoder, we are able to conduct experiments where we vary contextual capacity, finding a sweet spot where the decoder can accurately model text but does not yet overpower the latent representation.\nWe demonstrate that when this trade-off is correctly managed, textual VAEs can perform substantially better than simple LSTM language models, a finding consistent with recent image modeling experiments using variational lossy autoencoders (Chen et al., 2016). We go on to show that VAEs with carefully selected CNN decoders can be quite effective for semi-supervised classification and unsupervised clustering, outperforming several strong baselines (from (Dai & Le, 2015)) on both text categorization and sentiment analysis.\nOur contributions are as follows: First, we propose the use of a dilated CNN as a new decoder for VAE. We then empirically evaluate several dilation architectures with different capacities, finding that reduced contextual capacity leads to stronger reliance on latent representations. By picking a decoder with suitable contextual capacity, we find our VAE performs better than LSTM language models on two data sets. We also explore the use of dilated CNN VAEs for semi-supervised classification and find they perform better than strong baselines from (Dai & Le, 2015). Finally, we verify that the same framework can be used effectively for unsupervised clustering."
  }, {
    "heading": "2. Model",
    "text": "In this section, we begin by providing background on the use of variational autoencoders for language modeling. Then we introduce the dilated CNN architecture that we will use as a new decoder for VAE in experiments. Finally, we describe the generalization of VAE that we will use to conduct experiments on semi-supervised classification."
  }, {
    "heading": "2.1. Background on Variational Autoencoders",
    "text": "Neural language models (Mikolov et al., 2010) typically generate each token xt conditioned on the entire history of previously generated tokens:\np(x) = ∏ t p(xt|x1, x2, ..., xt−1). (1)\nState-of-the-art language models often parametrize these conditional probabilities using RNNs, which compute an evolving hidden state over the text which is used to predict each xt. This approach, though effective in modeling text, does not explicitly model variance in higher-level properties of entire utterances (e.g. topic or style) and thus can have difficulty with heterogeneous datasets.\nBowman et al. (2015) propose a different approach to generative text modeling inspired by related work on vision (Kingma & Welling, 2013). Instead of directly modeling the joint probability p(x) as in Equation 1, we specify a generative process for which p(x) is a marginal distribution. Specifically, we first generate a continuous latent vector representation z from a multivariate Gaussian prior pθ(z), and then generate the text sequence x from a conditional distribution pθ(x|z) parameterized using a neural net (often called the generation model or decoder). Because this model incorporates a latent variable that modulates the entire generation of each whole utterance, it may be better able to capture high-level sources of variation in the data. Specifically, in contrast with Equation 1, this generating distribution conditions on latent vector representation z:\npθ(x|z) = ∏ t pθ(xt|x1, x2, ..., xt−1, z). (2)\nTo estimate model parameters θ we would ideally like to maximize the marginal probability pθ(x) =∫ pθ(z)pθ(x|z)dz. However, computing this marginal is intractable for many decoder choices. Thus, the following variational lower bound is often used as an objective (Kingma & Welling, 2013):\nlog pθ(x) = − log ∫ pθ(z)pθ(x|z)dz\n≥ Eqφ(z|x)[log pθ(x|z)]− KL(qφ(z|x)||pθ(z)).\nHere, qφ(z|x) is an approximation to the true posterior (often called the recognition model or encoder) and is parameterized by φ. Like the decoder, we have a choice of neural architecture to parameterize the encoder. However, unlike the decoder, the choice of encoder does not change the model class – it only changes the variational approximation used in training, which is a function of both the model parameters θ and the approximation parameters φ. Training seeks to optimize these parameters jointly using stochastic gradient ascent. A final wrinkle of the training procedure involves a stochastic approximation to the gradients of the variational objective (which is itself intractable). We omit details here, noting only that the final distribution of the posterior approximation qφ(z|x) is typically assumed to be Gaussian so that a re-parametrization trick can be used, and refer readers to (Kingma & Welling, 2013)."
  }, {
    "heading": "2.2. Training Collapse with Textual VAEs",
    "text": "Together, this combination of generative model and variational inference procedure are often referred to as a variational autoencoder (VAE). We can also view the VAE as a regularized version of the autoencoder. Note, however, that while VAEs are valid probabilistic models whose likelihood can be evaluated on held-out data, autoencoders are not valid models. If only the first term of the VAE variational bound Eqφ(z|x)[log pθ(x|z)] is used as an objective, the variance of the posterior probability qφ(z|x) will become small and the training procedure reduces to an autoencoder. It is the KL-divergence term, KL(qφ(z|x)||pθ(z)), that discourages the VAE memorizing each x as a single latent point.\nWhile the KL term is critical for training VAEs, historically, instability on text has been evidenced by the KL term becoming vanishingly small during training, as observed by Bowman et al. (2015). When the training procedure collapses in this way, the result is an encoder that has duplicated the Gaussian prior (instead of a more interesting posterior), a decoder that completely ignores the latent variable z, and a learned model that reduces to a simpler language model. We hypothesize that this collapse condition is related to the contextual capacity of the decoder architecture. The choice encoder and decoder depends on the type of data. For images, these are typically MLPs or CNNs. LSTMs have been used for text, but have resulted in training collapse as discussed above (Bowman et al., 2015). Here, we propose to use a dilated CNN as the decoder instead. In one extreme, when the effective contextual width of a CNN is very large, it resembles the behavior of LSTM. When the width is very small, it behaves like a bag-ofwords model. The architectural flexibility of dilated CNNs allows us to change the contextual capacity and conduct experiments to validate our hypothesis: decoder contextual capacity and effective use of encoding information are directly related. We next describe the details of our decoder."
  }, {
    "heading": "2.3. Dilated Convolutional Decoders",
    "text": "The typical approach to using CNNs used for text generation (Kalchbrenner et al., 2016a) is similar to that used for images (Krizhevsky et al., 2012; He et al., 2016), but with the convolution applied in one dimension. We take this approach here in defining our decoder.\nOne dimensional convolution: For a CNN to serve as a decoder for text, generation of xt must only condition on past tokens x<t. Applying the traditional convolution will break this assumption and use tokens x≥t as inputs to predict xt. In our decoder, we avoid this by simply shifting the input by several slots (van den Oord et al., 2016b). With a convolution with filter size of k and using n layers, our effective filter size (the number of past tokens\nto condition to in predicting xt) would be (k− 1)× n+ 1. Hence, the filter size would grow linearly with the depth of the network.\nDilation: Dilated convolution (Yu & Koltun, 2015) was introduced to greatly increase the effective receptive field size without increasing the computational cost. With dilation d, the convolution is applied so that d − 1 inputs are skipped each step. Causal convolution can be seen a special case with d = 1. With dilation, the effective receptive size grows exponentially with network depth. In Figure 1b, we show dilation of sizes of 1 and 2 in the first and second layer, respectively. Suppose the dilation size in the i-th layer is di and we use the same filter size k in all layers, then the effective filter size is (k − 1) ∑ i di + 1. The dilations are typically set to double every layer di+1 = 2di, so the effective receptive field size can grow exponentially. Hence, the contextual capacity of a CNN can be controlled across a greater range by manipulating the filter size, dilation size and network depth. We use this approach in experiments.\nResidual connection: We use residual connection (He et al., 2016) in the decoder\nReLU 1x1, 512\nReLU 1xk, 512\nconv\nReLU 1x1, 1024\n+\nconv\nconv to speed up convergence and enable training of deeper models. We use a residual block (shown to the right) similar to that of (Kalchbrenner et al., 2016a). We use three convolutional layers with filter size 1×1, 1×k, 1×1, respectively, and ReLU activation be-\ntween convolutional layers.\nOverall architecture: Our VAE architecture is shown in Figure 1a. We use LSTM as the encoder to get the posterior probability q(z|x), which we assume to be diagonal Gaussian. We parametrize the mean µ and variance σ with LSTM output. We sample z from q(z|x), the decoder is conditioned on the sample by concatenating z with every word embedding of the decoder input."
  }, {
    "heading": "2.4. Semi-supervised VAE",
    "text": "In addition to conducting language modeling experiments, we will also conduct experiments on semi-supervised classification of text using our proposed decoder. In this section, we briefly review semi-supervised VAEs of (Kingma et al., 2014) that incorporate discrete labels as additional variables. Given the labeled set (x, y) ∼ DL and the unlabeled set x ∼ DU , (Kingma et al., 2014) proposed a model whose latent representation contains continuous vector z and discrete label y:\np(x,y, z) = p(y)p(z)p(x|y, z). (3)\nThe semi-supervised VAE fits a discriminative network q(y|x), an inference network q(z|x,y) and a generative network p(x|y, z) jointly as part of optimizing a variational lower bound similar that of basic VAE. For labeled data (x,y), this bound is:\nlog p(x,y) ≥Eq(z|x,y)[log p(x|y, z)] − KL(q(z|x,y)||p(z)) + log p(y)\n=L(x,y) + log p(y).\nFor unlabeled data x, the label is treated as a latent variable, yielding:\nlog p(x) ≥U(x) =Eq(y|x) [ Eq(z|x,y)[log p(x|y, z)]\n− KL(q(z|x,y)||p(z)) + log p(y)− log q(y|x) ]\n= ∑ y q(y|x)L(x,y)− KL(q(y|x)||p(y)).\nCombining the labeled and unlabeled data terms, we have the overall objective as:\nJ =E(x,y)∼DL [L(x,y)] + Ex∼DU [U(x)] + αE(x,y)∼DL [log q(y|x)],\nwhere α controls the trade off between generative and discriminative terms.\nGumbel-softmax: Jang et al. (2016); Maddison et al. (2016) propose a continuous approximation to sampling from a categorical distribution. Let u be a categorical distribution with probabilities π1, π2, ..., πc. Samples from u\ncan be approximated using:\nyi = exp((log(πi) + gi)/τ)∑c j=1 exp((log(πj) + gj)/τ) , (4)\nwhere gi follows Gumbel(0, 1). The approximation is accurate when τ → 0 and smooth when τ > 0. In experiments, we use Gumbel-Softmax to approximate the samples from p(y|x) to reduce the computational cost. As a result, we can directly back propagate the gradients of U(x) to the discriminator network. We anneal τ so that sample variance is small when training starts and then gradually decrease τ .\nUnsupervised clustering: In this section we adapt the same framework for unsupervised clustering. We directly minimize the objective U(x), which is consisted of two parts: reconstruction loss and KL regularization on q(y|x). The first part encourages the model to assign x to label y such that the reconstruction loss is low. We find that the model can easily get stuck in two local optimum: the KL term is very small and q(y|x) is close to uniform distribution or the KL term is very large and all samples collapse to one class. In order to make the model more robust, we modify the KL term by:\nKLy = max(γ,KL(q(y|x)|p(y)). (5)\nThat is, we only minimize the KL term when it is large enough."
  }, {
    "heading": "3. Experiments",
    "text": ""
  }, {
    "heading": "3.1. Data sets",
    "text": "Since we would like to investigate VAEs for language modeling and semi-supervised classification, the data sets should be suitable for both purposes. We use two large scale document classification data sets: Yahoo Answer and Yelp15 review, representing topic classification and sentiment classification data sets respectively (Tang et al., 2015; Yang et al., 2016; Zhang et al., 2015). The original data sets contain millions of samples, of which we sample 100k as training and 10k as validation and test from the respective partitions. The detailed statistics of both data sets are in Table 1. Yahoo Answer contains 10 topics including Society & Culture, Science & Mathematics etc. Yelp15 contains 5 level of rating, with higher rating better."
  }, {
    "heading": "3.2. Model configurations and Training details",
    "text": "We use an LSTM as an encoder for VAE and explore LSTMs and CNNs as decoders. For CNNs, we explore several different configurations. We set the convolution filter size to be 3 and gradually increase the depth and dilation from [1, 2, 4], [1, 2, 4, 8, 16] to [1, 2, 4, 8, 16, 1, 2, 4, 8, 16]. They represent small, medium and large model and we name them as SCNN, MCNN and LCNN. We also explore a very large model with dilations [1, 2, 4, 8, 16, 1, 2, 4, 8, 16, 1, 2, 4, 8, 16] and name it as VLCNN. The effective filter size are 15, 63, 125 and 187 respectively. We use the last hidden state of the encoder LSTM and feed it though an MLP to get the mean and variance of q(z|x), from which we sample z and then feed it through an MLP to get the starting state of decoder. For the LSTM decoder, we follow (Bowman et al., 2015) to use it as the initial state of LSTM and feed it to every step of LSTM. For the CNN decoder, we concatenate it with the word embedding of every decoder input.\nThe architecture of the Semi-supervised VAE basically follows that of the VAE. We feed the last hidden state of the encoder LSTM through a two layer MLP then a softmax to get q(y|x). We use Gumbel-softmax to sample y from q(y|x). We then concatenate y with the last hidden state of encoder LSTM and feed them throught an MLP to get the mean and variance of q(z|y,x). y and z together are used as the starting state of the decoder.\nWe use a vocabulary size of 20k for both data sets and set the word embedding dimension to be 512. The LSTM dimension is 1024. The number of channels for convolutions\nin CNN decoders is 512 internally and 1024 externally, as shown in Section 2.3. We select the dimension of z from [32, 64]. We find our model is not sensitive to this parameter.\nWe use Adam (Kingma & Ba, 2014) to optimize all models and the learning rate is selected from [2e-3, 1e-3, 7.5e-4] and β1 is selected from [0.5, 0.9]. Empirically, we find learning rate 1e-3 and β1 = 0.5 to perform the best. We select drop out ratio of LSTMs (both encoder and decoder) from [0.3, 0.5]. Following (Bowman et al., 2015), we also use drop word for the LSTM decoder, the drop word ratio is selected from [0, 0.3, 0.5, 0.7]. For the CNN decoder, we use a drop out ratio of 0.1 at each layer. We do not use drop word for CNN decoders. We use batch size of 32 and all model are trained for 40 epochs. We start to half the learning rate every 2 epochs after epoch 30. Following (Bowman et al., 2015), we use KL cost annealing strategy. We set the initial weight of KL cost term to be 0.01 and increase it linearly until a given iteration T . We treat T as a hyper parameter and select it from [10k, 40k, 80k]."
  }, {
    "heading": "3.3. Language modeling results",
    "text": "The results for language modeling are shown in Table 2. We report the negative log likelihood (NLL) and perplexity (PPL) of the test set. For the NLL of VAEs, we decompose it into reconstruction loss and KL divergence and report the KL divergence in the parenthesis. To better visualize these results, we plot the results of Yahoo data set (Table 2a) in Figure 2.\nWe first look at the LM results for Yahoo data set. As we gradually increase the effective filter size of CNN from SCNN, MCNN to LCNN, the NLL decreases from 345.3, 338.3 to 335.4. The NLL of LCNN-LM is very close to the NLL of LSTM-LM 334.9. But VLCNN-LM is a little bit worse than LCNN-LM, this indicates a little bit of over-fitting.\nWe can see that LSTM-VAE is worse than LSTM-LM in terms of NLL and the KL term is nearly zero, which verifies the finding of (Bowman et al., 2015). When we use CNNs as the decoders for VAEs, we can see improvement over pure CNN LMs. For SCNN, MCNN and LCNN, the VAE results improve over LM results from 345.3 to 337.8, 338.3 to 336.2, and 335.4 to 333.9 respectively. The improvement is big for small models and gradually decreases as we increase the decoder model contextual capacity. When the model is as large as VLCNN, the improvement diminishes and the VAE result is almost the same with LM result. This is also reflected in the KL term, SCNN-VAE has the largest KL of 13.3 and VLCNN-VAE has the smallest KL of 0.7. When LCNN is used as the decoder, we obtain an optimal trade off between using contextual information and latent representation. LCNN-VAE achieves a NLL of 333.9, which improves over LSTM-LM with NLL of 334.9.\nWe find that if we initialize the parameters of LSTM encoder with parameters of LSTM language model, we can improve the VAE results further. This indicates better encoder model is also a key factor for VAEs to work well. Combined with encoder initialization, LCNN-VAE improves over LSTM-LM from 334.9 to 332.1 in NLL and from 66.2 to 63.9 in PPL. Similar results for the sentiment data set are shown in Table 2b. LCNN-VAE improves over LSTM-LM from 362.7 to 359.1 in NLL and from 42.6 to 41.1 in PPL.\nLatent representation visualization: In order to visualize the latent representation, we set the dimension of z to be 2 and plot the mean of posterior probability q(z|x), as shown in Figure 3. We can see distinct different characteristics of topic and sentiment representation. In Figure 3a, we can see that documents of different topics fall into different clusters, while in Figure 3b, documents of different ratings form a continuum, they lie continuously on the xaxis as the review rating increases."
  }, {
    "heading": "3.4. Semi-supervised VAE results",
    "text": "Motivated by the success of VAEs for language modeling, we continue to explore VAEs for semi-supervised learning. Following that of (Kingma et al., 2014), we set the number of labeled samples to be 100, 500, 1000 and 2000 respectively.\nAblation Study: At first, we would like to explore the effect of different decoders for semi-supervised classification. We fix the number of labeled samples to be 500 and report both classification accuracy and NLL of the test set of Yahoo data set in Table. 5. We can see that SCNN-VAESemi has the best classification accuracy of 65.5. The accuracy decreases as we gradually increase the decoder contextual capacity. On the other hand, LCNN-VAE-Semi has the best NLL result. This classification accuracy and NLL trade off once again verifies our conjecture: with small contextual window size, the decoder is forced to use the encoder information, hence the latent representation is better\nlearned.\nComparing the NLL results of Table 5 with that of Table 2a, we can see the NLL improves. The NLL of semisupervised VAE improves over simple VAE from 337.8 to 335.7 for SCNN, from 336.2 to 332.8 for MCNN, and from 333.9 to 332.8 for LCNN. The improvement mainly comes from the KL divergence part, this indicates that better latent representations decrease the KL divergence, further improving the VAE results.\nComparison with related methods: We compare Semisupervised VAE with the methods from (Dai & Le, 2015), which represent the previous state-of-the-art for semisupervised sequence learning. Dai & Le (2015) pre-trains a classifier by initializing the parameters of a classifier with that of a language model or a sequence autoencoder. They find it improves the classification accuracy significantly. Since SCNN-VAE-Semi performs the best according to Table 5, we fix the decoder to be SCNN in this part. The detailed comparison is in Table 4. We can see that semisupervised VAE performs better than LM-LSTM and LALSTM from (Dai & Le, 2015). We also initialize the encoder of the VAE with parameters from LM and find classification accuracy further improves. We also see the advantage of SCNN-VAE-Semi over LM-LSTM is greater when the number of labeled samples is smaller. The advantage decreases as we increase the number of labeled samples. When we set the number of labeled samples to be 25k, the SCNN-VAE-Semi achieves an accuracy of 70.4, which is similar to LM-LSTM with an accuracy of 70.5. Also, SCNN-VAE-Semi performs better on Yahoo data set than Yelp data set. For Yelp, SCNN-VAE-Semi is a little bit worse than LM-LSTM if the number of labeled samples is greater than 100, but becomes better when we initialize the encoder. Figure 3b explains this observation. It shows the documents are coupled together and are harder to classify. Also, the latent representation contains information other than sentiment, which may not be useful for classification."
  }, {
    "heading": "3.5. Unsupervised clustering results",
    "text": "We also explored using the same framework for unsupervised clustering. We compare with the baselines that ex-\ntract the feature with existing models and then run Gaussian Mixture Model (GMM) on these features. We find empirically that simply using the features does not perform well since the features are high dimensional. We run a PCA on these features, the dimension of PCA is selected from [8, 16, 32]. Since GMM can easily get stuck in poor local optimum, we run each model ten times and report the best result. We find directly optimizing U(x) does not perform well for unsupervised clustering and we need to initialize the encoder with LSTM language model. The model only works well for Yahoo data set. This is potentially because Figure 3b shows that sentiment latent representations does not fall into clusters. γ in Equation 5 is a sensitive parameter, we select it from the range between 0.5 and 1.5 with an interval of 0.1. We use the following evaluation protocol (Makhzani et al., 2015): after we finish training, for cluster i, we find out the validation sample xn from cluster i that has the best q(yi|x) and assign the label of xn to all samples in cluster i. We then compute the test accuracy based on this assignment. The detailed results are in Table 5. We can see SCNN-VAE-Unsup + init performs better than other baselines. LSTM+GMM performs very bad probably because the feature dimension is 1024 and is too high for GMM, even though we already used PCA to reduce the dimension.\nConditional text generation With the semi-supervised VAE, we are able to generate text conditional on the label. Due to space limitation, we only show one example of\ngenerated reviews conditioning on review rating in Table 6. For each group of generated text, we fix z and vary the label y, while picking x via beam search with a beam size of 10."
  }, {
    "heading": "4. Related work",
    "text": "Variational inference via the re-parameterization trick was initially proposed by (Kingma & Welling, 2013; Rezende et al., 2014) and since then, VAE has been widely adopted as generative model for images (Gregor et al., 2015; Yan et al., 2016; Salimans et al., 2015; Gregor et al., 2016; Hu et al., 2017b).\nOur work is in line with previous works on combining variational inferences with text modeling (Bowman et al., 2015; Miao et al., 2016; Serban et al., 2016; Zhang et al., 2016; Hu et al., 2017a). (Bowman et al., 2015) is the first work to combine VAE with language model and they use LSTM as the decoder and find some negative results. On the other hand, (Miao et al., 2016) models text as bag of words, though improvement has been found, the model can not be used to generate text. Our work fills the gaps between them. (Serban et al., 2016; Zhang et al., 2016) applies variational inference to dialogue modeling and machine translation and found some improvement in terms of generated text quality, but no language modeling results are reported. (Chung et al., 2015; Bayer & Osendorfer, 2014; Fraccaro et al., 2016) embedded variational units in every step of a RNN, which is different from our model in using global latent variables to learn high level features.\nOur use of CNN as decoder is inspired by recent success of PixelCNN model for images (van den Oord et al., 2016b), WaveNet for audios (van den Oord et al., 2016a), Video Pixel Network for video modeling (Kalchbrenner et al., 2016b) and ByteNet for machine translation (Kalchbrenner et al., 2016a). But in contrast to those works showing using a very deep architecture leads to better performance, CNN as decoder is used in our model to control the contextual capacity, leading to better performance.\nOur work is closed related the recently proposed variational lossy autoencoder (Chen et al., 2016) which is used to pre-\ndict image pixels. They find that conditioning on a smaller window of a pixels leads to better results with VAE, which is similar to our finding. Much (Rezende & Mohamed, 2015; Kingma et al., 2016; Chen et al., 2016) has been done to come up more powerful prior/posterior distribution representations with techniques such as normalizing flows. We treat this as one of our future works. This work is largely orthogonal and could be potentially combined with a more effective choice of decoder to yield additional gains.\nThere is much previous work exploring unsupervised sentence encodings, for example skip-thought vectors (Kiros et al., 2015), paragraph vectors (Le & Mikolov, 2014), and sequence autoencoders (Dai & Le, 2015). (Dai & Le, 2015) applies a pretrained model to semi-supervised classification and find significant gains, we use this as the baseline for our semi-supervised VAE."
  }, {
    "heading": "5. Conclusion",
    "text": "We showed that by controlling the decoder’s contextual capacity in VAE, we can improve performance on both language modeling and semi-supervised classification tasks by preventing a degenerate collapse of the training procedure. These results indicate that more carefully characterizing decoder capacity and understanding how it relates to common variational training procedures may represent important avenues for unlocking future unsupervised problems."
  }],
  "year": 2017,
  "references": [{
    "title": "Learning stochastic recurrent networks",
    "authors": ["Bayer", "Justin", "Osendorfer", "Christian"],
    "venue": "arXiv preprint arXiv:1411.7610,",
    "year": 2014
  }, {
    "title": "Generating sentences from a continuous space",
    "authors": ["Bowman", "Samuel R", "Vilnis", "Luke", "Vinyals", "Oriol", "Dai", "Andrew M", "Jozefowicz", "Rafal", "Bengio", "Samy"],
    "venue": "arXiv preprint arXiv:1511.06349,",
    "year": 2015
  }, {
    "title": "Variational lossy autoencoder",
    "authors": ["Chen", "Xi", "Kingma", "Diederik P", "Salimans", "Tim", "Duan", "Yan", "Dhariwal", "Prafulla", "Schulman", "John", "Sutskever", "Ilya", "Abbeel", "Pieter"],
    "venue": "arXiv preprint arXiv:1611.02731,",
    "year": 2016
  }, {
    "title": "A recurrent latent variable model for sequential data",
    "authors": ["Chung", "Junyoung", "Kastner", "Kyle", "Dinh", "Laurent", "Goel", "Kratarth", "Courville", "Aaron C", "Bengio", "Yoshua"],
    "venue": "In Advances in neural information processing systems,",
    "year": 2015
  }, {
    "title": "Semi-supervised sequence learning",
    "authors": ["Dai", "Andrew M", "Le", "Quoc V"],
    "venue": "In Advances in Neural Information Processing Systems,",
    "year": 2015
  }, {
    "title": "Sequential neural models with stochastic layers",
    "authors": ["Fraccaro", "Marco", "Sønderby", "Søren Kaae", "Paquet", "Ulrich", "Winther", "Ole"],
    "venue": "In Advances in Neural Information Processing Systems,",
    "year": 2016
  }, {
    "title": "Draw: A recurrent neural network for image generation",
    "authors": ["Gregor", "Karol", "Danihelka", "Ivo", "Graves", "Alex", "Rezende", "Danilo Jimenez", "Wierstra", "Daan"],
    "venue": "arXiv preprint arXiv:1502.04623,",
    "year": 2015
  }, {
    "title": "Towards conceptual compression",
    "authors": ["Gregor", "Karol", "Besse", "Frederic", "Rezende", "Danilo Jimenez", "Danihelka", "Ivo", "Wierstra", "Daan"],
    "venue": "In Advances In Neural Information Processing Systems,",
    "year": 2016
  }, {
    "title": "Deep residual learning for image recognition",
    "authors": ["He", "Kaiming", "Zhang", "Xiangyu", "Ren", "Shaoqing", "Sun", "Jian"],
    "venue": "In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition,",
    "year": 2016
  }, {
    "title": "Controllable text generation",
    "authors": ["Hu", "Zhiting", "Yang", "Zichao", "Liang", "Xiaodan", "Salakhutdinov", "Ruslan", "Xing", "Eric P"],
    "venue": "arXiv preprint arXiv:1703.00955,",
    "year": 2017
  }, {
    "title": "On unifying deep generative models",
    "authors": ["Hu", "Zhiting", "Yang", "Zichao", "Salakhutdinov", "Ruslan", "Xing", "Eric P"],
    "venue": "arXiv preprint arXiv:1706.00550,",
    "year": 2017
  }, {
    "title": "Categorical reparameterization with gumbel-softmax",
    "authors": ["Jang", "Eric", "Gu", "Shixiang", "Poole", "Ben"],
    "venue": "arXiv preprint arXiv:1611.01144,",
    "year": 2016
  }, {
    "title": "Neural machine translation in linear time",
    "authors": ["Kalchbrenner", "Nal", "Espeholt", "Lasse", "Simonyan", "Karen", "Oord", "Aaron van den", "Graves", "Alex", "Kavukcuoglu", "Koray"],
    "venue": "arXiv preprint arXiv:1610.10099,",
    "year": 2016
  }, {
    "title": "Video pixel networks",
    "authors": ["Kalchbrenner", "Nal", "Oord", "Aaron van den", "Simonyan", "Karen", "Danihelka", "Ivo", "Vinyals", "Oriol", "Graves", "Alex", "Kavukcuoglu", "Koray"],
    "venue": "arXiv preprint arXiv:1610.00527,",
    "year": 2016
  }, {
    "title": "Adam: A method for stochastic optimization",
    "authors": ["Kingma", "Diederik", "Ba", "Jimmy"],
    "venue": "arXiv preprint arXiv:1412.6980,",
    "year": 2014
  }, {
    "title": "Auto-encoding variational bayes",
    "authors": ["Kingma", "Diederik P", "Welling", "Max"],
    "venue": "arXiv preprint arXiv:1312.6114,",
    "year": 2013
  }, {
    "title": "Semi-supervised learning with deep generative models",
    "authors": ["Kingma", "Diederik P", "Mohamed", "Shakir", "Rezende", "Danilo Jimenez", "Welling", "Max"],
    "venue": "In Advances in Neural Information Processing Systems,",
    "year": 2014
  }, {
    "title": "Improving variational inference with inverse autoregressive flow",
    "authors": ["Kingma", "Diederik P", "Salimans", "Tim", "Welling", "Max"],
    "venue": "arXiv preprint arXiv:1606.04934,",
    "year": 2016
  }, {
    "title": "Skip-thought vectors. In Advances in neural information processing",
    "authors": ["Kiros", "Ryan", "Zhu", "Yukun", "Salakhutdinov", "Ruslan R", "Zemel", "Richard", "Urtasun", "Raquel", "Torralba", "Antonio", "Fidler", "Sanja"],
    "year": 2015
  }, {
    "title": "Imagenet classification with deep convolutional neural networks. In Advances in neural information processing",
    "authors": ["Krizhevsky", "Alex", "Sutskever", "Ilya", "Hinton", "Geoffrey E"],
    "year": 2012
  }, {
    "title": "A neural autoregressive topic model",
    "authors": ["Larochelle", "Hugo", "Lauly", "Stanislas"],
    "venue": "In Advances in Neural Information Processing Systems,",
    "year": 2012
  }, {
    "title": "Distributed representations of sentences and documents",
    "authors": ["Le", "Quoc V", "Mikolov", "Tomas"],
    "venue": "In ICML,",
    "year": 2014
  }, {
    "title": "The concrete distribution: A continuous relaxation of discrete random variables",
    "authors": ["Maddison", "Chris J", "Mnih", "Andriy", "Teh", "Yee Whye"],
    "venue": "arXiv preprint arXiv:1611.00712,",
    "year": 2016
  }, {
    "title": "Neural variational inference for text processing",
    "authors": ["Miao", "Yishu", "Yu", "Lei", "Blunsom", "Phil"],
    "venue": "In Proc. ICML,",
    "year": 2016
  }, {
    "title": "Recurrent neural network based language model",
    "authors": ["Mikolov", "Tomas", "Karafiát", "Martin", "Burget", "Lukas", "Cernockỳ", "Jan", "Khudanpur", "Sanjeev"],
    "venue": "In Interspeech,",
    "year": 2010
  }, {
    "title": "Neural variational inference and learning in belief networks",
    "authors": ["Mnih", "Andriy", "Gregor", "Karol"],
    "venue": "arXiv preprint arXiv:1402.0030,",
    "year": 2014
  }, {
    "title": "Variational inference with normalizing flows",
    "authors": ["Rezende", "Danilo Jimenez", "Mohamed", "Shakir"],
    "venue": "arXiv preprint arXiv:1505.05770,",
    "year": 2015
  }, {
    "title": "Stochastic backpropagation and approximate inference in deep generative models",
    "authors": ["Rezende", "Danilo Jimenez", "Mohamed", "Shakir", "Wierstra", "Daan"],
    "venue": "arXiv preprint arXiv:1401.4082,",
    "year": 2014
  }, {
    "title": "Markov chain monte carlo and variational inference: Bridging the gap",
    "authors": ["Salimans", "Tim", "Kingma", "Diederik P", "Welling", "Max"],
    "venue": "In ICML,",
    "year": 2015
  }, {
    "title": "A hierarchical latent variable encoderdecoder model for generating dialogues",
    "authors": ["Serban", "Iulian Vlad", "Sordoni", "Alessandro", "Lowe", "Ryan", "Charlin", "Laurent", "Pineau", "Joelle", "Courville", "Aaron", "Bengio", "Yoshua"],
    "venue": "arXiv preprint arXiv:1605.06069,",
    "year": 2016
  }, {
    "title": "Document modeling with gated recurrent neural network for sentiment classification",
    "authors": ["Tang", "Duyu", "Qin", "Bing", "Liu", "Ting"],
    "venue": "In EMNLP,",
    "year": 2015
  }, {
    "title": "Wavenet: A generative model for raw audio",
    "authors": ["van den Oord", "Aäron", "Dieleman", "Sander", "Zen", "Heiga", "Simonyan", "Karen", "Vinyals", "Oriol", "Graves", "Alex", "Kalchbrenner", "Nal", "Senior", "Andrew", "Kavukcuoglu", "Koray"],
    "venue": "CoRR abs/1609.03499,",
    "year": 2016
  }, {
    "title": "Conditional image generation with pixelcnn decoders",
    "authors": ["van den Oord", "Aaron", "Kalchbrenner", "Nal", "Espeholt", "Lasse", "Vinyals", "Oriol", "Graves", "Alex"],
    "venue": "In Advances in Neural Information Processing Systems,",
    "year": 2016
  }, {
    "title": "Attribute2image: Conditional image generation from visual attributes",
    "authors": ["Yan", "Xinchen", "Yang", "Jimei", "Sohn", "Kihyuk", "Lee", "Honglak"],
    "venue": "In European Conference on Computer Vision,",
    "year": 2016
  }, {
    "title": "Hierarchical attention networks for document classification",
    "authors": ["Yang", "Zichao", "Diyi", "Dyer", "Chris", "He", "Xiaodong", "Smola", "Alex", "Hovy", "Eduard"],
    "venue": "In Proceedings of NAACL-HLT,",
    "year": 2016
  }, {
    "title": "Multi-scale context aggregation by dilated convolutions",
    "authors": ["Yu", "Fisher", "Koltun", "Vladlen"],
    "venue": "arXiv preprint arXiv:1511.07122,",
    "year": 2015
  }, {
    "title": "Variational neural machine translation",
    "authors": ["Zhang", "Biao", "Xiong", "Deyi", "Su", "Jinsong", "Duan", "Hong", "Min"],
    "venue": "arXiv preprint arXiv:1605.07869,",
    "year": 2016
  }, {
    "title": "Characterlevel convolutional networks for text classification",
    "authors": ["Zhang", "Xiang", "Zhao", "Junbo", "LeCun", "Yann"],
    "venue": "In Advances in neural information processing systems,",
    "year": 2015
  }],
  "id": "SP:7d77a29f2e1dc796d202d6cf01f299da7c197c22",
  "authors": [{
    "name": "Zichao Yang",
    "affiliations": []
  }, {
    "name": "Zhiting Hu",
    "affiliations": []
  }, {
    "name": "Ruslan Salakhutdinov",
    "affiliations": []
  }, {
    "name": "Taylor Berg-Kirkpatrick",
    "affiliations": []
  }],
  "abstractText": "Recent work on generative text modeling has found that variational autoencoders (VAE) with LSTM decoders perform worse than simpler LSTM language models (Bowman et al., 2015). This negative result is so far poorly understood, but has been attributed to the propensity of LSTM decoders to ignore conditioning information from the encoder. In this paper, we experiment with a new type of decoder for VAE: a dilated CNN. By changing the decoder’s dilation architecture, we control the size of context from previously generated words. In experiments, we find that there is a trade-off between contextual capacity of the decoder and effective use of encoding information. We show that when carefully managed, VAEs can outperform LSTM language models. We demonstrate perplexity gains on two datasets, representing the first positive language modeling result with VAE. Further, we conduct an in-depth investigation of the use of VAE (with our new decoding architecture) for semi-supervised and unsupervised labeling tasks, demonstrating gains over several strong baselines.",
  "title": "Improved Variational Autoencoders for Text Modeling using Dilated Convolutions"
}