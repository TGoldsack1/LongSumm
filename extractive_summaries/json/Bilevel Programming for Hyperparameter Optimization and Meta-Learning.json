{
  "sections": [{
    "heading": "1. Introduction",
    "text": "While in standard supervised learning problems we seek the best hypothesis in a given space and with a given learning algorithm, in hyperparameter optimization (HO) and metalearning (ML) we seek a configuration so that the optimized learning algorithm will produce a model that generalizes well to new data. The search space in ML often incorporates choices associated with the hypothesis space and the features of the learning algorithm itself (e.g., how optimization of the training loss is performed). Under this common perspective, both HO and ML essentially boil down to nesting two search problems: at the inner level we seek a good\n1Computational Statistics and Machine Learning, Istituto Italiano di Tecnologia, Genoa, Italy 2Department of Computer Science, University College London, London, UK 3Department of Information Engineering, Università degli Studi di Firenze, Florence, Italy. Correspondence to: Luca Franceschi <luca.franceschi@iit.it>.\nProceedings of the 35 th International Conference on Machine Learning, Stockholm, Sweden, PMLR 80, 2018. Copyright 2018 by the author(s).\nhypothesis (as in standard supervised learning) while at the outer level we seek a good configuration (including a good hypothesis space) where the inner search takes place. Surprisingly, the literature on ML has little overlap with the literature on HO and in this paper we present a unified framework encompassing both of them.\nClassic approaches to HO (see e.g. Hutter et al., 2015, for a survey) have been only able to manage a relatively small number of hyperparameters, from a few dozens using random search (Bergstra and Bengio, 2012) to a few hundreds using Bayesian or model-based approaches (Bergstra et al., 2013; Snoek et al., 2012). Recent gradient-based techniques for HO, however, have significantly increased the number of hyperparameters that can be optimized (Domke, 2012; Maclaurin et al., 2015; Pedregosa, 2016; Franceschi et al., 2017) and it is now possible to tune as hyperparameters entire weight vectors associated with a neural network layer. In this way, it becomes feasible to design models that possibly have more hyperparameters than parameters. Such an approach is well suited for ML, since parameters are learned from a small dataset, whereas hyperparameters leverage multiple available datasets.\nHO and ML only differ substantially in terms of the experimental settings in which they are evaluated. While in HO the available data is associated with a single task and split into a training set (used to tune the parameters) and a validation set (used to tune the hyperparameters), in ML we are often interested in the so-called few-shot learning setting where data comes in the form of short episodes (small datasets with few examples per class) sampled from a common probability distribution over supervised tasks.\nEarly work on ML dates back at least to the 1990’s (Schmidhuber, 1992; Baxter, 1995; Thrun and Pratt, 1998) but this research area has received considerable attention in the last few years, mainly driven by the need in real-life and industrial scenarios for learning quickly a vast multitude of tasks. These tasks, or episodes, may appear and evolve continuously over time and may only contain few examples (Lake et al., 2017). Different strategies have emerged to tackle ML. Although they do overlap in some aspects, it is possible to identify at least four of them. The metric strategy attempts to use training episodes to construct embeddings such that examples of the same class are mapped into similar repre-\nsentations. It has been instantiated in several variants that involve non-parametric (or instance-based) predictors (Koch et al., 2015; Vinyals et al., 2016; Snell et al., 2017). In the related memorization strategy, the meta-learner learns to store and retrieve data points representations in memory. It can be implemented either using recurrent networks (Santoro et al., 2016) or temporal convolutions (Mishra et al., 2018). The use of an attention mechanism (Vaswani et al., 2017) is crucial both in (Vinyals et al., 2016) and in (Mishra et al., 2018). The initialization strategy (Ravi and Larochelle, 2017; Finn et al., 2017) uses training episodes to infer a good initial value for the model’s parameters so that new tasks can be learned quickly by fine tuning. The optimization strategy (Andrychowicz et al., 2016; Ravi and Larochelle, 2017; Wichrowska et al., 2017) forges an optimization algorithm that will find it easier to learn on novel related tasks.\nA main contribution of this paper is a unified view of HO and ML within the natural mathematical framework of bilevel programming, where an outer optimization problem is solved subject to the optimality of an inner optimization problem. In HO the outer problem involves hyperparameters while the inner problem is usually the minimization of an empirical loss. In ML the outer problem could involve a shared representation among tasks while the inner problem could concern classifiers for individual tasks. Bilevel programming (Bard, 2013) has been suggested before in machine learning in the context of kernel methods and support vector machines (Keerthi et al., 2007; Kunapuli et al., 2008), multitask learning (Flamary et al., 2014), and more recently HO (Pedregosa, 2016), but never in the context of ML. The resulting framework outlined in Sec. 2 encompasses some existing approaches to ML, in particular those based on the initialization and the optimization strategies.\nA technical difficulty arises when the solution to the inner problem cannot be written analytically (for example this happens when using the log-loss for training neural networks) and one needs to resort to iterative optimization approaches. As a second contribution, we provide in Sec. 3 sufficient conditions that guarantee good approximation properties. We observe that these conditions are reasonable and apply\nto concrete problems relevant to applications.\nIn Sec. 4, by taking inspiration on early work on representation learning in the context of multi-task and meta-learning (Baxter, 1995; Caruana, 1998), we instantiate the framework for ML in a simple way treating the weights of the last layer of a neural network as the inner variables and the remaining weights, which parametrize the representation mapping, as the outer variables. As shown in Sec. 5, the resulting ML algorithm performs well in practice, outperforming most of the existing strategies on MiniImagenet."
  }, {
    "heading": "2. A bilevel optimization framework",
    "text": "In this paper, we consider bilevel optimization problems (see e.g. Colson et al., 2007) of the form\nmin{f(λ) : λ ∈ Λ}, (1)\nwhere function f : Λ→ R is defined at λ ∈ Λ as\nf(λ) = inf{E(wλ, λ) : wλ ∈ arg min u∈Rd Lλ(u)}. (2)\nWe call E : Rd × Λ→ R the outer objective and, for every λ ∈ Λ, we call Lλ : Rd → R the inner objective. Note that {Lλ : λ ∈ Λ} is a class of objective functions parameterized by λ. Specific instances of this problem include HO and ML, which we discuss next. Table 1 outlines the links among bilevel programming, HO and ML."
  }, {
    "heading": "2.1. Hyperparameter Optimization",
    "text": "In the context of hyperparameter optimization, we are interested in minimizing the validation error of a model gw : X → Y parameterized by a vector w, with respect to a vector of hyperparameters λ. For example, we may consider representation or regularization hyperparameters that control the hypothesis space or penalties, respectively. In this setting, a prototypical choice for the inner objective is the regularized empirical error\nLλ(w) = ∑\n(x,y)∈Dtr\n`(gw(x), y) + Ωλ(w),\nwhere Dtr = {(xi, yi)}ni=1 is a set of input/output points, ` is a prescribed loss function, and Ωλ a regularizer parameterized by λ. The outer objective represents a proxy for the generalization error of gw, and it may be given by the average loss on a validation set Dval\nE(w, λ) = ∑\n(x,y)∈Dval\n`(gw(x), y).\nor, in more generality, by a cross-validation error, as detailed in Appendix B. Note that in this setting, the outer objective E does not depend explicitly on the hyperparameters λ,\nError\nsince in HO λ is instrumental in finding a good model gw, which is our final goal. As a more specific example, consider linear models, gw(x) = 〈w, x〉, let ` be the square loss and let Ωλ(w) = λ‖w‖2, in which case the inner objective is ridge regression (Tikhonov regularization) and the bilevel problem optimizes over the regularization parameter the validation error of ridge regression."
  }, {
    "heading": "2.2. Meta-Learning",
    "text": "In meta-learning (ML) the inner and outer objectives are computed by averaging a training and a validation error over multiple tasks, respectively. The goal is to produce a learning algorithm that will work well on novel tasks1. For this purpose, we have available a meta-training set D = {Dj = Djtr ∪ D j val}Nj=1, which is a collection of datasets, sampled from a meta-distribution P . Each dataset Dj = {(xji , y j i )} nj i=1 with (x j i , y j i ) ∈ X × Yj is linked to a specific task. Note that the output space is task dependent (e.g. a multi-class classification problem with variable number of classes). The model for each task is a function gwj ,λ : X → Yj , identified by a parameter vectors wj and hyperparameters λ. A key point here is that λ is shared between the tasks. With this notation the inner and outer objectives are\nLλ(w) = N∑ j=1 Lj(wj , λ,Djtr), (3)\nE(w, λ) = N∑ j=1 Lj(wj , λ,Djval) (4)\nrespectively. The loss Lj(wj , λ, S) represents the empirical error of the pair (wj , λ) on a set of examples S. Note that the\n1The ML problem is also related to multitask learning, however in ML the goal is to extrapolate from the given tasks.\ninner and outer losses for task j use different train/validation splits of the corresponding dataset Dj . Furthermore, unlike in HO, in ML the final goal is to find a good λ and the wj are now instrumental.\nThe cartoon in Figure 1 illustrates ML as a bilevel problem. The parameter λ indexes an hypothesis space within which the inner objective is minimized. A particular example, detailed in Sec. 4, is to choose the model gw,λ = 〈w, hλ(x)〉, in which case λ parameterizes a feature mapping. Yet another choice would be to consider gwj ,λ(x) = 〈w + λ, x〉, in which case λ represents a common model around which task specific models are to be found (see e.g. Evgeniou et al., 2005; Finn et al., 2017; Khosla et al., 2012; Kuzborskij et al., 2013, and reference therein)."
  }, {
    "heading": "2.3. Gradient-Based Approach",
    "text": "We now discuss a general approach to solve Problem (1)-(2) when the hyperparameter vector λ is real-valued. To simplify our discussion let us assume that the inner objective has a unique minimizer wλ. Even in this simplified scenario, Problem (1)-(2) remains challenging to solve. Indeed, in general there is no closed form expression wλ, so it is not possible to directly optimize the outer objective function. While a possible strategy (implicit differentiation) is to apply the implicit function theorem to∇Lλ = 0 (Pedregosa, 2016; Koh and Liang, 2017; Beirami et al., 2017), another compelling approach is to replace the inner problem with a dynamical system. This point, discussed in (Domke, 2012; Maclaurin et al., 2015; Franceschi et al., 2017), is developed further in this paper.\nSpecifically, we let [T ] = {1, . . . , T} where T is a prescribed positive integer and consider the following approximation of Problem (1)-(2)\nmin λ fT (λ) = E(wT,λ, λ), (5)\nwhere E is a smooth scalar function, and2\nw0,λ = Φ0(λ), wt,λ = Φt(wt−1,λ, λ), t ∈ [T ], (6)\nwith Φ0 : Rm → Rd a smooth initialization mapping and, for every t ∈ [T ], Φt : Rd × Rm → Rd a smooth mapping that represents the operation performed by the t-th step of an optimization algorithm. For example, the optimization dynamics could be gradient descent: Φt(wt, λ) = wt − ηt∇Lλ(·) where (ηt)t∈[T ] is a sequence of steps sizes.\nThe approximation of the bilevel problem (1)-(2) by the procedure (5)-(6) raises the issue of the quality of this approximation and we return to this issue in the next section.\n2In general, the algorithm used to minimize the inner objective may involve auxiliary variables, e.g., velocities when using gradient descent with momentum, so w should be intended as a larger vector containing both model parameters and auxiliary variables.\nHowever, it also suggests to consider the inner dynamics as a form of approximate empirical error minimization (e.g. early stopping) which is valid in its own right. From this perspective – conversely to the implicit differentiation strategy – it is possible to include among the components of λ variables which are associated with the optimization algorithm itself. For example, λ may include the step sizes or momentum factors if the dynamics Φt in Eq. (6) is gradient descent with momentum; in (Andrychowicz et al., 2016; Wichrowska et al., 2017) the mapping Φt is implemented as a recurrent neural network, while (Finn et al., 2017) focus on the initialization mapping by letting Φ0(λ) = λ.\nA major advantage of this reformulation is that it makes it possible to compute efficiently the gradient of fT , which we call hypergradient, either in time or in memory (Maclaurin et al., 2015; Franceschi et al., 2017), by making use of reverse or forward mode algorithmic differentiation (Griewank and Walther, 2008; Baydin et al., 2017). This allows us to optimize a number of hyperparameters of the same order of that of parameters, a situation which arise in ML."
  }, {
    "heading": "3. Exact and Approximate Bilevel Programming",
    "text": "In this section, we provide results about the existence of solutions of Problem (1)-(2) and the approximation properties of Procedure (5)-(6) with respect to the original bilevel problem. Proofs of these results are provided in the supplementary material.\nProcedure (5)-(6), though related to the bilevel problem (1)-(2), may not be, in general, a good approximation of it. Indeed, making the assumptions (which sound perfectly reasonable) that, for every λ ∈ Λ, wT,λ → wλ for some wλ ∈ arg maxLλ, and that E(·, λ) is continuous, one can only assert that limT→∞ fT (λ) = E(wλ, λ) ≥ f(λ). This is because the optimization dynamics converge to some minimizer of the inner objective Lλ, but not necessarily to the one that also minimizes the function E. This is illustrated in Figure 2. The situation is, however, different if the inner problem admits a unique minimizer for every λ ∈ Λ. Indeed in this case, it is possible to show that the set of minimizers of the approximate problems converge, as T → +∞ and in an appropriate sense, to the set of minimizers of the bilevel problem. More precisely, we make the following assumptions:\n(i) Λ is a compact subset of Rm;\n(ii) E : Rd × Λ→ R is jointly continuous;\n(iii) the map (w, λ) 7→ Lλ(w) is jointly continuous and such that arg minLλ is a singleton for every λ ∈ Λ;\n(iv) wλ = arg minLλ remains bounded as λ varies in Λ.\nThen, problem (1)-(2) becomes\nmin λ∈Λ f(λ) = E(wλ, λ), wλ = argminuLλ(u). (7)\nUnder the above assumptions, in the following we give results about the existence of solutions of problem (7) and the (variational) convergence of the approximate problems (5)-(6) towards problem (7) — relating the minima as well as the set of minimizers. In this respect we note that, since both f and fT are nonconvex, argmin fT and argmin f are in general nonsingleton, so an appropriate definition of set convergence is required.\nTheorem 3.1 (Existence). Under Assumptions (i)-(iv) problem (7) admits solutions. Proof See Appendix A.\nThe result below follows from general facts on the stability of minimizers in optimization problems (Dontchev and Zolezzi, 1993).\nTheorem 3.2 (Convergence). In addition to Assumptions (i)-(iv), suppose that:\n(v) E(·, λ) is uniformly Lipschitz continuous; (vi) The iterates (wT,λ)T∈N converge uniformly to wλ on\nΛ as T → +∞. Then\n(a) inf fT → inf f , (b) argmin fT → argmin f , meaning that, for every\n(λT )T∈N such that λT ∈ argmin fT , we have that:\n- (λT )T∈N admits a convergent subsequence; - for every subsequence (λKT )T∈N such that λKT → λ̄, we have λ̄ ∈ argmin f .\nProof See Appendix A.\nWe stress that assumptions (i)-(vi) are very natural and satisfied by many problems of practical interests. Thus, the above results provide full theoretical justification to the proposed approximate procedure (5)-(6). The following remark discusses assumption (vi), while the subsequent example will be relevant to the experiments in Sec. 5.\nAlgorithm 1. Reverse-HG for Hyper-representation Input: λ, current values of the hyperparameter, T number of iteration of GD, η ground learning rate, B minibatch of episodes from D Output: Gradient of meta-training error w.r.t. λ on B for j = 1 to |B| do\nwj0 = 0 for t = 1 to T do\nwjt ← wt−1 − η∇wLj(w j t−1, λ,D j tr)\nαjT ← ∇wLj(w j T , λ,Dval) pj ← ∇λLj(wjT , λ,Dval) for t = T − 1 downto 0 do\npj ← pj − αjt+1η∇λ∇wLj(w j t , λ,D j tr) αjt ← α j t+1 [ I − η∇w∇wLj(wjt , λ,D j tr) ] return ∑ j p j\nRemark 3.3. If Lλ is strongly convex, then many gradientbased algorithms (e.g., standard and accelerated gradient descent) yield linear convergence of the iterates wT,λ’s. Moreover, in such cases, the rate of linear convergence is of type (νλ − µλ)/(νλ + µλ), where νλ and µλ are the Lipschitz constant of the gradient and the modulus of strong convexity of Lλ respectively. So, this rate can be uniformly bounded from above by ρ ∈ ]0, 1[, provided that supλ∈Λ νλ < +∞ and infλ∈Λ µλ > 0. Thus, in these cases wT,λ converges uniformly to wλ on Λ (at a linear rate).\nExample 3.4. Let us consider the following form of the inner objective:\nLH(w) = ‖y −XHw‖2 + ρ‖w‖2, (8)\nwhere ρ > 0 is a fixed regularization parameter and H ∈ Rd×d is the hyperparameter, representing a linear feature map. LH is strongly convex, with modulus µ = ρ > 0 (independent on the hyperparameter H), and Lipschitz smooth with constant νH = 2‖(XH)>XH+ρI‖, which is bounded from above, if H ranges in a bounded set of square matrices. In this case assumptions (i)-(vi) are satisfied."
  }, {
    "heading": "4. Learning Hyper-Representations",
    "text": "In this section, we instantiate the bilevel programming approach for ML outlined in Sec. 2.2 in the case of deep learning where representation layers are shared across episodes. Finding good data representations is a centerpiece in machine learning. Classical approaches (Baxter, 1995; Caruana, 1998) learn both the weights of the representation mapping and those of the ground classifiers jointly on the same data. Here we follow the bilevel approach and split each dataset/episode in training and validation sets.\nOur method involves the learning of a cross-task intermedi-\nate representation hλ : X → Rk (parametrized by a vector λ) on top of which task specific models gj : Rk → Yj (parametrized by vectors wj) are trained. The final ground model for task j is thus given by gj ◦ h. To find λ, we solve Problem (1)-(2) with inner and outer objectives as in Eqs. (3) and (4), respectively. Since, in general, this problem cannot be solved exactly, we instantiate the approximation scheme in Eqs. (5)-(6) as follows:\nmin λ fT (λ) = N∑ j=1 Lj(wjT , λ,D j val) (9)\nwjt = w j t−1−η∇wLj(w j t−1, λ,D j tr), t, j ∈ [T ], [N ]. (10)\nStarting from an initial value, the weights of the task-specific models are learned by T iterations of gradient descent. The gradient of fT can be computed efficiently in time by making use of an extended reverse-hypergradient procedure (Franceschi et al., 2017) which we present in Algorithm 1. Since, in general, the number of episodes in a meta-training set is large, we compute a stochastic approximation of the gradient of fT by sampling a mini-batch of episodes. At test time, given a new episode D̄, the representation h is kept fixed, and all the examples in D̄ are used to tune the weights w̄ of the episode-specific model ḡ.\nLike other initialization and optimization strategies for ML, our method does not require lookups in a support set as the memorization and metric strategies do (Santoro et al., 2016; Vinyals et al., 2016; Mishra et al., 2018). Unlike (Andrychowicz et al., 2016; Ravi and Larochelle, 2017) we do not tune the optimization algorithm, which in our case is plain empirical loss minimization by gradient descent, and rather focus on the hypothesis space. Unlike (Finn et al., 2017), that aims at maximizing sensitivity of new task losses to the model parameters, we aim at maximizing the generalization to novel examples during training episodes, with respect to λ. Our assumptions about the structure of the model are slightly stronger than in (Finn et al., 2017) but still mild, namely that some (hyper)parameters define the representation and the remaining parameters define the classification function. In (Munkhdalai and Yu, 2017) the meta-knowledge is distributed among fast and slow weights and an external memory; our approach is more direct, since the meta-knowledge is solely distilled by λ. A further advantage of our method is that, if the episode-specific models are linear (e.g. logistic regressors) and each loss Lj is strongly convex in w, the theoretical guarantees of Theorem 3.2 apply (see Remark 3.3). These assumptions are satisfied in the experiments reported in the next section."
  }, {
    "heading": "5. Experiments",
    "text": "The aim of the following experiments is threefold. First, we investigate the impact of the number of iterations of the optimization dynamics on the quality of the solution on a\nsimple multiclass classification problem. Second, we test our hyper-representation method in the context of few-shot learning on two benchmark datasets. Finally, we constrast the bilevel ML approach against classical approaches to learn shared representations 3."
  }, {
    "heading": "5.1. The Effect of T",
    "text": "Motivated by the theoretical findings of Sec. 3, we empirically investigate how solving the inner problem approximately (i.e. using small T ) affects convergence, generalization performances, and running time. We focus in particular on the linear feature map described in Example 3.4, which allows us to compare the approximated solution against the closed-form analytical solution given by\nwH = [(XH) TXH + ρI]−1(XH)TY.\nIn this setting, the bilevel problem reduces to a (non-convex) optimization problem in H .\nWe use a subset of 100 classes extracted from Omniglot dataset (Lake et al., 2017) to construct a HO problem aimed at tuning H . A training set Dtr and a validation set Dval, each consisting of three randomly drawn examples per class, were sampled to form the HO problem. A third set Dtest, consisting of fifteen examples per class, was used for testing. Instead of using raw images as input, we employ feature vectors x ∈ R256 computed by the convolutional network trained on one-shot five-ways ML setting as described in Sec. 5.2.\nFor the approximate problems we compute the hypergradient using Algorithm 1, where it is intended that B = {(Dtr, Dval)}. Figure 3 shows the values of functions f and fT (see Eqs. (1) and (5), respectively) during the optimization of H . As T increases, the solution of the approximate\n3The code for reproducing the experiments, based on the package FAR-HO (https://bit.ly/far-ho), is available at https://bit.ly/hyper-repr\nproblem approaches the true bilevel solution. However, performing a small number of gradient descent steps for solving the inner problem acts as implicit regularizer. As it is evident from Figure 4, the generalization error is better when T is smaller than the value yielding the best approximation of the inner solution. This is to be expected since, in this setting, the dimensions of parameters and hyperparameters are of the same order, leading to a concrete possibility of overfitting the outer objective (validation error). An appropriate, problem dependent, choice of T may help avoiding this issue (see also Appendix C). As T increases, the number of hyperiterations required to reach the maximum test accuracy decreases, further suggesting that there is an interplay between the number of iterations used to solve the inner and the outer objective. Finally, the running time of Algorithm 1, is linear in T and the size of w and independent of the size of H (see also Table 2), making it even more appealing to reduce the number of iterations."
  }, {
    "heading": "5.2. Few-shot Learning",
    "text": "We now turn our attention to learning-to-learn, precisely to few-shot supervised learning, implementing the ML strategy outlined in Sec. 4 on two different benchmark datasets:\n• OMNIGLOT (Lake et al., 2015), a dataset that contains examples of 1623 different handwritten characters from 50 alphabets. We downsample the images to 28× 28.\n• MINIIMAGENET (Vinyals et al., 2016), a subset of ImageNet (Deng et al., 2009), that contains 60000 downsampled images from 100 different classes.\nFollowing the experimental protocol used in a number of recent works, we build a meta-training set D, from which we sample datasets to solve Problem (9)-(10), a meta-validation\nset V for tuning ML hyperparameters, and finally a metatest set T which is used to estimate accuracy. Operationally, each meta-dataset consists of a pool of samples belonging to different (non-overlapping between separate meta-dataset) classes, which can be combined to form ground classification datasets Dj = Djtr ∪ D j val with 5 or 20 classes (for Omniglot). The Djtr’s contain 1 or 5 examples per class which are used to fit wj (see Eq. 10). The Djval’s, containing 15 examples per class, is used either to compute fT (λ) (see Eq. (9)) and its (stochastic) gradient if Dj ∈ D or to provide a generalization score if Dj comes from either V or T . For MiniImagenet we use the same split and images proposed in (Ravi and Larochelle, 2017), while for Omniglot we use the protocol defined by (Santoro et al., 2016).\nAs ground classifiers we use multinomial logistic regressors and as task losses `j we employ cross-entropy. The inner problems, being strongly convex, admit unique minimizers, yet require numerical computation of the solutions. We initialize ground models parameters wj to 0 and, according to the observation in Sec. 5.1, we perform T gradient descent steps, where T is treated as a ML hyperparameter that has to be validated. Figure 6 shows an example of meta-validation of T for one-shot learning on MiniImagenet. We compute a stochastic approximation of∇fT (λ) with Algorithm 1 and use Adam with decaying learning rate to optimize λ.\nRegarding the specific implementation of the representation mapping h, we employ for Omniglot a four-layers convolutional neural network with strided convolutions and 64 filters per layer as in (Vinyals et al., 2016) and other successive works. For MiniImagenet we tried two different architectures:\n• C4L, a four-layers convolutional neural network with maxpooling and 32 filters per layer;\n• RN: a residual network (He et al., 2016) built of four residual blocks followed by two convolutional layers.\nThe first network architecture has been proposed in (Ravi and Larochelle, 2017) and then used in (Finn et al., 2017), while a similar residual network architecture has been employed in a more recent work (Mishra et al., 2018). Further details on the architectures of h, as well as other ML hyperparameters, are specified in the supplementary material. We report our results, using RN for MiniImagenet, in Table 3, alongside scores from various recently proposed methods for comparison.\nThe proposed method achieves competitive results highlighting the relative importance of learning a task independent representation, on the top of which logistic classifiers trained with very few samples generalize well. Moreover, utilizing more expressive models such as residual network as representation mappings, is beneficial for our proposed strategy and, unlike other methods, does not result in overfitting\nof the outer objective, as reported in (Mishra et al., 2018). Indeed, compared to C4L, RN achieves a relative improvement of 6.5% on one-shot and 4.2% on five-shot. Figure 5 provides a visual example of the goodness of the learned representation, showing that MiniImagenet examples (the first from meta-training, the second from the meta-testing sets) from similar classes (different dog breeds) are mapped near each other by h and, conversely, samples from dissimilar classes are mapped afar."
  }, {
    "heading": "5.3. On Variants of Representation Learning Methods",
    "text": "In this section, we show the benefits of learning a representation within the proposed bilevel framework compared to other possible approaches that involve an explicit factorization of a classifier as gj ◦ h. The representation mapping h is either pretrained or learned with different meta-learning algorithms. We focus on the problem of one-shot learning on MiniImagenet and we use C4L as architecture for the representation mapping. In all the experiments the ground models gj are multinomial logistic regressor as in Sec. 5.2, tuned with 5 steps of gradient descent. We ran the following experiments:\n• Multiclass: the mapping h : X → R64 is given by the\nlinear outputs before the softmax operation of a network4 pretrained on the totality of examples contained in the training meta-dataset (600 examples for each of the 64 classes). In this setting, we found that using the second last layer or the output after the softmax yields worst results;\n• Bilevel-train: we use a bilevel approach but, unlike in Sec. 4, we optimize the parameter vector λ of the representation mapping by minimizing the loss on the training sets of each episode. The hypergradient is still computed with Algorithm 1, albeit we set Djval = D j tr for each training episodes;\n• Approx and Approx-train: we consider an approximation of the hypergradient ∇fT (λ) by disregarding the optimization dynamics of the inner objectives (i.e. we set ∇λwjT = 0). In Approx-train we just use the training sets;\n• Classic: as in (Baxter, 1995), we learn h by jointly optimize f̂(λ,w1, . . . , wN ) = ∑N j=1 L\nj(wj , λ,Djtr) and treat the problem as standard multitask learning, with the exception that we evaluate f̂ on mini-batches of 4 episodes, randomly sampled every 5 gradient descent iterations.\nIn settings where we do not use the validation sets, we let the training sets of each episode contain 16 examples per class. Using training episodes with just one example per class resulted in performances just above random chance. While the first experiment constitutes a standard baseline, the others have the specific aim of assessing (i) the importance of splitting episodes of meta-training set into training and validation and (ii) the importance of computing the hypergradient of the approximate bilevel problem with Algorithm 1. The results reported in Table 4 suggest that both the training/validation splitting and the full computation of the hypergradient constitute key factors for learning a good representation in a meta-learning context. On the other side, using pretrained representations, especially in a low-dimensional space, turns out to be a rather effective baseline. One possible explanation is that, in this context,\n4The network is similar to C4L but has 64 filters per layer.\nsome classes in the training and testing meta-datasets are rather similar (e.g. various dog breeds) and thus ground classifiers can leverage on very specific representations."
  }, {
    "heading": "6. Conclusions",
    "text": "We have shown that both HO and ML can be formulated in terms of bilevel programming and solved with an iterative approach. When the inner problem has a unique solution (e.g. is strongly convex), our theoretical results show that the iterative approach has convergence guarantees, a result that is interesting in its own right. In the case of ML, by adapting classical strategies (Baxter, 1995) to the bilevel framework with training/validation splitting, we present a method for learning hyper-representations which is experimentally effective and supported by our theoretical guarantees.\nOur framework encompasses recently proposed methods for meta-learning, such as learning to optimize, but also suggests different design patterns for the inner learning algorithm which could be interesting to explore in future work. The resulting inner problems may not satisfy the assumptions of our convergence analysis, raising the need for further theoretical investigations. An additional future direction of research is the study of the statistical properties of bilevel strategies where outer objectives are based on the generalization ability of the inner model to new (validation) data. Ideas from (Maurer et al., 2016; Denevi et al., 2018) may be useful in this direction."
  }],
  "year": 2018,
  "references": [{
    "title": "Learning to learn by gradient descent by gradient descent",
    "authors": ["M. Andrychowicz", "M. Denil", "S. Gomez", "M.W. Hoffman", "D. Pfau", "T. Schaul", "N. de Freitas"],
    "venue": "In Advances in Neural Information Processing Systems (NIPS),",
    "year": 2016
  }, {
    "title": "Practical bilevel optimization: algorithms and applications, volume 30",
    "authors": ["J.F. Bard"],
    "venue": "Springer Science & Business Media. 01251.",
    "year": 2013
  }, {
    "title": "Learning internal representations",
    "authors": ["J. Baxter"],
    "venue": "Proceedings of the 8th Annual Conference on Computational Learning Theory (COLT), pages 311–320. ACM.",
    "year": 1995
  }, {
    "title": "Automatic differentiation in machine learning: a survey",
    "authors": ["A.G. Baydin", "B.A. Pearlmutter", "A.A. Radul", "J.M. Siskind"],
    "venue": "Journal of Machine Learning Research, 18:153:1–153:43.",
    "year": 2017
  }, {
    "title": "On optimal generalizability in parametric learning",
    "authors": ["A. Beirami", "M. Razaviyayn", "S. Shahrampour", "V. Tarokh"],
    "venue": "Advances in Neural Information Processing Systems (NIPS), pages 3458–3468.",
    "year": 2017
  }, {
    "title": "Random search for hyperparameter optimization",
    "authors": ["J. Bergstra", "Y. Bengio"],
    "venue": "Journal of Machine Learning Research, 13(Feb):281–305.",
    "year": 2012
  }, {
    "title": "Making a science of model search: Hyperparameter optimization in hundreds of dimensions for vision architectures",
    "authors": ["J. Bergstra", "D. Yamins", "D.D. Cox"],
    "venue": "Proceedings of the 30th International Conference on Machine Learning, (ICML), pages 115–123.",
    "year": 2013
  }, {
    "title": "Multitask learning",
    "authors": ["R. Caruana"],
    "venue": "Learning to learn, pages 95–133. Springer. 02683.",
    "year": 1998
  }, {
    "title": "An overview of bilevel optimization",
    "authors": ["B. Colson", "P. Marcotte", "G. Savard"],
    "venue": "Annals of operations research, 153(1):235–256.",
    "year": 2007
  }, {
    "title": "Incremental learning-to-learn with statistical guarantees",
    "authors": ["G. Denevi", "C. Ciliberto", "D. Stamos", "M. Pontil"],
    "venue": "arXiv preprint arXiv:1803.08089. To appear in UAI 2018.",
    "year": 2018
  }, {
    "title": "Imagenet: A large-scale hierarchical image database",
    "authors": ["J. Deng", "W. Dong", "R. Socher", "Li", "L.-J.", "K. Li", "L. Fei-Fei"],
    "venue": "Computer Vision and Pattern Recognition (CVPR), pages 248–255.",
    "year": 2009
  }, {
    "title": "Generic Methods for Optimization-Based Modeling",
    "authors": ["J. Domke"],
    "venue": "AISTATS, volume 22, pages 318–326.",
    "year": 2012
  }, {
    "title": "Well-posed optimization problems, volume 1543 of Lecture Notes in Mathematics",
    "authors": ["A.L. Dontchev", "T. Zolezzi"],
    "venue": "Springer-Verlag, Berlin.",
    "year": 1993
  }, {
    "title": "Towards a Neural Statistician",
    "authors": ["H. Edwards", "A. Storkey"],
    "venue": "arXiv:1606.02185 [cs, stat]. 00027 arXiv: 1606.02185.",
    "year": 2016
  }, {
    "title": "Learning multiple tasks with kernel methods",
    "authors": ["T. Evgeniou", "C.A. Micchelli", "M. Pontil"],
    "venue": "Journal of Machine Learning Research, 6(Apr):615–637.",
    "year": 2005
  }, {
    "title": "Model-agnostic meta-learning for fast adaptation of deep networks",
    "authors": ["C. Finn", "P. Abbeel", "S. Levine"],
    "venue": "Proceedings of the 34th International Conference on Machine Learning, (ICML), pages 1126–1135.",
    "year": 2017
  }, {
    "title": "Learning constrained task similarities in graphregularized multi-task learning",
    "authors": ["R. Flamary", "A. Rakotomamonjy", "G. Gasso"],
    "venue": "Regularization, Optimization, Kernels, and Support Vector Machines, page 103.",
    "year": 2014
  }, {
    "title": "Forward and reverse gradient-based hyperparameter optimization",
    "authors": ["L. Franceschi", "M. Donini", "P. Frasconi", "M. Pontil"],
    "venue": "Proceedings of the 34th International Conference on Machine Learning, (ICML), pages 1165–1173.",
    "year": 2017
  }, {
    "title": "Evaluating derivatives: principles and techniques of algorithmic differentiation",
    "authors": ["A. Griewank", "A. Walther"],
    "venue": "SIAM.",
    "year": 2008
  }, {
    "title": "Deep residual learning for image recognition",
    "authors": ["K. He", "X. Zhang", "S. Ren", "J. Sun"],
    "venue": "Computer Vision and Pattern Recognition (CVPR), pages 770–778.",
    "year": 2016
  }, {
    "title": "Beyond Manual Tuning of Hyperparameters",
    "authors": ["F. Hutter", "J. Lcke", "L. Schmidt-Thieme"],
    "venue": "KI - Künstliche Intelligenz, 29(4):329–337.",
    "year": 2015
  }, {
    "title": "Learning to remember rare",
    "authors": ["L. Kaiser", "O. Nachum", "A. Roy", "S. Bengio"],
    "year": 2017
  }, {
    "title": "An efficient method for gradient-based adaptation of hyperparameters in svm models",
    "authors": ["S.S. Keerthi", "V. Sindhwani", "O. Chapelle"],
    "venue": "Advances in Neural Information Processing Systems (NIPS), pages 673–680.",
    "year": 2007
  }, {
    "title": "Undoing the damage of dataset bias",
    "authors": ["A. Khosla", "T. Zhou", "T. Malisiewicz", "A.A. Efros", "A. Torralba"],
    "venue": "European Conference on Computer Vision, pages 158– 171. Springer.",
    "year": 2012
  }, {
    "title": "Siamese neural networks for one-shot image recognition",
    "authors": ["G. Koch", "R. Zemel", "R. Salakhutdinov"],
    "venue": "ICML Deep Learning Workshop, volume 2. 00127.",
    "year": 2015
  }, {
    "title": "Understanding black-box predictions via influence functions",
    "authors": ["P.W. Koh", "P. Liang"],
    "venue": "Proceedings of the 34th International Conference on Machine Learning (ICML), pages 1885–1894.",
    "year": 2017
  }, {
    "title": "Classification model selection via bilevel programming",
    "authors": ["G. Kunapuli", "K. Bennett", "J. Hu", "Pang", "J.-S."],
    "venue": "Optimization Methods and Software, 23(4):475–489.",
    "year": 2008
  }, {
    "title": "From n to n+ 1: Multiclass transfer incremental learning",
    "authors": ["I. Kuzborskij", "F. Orabona", "B. Caputo"],
    "venue": "Computer Vision and Pattern Recognition (CVPR), 2013 IEEE Conference on, pages 3358–3365.",
    "year": 2013
  }, {
    "title": "Human-level concept learning through probabilistic program induction",
    "authors": ["B.M. Lake", "R. Salakhutdinov", "J.B. Tenenbaum"],
    "venue": "Science, 350(6266):1332–1338.",
    "year": 2015
  }, {
    "title": "Building machines that learn and think like people",
    "authors": ["B.M. Lake", "T.D. Ullman", "J.B. Tenenbaum", "S.J. Gershman"],
    "venue": "Behavioral and Brain Sciences, 40. 00152.",
    "year": 2017
  }, {
    "title": "Gradient-based hyperparameter optimization through reversible learning",
    "authors": ["D. Maclaurin", "D.K. Duvenaud", "R.P. Adams"],
    "venue": "Proceedings of the 32nd International Conference on Machine Learning, (ICML, pages 2113–2122.",
    "year": 2015
  }, {
    "title": "The benefit of multitask representation learning",
    "authors": ["A. Maurer", "M. Pontil", "B. Romera-Paredes"],
    "venue": "The Journal of Machine Learning Research, 17(1):2853–2884.",
    "year": 2016
  }, {
    "title": "A simple neural attentive meta-learner",
    "authors": ["N. Mishra", "M. Rohaninejad", "X. Chen", "P. Abbeel"],
    "year": 2018
  }, {
    "title": "Meta networks",
    "authors": ["T. Munkhdalai", "H. Yu"],
    "venue": "Proceedings of the 34th International Conference on Machine Learning, (ICML), pages 2554–2563.",
    "year": 2017
  }, {
    "title": "Hyperparameter optimization with approximate gradient",
    "authors": ["F. Pedregosa"],
    "venue": "Proceedings of The 33rd International Conference on Machine Learning (ICML), pages 737–746.",
    "year": 2016
  }, {
    "title": "Optimization as a model for few-shot learning",
    "authors": ["S. Ravi", "H. Larochelle"],
    "venue": "In International Conference on Learning Representations (ICLR).",
    "year": 2017
  }, {
    "title": "Meta-learning with memoryaugmented neural networks",
    "authors": ["A. Santoro", "S. Bartunov", "M. Botvinick", "D. Wierstra", "T. Lillicrap"],
    "venue": "Proceedings ofthe 33rd International Conference on Machine Learning, pages 1842–1850.",
    "year": 2016
  }, {
    "title": "Learning to Control Fast-Weight Memories: An Alternative to Dynamic Recurrent Networks",
    "authors": ["J. Schmidhuber"],
    "venue": "Neural Computation, 4(1):131–139. 00082.",
    "year": 1992
  }, {
    "title": "Prototypical networks for few-shot learning",
    "authors": ["J. Snell", "K. Swersky", "R.S. Zemel"],
    "venue": "Advances in neural information processing systems, pages 4080–4090.",
    "year": 2017
  }, {
    "title": "Practical bayesian optimization of machine learning algorithms",
    "authors": ["J. Snoek", "H. Larochelle", "R.P. Adams"],
    "venue": "Advances in Neural Information Processing Systems (NIPS), pages 2951–2959.",
    "year": 2012
  }, {
    "title": "Learning to learn",
    "authors": ["S. Thrun", "L. Pratt"],
    "venue": "Springer.",
    "year": 1998
  }, {
    "title": "Attention is all you need",
    "authors": ["A. Vaswani", "N. Shazeer", "N. Parmar", "J. Uszkoreit", "L. Jones", "A.N. Gomez", "L. Kaiser", "I. Polosukhin"],
    "venue": "Advances in Neural Information Processing Systems (NIPS), pages 6000–6010.",
    "year": 2017
  }, {
    "title": "Matching networks for one shot learning",
    "authors": ["O. Vinyals", "C. Blundell", "T. Lillicrap", "K. Kavukcuoglu", "D. Wierstra"],
    "venue": "Advances in Neural Information Processing Systems (NIPS), pages 3630–3638.",
    "year": 2016
  }, {
    "title": "Learned optimizers that scale and generalize",
    "authors": ["O. Wichrowska", "N. Maheswaranathan", "M.W. Hoffman", "S.G. Colmenarejo", "M. Denil", "N. Freitas", "J. SohlDickstein"],
    "venue": "Proceedings of the 34th International Conference on Machine Learning (ICML), pages 3751–3760.",
    "year": 2017
  }],
  "id": "SP:15561ab20c298e113b0008b7a029486a422e7ca3",
  "authors": [{
    "name": "Luca Franceschi",
    "affiliations": []
  }, {
    "name": "Paolo Frasconi",
    "affiliations": []
  }, {
    "name": "Saverio Salzo",
    "affiliations": []
  }, {
    "name": "Riccardo Grazzi",
    "affiliations": []
  }, {
    "name": "Massimiliano Pontil",
    "affiliations": []
  }],
  "abstractText": "We introduce a framework based on bilevel programming that unifies gradient-based hyperparameter optimization and meta-learning. We show that an approximate version of the bilevel problem can be solved by taking into explicit account the optimization dynamics for the inner objective. Depending on the specific setting, the outer variables take either the meaning of hyperparameters in a supervised learning problem or parameters of a meta-learner. We provide sufficient conditions under which solutions of the approximate problem converge to those of the exact problem. We instantiate our approach for meta-learning in the case of deep learning where representation layers are treated as hyperparameters shared across a set of training episodes. In experiments, we confirm our theoretical findings, present encouraging results for few-shot learning and contrast the bilevel approach against classical approaches for learning-to-learn.",
  "title": "Bilevel Programming for Hyperparameter Optimization and Meta-Learning"
}