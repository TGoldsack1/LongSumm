{
  "sections": [{
    "text": "Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (Long Papers), pages 1948–1958 Melbourne, Australia, July 15 - 20, 2018. c©2018 Association for Computational Linguistics\n1948"
  }, {
    "heading": "1 Introduction",
    "text": "With the recent surge of interest in deep learning, one question that is being asked across a number of fronts is: can deep learning techniques be harnessed for creative purposes? Creative applications where such research exists include the composition of music (Humphrey et al., 2013; Sturm et al., 2016; Choi et al., 2016), the design of sculptures (Lehman et al., 2016), and automatic choreography (Crnkovic-Friis and Crnkovic-Friis, 2016). In this paper, we focus on a creative textual task: automatic poetry composition.\nA distinguishing feature of poetry is its aesthetic forms, e.g. rhyme and rhythm/meter.1 In this work, we treat the task of poem generation as a constrained language modelling task, such that lines of a given poem rhyme, and each line follows a canonical meter and has a fixed number\n1Noting that there are many notable divergences from this in the work of particular poets (e.g. Walt Whitman) and poetry types (such as free verse or haiku).\nShall I compare thee to a summer’s day? Thou art more lovely and more temperate: Rough winds do shake the darling buds of May, And summer’s lease hath all too short a date:\nFigure 1: 1st quatrain of Shakespeare’s Sonnet 18.\nof stresses. Specifically, we focus on sonnets and generate quatrains in iambic pentameter (e.g. see Figure 1), based on an unsupervised model of language, rhyme and meter trained on a novel corpus of sonnets.\nOur findings are as follows:\n• our proposed stress and rhyme models work very well, generating sonnet quatrains with stress and rhyme patterns that are indistinguishable from human-written poems and rated highly by an expert; • a vanilla language model trained over our son-\nnet corpus, surprisingly, captures meter implicitly at human-level performance; • while crowd workers rate the poems generated\nby our best model as nearly indistinguishable from published poems by humans, an expert annotator found the machine-generated poems to lack readability and emotion, and our best model to be only comparable to a vanilla language model on these dimensions; • most work on poetry generation focuses on me-\nter (Greene et al., 2010; Ghazvininejad et al., 2016; Hopkins and Kiela, 2017); our results suggest that future research should look beyond meter and focus on improving readability.\nIn this, we develop a new annotation framework for the evaluation of machine-generated poems, and release both a novel data of sonnets and the full source code associated with this research.2\n2https://github.com/jhlau/deepspeare"
  }, {
    "heading": "2 Related Work",
    "text": "Early poetry generation systems were generally rule-based, and based on rhyming/TTS dictionaries and syllable counting (Gervás, 2000; Wu et al., 2009; Netzer et al., 2009; Colton et al., 2012; Toivanen et al., 2013). The earliest attempt at using statistical modelling for poetry generation was Greene et al. (2010), based on a language model paired with a stress model.\nNeural networks have dominated recent research. Zhang and Lapata (2014) use a combination of convolutional and recurrent networks for modelling Chinese poetry, which Wang et al. (2016) later simplified by incorporating an attention mechanism and training at the character level. For English poetry, Ghazvininejad et al. (2016) introduced a finite-state acceptor to explicitly model rhythm in conjunction with a recurrent neural language model for generation. Hopkins and Kiela (2017) improve rhythm modelling with a cascade of weighted state transducers, and demonstrate the use of character-level language model for English poetry. A critical difference over our work is that we jointly model both poetry content and forms, and unlike previous work which use dictionaries (Ghazvininejad et al., 2016) or heuristics (Greene et al., 2010) for rhyme, we learn it automatically."
  }, {
    "heading": "3 Sonnet Structure and Dataset",
    "text": "The sonnet is a poem type popularised by Shakespeare, made up of 14 lines structured as 3 quatrains (4 lines) and a couplet (2 lines);3 an example quatrain is presented in Figure 1. It follows a number of aesthetic forms, of which two are particularly salient: stress and rhyme.\nA sonnet line obeys an alternating stress pattern, called the iambic pentameter, e.g.:\nS− S+ S− S+ S− S+ S− S+ S− S+\nShall I compare thee to a summer’s day? where S− and S+ denote unstressed and stressed syllables, respectively.\nA sonnet also rhymes, with a typical rhyming scheme being ABAB CDCD EFEF GG. There are a number of variants, however, mostly seen in the quatrains; e.g. AABB or ABBA are also common.\nWe build our sonnet dataset from the latest image of Project Gutenberg.4 We first create a\n3There are other forms of sonnets, but the Shakespearean sonnet is the dominant one. Hereinafter “sonnet” is used to specifically mean Shakespearean sonnets.\n4https://www.gutenberg.org/.\n(generic) poetry document collection using the GutenTag tool (Brooke et al., 2015), based on its inbuilt poetry classifier and rule-based structural tagging of individual poems.\nGiven the poems, we use word and character statistics derived from Shakespeare’s 154 sonnets to filter out all non-sonnet poems (to form the “BACKGROUND” dataset), leaving the sonnet corpus (“SONNET”).5 Based on a small-scale manual analysis of SONNET, we find that the approach is sufficient for extracting sonnets with high precision. BACKGROUND serves as a large corpus (34M words) for pre-training word embeddings, and SONNET is further partitioned into training, development and testing sets. Statistics of SONNET are given in Table 1.6"
  }, {
    "heading": "4 Architecture",
    "text": "We propose modelling both content and forms jointly with a neural architecture, composed of 3 components: (1) a language model; (2) a pentameter model for capturing iambic pentameter; and (3) a rhyme model for learning rhyming words.\nGiven a sonnet line, the language model uses standard categorical cross-entropy to predict the next word, and the pentameter model is similarly trained to learn the alternating iambic stress patterns.7 The rhyme model, on the other hand, uses a margin-based loss to separate rhyming word pairs from non-rhyming word pairs in a quatrain. For generation we use the language model to generate one word at a time, while applying the pentame-\n5The following constraints were used to select sonnets: 8.0 6 mean words per line 6 11.5; 40 6 mean characters per line 6 51.0; min/max number of words per line of 6/15; min/max number of characters per line of 32/60; and min letter ratio per line > 0.59.\n6The sonnets in our collection are largely in Modern English, with possibly a small number of poetry in Early Modern English. The potentially mixed-language dialect data might add noise to our system, and given more data it would be worthwhile to include time period as a factor in the model.\n7There are a number of variations in addition to the standard pattern (Greene et al., 2010), but our model uses only the standard pattern as it is the dominant one.\nter model to sample meter-conforming sentences and the rhyme model to enforce rhyme. The architecture of the joint model is illustrated in Figure 2. We train all the components together by treating each component as a sub-task in a multitask learning setting.8"
  }, {
    "heading": "4.1 Language Model",
    "text": "The language model is a variant of an LSTM encoder–decoder model with attention (Bahdanau et al., 2015), where the encoder encodes the preceding context (i.e. all sonnet lines before the current line) and the decoder decodes one word at a time for the current line, while attending to the preceding context.\nIn the encoder, we embed context words zi using embedding matrix Wwrd to yield wi, and feed them to a biLSTM9 to produce a sequence of encoder hidden states hi = [~hi; ~hi]. Next we apply\n8We stress that although the components appear to be disjointed, the shared parameters allow the components to mutually influence each other during joint training. To exemplify this, we found that the pentameter model performs very poorly when we train each component separately.\n9We use a single layer for all LSTMs.\na selective mechanism (Zhou et al., 2017) to each hi. By defining the representation of the whole context h = [~hC ; ~h1] (where C is the number of words in the context), the selective mechanism filters the hidden states hi using h as follows:\nh′i = hi σ(Wahi +Uah+ ba)\nwhere denotes element-wise product. Hereinafter W, U and b are used to refer to model parameters. The intuition behind this procedure is to selectively filter less useful elements from the context words.\nIn the decoder, we embed words xt in the current line using the encoder-shared embedding matrix (Wwrd) to produce wt. In addition to the word embeddings, we also embed the characters of a word using embedding matrix Wchr to produce ct,i, and feed them to a bidirectional (character-level) LSTM:\n~ut,i = LSTMf (ct,i, ~ut,i−1) ~ut,i = LSTMb(ct,i, ~ut,i+1)\n(1)\nWe represent the character encoding of a word by concatenating the last forward and first back-\nward hidden states ut = [~ut,L; ~ut,1], where L is the length of the word. We incorporate character encodings because they provide orthographic information, improve representations of unknown words, and are shared with the pentameter model (Section 4.2).10 The rationale for sharing the parameters is that we see word stress and language model information as complementary.\nGiven the word embedding wt and character encoding ut, we concatenate them together and feed them to a unidirectional (word-level) LSTM to produce the decoding states:\nst = LSTM([wt;ut], st−1) (2)\nWe attend st to encoder hidden states h′i and compute the weighted sum of h′i as follows:\neti = v ᵀ b tanh(Wbh ′ i +Ubst + bb) at = softmax(et)\nh∗t = ∑ i atih ′ i\nTo combine st and h∗t , we use a gating unit similar to a GRU (Cho et al., 2014; Chung et al., 2014): s′t = GRU(st,h ∗ t ). We then feed s ′ t to a linear layer with softmax activation to produce the vocabulary distribution (i.e. softmax(Wouts′t + bout), and optimise the model with standard categorical cross-entropy loss. We use dropout as regularisation (Srivastava et al., 2014), and apply it to the encoder/decoder LSTM outputs and word embedding lookup. The same regularisation method is used for the pentameter and rhyme models.\nAs our sonnet data is relatively small for training a neural language model (367K words; see Table 1), we pre-train word embeddings and reduce parameters further by introducing weight-sharing between output matrix Wout and embedding matrix Wwrd via a projection matrix Wprj (Inan et al., 2016; Paulus et al., 2017; Press and Wolf, 2017):\nWout = tanh(WwrdWprj)"
  }, {
    "heading": "4.2 Pentameter Model",
    "text": "This component is designed to capture the alternating iambic stress pattern. Given a sonnet line,\n10We initially shared the character encodings with the rhyme model as well, but found sub-par performance for the rhyme model. This is perhaps unsurprising, as rhyme and stress are qualitatively very different aspects of forms.\nthe pentameter model learns to attend to the appropriate characters to predict the 10 binary stress symbols sequentially.11 As punctuation is not pronounced, we preprocess each sonnet line to remove all punctuation, leaving only spaces and letters. Like the language model, the pentameter model is fashioned as an encoder–decoder network.\nIn the encoder, we embed the characters using the shared embedding matrix Wchr and feed them to the shared bidirectional character-level LSTM (Equation (1)) to produce the character encodings for the sentence: uj = [~uj ; ~uj ].\nIn the decoder, it attends to the characters to predict the stresses sequentially with an LSTM:\ngt = LSTM(u∗t−1,gt−1)\nwhere u∗t−1 is the weighted sum of character encodings from the previous time step, produced by an attention network which we describe next,12 and gt is fed to a linear layer with softmax activation to compute the stress distribution.\nThe attention network is designed to focus on stress-producing characters, whose positions are monotonically increasing (as stress is predicted sequentially). We first compute µt, the mean position of focus:\nµ′t = σ(v ᵀ c tanh(Wcgt +Ucµt−1 + bc)) µt =M ×min(µ′t + µt−1, 1.0)\nwhere M is the number of characters in the sonnet line. Given µt, we can compute the (unnormalised) probability for each character position:\nptj = exp ( −(j − µt)2\n2T 2 ) where standard deviation T is a hyper-parameter. We incorporate this position information when computing u∗t : 13\nu′j = p t juj dtj = v ᵀ d tanh(Wdu ′ j +Udgt + bd)\nf t = softmax(dt + logpt) u∗t = ∑ j btjuj\n11That is, given the input line Shall I compare thee to a summer’s day? the model is required to output S− S+ S− S+ S− S+ S− S+ S− S+, based on the syllable boundaries from Section 3.\n12Initial input (u∗0) and state (g0) is a trainable vector and zero vector respectively.\n13Spaces are masked out, so they always yield zero attention weights.\nIntuitively, the attention network incorporates the position information at two points, when computing: (1) dtj by weighting the character encodings; and (2) f t by adding the position log probabilities. This may appear excessive, but preliminary experiments found that this formulation produces the best performance.\nIn a typical encoder–decoder model, the attended encoder vector u∗t would be combined with the decoder state gt to compute the output probability distribution. Doing so, however, would result in a zero-loss model as it will quickly learn that it can simply ignore u∗t to predict the alternating stresses based on gt. For this reason we use only u∗t to compute the stress probability:\nP (S−) = σ(Weu ∗ t + be)\nwhich gives the loss Lent = ∑\nt− logP (S?t ) for the whole sequence, where S?t is the target stress at time step t.\nWe find the decoder still has the tendency to attend to the same characters, despite the incorporation of position information. To regularise the model further, we introduce two loss penalties: repeat and coverage loss.\nThe repeat loss penalises the model when it attends to previously attended characters (See et al., 2017), and is computed as follows:\nLrep = ∑ t ∑ j min(f tj , t−1∑ t=1 f tj )\nBy keeping a sum of attention weights over all previous time steps, we penalise the model when it focuses on characters that have non-zero history weights.\nThe repeat loss discourages the model from focussing on the same characters, but does not assure that the appropriate characters receive attention. Observing that stresses are aligned with the vowels of a syllable, we therefore penalise the model when vowels are ignored:\nLcov = ∑ j∈V ReLU(C − 10∑ t=1 f tj )\nwhere V is a set of positions containing vowel characters, and C is a hyper-parameter that defines the minimum attention threshold that avoids penalty.\nTo summarise, the pentameter model is optimised with the following loss:\nLpm = Lent + αLrep + βLcov (3)\nwhere α and β are hyper-parameters for weighting the additional loss terms."
  }, {
    "heading": "4.3 Rhyme Model",
    "text": "Two reasons motivate us to learn rhyme in an unsupervised manner: (1) we intend to extend the current model to poetry in other languages (which may not have pronunciation dictionaries); and (2) the language in our SONNET data is not Modern English, and so contemporary dictionaries may not accurately reflect the rhyme of the data.\nExploiting the fact that rhyme exists in a quatrain, we feed sentence-ending word pairs of a quatrain as input to the rhyme model and train it to learn how to separate rhyming word pairs from non-rhyming ones. Note that the model does not assume any particular rhyming scheme — it works as long as quatrains have rhyme.\nA training example consists of a number of word pairs, generated by pairing one target word with 3 other reference words in the quatrain, i.e. {(xt, xr), (xt, xr+1), (xt, xr+2)}, where xt is the target word and xr+i are the reference words.14 We assume that in these 3 pairs there should be one rhyming and 2 non-rhyming pairs. From preliminary experiments we found that we can improve the model by introducing additional non-rhyming or negative reference words. Negative reference words are sampled uniform randomly from the vocabulary, and the number of additional negative words is a hyper-parameter.\nFor each word x in the word pairs we embed the characters using the shared embedding matrix Wchr and feed them to an LSTM to produce the character states uj .15 Unlike the language and pentameter models, we use a unidirectional forward LSTM here (as rhyme is largely determined by the final characters), and the LSTM parameters are not shared. We represent the encoding of the whole word by taking the last state u = uL, where L is the character length of the word.\nGiven the character encodings, we use a\n14E.g. for the quatrain in Figure 1, a training example is {(day, temperate), (day, may), (day, date)}.\n15The character embeddings are the only shared parameters in this model.\nmargin-based loss to optimise the model:\nQ = {cos(ut,ur), cos(ut,ur+1), ...} Lrm = max(0, δ − top(Q, 1) + top(Q, 2))\nwhere top(Q, k) returns the k-th largest element in Q, and δ is a margin hyper-parameter.\nIntuitively, the model is trained to learn a sufficient margin (defined by δ) that separates the best pair with all others, with the second-best being used to quantify all others. This is the justification used in the multi-class SVM literature for a similar objective (Wang and Xue, 2014).\nWith this network we can estimate whether two words rhyme by computing the cosine similarity score during generation, and resample words as necessary to enforce rhyme."
  }, {
    "heading": "4.4 Generation Procedure",
    "text": "We focus on quatrain generation in this work, and so the aim is to generate 4 lines of poetry. During generation we feed the hidden state from the previous time step to the language model’s decoder to compute the vocabulary distribution for the current time step. Words are sampled using a temperature between 0.6 and 0.8, and they are resampled if the following set of words is generated: (1) UNK token; (2) non-stopwords that were generated before;16 (3) any generated words with a frequency > 2; (4) the preceding 3 words; and (5) a number of symbols including parentheses, single and double quotes.17 The first sonnet line is generated without using any preceding context.\nWe next describe how to incorporate the pentameter model for generation. Given a sonnet line, the pentameter model computes a loss Lpm (Equation (3)) that indicates how well the line conforms to the iambic pentameter. We first generate 10 candidate lines (all initialised with the same hidden state), and then sample one line from the candidate lines based on the pentameter loss values (Lpm). We convert the losses into probabilities by taking the softmax, and a sentence is sampled with temperature = 0.1.\nTo enforce rhyme, we randomly select one of the rhyming schemes (AABB, ABAB or ABBA) and resample sentence-ending words as necessary. Given a pair of words, the rhyme model produces a cosine similarity score that estimates how well the\n16We use the NLTK stopword list (Bird et al., 2009). 17We add these constraints to prevent the model from being\ntoo repetitive, in generating the same words.\ntwo words rhyme. We resample the second word of a rhyming pair (e.g. when generating the second A in AABB) until it produces a cosine similarity > 0.9. We also resample the second word of a nonrhyming pair (e.g. when generating the first B in AABB) by requiring a cosine similarity 6 0.7.18\nWhen generating in the forward direction we can never be sure that any particular word is the last word of a line, which creates a problem for resampling to produce good rhymes. This problem is resolved in our model by reversing the direction of the language model, i.e. generating the last word of each line first. We apply this inversion trick at the word level (character order of a word is not modified) and only to the language model; the pentameter model receives the original word order as input."
  }, {
    "heading": "5 Experiments",
    "text": "We assess our sonnet model in two ways: (1) component evaluation of the language, pentameter and rhyme models; and (2) poetry generation evaluation, by crowd workers and an English literature expert. A sample of machine-generated sonnets are included in the supplementary material.\nWe tune the hyper-parameters of the model over the development data (optimal configuration in the supplementary material). Word embeddings are initialised with pre-trained skip-gram embeddings (Mikolov et al., 2013a,b) on the BACKGROUND dataset, and are updated during training. For optimisers, we use Adagrad (Duchi et al., 2011) for the language model, and Adam (Kingma and Ba, 2014) for the pentameter and rhyme models. We truncate backpropagation through time after 2 sonnet lines, and train using 30 epochs, resetting the network weights to the weights from the previous epoch whenever development loss worsens."
  }, {
    "heading": "5.1 Component Evaluation",
    "text": ""
  }, {
    "heading": "5.1.1 Language Model",
    "text": "We use standard perplexity for evaluating the language model. In terms of model variants, we have:19 • LM: Vanilla LSTM language model; • LM∗: LSTM language model that incorporates\ncharacter encodings (Equation (2)); 18Maximum number of resampling steps is capped at 1000. If the threshold is exceeded the model is reset to generate from scratch again.\n19All models use the same (applicable) hyper-parameter configurations.\n• LM∗∗: LSTM language model that incorporates both character encodings and preceding context; • LM∗∗-C: Similar to LM∗∗, but preceding con-\ntext is encoded using convolutional networks, inspired by the poetry model of Zhang and Lapata (2014);20 • LM∗∗+PM+RM: the full model, with joint training of the language, pentameter and rhyme models. Perplexity on the test partition is detailed in Table 2. Encouragingly, we see that the incorporation of character encodings and preceding context improves performance substantially, reducing perplexity by almost 10 points from LM to LM∗∗. The inferior performance of LM∗∗-C compared to LM∗∗ demonstrates that our approach of processing context with recurrent networks with selective encoding is more effective than convolutional networks. The full model LM∗∗+PM+RM, which learns stress\n20In Zhang and Lapata (2014), the authors use a series of convolutional networks with a width of 2 words to convert 5/7 poetry lines into a fixed size vector; here we use a standard convolutional network with max-pooling operation (Kim, 2014) to process the context.\nand rhyme patterns simultaneously, also appears to improve the language model slightly."
  }, {
    "heading": "5.1.2 Pentameter Model",
    "text": "To assess the pentameter model, we use the attention weights to predict stress patterns for words in the test data, and compare them against stress patterns in the CMU pronunciation dictionary.21 Words that have no coverage or have nonalternating patterns given by the dictionary are discarded. We use accuracy as the metric, and a predicted stress pattern is judged to be correct if it matches any of the dictionary stress patterns.\nTo extract a stress pattern for a word from the model, we iterate through the pentameter (10 time steps), and append the appropriate stress (e.g. 1st time step = S−) to the word if any of its characters receives an attention > 0.20.\nFor the baseline (Stress-BL) we use the pretrained weighted finite state transducer (WFST) provided by Hopkins and Kiela (2017).22 The WFST maps a sequence word to a sequence of stresses by assuming each word has 1–5 stresses and the full word sequence produces iambic pentameter. It is trained using the EM algorithm on a sonnet corpus developed by the authors.\nWe present stress accuracy in Table 2. LM∗∗+PM+RM performs competitively, and informal inspection reveals that a number of mistakes are due to dictionary errors. To understand the predicted stresses qualitatively, we display attention heatmaps for the the first quatrain of Shakespeare’s Sonnet 18 in Figure 3. The y-axis represents the ten stresses of the iambic pentameter, and\n21http://www.speech.cs.cmu.edu/cgi-bin/ cmudict. Note that the dictionary provides 3 levels of stresses: 0, 1 and 2; we collapse 1 and 2 to S+.\n22https://github.com/JackHopkins/ ACLPoetry\nx-axis the characters of the sonnet line (punctuation removed). The attention network appears to perform very well, without any noticeable errors. The only minor exception is lovely in the second line, where it predicts 2 stresses but the second stress focuses incorrectly on the character e rather than y. Additional heatmaps for the full sonnet are provided in the supplementary material."
  }, {
    "heading": "5.1.3 Rhyme Model",
    "text": "We follow a similar approach to evaluate the rhyme model against the CMU dictionary, but score based on F1 score. Word pairs that are not included in the dictionary are discarded. Rhyme is determined by extracting the final stressed phoneme for the paired words, and testing if their phoneme patterns match.\nWe predict rhyme for a word pair by feeding them to the rhyme model and computing cosine similarity; if a word pair is assigned a score > 0.8,23 it is considered to rhyme. As a baseline (Rhyme-BL), we first extract for each word the last vowel and all following consonants, and predict a word pair as rhyming if their extracted sequences match. The extracted sequence can be interpreted as a proxy for the last syllable of a word.\nReddy and Knight (2011) propose an unsupervised model for learning rhyme schemes in poems via EM. There are two latent variables: φ specifies the distribution of rhyme schemes, and θ defines\n230.8 is empirically found to be the best threshold based on development data.\nthe pairwise rhyme strength between two words. The model’s objective is to maximise poem likelihood over all possible rhyme scheme assignments under the latent variables φ and θ. We train this model (Rhyme-EM) on our data24 and use the learnt θ to decide whether two words rhyme.25\nTable 2 details the rhyming results. The rhyme model performs very strongly at F1 > 0.90, well above both baselines. Rhyme-EM performs poorly because it operates at the word level (i.e. it ignores character/orthographic information) and hence does not generalise well to unseen words and word pairs.26\nTo better understand the errors qualitatively, we present a list of word pairs with their predicted cosine similarity in Table 3. Examples on the left side are rhyming word pairs as determined by the CMU dictionary; right are non-rhyming pairs. Looking at the rhyming word pairs (left), it appears that these words tend not to share any wordending characters. For the non-rhyming pairs, we spot several CMU errors: (sire, ire) and (queen, been) clearly rhyme."
  }, {
    "heading": "5.2 Generation Evaluation",
    "text": ""
  }, {
    "heading": "5.2.1 Crowdworker Evaluation",
    "text": "Following Hopkins and Kiela (2017), we present a pair of quatrains (one machine-generated and one human-written, in random order) to crowd workers on CrowdFlower, and ask them to guess which is the human-written poem. Generation quality is estimated by computing the accuracy of workers at correctly identifying the human-written poem (with lower values indicate better results for the model).\nWe generate 50 quatrains each for LM, LM∗∗ and LM∗∗+PM+RM (150 in total), and as a control, generate 30 quatrains with LM trained for one epoch. An equal number of human-written quatrains was sampled from the training partition. A HIT contained 5 pairs of poems (of which one is a control), and workers were paid $0.05 for each HIT. Workers who failed to identify the human-written poem in the control pair reliably (minimum accuracy = 70%) were removed by CrowdFlower automati-\n24We use the original authors’ implementation: https: //github.com/jvamvas/rhymediscovery.\n25A word pair is judged to rhyme if θw1,w2 > 0.02; the threshold (0.02) is selected based on development performance.\n26Word pairs that did not co-occur in a poem in the training data have rhyme strength of zero.\ncally, and they were restricted to do a maximum of 3 HITs. To dissuade workers from using search engines to identify real poems, we presented the quatrains as images.\nAccuracy is presented in Table 4. We see a steady decrease in accuracy (= improvement in model quality) from LM to LM∗∗ to LM∗∗+PM+RM, indicating that each model generates quatrains that are less distinguishable from human-written ones. Based on the suspicion that workers were using rhyme to judge the poems, we tested a second model, LM∗∗+RM, which is the full model without the pentameter component. We found identical accuracy (0.532), confirming our suspicion that crowd workers depend on only rhyme in their judgements. These observations demonstrate that meter is largely ignored by lay persons in poetry evaluation."
  }, {
    "heading": "5.2.2 Expert Judgement",
    "text": "To better understand the qualitative aspects of our generated quatrains, we asked an English literature expert (a Professor of English literature at a major English-speaking university; the last author of this paper) to directly rate 4 aspects: meter, rhyme, readability and emotion (i.e. amount of emotion the poem evokes). All are rated on an ordinal scale between 1 to 5 (1 = worst; 5 = best). In total, 120 quatrains were annotated, 30 each for LM, LM∗∗, LM∗∗+PM+RM, and human-written poems (Human). The expert was blind to the source of each poem. The mean and standard deviation of the ratings are presented in Table 5.\nWe found that our full model has the highest ratings for both rhyme and meter, even higher than\nhuman poets. This might seem surprising, but in fact it is well established that real poets regularly break rules of form to create other effects (Adams, 1997). Despite excellent form, the output of our model can easily be distinguished from humanwritten poetry due to its lower emotional impact and readability. In particular, there is evidence here that our focus on form actually hurts the readability of the resulting poems, relative even to the simpler language models. Another surprise is how well simple language models do in terms of their grasp of meter: in this expert evaluation, we see only marginal benefit as we increase the sophistication of the model. Taken as a whole, this evaluation suggests that future research should look beyond forms, towards the substance of good poetry."
  }, {
    "heading": "6 Conclusion",
    "text": "We propose a joint model of language, meter and rhyme that captures language and form for modelling sonnets. We provide quantitative analyses for each component, and assess the quality of generated poems using judgements from crowdworkers and a literature expert. Our research reveals that vanilla LSTM language model captures meter implicitly, and our proposed rhyme model performs exceptionally well. Machine-generated generated poems, however, still underperform in terms of readability and emotion."
  }],
  "year": 2018,
  "references": [{
    "title": "Poetic designs: An introduction to meters, verse forms, and figures of speech",
    "authors": ["Stephen Adams."],
    "venue": "Broadview Press.",
    "year": 1997
  }, {
    "title": "Neural machine translation by jointly learning to align and translate",
    "authors": ["Dzmitry Bahdanau", "Kyunghyun Cho", "Yoshua Bengio."],
    "venue": "International Conference on Learning Representations, San Diego, USA.",
    "year": 2015
  }, {
    "title": "Natural Language Processing with Python — Analyzing Text with the Natural Language Toolkit",
    "authors": ["Steven Bird", "Ewan Klein", "Edward Loper."],
    "venue": "O’Reilly Media, Sebastopol, USA.",
    "year": 2009
  }, {
    "title": "GutenTag: An NLP-driven tool for digital humanities research in the Project Gutenberg corpus",
    "authors": ["Julian Brooke", "Adam Hammond", "Graeme Hirst."],
    "venue": "Proceedings of the 4nd Workshop on Computational Literature for Literature (CLFL ’15).",
    "year": 2015
  }, {
    "title": "On the properties",
    "authors": ["Kyunghyun Cho", "Bart van Merrienboer", "Dzmitry Bahdanau", "Yoshua Bengio"],
    "year": 2014
  }, {
    "title": "Text-based LSTM networks for automatic music composition",
    "authors": ["Keunwoo Choi", "George Fazekas", "Mark Sandler."],
    "venue": "Proceedings of the 1st Conference on Computer Simulation of Musical Creativity, Huddersfield, UK.",
    "year": 2016
  }, {
    "title": "Empirical evaluation of gated recurrent neural networks on sequence modeling",
    "authors": ["Junyoung Chung", "Caglar Gulcehre", "KyungHyun Cho", "Yoshua Bengio."],
    "venue": "NIPS Deep Learning and Representation Learning Workshop, pages 103–111, Montreal,",
    "year": 2014
  }, {
    "title": "Full face poetry generation",
    "authors": ["Simon Colton", "Jacob Goodwin", "Tony Veale."],
    "venue": "Proceedings of the Third International Conference on Computational Creativity, pages 95–102.",
    "year": 2012
  }, {
    "title": "Generative choreography using deep learning",
    "authors": ["Luka Crnkovic-Friis", "Louise Crnkovic-Friis."],
    "venue": "Proceedings of the 7th International Conference on Computational Creativity, Paris, France.",
    "year": 2016
  }, {
    "title": "Adaptive subgradient methods for online learning and stochastic optimization",
    "authors": ["John Duchi", "Elad Hazan", "Yoram Singer."],
    "venue": "Journal of Machine Learning Research, 12:2121–2159.",
    "year": 2011
  }, {
    "title": "Wasp: Evaluation of different strategies for the automatic generation of spanish verse",
    "authors": ["Pablo Gervás."],
    "venue": "Proceedings of the AISB-00 Symposium on Creative & Cultural Aspects of AI, pages 93–100.",
    "year": 2000
  }, {
    "title": "Generating topical poetry",
    "authors": ["Marjan Ghazvininejad", "Xing Shi", "Yejin Choi", "Kevin Knight."],
    "venue": "pages 1183–1191, Austin, Texas.",
    "year": 2016
  }, {
    "title": "Automatic analysis of rhythmic poetry with applications to generation and translation",
    "authors": ["Erica Greene", "Tugba Bodrumlu", "Kevin Knight."],
    "venue": "Proceedings of the 2010 Conference on Empirical Methods in Natural Language Processing (EMNLP",
    "year": 2010
  }, {
    "title": "Automatically generating rhythmic verse with neural networks",
    "authors": ["Jack Hopkins", "Douwe Kiela."],
    "venue": "Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (ACL 2017), pages 168–178, Vancouver, Canada.",
    "year": 2017
  }, {
    "title": "Feature learning and deep architectures: new directions for music informatics",
    "authors": ["Eric J. Humphrey", "Juan P. Bello", "Yann LeCun."],
    "venue": "Journal of Intelligent Information Systems, 41(3):461–481.",
    "year": 2013
  }, {
    "title": "Tying word vectors and word classifiers: A loss framework for language modeling",
    "authors": ["Hakan Inan", "Khashayar Khosravi", "Richard Socher."],
    "venue": "CoRR, abs/1611.01462.",
    "year": 2016
  }, {
    "title": "Convolutional neural networks for sentence classification",
    "authors": ["Y. Kim."],
    "venue": "Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP 2014), pages 1746– 1751, Doha, Qatar.",
    "year": 2014
  }, {
    "title": "Adam: A method for stochastic optimization",
    "authors": ["Diederik P. Kingma", "Jimmy Ba."],
    "venue": "CoRR, abs/1412.6980.",
    "year": 2014
  }, {
    "title": "Creative generation of 3D objects with deep learning and innovation engines",
    "authors": ["Joel Lehman", "Sebastian Risi", "Jeff Clune."],
    "venue": "Proceedings of the 7th International Conference on Computational Creativity, Paris, France.",
    "year": 2016
  }, {
    "title": "Efficient estimation of word representations in vector space",
    "authors": ["Tomas Mikolov", "Kai Chen", "Greg Corrado", "Jeffrey Dean."],
    "venue": "Proceedings of Workshop at the International Conference on Learning Representations, 2013, Scottsdale, USA.",
    "year": 2013
  }, {
    "title": "Distributed representations of words and phrases and their compositionality",
    "authors": ["Tomas Mikolov", "Ilya Sutskever", "Kai Chen", "Greg S Corrado", "Jeff Dean."],
    "venue": "Advances in Neural Information Processing Systems, pages 3111–3119.",
    "year": 2013
  }, {
    "title": "Gaiku: Generating haiku with word associations norms",
    "authors": ["Yael Netzer", "David Gabay", "Yoav Goldberg", "Michael Elhadad."],
    "venue": "Proceedings of the Workshop on Computational Approaches to Linguistic Creativity, pages 32–39.",
    "year": 2009
  }, {
    "title": "A deep reinforced model for abstractive summarization",
    "authors": ["Romain Paulus", "Caiming Xiong", "Richard Socher."],
    "venue": "CoRR, abs/1705.04304.",
    "year": 2017
  }, {
    "title": "Using the output embedding to improve language models",
    "authors": ["Ofir Press", "Lior Wolf."],
    "venue": "Proceedings of the 15th Conference of the EACL (EACL 2017), pages 157–163, Valencia, Spain.",
    "year": 2017
  }, {
    "title": "Unsupervised discovery of rhyme schemes",
    "authors": ["Sravana Reddy", "Kevin Knight."],
    "venue": "Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies (ACL HLT 2011), pages 77–82, Portland, Ore-",
    "year": 2011
  }, {
    "title": "Get to the point: Summarization with pointergenerator networks",
    "authors": ["Abigail See", "Peter J. Liu", "Christopher D. Manning."],
    "venue": "Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (ACL 2017), pages 1073–1083, Vancou-",
    "year": 2017
  }, {
    "title": "Dropout: A simple way to prevent neural networks from overfitting",
    "authors": ["Nitish Srivastava", "Geoffrey Hinton", "Alex Krizhevsky", "Ilya Sutskever", "Ruslan Salakhutdinov."],
    "venue": "Journal of Machine Learning Research, 15:1929–1958.",
    "year": 2014
  }, {
    "title": "Music transcription modelling and composition using deep learning",
    "authors": ["Bob L. Sturm", "Jo ao Felipe Santos", "Oded Ben-Tal", "Iryna Korshunova."],
    "venue": "Proceedings of the 1st Conference on Computer Simulation of Musical Creativity, Huddersfield, UK.",
    "year": 2016
  }, {
    "title": "Harnessing constraint programming for poetry composition",
    "authors": ["Jukka M. Toivanen", "Matti Järvisalo", "Hannu Toivonen."],
    "venue": "Proceedings of the Fourth International Conference on Computational Creativity, pages 160–160.",
    "year": 2013
  }, {
    "title": "Chinese song iambics generation with neural attention-based model",
    "authors": ["Qixin Wang", "Tianyi Luo", "Dong Wang", "Chao Xing."],
    "venue": "Proceedings of the 25nd International Joint Conference on Artificial Intelligence (IJCAI-2016), pages 2943–2949, New York,",
    "year": 2016
  }, {
    "title": "In Support Vector Machines Applications, pages 23–48",
    "authors": ["Zhe Wang", "Xiangyang Xue."],
    "venue": "Springer.",
    "year": 2014
  }, {
    "title": "Newhitch haiku: An interactive renku poem composition supporting tool applied for sightseeing navigation system",
    "authors": ["Xiaofeng Wu", "Naoko Tosa", "Ryohei Nakatsu."],
    "venue": "Entertainment Computing-ICEC 2009, pages 191–196.",
    "year": 2009
  }, {
    "title": "Chinese poetry generation with recurrent neural networks",
    "authors": ["Xingxing Zhang", "Mirella Lapata."],
    "venue": "Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP 2014), pages 670–680, Doha, Qatar.",
    "year": 2014
  }, {
    "title": "Selective encoding for abstractive sentence summarization",
    "authors": ["Qingyu Zhou", "Nan Yang", "Furu Wei", "Ming Zhou."],
    "venue": "Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (ACL 2017), pages 1095–1104, Vancouver,",
    "year": 2017
  }],
  "id": "SP:7da13f0da475a785935b5e6c7486df5576bf6f6a",
  "authors": [{
    "name": "Jey Han Lau",
    "affiliations": []
  }, {
    "name": "Trevor Cohn",
    "affiliations": []
  }, {
    "name": "Timothy Baldwin",
    "affiliations": []
  }, {
    "name": "Julian Brooke",
    "affiliations": []
  }, {
    "name": "Adam Hammond",
    "affiliations": []
  }],
  "abstractText": "In this paper, we propose a joint architecture that captures language, rhyme and meter for sonnet modelling. We assess the quality of generated poems using crowd and expert judgements. The stress and rhyme models perform very well, as generated poems are largely indistinguishable from human-written poems. Expert evaluation, however, reveals that a vanilla language model captures meter implicitly, and that machine-generated poems still underperform in terms of readability and emotion. Our research shows the importance expert evaluation for poetry generation, and that future research should look beyond rhyme/meter and focus on poetic language.",
  "title": "Deep-speare: A joint neural model of poetic language, meter and rhyme"
}