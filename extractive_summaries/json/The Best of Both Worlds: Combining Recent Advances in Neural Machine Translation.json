{
  "sections": [{
    "text": "Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (Long Papers), pages 76–86 Melbourne, Australia, July 15 - 20, 2018. c©2018 Association for Computational Linguistics\n76"
  }, {
    "heading": "1 Introduction",
    "text": "In recent years, the emergence of seq2seq models (Kalchbrenner and Blunsom, 2013; Sutskever et al., 2014; Cho et al., 2014) has revolutionized the field of MT by replacing traditional phrasebased approaches with neural machine translation (NMT) systems based on the encoder-decoder paradigm. In the first architectures that surpassed\n∗ Equal contribution.\nthe quality of phrase-based MT, both the encoder and decoder were implemented as Recurrent Neural Networks (RNNs), interacting via a soft-attention mechanism (Bahdanau et al., 2015). The RNN-based NMT approach, or RNMT, was quickly established as the de-facto standard for NMT, and gained rapid adoption into large-scale systems in industry, e.g. Baidu (Zhou et al., 2016), Google (Wu et al., 2016), and Systran (Crego et al., 2016).\nFollowing RNMT, convolutional neural network based approaches (LeCun and Bengio, 1998) to NMT have recently drawn research attention due to their ability to fully parallelize training to take advantage of modern fast computing devices. such as GPUs and Tensor Processing Units (TPUs) (Jouppi et al., 2017). Well known examples are ByteNet (Kalchbrenner et al., 2016) and ConvS2S (Gehring et al., 2017). The ConvS2S model was shown to outperform the original RNMT architecture in terms of quality, while also providing greater training speed.\nMost recently, the Transformer model (Vaswani et al., 2017), which is based solely on a selfattention mechanism (Parikh et al., 2016) and feed-forward connections, has further advanced the field of NMT, both in terms of translation quality and speed of convergence.\nIn many instances, new architectures are accompanied by a novel set of techniques for performing training and inference that have been carefully optimized to work in concert. This ‘bag of tricks’ can be crucial to the performance of a proposed architecture, yet it is typically under-documented and left for the enterprising researcher to discover in publicly released code (if any) or through anecdotal evidence. This is not simply a problem for reproducibility; it obscures the central scientific question of how much of the observed gains come from the new architecture\nand how much can be attributed to the associated training and inference techniques. In some cases, these new techniques may be broadly applicable to other architectures and thus constitute a major, though implicit, contribution of an architecture paper. Clearly, they need to be considered in order to ensure a fair comparison across different model architectures.\nIn this paper, we therefore take a step back and look at which techniques and methods contribute significantly to the success of recent architectures, namely ConvS2S and Transformer, and explore applying these methods to other architectures, including RNMT models. In doing so, we come up with an enhanced version of RNMT, referred to as RNMT+, that significantly outperforms all individual architectures in our setup. We further introduce new architectures built with different components borrowed from RNMT+, ConvS2S and Transformer. In order to ensure a fair setting for comparison, all architectures were implemented in the same framework, use the same pre-processed data and apply no further post-processing as this may confound bare model performance.\nOur contributions are three-fold:\n1. In ablation studies, we quantify the effect of several modeling improvements (including multi-head attention and layer normalization) as well as optimization techniques (such as synchronous replica training and labelsmoothing), which are used in recent architectures. We demonstrate that these techniques are applicable across different model architectures.\n2. Combining these improvements with the RNMT model, we propose the new RNMT+ model, which significantly outperforms all fundamental architectures on the widely-used WMT’14 En→Fr and En→De benchmark datasets. We provide a detailed model analysis and comparison of RNMT+, ConvS2S and Transformer in terms of model quality, model size, and training and inference speed.\n3. Inspired by our understanding of the relative strengths and weaknesses of individual model architectures, we propose new model architectures that combine components from the RNMT+ and the Transformer model, and achieve better results than both individual architectures.\nWe quickly note two prior works that provided empirical solutions to the difficulty of training NMT architectures (specifically RNMT). In (Britz et al., 2017) the authors systematically explore which elements of NMT architectures have a significant impact on translation quality. In (Denkowski and Neubig, 2017) the authors recommend three specific techniques for strengthening NMT systems and empirically demonstrated how incorporating those techniques improves the reliability of the experimental results."
  }, {
    "heading": "2 Background",
    "text": "In this section, we briefly discuss the commmonly used NMT architectures."
  }, {
    "heading": "2.1 RNN-based NMT Models - RNMT",
    "text": "RNMT models are composed of an encoder RNN and a decoder RNN, coupled with an attention network. The encoder summarizes the input sequence into a set of vectors while the decoder conditions on the encoded input sequence through an attention mechanism, and generates the output sequence one token at a time.\nThe most successful RNMT models consist of stacked RNN encoders with one or more bidirectional RNNs (Schuster and Paliwal, 1997; Graves and Schmidhuber, 2005), and stacked decoders with unidirectional RNNs. Both encoder and decoder RNNs consist of either LSTM (Hochreiter and Schmidhuber, 1997; Gers et al., 2000) or GRU units (Cho et al., 2014), and make extensive use of residual (He et al., 2015) or highway (Srivastava et al., 2015) connections.\nIn Google-NMT (GNMT) (Wu et al., 2016), the best performing RNMT model on the datasets we consider, the encoder network consists of one bi-directional LSTM layer, followed by 7 uni-directional LSTM layers. The decoder is equipped with a single attention network and 8 uni-directional LSTM layers. Both the encoder and the decoder use residual skip connections between consecutive layers.\nIn this paper, we adopt GNMT as the starting point for our proposed RNMT+ architecture."
  }, {
    "heading": "2.2 Convolutional NMT Models - ConvS2S",
    "text": "In the most successful convolutional sequence-tosequence model (Gehring et al., 2017), both the encoder and decoder are constructed by stacking multiple convolutional layers, where each layer\ncontains 1-dimensional convolutions followed by a gated linear units (GLU) (Dauphin et al., 2016). Each decoder layer computes a separate dotproduct attention by using the current decoder layer output and the final encoder layer outputs. Positional embeddings are used to provide explicit positional information to the model. Following the practice in (Gehring et al., 2017), we scale the gradients of the encoder layers to stabilize training. We also use residual connections across each convolutional layer and apply weight normalization (Salimans and Kingma, 2016) to speed up convergence. We follow the public ConvS2S codebase1 in our experiments."
  }, {
    "heading": "2.3 Conditional Transformation-based NMT Models - Transformer",
    "text": "The Transformer model (Vaswani et al., 2017) is motivated by two major design choices that aim to address deficiencies in the former two model families: (1) Unlike RNMT, but similar to the ConvS2S, the Transformer model avoids any sequential dependencies in both the encoder and decoder networks to maximally parallelize training. (2) To address the limited context problem (limited receptive field) present in ConvS2S, the Transformer model makes pervasive use of selfattention networks (Parikh et al., 2016) so that each position in the current layer has access to information from all other positions in the previous layer.\nThe Transformer model still follows the encoder-decoder paradigm. Encoder transformer layers are built with two sub-modules: (1) a selfattention network and (2) a feed-forward network. Decoder transformer layers have an additional cross-attention layer sandwiched between the selfattention and feed-forward layers to attend to the encoder outputs.\nThere are two details which we found very important to the model’s performance: (1) Each sublayer in the transformer (i.e. self-attention, crossattention, and the feed-forward sub-layer) follows a strict computation sequence: normalize→ transform→ dropout→ residual-add. (2) In addition to per-layer normalization, the final encoder output is again normalized to prevent a blow up after consecutive residual additions.\nIn this paper, we follow the latest version of the\n1https://github.com/facebookresearch/fairseq-py\nTransformer model in the Tensor2Tensor2 codebase."
  }, {
    "heading": "2.4 A Theory-Based Characterization of NMT Architectures",
    "text": "From a theoretical point of view, RNNs belong to the most expressive members of the neural network family (Siegelmann and Sontag, 1995)3. Possessing an infinite Markovian structure (and thus an infinite receptive fields) equips them to model sequential data (Elman, 1990), especially natural language (Grefenstette et al., 2015) effectively. In practice, RNNs are notoriously hard to train (Hochreiter, 1991; Bengio et al., 1994; Hochreiter et al., 2001), confirming the well known dilemma of trainability versus expressivity.\nConvolutional layers are adept at capturing local context and local correlations by design. A fixed and narrow receptive field for each convolutional layer limits their capacity when the architecture is shallow. In practice, this weakness is mitigated by stacking more convolutional layers (e.g. 15 layers as in the ConvS2S model), which makes the model harder to train and demands meticulous initialization schemes and carefully designed regularization techniques.\nThe transformer network is capable of approximating arbitrary squashing functions (Hornik et al., 1989), and can be considered a strong feature extractor with extended receptive fields capable of linking salient features from the entire sequence. On the other hand, lacking a memory component (as present in the RNN models) prevents the network from modeling a state space, reducing its theoretical strength as a sequence model, thus it requires additional positional information (e.g. sinusoidal positional encodings).\nAbove theoretical characterizations will drive our explorations in the following sections."
  }, {
    "heading": "3 Experiment Setup",
    "text": "We train our models on the standard WMT’14 En→Fr and En→De datasets that comprise 36.3M and 4.5M sentence pairs, respectively. Each sentence was encoded into a sequence of sub-word units obtained by first tokenizing the sentence with the Moses tokenizer, then splitting tokens into subword units (also known as “wordpieces”) using the approach described in (Schuster and Nakajima, 2012).\n2https://github.com/tensorflow/tensor2tensor 3Assuming that data complexity is satisfied.\nWe use a shared vocabulary of 32K sub-word units for each source-target language pair. No further manual or rule-based post processing of the output was performed beyond combining the subword units to generate the targets. We report all our results on newstest 2014, which serves as the test set. A combination of newstest 2012 and newstest 2013 is used for validation.\nTo evaluate the models, we compute the BLEU metric on tokenized, true-case output.4 For each training run, we evaluate the model every 30 minutes on the dev set. Once the model converges, we determine the best window based on the average dev-set BLEU score over 21 consecutive evaluations. We report the mean test score and standard deviation over the selected window. This allows us to compare model architectures based on their mean performance after convergence rather than individual checkpoint evaluations, as the latter can be quite noisy for some models.\nTo enable a fair comparison of architectures, we use the same pre-processing and evaluation methodology for all our experiments. We refrain from using checkpoint averaging (exponential moving averages of parameters) (JunczysDowmunt et al., 2016) or checkpoint ensembles (Jean et al., 2015; Chen et al., 2017) to focus on\n4This procedure is used in the literature to which we compare (Gehring et al., 2017; Wu et al., 2016).\nevaluating the performance of individual models."
  }, {
    "heading": "4 RNMT+",
    "text": ""
  }, {
    "heading": "4.1 Model Architecture of RNMT+",
    "text": "The newly proposed RNMT+ model architecture is shown in Figure 1. Here we highlight the key architectural choices that are different between the RNMT+ model and the GNMT model. There are 6 bidirectional LSTM layers in the encoder instead of 1 bidirectional LSTM layer followed by 7 unidirectional layers as in GNMT. For each bidirectional layer, the outputs of the forward layer and the backward layer are concatenated before being fed into the next layer. The decoder network consists of 8 unidirectional LSTM layers similar to the GNMT model. Residual connections are added to the third layer and above for both the encoder and decoder. Inspired by the Transformer model, pergate layer normalization (Ba et al., 2016) is applied within each LSTM cell. Our empirical results show that layer normalization greatly stabilizes training. No non-linearity is applied to the LSTM output. A projection layer is added to the encoder final output.5 Multi-head additive attention is used instead of the single-head attention in the GNMT model. Similar to GNMT, we use the\n5Additional projection aims to reduce the dimensionality of the encoder output representations to match the decoder stack dimension.\nbottom decoder layer and the final encoder layer output after projection for obtaining the recurrent attention context. In addition to feeding the attention context to all decoder LSTM layers, we also feed it to the softmax by concatenating it with the layer input. This is important for both the quality of the models with multi-head attention and the stability of the training process.\nSince the encoder network in RNMT+ consists solely of bi-directional LSTM layers, model parallelism is not used during training. We compensate for the resulting longer per-step time with increased data parallelism (more model replicas), so that the overall time to reach convergence of the RNMT+ model is still comparable to that of GNMT.\nWe apply the following regularization techniques during training.\n• Dropout: We apply dropout to both embedding layers and each LSTM layer output before it is added to the next layer’s input. Attention dropout is also applied.\n• Label Smoothing: We use uniform label smoothing with an uncertainty=0.1 (Szegedy et al., 2015). Label smoothing was shown to have a positive impact on both Transformer and RNMT+ models, especially in the case of RNMT+ with multi-head attention. Similar to the observations in (Chorowski and Jaitly, 2016), we found it beneficial to use a larger beam size (e.g. 16, 20, etc.) during decoding when models are trained with label smoothing.\n• Weight Decay: For the WMT’14 En→De task, we apply L2 regularization to the weights with λ = 10−5. Weight decay is only applied to the En→De task as the corpus is smaller and thus more regularization is required.\nWe use the Adam optimizer (Kingma and Ba, 2014) with β1 = 0.9, β2 = 0.999, = 10−6 and vary the learning rate according to this schedule: lr = 10−4 ·min ( 1+\nt · (n− 1) np , n, n · (2n) s−nt e−s ) (1)\nHere, t is the current step, n is the number of concurrent model replicas used in training, p is the number of warmup steps, s is the start step of the exponential decay, and e is the end step of the decay. Specifically, we first increase the learning rate linearly during the number of warmup steps, keep\nit a constant until the decay start step s, then exponentially decay until the decay end step e, and keep it at 5 · 10−5 after the decay ends. This learning rate schedule is motivated by a similar schedule that was successfully applied in training the Resnet-50 model with a very large batch size (Goyal et al., 2017).\nIn contrast to the asynchronous training used for GNMT (Dean et al., 2012), we train RNMT+ models with synchronous training (Chen et al., 2016). Our empirical results suggest that when hyper-parameters are tuned properly, synchronous training often leads to improved convergence speed and superior model quality.\nTo further stabilize training, we also use adaptive gradient clipping. We discard a training step completely if an anomaly in the gradient norm value is detected, which is usually an indication of an imminent gradient explosion. More specifically, we keep track of a moving average and a moving standard deviation of the log of the gradient norm values, and we abort a step if the norm of the gradient exceeds four standard deviations of the moving average."
  }, {
    "heading": "4.2 Model Analysis and Comparison",
    "text": "In this section, we compare the results of RNMT+ with ConvS2S and Transformer.\nAll models were trained with synchronous training. RNMT+ and ConvS2S were trained with 32 NVIDIA P100 GPUs while the Transformer Base and Big models were trained using 16 GPUs.\nFor RNMT+, we use sentence-level crossentropy loss. Each training batch contained 4096 sentence pairs (4096 source sequences and 4096 target sequences). For ConvS2S and Transformer models, we use token-level cross-entropy loss. Each training batch contained 65536 source tokens and 65536 target tokens. For the GNMT baselines on both tasks, we cite the largest BLEU score reported in (Wu et al., 2016) without reinforcement learning.\nTable 1 shows our results on the WMT’14 En→Fr task. Both the Transformer Big model and RNMT+ outperform GNMT and ConvS2S by about 2 BLEU points. RNMT+ is slightly better than the Transformer Big model in terms of its mean BLEU score. RNMT+ also yields a much lower standard deviation, and hence we observed much less fluctuation in the training curve. It takes approximately 3 days for the Transformer\nBase model to converge, while both RNMT+ and the Transformer Big model require about 5 days to converge. Although the batching schemes are quite different between the Transformer Big and the RNMT+ model, they have processed about the same amount of training samples upon convergence.\nTable 2 shows our results on the WMT’14 En→De task. The Transformer Base model improves over GNMT and ConvS2S by more than 2 BLEU points while the Big model improves by over 3 BLEU points. RNMT+ further outperforms the Transformer Big model and establishes a new state of the art with an averaged value of 28.49. In this case, RNMT+ converged slightly faster than the Transformer Big model and maintained much more stable performance after convergence with a very small standard deviation, which is similar to what we observed on the En-Fr task.\nTable 3 summarizes training performance and model statistics. The Transformer Base model\n6Since the ConvS2S model convergence is very slow we did not explore further tuning on En→Fr, and validated our implementation on En→De.\n7The BLEU scores for Transformer model are slightly lower than those reported in (Vaswani et al., 2017) due to four differences:\n1) We report the mean test BLEU score using the strategy described in section 3.\n2) We did not perform checkpoint averaging since it would be inconsistent with our evaluation for other models.\n3) We avoided any manual post-processing, like unicode normalization using Moses replace-unicode-punctuation.perl or output tokenization using Moses tokenizer.perl, to rule out its effect on the evaluation. We observed a significant BLEU increase (about 0.6) on applying these post processing techniques.\n4) In (Vaswani et al., 2017), reported BLEU scores are calculated using mteval-v13a.pl from Moses, which re-tokenizes its input.\nis the fastest model in terms of training speed. RNMT+ is slower to train than the Transformer Big model on a per-GPU basis. However, since the RNMT+ model is quite stable, we were able to offset the lower per-GPU throughput with higher concurrency by increasing the number of model replicas, and hence the overall time to convergence was not slowed down much. We also computed the number of floating point operations (FLOPs) in the model’s forward path as well as the number of total parameters for all architectures (cf. Table 3). RNMT+ requires fewer FLOPs than the Transformer Big model, even though both models have a comparable number of parameters."
  }, {
    "heading": "5 Ablation Experiments",
    "text": "In this section, we evaluate the importance of four main techniques for both the RNMT+ and the Transformer Big models. We believe that these techniques are universally applicable across different model architectures, and should always be employed by NMT practitioners for best performance.\nWe take our best RNMT+ and Transformer Big models and remove each one of these techniques independently. By doing this we hope to learn two things about each technique: (1) How much does\nit affect the model performance? (2) How useful is it for stable training of other techniques and hence the final model?\nFrom Table 4 we draw the following conclusions about the four techniques:\n• Label Smoothing We observed that label smoothing improves both models, leading to an average increase of 0.7 BLEU for RNMT+ and 0.2 BLEU for Transformer Big models.\n• Multi-head Attention Multi-head attention contributes significantly to the quality of both models, resulting in an average increase of 0.6 BLEU for RNMT+ and 0.9 BLEU for Transformer Big models.\n• Layer Normalization Layer normalization is most critical to stabilize the training process of either model, especially when multi-head attention is used. Removing layer normalization results in unstable training runs for both models. Since by design, we remove one technique at a time in our ablation experiments, we were unable to quantify how much layer normalization helped in either case. To be able to successfully train a model without layer normalization, we would have to adjust other parts of the model and retune its hyper-parameters.\n• Synchronous training Removing synchronous training has different effects on RNMT+ and Transformer. For RNMT+, it results in a significant quality drop, while for the Transformer Big model, it causes the model to become unstable. We also notice that synchronous training is only successful when coupled with a tailored learning rate schedule that has a warmup stage at the beginning (cf. Eq. 1 for RNMT+ and\nEq. 2 for Transformer). For RNMT+, removing this warmup stage during synchronous training causes the model to become unstable."
  }, {
    "heading": "6 Hybrid NMT Models",
    "text": "In this section, we explore hybrid architectures that shed some light on the salient behavior of each model family. These hybrid models outperform the individual architectures on both benchmark datasets and provide a better understanding of the capabilities and limitations of each model family."
  }, {
    "heading": "6.1 Assessing Individual Encoders and Decoders",
    "text": "In an encoder-decoder architecture, a natural assumption is that the role of an encoder is to build feature representations that can best encode the meaning of the source sequence, while a decoder should be able to process and interpret the representations from the encoder and, at the same time, track the current target history. Decoding is inherently auto-regressive, and keeping track of the state information should therefore be intuitively beneficial for conditional generation.\nWe set out to study which family of encoders is more suitable to extract rich representations from a given input sequence, and which family of decoders can make the best of such rich representations. We start by combining the encoder and decoder from different model families. Since it takes a significant amount of time for a ConvS2S model to converge, and because the final translation quality was not on par with the other models, we focus on two types of hybrids only: Transformer encoder with RNMT+ decoder and RNMT+ encoder with Transformer decoder.\nFrom Table 5, it is clear that the Transformer encoder is better at encoding or feature extraction than the RNMT+ encoder, whereas RNMT+ is better at decoding or conditional language modeling, confirming our intuition that a stateful de-\ncoder is beneficial for conditional language generation."
  }, {
    "heading": "6.2 Assessing Encoder Combinations",
    "text": "Next, we explore how the features extracted by an encoder can be further enhanced by incorporating additional information. Specifically, we investigate the combination of transformer layers with RNMT+ layers in the same encoder block to build even richer feature representations. We exclusively use RNMT+ decoders in the following architectures since stateful decoders show better performance according to Table 5.\nWe study two mixing schemes in the encoder (see Fig. 2):\n(1) Cascaded Encoder: The cascaded encoder aims at combining the representational power of RNNs and self-attention. The idea is to enrich a set of stateful representations by cascading a feature extractor with a focus on vertical mapping, similar to (Pascanu et al., 2013; Devlin, 2017). Our best performing cascaded encoder involves fine tuning transformer layers stacked on top of a pre-trained frozen RNMT+ encoder. Using a pre-trained encoder avoids optimization difficulties while significantly enhancing encoder capacity. As shown in Table 6, the cascaded encoder improves over the Transformer encoder by more than 0.5 BLEU points on the WMT’14 En→Fr task. This suggests that the Transformer encoder is able to extract richer representations if the input is augmented with sequential context.\n(2) Multi-Column Encoder: As illustrated in Fig. 2b, a multi-column encoder merges the outputs of several independent encoders into a single combined representation. Unlike a cascaded encoder, the multi-column encoder enables us to investigate whether an RNMT+ decoder can distinguish information received from two different channels and benefit from its combination. A crucial operation in a multi-column encoder is therefore how different sources of information are merged into a unified representation. Our best multi-column encoder performs a simple concatenation of individual column outputs.\nThe model details and hyperparameters of the above two encoders are described in Appendix A.5 and A.6. As shown in Table 6, the multi-column encoder followed by an RNMT+ decoder achieves better results than the Transformer and the RNMT model on both WMT’14 benchmark tasks."
  }, {
    "heading": "7 Conclusion",
    "text": "In this work we explored the efficacy of several architectural and training techniques proposed in recent studies on seq2seq models for NMT. We demonstrated that many of these techniques are broadly applicable to multiple model architectures. Applying these new techniques to RNMT models yields RNMT+, an enhanced RNMT model that significantly outperforms the three fundamental architectures on WMT’14 En→Fr and En→De tasks. We further presented several hybrid models developed by combining encoders and decoders from the Transformer and RNMT+ models, and empirically demonstrated the superiority of the Transformer encoder and the RNMT+ decoder in comparison with their counterparts. We then enhanced the encoder architecture by horizontally and vertically mixing components borrowed from these architectures, leading to hybrid architectures that obtain further improvements over RNMT+.\nWe hope that our work will motivate NMT researchers to further investigate generally applicable training and optimization techniques, and that our exploration of hybrid architectures will open paths for new architecture search efforts for NMT.\nOur focus on a standard single-language-pair translation task leaves important open questions to be answered: How do our new architectures compare in multilingual settings, i.e., modeling an interlingua? Which architecture is more efficient and powerful in processing finer grained inputs and outputs, e.g., characters or bytes? How transferable are the representations learned by the different architectures to other tasks? And what are the characteristic errors that each architecture makes, e.g., linguistic plausibility?"
  }, {
    "heading": "Acknowledgments",
    "text": "We would like to thank the entire Google Brain Team and Google Translate Team for their foundational contributions to this project. We would also like to thank the entire Tensor2Tensor development team for their useful inputs and discussions."
  }],
  "year": 2018,
  "references": [{
    "title": "Layer normalization",
    "authors": ["Lei Jimmy Ba", "Ryan Kiros", "Geoffrey E. Hinton."],
    "venue": "CoRR abs/1607.06450. http://arxiv.org/abs/1607.06450.",
    "year": 2016
  }, {
    "title": "Neural machine translation by jointly learning to align and translate",
    "authors": ["Dzmitry Bahdanau", "Kyunghyun Cho", "Yoshua Bengio."],
    "venue": "International Conference on Learning Representations. http://arxiv.org/abs/1409.0473.",
    "year": 2015
  }, {
    "title": "Learning long-term dependencies with gradient descent is difficult",
    "authors": ["Y. Bengio", "P. Simard", "P. Frasconi."],
    "venue": "Trans. Neur. Netw. 5(2):157–166.",
    "year": 1994
  }, {
    "title": "Massive exploration of neural machine translation architectures",
    "authors": ["Denny Britz", "Anna Goldie", "Minh-Thang Luong", "Quoc Le."],
    "venue": "Proceedings of the 2017 Conference on Empirical Methods in Natural Language Process-",
    "year": 2017
  }, {
    "title": "Checkpoint ensembles: Ensemble methods from a single training process",
    "authors": ["Hugh Chen", "Scott Lundberg", "Su-In Lee."],
    "venue": "CoRR abs/1710.03282. http://arxiv.org/abs/1710.03282.",
    "year": 2017
  }, {
    "title": "Revisiting distributed synchronous SGD",
    "authors": ["Jianmin Chen", "Rajat Monga", "Samy Bengio", "Rafal Józefowicz."],
    "venue": "CoRR abs/1604.00981. http://arxiv.org/abs/1604.00981.",
    "year": 2016
  }, {
    "title": "Learning phrase representations using RNN encoder-decoder for statistical machine translation",
    "authors": ["Yoshua Bengio."],
    "venue": "Conference on Empirical Methods in Natural Language Processing. http://arxiv.org/abs/1406.1078.",
    "year": 2014
  }, {
    "title": "Towards better decoding and language model integration in sequence to sequence models",
    "authors": ["Jan Chorowski", "Navdeep Jaitly."],
    "venue": "CoRR abs/1612.02695. http://arxiv.org/abs/1612.02695.",
    "year": 2016
  }, {
    "title": "Language modeling with gated convolutional networks",
    "authors": ["Yann N. Dauphin", "Angela Fan", "Michael Auli", "David Grangier."],
    "venue": "CoRR abs/1612.08083. http://arxiv.org/abs/1612.08083.",
    "year": 2016
  }, {
    "title": "Large scale distributed deep networks",
    "authors": ["Jeffrey Dean", "Greg S. Corrado", "Rajat Monga", "Kai Chen", "Matthieu Devin", "Quoc V. Le", "Mark Z. Mao", "MarcAurelio Ranzato", "Andrew Senior", "Paul Tucker", "Ke Yang", "Andrew Y. Ng."],
    "venue": "NIPS.",
    "year": 2012
  }, {
    "title": "Stronger baselines for trustable results in neural machine translation",
    "authors": ["Michael Denkowski", "Graham Neubig."],
    "venue": "Proceedings of the First Workshop on Neural Machine Translation. Association for Computational Linguistics, Vancouver, pages",
    "year": 2017
  }, {
    "title": "Sharp models on dull hardware: Fast and accurate neural machine translation decoding on the cpu",
    "authors": ["Jacob Devlin."],
    "venue": "Proceedings of the 2017 Conference on Empirical Methods in Natural Language Processing. Association",
    "year": 2017
  }, {
    "title": "Finding structure in time",
    "authors": ["Jeffrey L. Elman."],
    "venue": "Cognitive Science 14(2):179 – 211.",
    "year": 1990
  }, {
    "title": "Convolutional sequence to sequence learning",
    "authors": ["Jonas Gehring", "Michael Auli", "David Grangier", "Denis Yarats", "Yann N. Dauphin."],
    "venue": "CoRR abs/1705.03122. http://arxiv.org/abs/1705.03122.",
    "year": 2017
  }, {
    "title": "Learning to forget: Continual prediction with LSTM",
    "authors": ["Felix A Gers", "Jürgen Schmidhuber", "Fred Cummins."],
    "venue": "Neural computation 12(10):2451–2471.",
    "year": 2000
  }, {
    "title": "Framewise phoneme classification with bidirectional lstm and other neural network architectures",
    "authors": ["Alex Graves", "Jürgen Schmidhuber."],
    "venue": "Neural Networks 18(5):602 – 610. IJCNN 2005.",
    "year": 2005
  }, {
    "title": "Learning to transduce with unbounded memory",
    "authors": ["Edward Grefenstette", "Karl Moritz Hermann", "Mustafa Suleyman", "Phil Blunsom."],
    "venue": "Proceedings of the 28th International Conference on Neural Information Process-",
    "year": 2015
  }, {
    "title": "Deep residual learning for image recognition",
    "authors": ["Kaiming He", "Xiangyu Zhang", "Shaoqing Ren", "Jian Sun."],
    "venue": "CoRR abs/1512.03385. http://arxiv.org/abs/1512.03385.",
    "year": 2015
  }, {
    "title": "Untersuchungen zu dynamischen neuronalen netzen",
    "authors": ["Sepp Hochreiter."],
    "venue": "Diploma, Technische Universität München 91:1.",
    "year": 1991
  }, {
    "title": "Gradient flow in recurrent nets: the difficulty of learning long-term dependencies",
    "authors": ["Sepp Hochreiter", "Yoshua Bengio", "Paolo Frasconi", "Jrgen Schmidhuber"],
    "year": 2001
  }, {
    "title": "Long short-term memory",
    "authors": ["Sepp Hochreiter", "Jürgen Schmidhuber."],
    "venue": "Neural computation 9(8):1735–1780.",
    "year": 1997
  }, {
    "title": "Multilayer feedforward networks are universal approximators",
    "authors": ["Kurt Hornik", "Maxwell Stinchcombe", "Halbert White."],
    "venue": "Neural Networks 2(5):359 – 366.",
    "year": 1989
  }, {
    "title": "On using very large target vocabulary for neural machine translation",
    "authors": ["Sébastien Jean", "Kyunghyun Cho", "Roland Memisevic", "Yoshua Bengio."],
    "venue": "Proceedings of the 53rd Annual Meeting of the Association for Computational Linguistics and the",
    "year": 2015
  }, {
    "title": "In-datacenter performance analysis of a tensor processing unit",
    "authors": ["Norman P. Jouppi", "Cliff Young", "Nishant Patil", "David Patterson", "Gaurav Agrawal"],
    "venue": "CoRR abs/1704.04760",
    "year": 2017
  }, {
    "title": "The amu-uedin submission to the wmt16 news translation task: Attention-based nmt models as feature functions in phrase-based smt",
    "authors": ["Marcin Junczys-Dowmunt", "Tomasz Dwojak", "Rico Sennrich."],
    "venue": "arXiv preprint arXiv:1605.04809 .",
    "year": 2016
  }, {
    "title": "Recurrent continuous translation models",
    "authors": ["Nal Kalchbrenner", "Phil Blunsom."],
    "venue": "Conference on Empirical Methods in Natural Language Processing.",
    "year": 2013
  }, {
    "title": "Neural machine translation in linear time",
    "authors": ["Nal Kalchbrenner", "Lasse Espeholt", "Karen Simonyan", "Aäron van den Oord", "Alex Graves", "Koray Kavukcuoglu."],
    "venue": "CoRR abs/1610.10099. http://arxiv.org/abs/1610.10099.",
    "year": 2016
  }, {
    "title": "Adam: A method for stochastic optimization",
    "authors": ["Diederik P. Kingma", "Jimmy Ba."],
    "venue": "CoRR abs/1412.6980. http://arxiv.org/abs/1412.6980.",
    "year": 2014
  }, {
    "title": "The handbook of brain theory and neural networks",
    "authors": ["Yann LeCun", "Yoshua Bengio."],
    "venue": "MIT Press, Cambridge, MA, USA, chapter Convolutional Networks for Images, Speech, and Time Series, pages 255–258.",
    "year": 1998
  }, {
    "title": "A decomposable attention model for natural language inference",
    "authors": ["Ankur P. Parikh", "Oscar Täckström", "Dipanjan Das", "Jakob Uszkoreit."],
    "venue": "EMNLP.",
    "year": 2016
  }, {
    "title": "How to construct deep recurrent neural networks",
    "authors": ["Razvan Pascanu", "Çaglar Gülçehre", "Kyunghyun Cho", "Yoshua Bengio."],
    "venue": "CoRR abs/1312.6026. http://arxiv.org/abs/1312.6026.",
    "year": 2013
  }, {
    "title": "Weight normalization: A simple reparameterization to accelerate training of deep neural networks",
    "authors": ["Tim Salimans", "Diederik P. Kingma."],
    "venue": "CoRR abs/1602.07868. http://arxiv.org/abs/1602.07868.",
    "year": 2016
  }, {
    "title": "Bidirectional recurrent neural networks",
    "authors": ["M. Schuster", "K.K. Paliwal."],
    "venue": "IEEE Transactions on Signal Processing 45(11):2673–2681.",
    "year": 1997
  }, {
    "title": "Japanese and Korean voice search",
    "authors": ["Mike Schuster", "Kaisuke Nakajima."],
    "venue": "2012 IEEE International Conference on Acoustics, Speech and Signal Processing .",
    "year": 2012
  }, {
    "title": "On the computational power of neural nets",
    "authors": ["H.T. Siegelmann", "E.D. Sontag."],
    "venue": "Journal of Computer and System Sciences 50(1):132 – 150.",
    "year": 1995
  }, {
    "title": "Highway networks",
    "authors": ["Rupesh Kumar Srivastava", "Klaus Greff", "Jürgen Schmidhuber."],
    "venue": "CoRR abs/1505.00387.",
    "year": 2015
  }, {
    "title": "Sequence to sequence learning with neural networks",
    "authors": ["Ilya Sutskever", "Oriol Vinyals", "Quoc V. Le."],
    "venue": "Advances in Neural Information Processing Systems. pages 3104–3112.",
    "year": 2014
  }, {
    "title": "Rethinking the inception architecture for computer vision",
    "authors": ["Christian Szegedy", "Vincent Vanhoucke", "Sergey Ioffe", "Jonathon Shlens", "Zbigniew Wojna."],
    "venue": "CoRR abs/1512.00567. http://arxiv.org/abs/1512.00567.",
    "year": 2015
  }, {
    "title": "Attention is all you need",
    "authors": ["Ashish Vaswani", "Noam Shazeer", "Niki Parmar", "Jakob Uszkoreit", "Llion Jones", "Aidan N. Gomez", "Lukasz Kaiser", "Illia Polosukhin."],
    "venue": "CoRR abs/1706.03762. http://arxiv.org/abs/1706.03762.",
    "year": 2017
  }, {
    "title": "Deep recurrent models with fast-forward connections for neural machine translation",
    "authors": ["Jie Zhou", "Ying Cao", "Xuguang Wang", "Peng Li", "Wei Xu."],
    "venue": "CoRR abs/1606.04199. http://arxiv.org/abs/1606.04199.",
    "year": 2016
  }],
  "id": "SP:f2a87714cdd3d49f759b7a0faec783efd41e77d6",
  "authors": [{
    "name": "Mia Xu Chen",
    "affiliations": []
  }, {
    "name": "Orhan Firat",
    "affiliations": []
  }, {
    "name": "Ankur Bapna",
    "affiliations": []
  }, {
    "name": "Melvin Johnson",
    "affiliations": []
  }, {
    "name": "Wolfgang Macherey",
    "affiliations": []
  }, {
    "name": "George Foster",
    "affiliations": []
  }, {
    "name": "Llion Jones",
    "affiliations": []
  }, {
    "name": "Niki Parmar",
    "affiliations": []
  }, {
    "name": "Noam Shazeer",
    "affiliations": []
  }, {
    "name": "Ashish Vaswani",
    "affiliations": []
  }, {
    "name": "Jakob Uszkoreit",
    "affiliations": []
  }, {
    "name": "Lukasz Kaiser",
    "affiliations": []
  }, {
    "name": "Mike Schuster",
    "affiliations": []
  }, {
    "name": "Zhifeng Chen",
    "affiliations": []
  }, {
    "name": "Yonghui Wu",
    "affiliations": []
  }, {
    "name": "Macduff Hughes",
    "affiliations": []
  }],
  "abstractText": "The past year has witnessed rapid advances in sequence-to-sequence (seq2seq) modeling for Machine Translation (MT). The classic RNN-based approaches to MT were first out-performed by the convolutional seq2seq model, which was then outperformed by the more recent Transformer model. Each of these new approaches consists of a fundamental architecture accompanied by a set of modeling and training techniques that are in principle applicable to other seq2seq architectures. In this paper, we tease apart the new architectures and their accompanying techniques in two ways. First, we identify several key modeling and training techniques, and apply them to the RNN architecture, yielding a new RNMT+ model that outperforms all of the three fundamental architectures on the benchmark WMT’14 English→French and English→German tasks. Second, we analyze the properties of each fundamental seq2seq architecture and devise new hybrid architectures intended to combine their strengths. Our hybrid models obtain further improvements, outperforming the RNMT+ model on both benchmark datasets.",
  "title": "The Best of Both Worlds: Combining Recent Advances in Neural Machine Translation"
}