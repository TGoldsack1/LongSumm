{"ground_truth": "Proposes a novel, end-to-end architecture for generating short email responses. Single most important benchmark of its success is that it is deployed in Inbox by Gmail and assists with around 10% of all mobile responses. . Challenges in deploying Smart Reply in a user-facing product  Responses must always be of high quality. Ensured by constructing a target response set to select responses from. The likelihood of choosing the responses must be maximised. Ensured by normalising the responses and enforcing diversity. The system should not add latency to emails. Ensured by using a triggering model to decide if the email is suitable to undergo the response generation pipeline. Computation time is further reduced by finding approximate best result instead of the best result. Ensure privacy by encrypting all the data which adds challenge in verifying the model's quality and debugging the system. Architecture  Preprocess Email  Perform actions like language detection, tokenization, sentence segmentation etc on the input email. Triggering Model  A feed-forward neural network (with embedding layer and 3 fully connected hidden layers) to decide if the input email is suitable for suggesting responses. Data  Training set of pairs (o, y) where o is the incoming message and y is a boolean variable to indicate if the message had a response. Features  Unigrams, bigrams from the messages. Signals like - is the recipient in the contact list of the sender. Response Selection  LSTM network to predict the approximate best response for an incoming message o  Network  Sequence to Sequence Learning. Reads the input message (token by token) and encode a vector representation. Compute softmax to get the probability of first output token given the input token sequence. Keep feeding in the previous response tokens and the input token sequence to compute the probability of next output token. During inference, approximate the most likely response greedily by taking the most likely response at each timestamp and feeding it back or by using the beam search approach. Response Set Generation  Generate a set of high-quality responses that also capture the variability in the intent of the response. Canonicalize the email response by extracting the semantic structure using a dependency parser. Partition all response messages into \"semantic\" clusters. These semantic clusters define the response space for scoring and selecting possible responses and for promoting diversity among the responses. Semantic Intent Clustering  Since a large, labelled dataset is not available, a graph based, semi-supervised approach is used. Graph Construction  Manually define a few clusters with a small number of example responses for each cluster. Construct a graph with frequent response messages (including the labelled nodes) as response nodes (VR). For each response node, extract a set of feature nodes (VF) corresponding to features like skip-gram and n-grams and add an edge between the response node and the feature node. Learn a semantic labelling for all response nodes by propagating semantic intent information (available because of labelled nodes) throughout the graph. After some iterations, sample some of the unlabeled nodes from the graph, manually label these sample nodes and repeat this algorithm until convergence. For validation, extract the top k members of each cluster and validate the quality with help of human evaluators. Suggestion Diversity  Provide users with a varied set of response by omitting redundant response (by not selecting more than one response from any semantic cluster) and by enforcing negative (or positive) responses. If the top two responses contain at least one positive (negative) response and none of the top three responses is negative (positive), the third response is replaced with a negative (positive) one. This is done by performing a second LSTM pass where the search is restricted to only positive (or negative) responses in the target set. Strengths  The system is already in production and assists with around 10% of all mobile responses. This comment has been minimized. Sign in to view  Copy link  Quote reply  vegetakarthhik commented  Nov 26, 2018  hey do you have python implementation?", "prediction": "The paper presents some general characteristics that intelligent machines should have, focusing in particular on communication and learning. Ability to Communicate  The intelligent agents should be able to communicate with humans, preferably using language based communication The paper presents some general characteristics that intelligent machines should possess and a roadmap to develop such intelligent machines in small, realistic steps. Ability to Communicate  The intelligent agents should be able to communicate with humans, preferably at This paper presents a set of desiderata that we believe are crucial for an agent to be able to make its own decisions and to assist humans in their endeavors. The underlying idea is that by learning these des The paper presents a learning environment for learning how to communicate with humans via natural language. The learning environment is designed to emphasize the interactive nature of communication and the transfer of communication across different channels. Link to the The main flaw in \u201cgood old\u201d symbolic AI research is the assumption that it would be possible to program an intelligent machine largely by hand. We believe it is uncontroversial that a machine supposed to be The paper describes an ecosystem to teach the basics of linguistic interaction to an intelligent machine and how to use it to operate in the world. The ecosystem is seen as a \u201ckindergarten\u201d providing basic The Learner (the system to be trained) is an actor in this ecosystem. The Teacher assigns tasks and rewards the Learner for desirable behaviour, and it also provides helpful information, both spontaneously and in response to The Learner has to learn to pay attention to the Teacher, to identify the basic units of language and to develop sequence repetition and manipulation skills. The Teacher guides the Learner from these basic skills to be able The paper provides an example how an intelligent machine could be used in the real world. The machine is an assistant to Alice, an elderly person living alone. The input to the system is a sequence of questions about This paper presents some ideas about how to build intelligent machines that would benefit from the learning environment we described in the previous section. While we do not have a concrete proposal yet about how exactly such machines should be implemented, The goal is to build an intelligent machine that can translate between languages. The machine will have to understand the concept of positive and negative reward, and develop complex strategies to deal with novel linguistic inputs. Let\u2019s The paper presents a new learning skill for intelligent machines, i.e. a compositional learning skill with the capability of producing new structures in its long-term memory. The Learner can learn new structures The intelligent machine should be based on a Turing-complete computational model. That is, it has to be able to represent any algorithm in fixed length, just like the Turing machine. \u2026 we are not interested in building The paper presents a roadmap for learning tasks based on imitation in an imitation game setting. The goal is to develop a machine that is able to interact with other agents through various communication channels (i.e. The paper presents a simulated ecosystem for learning new facts and skills through communication. In this environment, the machine must learn to perform increasingly more ambitious tasks, being naturally induced to develop complex linguistic and reasoning abilities. The environment This paper presents a framework for fine-tuning a neural network architecture by leveraging the latent space of hidden units in a network. Bottou, LeCun, & Synnaeve, 2017  The"}
{"ground_truth": "They suggest a new method to train GANs. They start training them at low resolution (4x4), wait until \"convergence\", then add more convolutions to the existing model to generate and discriminate higher resolutions. Each new block of convolutions is slowly blended in, instead of being added from one batch to the next. Combined with two new normalization techniques, they get good-looking images at up to 1024x1024 on their new CelebA-HQ dataset (CelebA in high resolution). They also suggest a new scoring method based on the approximated Wasserstein distance between real and generated image patches. According to that score, their progressive training method improves results significantly. What  They suggest a new, progressive training method for GANs. The method enables the training of high resolution GANs (1024x1024) that still produce good-looking, diverse images. They also introduce two new normalization techniques. They also suggest a new method to estimate/score the quality of the generated images. They introduce CelebA-HQ, a variation of CelebA containing high resolution images. How  Progressive growing/training  They train their GANs resolution by resolution, starting with 4x4 and going up to 1024x1024 (a bit similar to LAPGAN). Visualization:  Initially, their generator produces 4x4 images and the discriminator receives 4x4 images. Once training at 4x4 does not improve any more (measured by their new score, see below), they add an upscaling module (to 8x8) to the generator and add a downscaling one to the discriminator. They don't switch to the added convolutions instantly/suddenly, but give the model a grace period during which the upscaled features are computed from (1-alpha)*A + alpha*B, where A are the features after just upscaling, B are the features after upscaling AND the convolutions and alpha is the overlay factor, which is gradually increased over time. This is done for both the generator and the discriminator and at all resolutions. Visualization:  Note that all layers are always trained (after they were added to the models). Training for the earlier layers does not stop. Training in this way focuses most of the computation on the earlier resolutions. It also seems to increase stability, as the model does not have to learn all features of all resolutions at the same time. Minibatch Standard Deviation  They try to improve diversity by adding a method very similar to minibatch discrimination. They compute the standard deviation of each feature per spatial location (for one of the disciminator's last layers). They do this per example in each minibatch, resulting in B*H*W*C standard deviations. (B = batch size, H = height, W = width, C = channels/filters)  They average these values to one value, then replicate them to size H*W and concatenate that to the layer's output. This adds a channel with one constant value to each example in the minibatch. The value is the same for all examples. Equalized Learning Rate  They use Adam for their training. Adam updates weights roughly based on mean(gradient)/variance(gradient) (per weight). They argue that this has the downside of equalizing all weight's stepsizes. But some weights might require larger stepsizes and other smaller ones (large/small \"dynamic range\"). As a result, the learning rate will be too small for some weights and too large for others. To evade this problem, they first stop using modern weight initialization techniques and instead simply sample weights from the standard normal distribution N(0,1). Then, they rescale each weight w_i continuously during runtime to w_i/c, where c is the per-layer normalization from He's initializer. (TODO exact formula for c?) (This looks an aweful lot like weight normalization .) Using simpler weight initialization equalizes the dynamic range of parameters. Doing the normalization then fixes problems related to the simpler weight initialization. Pixelwise Feature Vector Normalization in the Generator  They argue that collapses in GANs come from the discriminator making some temporary error, leading to high gradients, leading to bad outputs of the generator, leading to more problems in the discriminator and ultimately making both spiral out of control. They fix this by normalizing feature vectors in the generator, similar to local response normalization. They apply the following equation in the generator (per spatial location (x, y) with N = number of filters):  Scoring Images  They suggest a new method to score images generated by the generator. They perform the following steps:  Sample 16384 images from the generator and the dataset. Build a Laplacian Pyramid of each image. It begins at a 16x16 resolution of the image and progressively doubles that until the final image resolution. Each level of the pyramid only contains the difference between the sum of the previous scales and the final image (i.e. each step is a difference image, containing a frequency band). Sample per image 128 7x7 neighbourhoods/patches (randomly?) from each pyramid level. Per image set (generator/real) and pyramid level, compute the mean and standard deviations of each color channels of the sampled patches. Normalize each patch with respect to the computed means and standard deviations. Use Sliced Wasserstein Distance (SWD) to compute the similarity between the image sets (generator/real). The result is one value. Lower values are better. CelebA-HQ  They derive from CelebA images a new dataset containing 30k 1024x1024 images of celebrity faces. They use a convolutional autoencoder to remove JPEG artifacts from the CelebA images. They use an adversarially-trained superresolution model to upscale the images. They crop faces from the dataset based on their facial landmarks, so that each final face has a normalized position and rotation. They rescale the images to 1024x1024 using bilinear sampling and box filters. They manually select the 30k best looking images. Other stuff  They use Adam for training (alpha=0.001, beta1=0, beta2=0.99). They use the WGAN-WP method for training, but LSGAN also works. They set gamma to 750 (from 1) for CIFAR-10, incentivizing fast transitions. They also add regularization loss on the discriminator, punishing outputs that are very far away from 0. Their model for CelebA-HQ training is similar to a standard DCGAN model. The generator uses two convolutions after each upscaling, the discriminator analogously two convolutions after each downscaling. They start with 512 filters in the generator and end in 16 (before the output) - same for the discriminator. They use leaky ReLUs in the generator and discriminator. They remove batch normalization everywhere. Results  Scores  Results, according to their new scoring measure (Sliced Wasserstein Distance) and MS-SSIM measure:  So progressive growing (b) significantly improves results. Same -- to a smaller degree -- for minibatch standard deviation (e), equalized learning rate (f) and pixelwise normalization (g). Minibatch discrimination worsened the results. Using small batch sizes also worsened the results. In (d) they \"adjusted the hyperparameters\" (??) and removed batch normalization. They generate 1024x1024 CelebA images, while maintaining pixelwise quality compared to previous models. They achieve an Inception Score of 8.80 on CIFAR-10. Images look improved. CelebA-HQ example results:  LSUN dining room, horse, kitchen, churches:", "prediction": "The basic idea is to introduce a curriculum into the GAN training procedure. One starts by training the generator to produce 4 x 4 images, progressively What  Currently, the most common approaches are autoregressive (i.e. use a VAE) and generative adversarial What  They suggest a progressive growing method for GANs where at each timestep, the generator starts with a low resolution image and What  They suggest \"minibatch discrimination\" where the discriminator learns a large tensor (similar to activation matrix) that projects the GANs prone to the escalation of signal magnitudes as a result of unhealthy competition between the two networks. Most if not all earlier solutions discourage this This paper proposes a radical change in the traditional weight initialization scheme. Instead of using a careful weight initialization, the authors use a trivial N What  They normalize the feature vector in each pixel of the generator (layer i) so that it doesn't spiral out of control What  The paper samples patches from the Laplacian pyramid representation of images and compares them with each other in an GAN. This section describes the following experiments:  Network structure (e.g. convolutional layers, resizing, multiple normalization layers What  They generate images using LSUN BEDROOM and LeakyReLUs. They place a DNN in charge of generating What  Progressive growing is a method to train CNNs at higher resolutions (e.g. 2x, 4x, 8x This paper presents a high-quality version of the CELEBA dataset consisting of 30000 of the images at 1024 \u00d7 1024 resolution. The authors What  They compare LSUN bedrooms with each other. The goal is to find a solution that improves the overall quality of the images. They The paper uses the WGAN-GP in the unsupervised setting to achieve the best CIFAR-10 inception score (7 What  The paper reports that for the CIFAR component of the GAN, for the first time a model has been trained to The paper thanks Mikael Honkavaara, Tero Kuosmanen, and Timi Hietanen for their contributions to What  They suggest a simple architecture for GANs, similar to previous work by Gulrajani et al (2017)  What  The paper describes the process of creating the high-quality version of CELEBA dataset, with 30000 images in 1024x What  Inception score computed from the logarithm of the images generated in an unsupervised setting. Comparison with prior art in What  They describe a setup where a generator synthesizes MNIST digits simultaneously to 3 colour channels and concatenates them into a number in [ What  The paper samples images from Google Maps and uses various features like Wasserstein distance (SWD), Freaky Inception Distance What  They generate an image dictionary for all 30 LSUN categories (30 of them in total) and train a network for each category The training time was intentionally limited to show the differences between methods and to make them more visible."}
{"ground_truth": "In this paper, the authors proposed a method for convexifying convolutional neural networks to train them without backpropagation. Furthermore, this relaxation to the convex setting allows for theoretical proofs of bounds on the generalization error. Succinctly, they propose to use RKHS and the kernel trick to lift the data into a high-dimensional space that is expressive enough to capture certain nonlinear activation functions. Hence, on experiments on MNIST and CIFAR-10, they show that they can outperform smaller CNNs by \u201cconvexifying\u201d them. They note that their method doesn\u2019t work with max pooling or very deep CNNs with lots of bells and whistles. This is a thought-provoking paper. I like how the authors pursued a theoretically interesting question, even though there isn\u2019t much practical use yet for this. I don\u2019t have personal experience writing theory papers, but I imagine that this is a good(?) representation of how they often go in ML. The research is driven by an interesting theoretical question, not a practical application that needs solving/SOTA results.", "prediction": "This paper describes a convexified neural network (CCNN) that can be used in a layer-wise manner to train deeper networks. Benefits  Convolutions between layers Convolutional Neural Networks have been successful in many domains such as image classification, speech recognition, text classification and game playing. The paper proposes a new model class called This section describes how CNNs are used in classical optimization algorithms and how they can be used in a non-convex optimization problem. Convolutional Neural Networks  What  They suggest a method to get cumulative/aggregated gradients from a patch of vectors (each with a different weight vector) to an output vector of the same What  Assume that we have an input-output pair (x, y) and a CNN f (of different classes) and let L(f(x; The paper describes a convexification procedure for nonlinear activation functions, corresponding to the special case of the linear activation function. Convolutions  Learn how to embed the What  The basic idea is to have a given function f(x) = (x - 1) and for each x in a set of patches $x$, define a What  The paper shows that for non-linear activation functions \u03c3, the class of CNN filters can be reduced to a reproducing kernel Hilbert space (RKHS What  The given problem is to learn a two-layer CCNN. The network is either composed of feedforward networks (one forward network per image) or feedforward conv This paper considers networks that have a binary classification problem and proposes a special case of softmax. The paper shows that for a given network, there is a kernel function K What  The heuristic method for learning CNNs with more layers is called Algorithm 2. The basic idea is to estimate the parameters of the convolutional layers in CCNN  Computes an MNIST dataset containing images and their variations for digit recognition and CIFAR-10 classification. Shows a consistent performance across all the datasets. Notes What  They consider variations of the classic convolutional learning rate method, i.e. they consider methods where the learning rate doesn't depend on the number of filters What  They train a model on CIFAR-10, for classification problems. The model has layers of (two, three, four) convolutional layers. Each conv This paper discusses an ensemble of methods to learn fully connected neural networks, in the unsupervised setting. The method is based on the idea of a convex optimization problem What  They suggest a method to optimize CNNs and to understand them statistically. Their method is based on nuclear norm relaxation and RKHS relaxation. How  Convolutions This paper presents a duality of kernels \u2014 the inverse polynomial kernel and the Gaussian RBF kernel. The authors show that the associated reproducing kernel Hilbert Spaces ( This paper presents a derivation of the relaxation of non-linear activation functions using the identity activation function \u03c3. The underlying idea is that if the loss function Q is Consider a function class Fccnn with the RKHS formulation of the activation function \u03c3. The paper shows that fccnn is an empirical risk minimizer within"}
{"ground_truth": "Statiscal foundations of virtual democracy Kahng et al., ICML\u201919  This is another paper on the theme of combining information and making decisions in the face of noise and uncertainty \u2013 but the setting is quite different to those we\u2019ve been looking at recently. Consider a food bank that receives donations of food and distributes it to those in need. The goal is to implement an automated decision making system such that when a food donation is received, the system outputs the organisation (e.g. housing authority or food pantry) that should receive it. We could hard code a set of rules, but what should they be? And who gets to decide? A democratic solution to this would be to give each of the stakeholders a vote on every decision. In the food bank setting, identified classes of stakeholders include the donors, the recipients, the volunteers (who pick up food from the donor and deliver it to the recipient), and employees. Their votes encode their own preferences and biases, perhaps in a way that even the voters themselves couldn\u2019t neatly codify in a set of explicit rules. It\u2019s not really practical to have an actual vote with all stakeholders participating every time a food donation is made though! One of the most basic ideas underlying democracy is that complicated decisions can be made by asking a group of people to vote on the alternatives at hand. As a decision-making framework, this paradigm is versatile, because people can express a sensible opinion about a wide range of issues. One of its seemingly inherent shortcomings, though, is that voters must take the time to cast a vote\u2014 hopefully an informed one\u2014 every time a new dilemma arises. The big idea behind virtual democracy is that we learn the voting preferences of each stakeholder, essentially creating an agent which is able to vote in their place, a virtual voter. Then when we need to make a decision we ask those virtual voters to cast their votes (in the form of a preference ranking). The central question in this paper is this: given a set of preference rankings, how should we combine them to produce an actual decision? The procedure for doing this is known as the voting rule. \u2026 the choice of voting rule can have a major impact on the efficacy of the system. In fact, the question of which voting rule to employ is one of the central questions in computational social choice. It\u2019s one thing to come up with a voting rule that works well when we have the actual true preference rankings of all of the stakeholders. In a virtual democracy setting though, where we have learned approximations to those preference rankings, a highly desirable feature of a voting rule is that it is robust to noise. I.e., we want a voting rule whereby\u2026  \u2026 the output on the true preferences is likely to coincide with the output on noisy estimates thereof. Learning preferences  To learn voter preferences, voters are asked to make a set of pairwise comparisons (about 100) between alternatives. I.e., given this donation, should it be sent to recipient A or recipient B? Each alternative is presented as a set of pre-determined features. In the case of the food bank question voters are given information about the type of donation, and seven additional features such as distance between the donor and recipient, and when the recipient last received a donation. At the end of this process, the training data is used to learn a model of the preferences of the voter. This model is then used to predict the voter\u2019s preference ranking over many hundreds of recipients for a given donation. The Mallows model  To be able to compare the efficacy of various voting rules, we\u2019re going to need a way to compare how good their outputs are. The Kendall tau (KT) distance between two rankings (permutations) of a set is defined as the number of pairs of alternatives on which the rankings disagree. By disagree we mean that given a pair  one ranks  ahead of  , and the other ranks  ahead of  . For example, the KT distance between  and  is 2. The Mallows (1957) model was originally designed for use in situations where there is true ranking of the alternatives, and assigns a probability that a given voter is associated with a given alternative ranking. The probability decreases exponentially with the number of pairs of alternatives on which the true and alternative ranking disagree, i.e., their KT distance. A Mallows model is parameterised by a  parameter  . Our technical approach relies on the observation that the classic Mallows (1957). model is an unusually good fit with our problem. In the problem at hand, instead of a single true ranking, each voter has their own true ranking. When validating a learned  model, the test for accuracy is done using pairwise comparisons, just like in Mallows. Given an observed prediction accuracy  , we can relate this accuracy to an underlying Mallows model through a parameter  , where pairwise comparisons are drawn from within the top  ranked items in the true ranking. (See \u00a73 in the paper). Voting rules and the Borda count  The next piece of the puzzle is the selection of a voting rule to combine rankings and produce a final decision. The main result in the paper concerns the Borda count voting rule. Borda count is a positional scoring rule. Positional scoring rules give a score vector that assigns points to each position in a ranking. E.g. 5 points for being ranked first, 3 points for being ranked second, and so on. The score of an alternative is the sum of its ranking points across all of the voters. The alternative with the biggest score wins (break ties via random selection). The Borda count uses a very straightforward score vector: if there are  alternatives in the ranking, the score vector is defined as  . The heart of the paper is \u00a74, where drawing on the properties of the Mallows model, it\u2019s relationship to the predicted accuracy, and the Borda count rule, the authors show the Borda count is surprisingly robust to noise. I\u2019m going to happily skip over the proofs here and leave you to follow up on those if you\u2019re interested! \u2026 it is intuitive that the separation in Borda scores has to depend on  , but it is encouraging (and, to us, surprising) that his dependence is almost linear\u2026 the theorem implies that our noisy Borda ranking is highly unlikely to make mistakes on pairs of alternatives whose average score difference is linear in  . Other rules  So far so good, but what about other voting rules? Are they also robust to noise or is there something special about the Borda count? The main alternative to positional scoring rules are pairwise-majority consistent (PMC) rules, of which there are many examples (e.g., the ranked pairs method). The key result in \u00a75 of the paper is that all rules in this class are not robust to noise. It is instructive to contrast our positive result, Theorem 1, with this negative result. On a very high level, the former result asserts that \u201cif Borda count says that the gaps between alternatives are signi\ufb01cant, then the alternatives will not \ufb02ip under Borda count,\u201d whereas the latter says \u201ceven if a PMC rule says that the gaps between alternatives are very signi\ufb01cant, some alternatives are likely to \ufb02ip under that rule.\u201d  Borda count FTW  So there you have it: if you need to robustly combine noisy rankings of alternatives to make a decision, use the Borda count! Our theoretical and empirical results identify Borda count as an especially attractive voting rule for virtual democracy, from a statistical viewpoint. Another important feature of the Borda count rule is that the decisions it takes can be easily explained. An explanation consists of two elements: first the average position in the predicted preferences of each of the stakeholder groups, and second the features that were most important in achieving that ranking position (possible since alternatives are presented as vectors of features).", "prediction": "This paper presents a new approach to automating decisions in the virtual democracy setting by learning the preferences of individual people and aggregating the predicted preferences of those people on the given dilemma. The key question here is which aggregation method \u2014 or voting rule The paper proposes a method to predict the preferences of voters in an ethical dilemma using a model of their preferences and then aggregate those predicted preferences to arrive at a decision. The method is referred to as \u2018virtual democracy\u2019 because the idea This paper presents the idea of using the classic Mallows model for ranking alternatives in the knowledge distribution setting. This knowledge distribution is parameterized by a parameter \u03c6 (synthesized version of the Kendall Tau distance) and is related to This paper presents a general question about the foundations of virtual democracy. Specifically, they pose a new question: \u201cwhat does virtual democracy look like in the context of a food bank?\u201d Their work is motivated by the food bank application of Consider a set of alternatives to each other such that  |A| = m. We want to say that x is preferred to y according to \u03c3 (i.e. x < y) where \u03c3 is the ranking factor. We denote What  A voting rule is a function f : Ln \u2192 Ln and produces a \u2018consensus\u2019 ranking of the alternatives in preference profile \u03c3. Each such rule is defined by a score vector (\u03b11, \u2026 Let the Kendall tau distance between two rankings \u03c3, \u03c3\u2032 and L be  The basis for the paper is two ranking models, called as Mallows and PPO. In the Mallows model, there is a ground truth ranking \ufffd This paper presents a new twist on theymmetric voting distribution in the context of a food bank system. The setting is the task of predicting a ranking  over a set of alternatives in order to receive a donation. Each voter  has a The paper shows that Borda count to prediction error theorem satisfies a formal version of the desired property stated in Section 1. The theorem bounds the probability that the noisy Borda ranking (based on the sampled profile) would disagree with the true Bord Theorem 1:  Borda count is robust to noisy perturbations in the preference profile  Theorem 2:  Any voting rule that belongs to the important family of PMC rules is not robust in a similar sense  Recall that under Theorem 1:  Borda count is robust to prediction error  Theorem 1 - Theorem guarantees that for any given Borda operation, there exists a version of the Borda code that can tolerate incorrect predictions. However, this proof Given n voters, m alternatives, a Mallows parameter \u03c6, and a true profile \u03c3? = ( \u03c6 * \u03c3 ? n) with probability p (with base ranking x1, \u2026, xm ) and parameter The paper tests the following hypothesis, about the average probability of flipping an alternative over a given alternative in the face of an average Borda score difference:  $$P(\\text{subset } Y) = \\frac{det(L Borda Count  An especially attractive voting rule for virtual democracy, from a statistical viewpoint. Borda count is also compelling in terms of usability and explainability. In more detail, in our implemented donor-recipient matching system, clicking on a"}
{"ground_truth": "BEAT: asynchronous BFT made practical Duan et al., CCS\u201918  Reaching agreement (consensus) is hard enough, doing it in the presence of active adversaries who can tamper with or destroy your communications is much harder still. That\u2019s the world of Byzantine fault tolerance (BFT). We\u2019ve looked at Practical BFT (PBFT) and HoneyBadger on previous editions of The Morning Paper. Today\u2019s paper, BEAT, builds on top of HoneyBadger to offer BFT with even better latency and throughput. Asynchronous BFT protocols are arguably the most appropriate solutions for building high-assurance and intrusion-tolerant permissioned blockchains in wide-are (WAN) environments, as these asynchronous protocols are inherently more robust against timing and denial-of-service (DoS) attacks that can be mounted over an unprotected network such as the Internet. The best performing asynchronous BFT protocol, HoneyBadger , still lags behind the partially synchronous PBFT protocol in terms of throughput and latency. BEAT is actually a family of five different asynchronous BFT protocols that start from the HoneyBadger baseline and make improvements targeted at different application scenarios. Unlike HoneyBadgerBFT, which was designed to optimize throughput only, BEAT aims to be flexible and versatile, providing protocol instances optimized for latency, throughput, bandwidth, or scalability (in terms of the number of servers). The BEAT protocols divide into two groups: those supporting full (general) state-machine replication (SMR), as required e.g. for smart contract use cases (BEAT0, BEAT1, BEAT2); and those that support BFT storage (append-only ledger) use cases only (BEAT3, BEAT4). The following table summarises the BEAT family and the key distinguishing features of each member. ( Enlarge )  There\u2019s a lot of ground to cover here, but I\u2019ll do my best to give you an overview. Alongside the BEAT protocols themselves, the paper also includes two new building blocks: the generalized fingerprinted cross-checksum and an asynchronous verifiable information dispersal (AVID) algorithm. The HoneyBadger baseline  HoneyBadger supports ACS (the asynchronous common subset) meaning that it provides these guarantees:  Validity: if a correct server delivers a set  , then  and  contains the inputs of at least  correct servers. Agreement: if a correct server delivers a set  , then all correct servers deliver  . Totality: if  correct servers submit an input, then all correct servers deliver an output. HoneyBadger uses reliable broadcast (RBC) and asynchronous Byzantine binary agreement (ABA) protocols to achieve its aims. Threshold signatures are used to provide common coins for ABA, and threshold encryption is used to avoid censorship and achieve liveness. In a threshold scheme the partial outputs (e.g. decryption shares) of at least t participants need to be combined in order to recover (decrypt) the intended value. BEAT0: improved security and performance  BEAT0, our baseline protocol, incorporates a more secure and efficient threshold encryption, a direct instantiation of threshold coin-flipping (instead of using threshold signatures), and more flexible and efficient erasure-coding support. BEAT0\u2019s threshold encryption uses the TDH2 scheme by Shoup and , providing 128-bit security under elliptic curve cryptography. This gives stronger security and better performance than the scheme used in HoneyBadger. In place of the zfec erasure coding library used by HoneyBadger, which supports only Reed-Solomon codes and at most 128 servers, BEAT uses the Jerasure library giving access to more efficient erasure coding schemes and lifting the replica restriction. BEAT1: lower latency  Via a careful study of latency for each HoneyBadgerBFT subprotocol, we find that (1) most of the latency comes from threshold encryption and threshold signatures, and (2) somewhat surprisingly, when the load is small and there is low contention, erasure-coded reliable broadcast (AVID broadcast) causes significant latency. BEAT1 swaps out the AVID broadcast protocol of BEAT0 for a replication-based reliable broadcast protocol, Bracha\u2019s broadcast . Under small loads BEAT1 has lower latency. With small batch sizes BEAT1\u2019s throughput is higher than HoneyBadger / BEAT0, but with larger batch sizes throughput is down by 20-30%. BEAT2: causal ordering  BEAT2 builds on BEAT1 and also opportunistically moves the use of threshold encryption to the client side. In BEAT2, when the ciphertexts are delivered, it is too late for the adversary to censor transactions. Thus, the adversary does not know what transactions to delay, and can only delay transactions from specific clients. BEAT2 can be combined with anonymous communication networks to achieve full liveness. BEAT2 additionally achieves causal order, which prevents the adversary from inserting derived transactions before the original, causally prior transactions. BEAT3: higher throughput for storage use cases  BEAT3 is the first member of the BEAT family targeted for BFT-storage use cases (as opposed to general SMR). Recall that the safety and liveness properties of BFT storage remain the same as those of general SMR, with the only exception that the state may not be replicated at each server (but instead may be erasure-coded). BEAT3 can be used for blockchain applications that need append-only ledgers, and specific blockchains where the consensus protocol serves as an ordering service, such as Hyperledger Fabric. Whereas so far we\u2019ve been using a reliable broadcast protocol (AVID), BEAT3 replaces this with a bandwidth-efficient information dispersal scheme called AVID-FP. To disperse a block  , AVID requires bandwidth  , whereas AVID-FP can do it in  . To order transactions of size  , the communication complexity of BEAT0 is  , of BEAT1 and BEAT2 is  , and of BEAT3 is  . AVID-FP is a bandwidth-efficient AVID (asynchronous verifiable information dispersal) protocol using fingerprinted cross-checksum. In AVID-FP, given a block B to be dispersed, the dealer applies an (m,n) erasure coding scheme, where  and  \u2026 then it generates the corresponding fingerprinted cross-checksum for B with respect to the erasure coding scheme. Each server verifies the correctness of its fragment with respect to the fingerprint cross-checksum, \u201cand then, roughly speaking, leverages the (much smaller) fingerprinted cross-checksum in place of the fragment in the original AVID protocol.\u201d  An (n,m) fingerprinted cross-checksum contains a cross-checksum array of n values, and a fingerprint array of m values. The ith entry in the checksum array contains the hash of the ith coded fragment. See section 4 in the paper for details of the fingerprint array usage. BEAT4: partial reads  BEAT4 further reduces read bandwidth using a novel erasure-coded reliable broadcast protocol called AVID-FP-Pyramid. This supports use cases where clients only need to read a fraction of a data block. AVID-FD-Pyramid is based on pyramid codes, which trade space for access efficiency in erasure-coded storage systems (about 10% extra space requirement for a 50% drop in access overhead). Pyramid codes can be efficiently built from any (n, m) systematic and MDS (maximum distance separable) code. See section 4 in the paper for brief details, or Huang et al. for an in-depth treatment. BEAT4 uses a 2-level pyramid scheme which can tolerate one failure in each level, and is able to reduce read bandwidth by 50%. Full details are in section 9 of the paper. Evaluation  The evaluation is conducted on EC2 with up to 92 nodes from ten different regions in five different continents, using a variety of network sizes and batch sizes. In the figures that follow,  represents the network size such that BEAT0,1,2 & 3 require  nodes and BEAT4 requires  nodes. When f=1, BEAT0, BEAT1, BEAT2, and BEAT3 are around 2x faster than HoneyBadger, and when f becomes larger, they are even faster than HoneyBadger. When f = 1, BEAT4 is about as fast as HoneyBadger\u2026 As f increases, HoneyBadger is much slower than BEAT4. For throughput, BEAT0 slightly outperforms HoneyBadger. BEAT1 and BEAT2 achieve higher throughput than HoneyBadger with small batch sizes, but have 20-30% lower throughput at larger batch sizes. BEAT3 and BEAT4 outperform all the other protocols consistently. If this write-up has captured your interest, I highly encourage you to go an and read the full paper which contains significantly more detail than I was able to convey here.", "prediction": "What  BEAT is a collection of five asynchronous BFT protocols (for completely asynchronous environments) that are designed to work well in an asynchronous environment. They present a 92-instance, five-continent CCS CONCEPTS: State and privacy in the context of distributed systems security, reliability, availability, and interoperability. Today\u2019s paper choice won a best paper award at the recent AC HoneyBadgerBFT: Artistic justification for an asynchronous BFT protocol Zhuo et al., CCS\u201918  We\u2019re transitioning to look at a selection of papers The (subtle) differences between BFT SMRand (BFT) and BEAT4  State machine replication (SMR) is a general technique to provide a fault-tolerant services What  BFT protocols are composed of two parts:  A service that maintains a key-value store and a replica that updates the value of the key. If a request is submitted to such a service This section reviews the cryptographic and distributed systems building blocks for BEAT. We review robust labeled threshold encryption (i.e. threshold encryption) where a public key is associated with the system and a decryption What  HoneyBadgerBFT is an efficient BFT protocol with an asynchronous common subset (ACS). It uses RBC and a binary agreement (ABA) to achieve high throughput and low This paper describes BEAT0, a secure and efficient threshold encryption protocol that includes a direct implementation of threshold coin flipping and more flexible and efficient erasure-coding support. Benefits over previous models  Faster This section presents two BEAT protocols - BEAT1 and BEAT2 - optimized for low contention and high throughput. Most of the latency in BEAT comes from threshold encryption and threshold signatures, This BEAT3 system is like HoneyBadgerBFT, but uses an ABA protocol instead of a reliable broadcast. Benefits  Faster than AVID-CT, but with less throughput and This paper presents an erasure-coded reliable broadcast protocol, AVID-FP-Pyramid, that reduces read bandwidth for BEAT instances. A demonstration lemma and the benefits of having different data What  They implement six BFT protocols, including five BEAT protocols and one HB-Bracha-based implementation. The six protocols themselves involve 6,000 to 8,000 lines of code in Python The BEAT4 and BEAT3 protocols are compared with each other in the Amazon EC2 dataset using up to 92 nodes from ten different regions across five continents. Each node is a general pur What  BEAT is like  It\u2019s been a while since we gave formal introduction to BEAT and the subsequent work since then has been published. In short:  We implemented six new The BEAT family of asynchronous BFT protocols \u2013 Golan-Gueta et al. 2016  BEAT is a family of practical asynchronous B FT protocols that are efficient, flexible, versatile, and ext The authors are indebted to our shepherd Haibo Chen and the CCS reviewers for their helpful comments that greatly improve our paper. The paper has been extensively rewritten and improved upon. The work has also Theorem  If a correct server initiates disperse, the server erasures codes the transaction and sends fragments and the fingerprinted cross-checksum to all servers. Each server will eventually receivem + \ufffd"}
{"ground_truth": "The paper looks at the problem of learning structured exploration policies for training RL agents. Structured Exploration  Consider a stochastic, parameterized policy \u03c0\u03b8(a|s) where \u03b8 represents the policy-parameters. To encourage exploration, noise can be added to the policy at each time step t. But the noise added in such a manner does not have any notion of temporal coherence. Another issue is that if the policy is represented by a simple distribution (say parameterized unimodal Gaussian), it can not model complex time-correlated stochastic processes. The paper proposes to condition the policy on per-episode random variables (z) which are sampled from a learned latent distribution. Consider a distibution over the tasks p(T). At the start of any episode of the ith task, a latent variable zi is sampled from the distribution N(\u03bci, \u03c3i) where \u03bci and \u03c3i are the learned parameters of the distribution and are referred to as the variation parameters. Once sampled, the same zi is used to condition the policy for as long as the current episode lasts and the action is sampled from then distribution \u03c0\u03b8(a|s, zi). The intuition is that the latent variable zi would encode the notion of a task or goal that does not change arbitrarily during the episode. Model Agnostic Exploration with Structured Noise  The paper focuses on the setting where the structured exploration policies are to be learned while leveraging the learning from prior tasks. A meta-learning approach, called as model agnostic exploration with structured noise (MAESN) is proposed to learn a good initialization of the policy-parameters and to learn a latent space (for sampling the z from) that can inject structured stochasticity in the policy. General meta-RL approaches have two limitations when it comes to \u201clearning to explore\u201d:  Casting meta-RL problems as RL problems lead to policies that do not exhibit sufficient variability to explore effectively. Many current approaches try to meta-learn the entire learning algorithm which limits the asymptotic performance of the model. Idea behind MAESN is to meta-train policy-parameters so that they learn to use the task-specific latent variables for exploration and can quickly adapt to a new task. An important detail is that the parameters are optimized to maximize the expected rewards after one step of gradient update to ensure that the policy uses the latent variables for exploration. For every iteration of meta-training, an \u201cinner\u201d gradient update is performed on the variational parameters and the post-inner-update parameters are used to perform the meta-update. The authors report that performing the \u201cinner\u201d gradient update on the policy-parameters does not help the overall learning objective and that the step size for each parameter had to be meta-learned. The variation parameters have the usual KL divergence loss which encourages them to be close to the prior distribution (unit Gaussian in this case). After training, the variational parameters for each task are quite close to the prior probably because the training objective optimizes for the expected reward after one step of gradient descent on the variational parameters. Another implementation detail is that reward shaping is used to ensure that the policy gets useful signal during meta-training. To be fair to the baselines, reward shaping is used while training baselines as well. Moreover, the policies trained with reward shaping generalizes to sparse reward setup as well (during meta-test time). Experiments  Three tasks distributions: Robotic Manipulation, Wheeled Locomotion, and Legged Locomotion. Each task distribution has 100 meta-training tasks. In the Manipulation task distribution, the learner has to push different blocks from different positions to different goal positions. In the Locomotion task distributions, the different tasks correspond to the different goal positions. The experiments show that the proposed approach can adapt to new tasks quickly and the learn coherent exploration strategy. \u2022 In some cases, learning from scratch also provides a strong asymptotic performance although learning from scratch takes much longer.", "prediction": "The paper proposes a new inverse RL (IRL) method, called as Trajectory-ranked Reward EX The paper proposes a new inverse RL (IRL) algorithm, called as Trajectory-ranked Reward The paper presents a method to train a Deep RL agent online without using a hand-specified reward function or supervision. In the traditional heirarchical policy learning approach, the goal is to learn a policy that imitates the actions taken Torabi, et al., 2018  There is a shift towards learning from observations in which the actions taken The paper explores the problem of learning good policies from highly suboptimal demonstrations. One possible approach is to minim This paper presents Ibarz et al. (2018) a new deep learning algorithm for Atari games. This paper presents a method for ranking trajectories in the MDP setting using a mixture of Markov Decision Process The proposed idea is to use ranked suboptimal demonstrations to learn a reward function that can predict which trajectory The paper proposes a method to train RL agent in 3 tasks within OpenAI Gym - HalfCheetah The paper demonstrates how Proximal Policy Optimization (PPO) can be used for optimization. Implementation  Bas The reward function r*(s) is represented by an ensemble of five deep neural networks, each having The paper tests the learned policy of T-REX against Behavior Cloning from Observations (BCO The paper evaluates T-REX on 12 Atari games (All games except Enduro) using PPO policies The paper used an Adam reward function with four convolutional layers with strides 3, 2, 1, The average performance of T-REX under the ground-truth reward function and the best and average performance The paper uses human demonstrations from the Atari Grand Challenge Dataset to evaluate the capabilities of T-REX The paper explores the effect of noisy human rankings on the Atari Hopper task. Evaluation  Start with a The paper tests if T-REX can work without explicit rankings like those used in Mujoco tasks. Test T-REX is an IRL algorithm that can learn to extrapolate intent from suboptimal ranked demonstrations. This work has taken place in the Personal Autonomous Robotics Lab (PeARL) at The University of Texas at Code as well as supplemental videos are available at ICML\u201919-TREX. All the code is The paper visualizes the T-REX (Time-ordered Experimental Policy Learning) for HalfCheetah What  They suggest a new inverse transition model for BCO. Their model predicts actions given state transitions and What  They suggest a modified PPO algorithm for Enduro. Their algorithm uses 9 parallel workers and has a learning The paper tests if a DQf-A neural network can learn a policy that outperforms the demonstration The paper used the Atari Grand Challenge data set to collect actual human demonstrations for five Atari games. We used the ground What  They generate attention maps of the learned rewards for the Atari domains using the 3x3 mask method"}
{"ground_truth": "This paper presents an integrated behavioral anticipation and decision-making system that models behavior for both our vehicle and nearby vehicles as the result of closed-loop policies. Only a finite set of a priori known policies are considered. Bayesian changepoint detection is used to estimate which policy a given vehicle was executing at each point in its history of actions, then infer the likelihood of each potential intention of the vehicle. A statistical test is proposed based on changepoint detection to identify anomalous behavior of other vehicles, such as driving in the wrong direction or swerving out of lanes. Evidence  Anomaly detection was explored by recording three trajectories corresponding to two bikes and a bus. The bikes crossed an intersection from a sidewalk, while the bus made a significantly wide turn. System was able to detect these trajectories as anomalous (Not within the set of known policies)  Evaluated in simulated driving environment  Notes  Bayesian Changepoint detection infers the points in the history of observations where the underlying policy that generated the observations changed. Then, the likelihood of all available policies for the target car given the distribution over the car\u2019s potential policies at the current timestep can be computed (sounds like HMM). The CHAMP algorithm infers the maximum a posteriori set of times at which changepoints between policies have occurred, yielding a set of segments. Given a segment from time s to t and a policy pi, CHAMP approx the log of the policy-evidence for that segment via the (Bae)yesian information criterion (BIC)  Viterbi path is found for the most likely sequence of latent policies  For decision-making, a set of samples are drawn from the distribution over policies of other cars where each sample assigns a policy to each nearby vehicle, excluding the ego car. For each policy available to the ego car (not all policies are available in every scenario e.g. intersection handling policy is not applicable when driving on a highway), and for each sample s, the process is rolled out forward in time until the decision horizon. This yields a set of simulated trajectories. The reward is evaluated for each element of the set of simulated trajectories and the maximal policy for the ego vehicle is chosen. This repeats continuously in a receding horizon manner. Reward function  distance to the goal at the end of the evaluation horizon  minimum distance to obstacles to evaluate safety  lane choice bias to add a preference for the right lane  maximum yaw rate and longitudinal jerk to measure passenger comfort", "prediction": "This paper presents a new model of vehicle policy evolution in highway traffic. The model makes use of a discrete set of closed-loop policies This paper presents a behavioral anticipation and decision-making system that models the behavior of both our vehicle and nearby vehicles. The system is trained Despite the probabilistic nature of the anticipation problem, some approaches in the literature assume no uncertainty on the future states of other participants in The paper presents a new model of decision making in the context of a self-driving car, based on the 2007 DARPA Urban Challenge This paper presents a multi-agent POMDP based on the problem of decision making in an uncertain environment with tightly coupled interactions between multiple This paper presents a simple, yet effective approach for modeling the dynamics of vehicles in an environment. The motivation behind the paper is to investigate The paper makes approximations to sample from the likely interactions of traffic agents. At any point in time, both our vehicle and other vehicles are This paper provides a detailed look at a neural network architecture used to predict the policies of other cars based on the history of observed states of What  CHAMP is an algorithm to segment a target car\u2019s history of observed states. Ith segment consists of observations z This paper presents a method to estimate the latent probability  of each latent policy by leveraging changepoint detection on the history of observed vehicle states. Specifically What  They define two criteria for anomalous behavior:  (1) Unlikelihood against available policies. (2) Ambiguity among policies This paper presents a policy selection procedure for our car, inspired by the trajectory prediction algorithm from Section IV, Automobile Policy Optimization in A lane-nominal, drive in the current lane and maintain distance to the car directly in front policy  lane-change-right/ What  They suggest a lower-fidelity simulation of vehicle interactions between vehicles that assumes an idealized steering controller. This simplified simulation can The reward function for a rollout involving all vehicles is a weighted combination of metrics mq( \u00b7) \u2208 M with weights wq The paper uses traffic-tracking data collected using Uber\u2019s autonomous vehicle platform to evaluate its prediction and anomaly detection algorithm and the performance What  The paper describes a traffic-tracking dataset of trajectories recorded in an urban area. Of the 67 trajectories, 18 are \ufffd For our system, we are interested in correctly identifying the behavior of target vehicles by associating it to the most likely policy according to the The test covers three additional trajectories of two bikes and a bus. The bikes crossed the intersection from the sidewalk while the bus made a significantly The paper presents a sampling strategy similar to an uninformed sampling strategy where the decision of whether to yield or go straight is decided at the The paper tests the full decision-making algorithm with behavioral prediction in a simulated highway scenario involving two nearby cars. Policy choice is made instantaneous This paper presents a principled framework for integrated behavioral anticipation and decision-making in environments with extensively coupled interactions between agents. By explicitly modeling the behaviors of This work was supported in part by a grant from Ford Motor Company via the Ford-UM Alliance and DARPA. The authors are sincerely"}
{"ground_truth": "`Update 2015/11/23: Since I first wrote this note, I became involved in the next iterations of this work, which became v2 of the arXiv manuscript. The notes below were made based on v1.`  This paper considers the problem of Maximum Inner Product Search (MIPS). In MIPS, given a query $q$ and a set of inputs $x_i$, we want to find the input (or the top n inputs) with highest inner product, i.e. $argmax_i q' x_i$. Recently, it was shown that a simple transformation to the query and input vectors made it possible to approximately solve MIPS using hashing methods for Maximum Cosine Similarity Search (MCSS), a problem for which solutions are readily available (see section 2.4 for a brief but very clear description of the transformation). In this paper, the authors combine this approach with clustering, in order to improve the quality of retrieved inputs. Specifically, they consider the spherical k-means algorithm, which is a variant of k-means in which data points are clustered based on cosine similarity instead of the euclidean similarity (in short, data points are first scaled to be of unit norm, then in the training inner loop points are assigned to the cluster centroid with highest dot product and cluster centroids are updated as usual, except that they are always rescaled to unit norm). Moreover, they consider a bottom-up application of the algorithm to yield a hierarchical clustering tree. They propose to use such a hierarchical clustering tree to find the top-n candidates for MIPS. The key insight here is that, since spherical k-means relies on cosine similarity for finding the best cluster, and since we have a transformation that allows the maximisation of inner product to be approximated by the maximisation of cosine similarity, then a tree to find MIPS candidates could be constructed by running spherical k-means on the inputs transformed by the same transformation used for hashing-based MIPS. In order to make the search more robust to border issues when a query is close to the frontier between clusters, at each level of the tree they consider more than one candidate cluster during top-down search, so as to merge the candidates in several leaves of the tree at the very end of a full top down query. Their experiments using search with word embeddings show that the quality of the top 1, 10 and 100 MIPS candidates using their spherical k-means approach is better than using two hashing-based search methods.", "prediction": "This paper proposes a simple approach to solve the optimization problem of Maximum Inner Product Search (MIPS) in recommendation systems and classification systems with a large number of classes. The approach is based on the k-means clustering algorithm. Specifically, they train a spherical kmeans network to predict the similarity scores of This paper presents a simple yet effective approach for solving the K-MIPS problem in recommendation systems where the input to the system is a list of items to be recommended and the goal is to rank the items on the basis of their similarity to other items in the same set. The problem is challenging because the inner product What  They suggest a simple k-means clustering based solution for approximate MIPS. The method is based on a combination of tree-based and hash-based methods. How  They base their system on an MIPS system  They have two components in their network:  Ball Tree:  They use a ball This paper follows in the footsteps of  [ref]  and extends the Bailis-Shrivastava-Li algorithm for spherical k-means clustering (which uses a boosting method to increase the similarity between points in a dataset). The method can be extended to find the k-best matching points The paper presents a proposed algorithm for approximate MIPS which has the following characteristics:  speedup, compared to the exact full linear search, of retrieving top-K items with largest inner product, and robustness of retrieved results to noise in the query. What  They describe a dataset of 10677 movies with 10,677 movies and 69,888 users. They build a database of word embedding vectors for each movie. They consider 60,000 randomly selected users as queries. How  They compute an SVD approximation of the user-item matrix Z with its top What  They suggest a new base that converts MIPS to NNS by appending an extra component to the vectors. The extra component is appended to ensure that they are of the same norm. Then the principal directions are learnt and the data is projected using these principal directions. How  Architecture  They use PC The paper takes two common K-MIPS algorithms, k-means and PCA-Tree, and compares the speedup provided by each algorithm with respect to the total cost of the other algorithms. Speedup is defined as the time taken by Algorithm A0 for processing the inner product with all training items The paper considers a word embedding retrieval task using a query set of 2,000 embeddings. Note that while a query is thus present in the database, it is not guaranteed to correspond to the top-1 MIPS result. Top-10 and top-100 MIPS performance:  Algorithms which perform The paper presented a simple approach to solve approximate K-MIPS (aka, off-line learning objective) for large datasets. The approach achieved a larger speedup while maintaining precision and is more robust to input corruption, as the query test points were expected to not be exactly equal to training data points. Clustering The authors would like to thank the developers of Theano (Bergstra et al., 2010) for developing such a powerful tool. We acknowledge the support of the following organizations for research funding and computing support: Samsung, NSERC, Calcul Quebec, Compute Canada, the Canada Research Chairs and CIFAR."}
{"ground_truth": "Mining High-Speed Data Streams \u2013 Domingos & Hulten 2000  This paper won a \u2018test of time\u2019 award at KDD\u201915 as an \u2018outstanding paper from a past KDD Conference beyond the last decade that has had an important impact on the data mining community.\u2019  Here\u2019s what the test-of-time committee have to say about it:  This paper proposes a decision tree learner for data streams, the Hoeffding Tree algorithm, which comes with the guarantee that the learned decision tree is asymptotically nearly identical to that of a non-incremental learner using infinitely many examples. This work constitutes a significant step in developing methodology suitable for modern \u2018big data\u2019 challenges and has initiated a lot of follow-up research. The Hoeffding Tree algorithm has been covered in various textbooks and is available in several public domain tools, including the WEKA Data Mining platform. The goal is to create a knowledge discovery system that can cope with large volumes of data (perhaps an unbounded stream) without needing to fit everything in memory (40MB was the allotted amount used in their evaluation tests \u2013 remember this was 2000). Ideally, we would like to have KDD systems that operate continuously and indefinitely, incorporating examples as they arrive, and never losing potentially valuable information. Such desiderata are fulfilled by incremental learning methods (also known as online, successive or sequential methods), on which a substantial literature exists. However, the available algorithms of this type have significant shortcomings from the KDD point of view. Some are reasonably efficient, but do not guarantee that the model learned will be similar to the one obtained by learning on the same data in batch mode. They are highly sensitive to example ordering, potentially never recovering from an unfavorable set of early examples. Others produce the same model as the batch version, but at a high cost in efficiency, often to the point of being slower than the batch algorithm. Based on a statistical result known as the Hoeffding bound, the authors show how to create Hoeffding (decision) trees and build a Very Fast Decision Tree (VFDT) system based on them. A key property of the Hoeffding tree algorithm is that it is possible to guarantee under realistic assumptions that the trees it produces are asymptotically arbitrarily close to the ones produced by a batch learner (i.e., a learner that uses all the examples to choose a test at each node). In other words, the incremental nature of the Hoeffding tree algorithm does not significantly affect the quality of the trees it produces. In a classification problem, a set of N training examples of the form (x\u20d7,y) is given, where y is a discrete class label and x\u20d7 is a vector of d attributes. From these examples we need to produce a model y = f(x\u20d7) that will predict the class of future examples x\u20d7 with high accuracy. Decision tree learners create models in the form of decision trees, where each node contains a test on an attribute, each branch corresponds to a possible outcome of the test, and each leaf contains a class prediction. To learn a decision tree you recursively replace leaves by test nodes, starting at the root. Our goal is to design a decision tree learner for extremely large (potentially infinite) datasets. This learner should require each example to be read at most once, and only a small constant time to process it. This will make it possible to directly mine online data sources (i.e., without ever storing the examples), and to build potentially very complex trees with acceptable computational cost. In Hoeffding trees, in order to find the best attribute to test at a given node, only a small subset of the training examples that pass through that node are used. The key of course, is to determine how small that subset can be, and what guarantees we can give concerning it. Thus, given a stream of examples, the first ones will be used to choose the root test; once the root attribute is chosen, the succeeding examples will be passed down to the corresponding leaves and used to choose the appropriate attributes there, and so on recursively. We solve the difficult problem of deciding exactly how many examples are necessary at each node by using a statistical result known as the Hoeffding bound (or additive Chernoff bound). Given a real-valued random variable r with range R (e.g. 0-1 for a probability), and n independent observations of the variable, we can compute the mean of those observations, r\u0304. The Hoeffding bound tells us that with probability 1 \u2013 \u03b4, the true mean of the variable is at least r\u0304 \u2013 \u03b5, where:  The Hoeffding bound has the very attractive property that it is independent of the probability distribution generating the observations. The price of this generality is that the bound is more conservative than distribution-dependent ones (i.e., it will take more observations to reach the same \u03b4 and \u03b5). If G(Xi) is the heuristic used to choose test attributes, then we want to ensure with high probability the attribute chosen using n examples (where n is as small as possible) is the same that would be chosen using infinite examples. Suppose that we\u2019ve seen n examples so far, and the best attribute predicted by G is Xa and the second best is Xb. Call the difference between the observed heuristic values of Xa and Xb \u0394G\u0304  Now, given a desired \u03b4, the Hoeffding bound tells us that Xa is the correct choice with probability 1 \u2013 \u03b4 if n examples have been seen at this node and \u0394G\u0304 > \u03b52. Thus a node needs to accumulate examples from the streamuntil \u03b5 becomes smaller than \u2206G. (Notice that \u03b5 is a monotonically decreasing function of n.) At this point the node can be split using the current best attribute, and succeeding examples will be passed to the new leaves. Pseudo-code for a Hoeffding tree algorithm based on this is given in table 1 of the paper. The VFDT system was built using this algorithm, and included a number of additional optimisations:  When two or more attributes have very similar scores, lots of examples may be needed to decide between them with confidence. But if they are very similar, it probably doesn\u2019t matter too much which one we choose, so let\u2019s just pick one after we reach some user-defined threshold and move on\u2026  We don\u2019t need to recompute G after every example since it is unlikely the decision to split will be made at that specific point. So we can micro-batch and accept a minimum number of new examples before recomputing G.  Under memory pressure, VFDT deactivates the least promising leaves in order to make room for new ones. Likewise VFDT can also drop early on attributes that do not look promising. VFDT can be initialised with a tree produced offline by a traditional batch learner. (Trained on a subset of the overall data). VFDT can rescan previously seen examples if desired. This option can be activated if either the data arrives slowly enough that there is time for it, or if the dataset is finite and small enough that it is feasible to scan it multiple times. This means that VFDT need never grow a smaller (and potentially less accurate) tree than other algorithms because of using each example only once.", "prediction": "VFDT: A system for learning by iterating over streams of data \u2013 Gog et al. 2009  VFDT is a anytime system that builds decision trees using constant memory and constant time per example. It can incorporate tens of thousands of examples per The paper introduces:  (1) Decision trees, Hoeffding bounds, incremental learning, diskbased algorithms, subsampling  (2) Subject Descriptors  The paper also describes a methodology for evaluating the results of a given classifier or This paper presents a tree learning algorithm for large datasets \u2013 in the sense that it uses up to 10K unique (and potentially very large) examples in a batch setting. This is in contrast to many other data mining applications where the computational resources for a massive search The paper presents a classification problem where the input is a sequence of N training examples and the goal is to produce from these examples a model that predicts the classes y of future examples x with high accuracy. The problem is designed so that the number of examples per node What  They suggest a version of the Hoeffding tree algorithm they call VFDT (Very Fast Decision Tree learner) that also learns an evaluation measure called the Gini index. That evaluation measure is used to decide whether two attributes have very similar G\ufffd Comparing VFDT with C4.5: Learning trees with similar number of nodes to VF-boot on a fraction of the nodes \u2013 Catlett et al. 2014  Today\u2019s paper choice studies methods for learning trees faster than VF The paper tests different aspects of VFDT and shows that they improve over time. Some of the reasons are:  Noise around the nodes leads to lower accuracy. The leafs are not very informative, because they only produce 0.5-1% higher accuracy. What  They extract a one-week anonymized trace of web page requests from the University of Washington main campus. The trace contains 82.8 million requests averaging 17,400 per minute. Each request is tagged with an anonymized organization ID that associates the request with This paper presents a heuristic method to extend RAM based batch decisiontree learners with up to hundreds of thousands of examples. The method, VFDT, combines the best of both worlds, accessing data sequentially and using subsampling to potentially require much less than one What  They compare VFDT with SPRINT and SLIQ in terms of speed and cost. Speed = 0, while SLIQ requires multiple times the number of scans. Cost = M*(sparsely-assembled-data) / summing over This paper introduces Hoeffding trees, a method to learn online data streams in small, constant time per example and with high asymptotic similarity to corresponding batch trees. VFDT is a high-performance data mining system based on the idea of This research was partly funded by an NSF CAREER award to the first author. The paper describes a scenario in which a neural network is used to predict the output of neural networks, and then these predictions are used to train and fine tune neural networks for specific What  The paper introduces a new approach to classify data using regression trees. The approach is based on the observation that if two components of a dataset are involved in a classification process, they should be grouped in a similar way. The paper uses progressive sampling to compute"}
{"ground_truth": "Build a supervised reading comprehension data set using news corpus. Compare the performance of neural models and state-of-the-art natural language processing model on reading comprehension task. Reading Comprehension  Estimate conditional probability p(a|c, q), where c is a context document, q is a query related to the document, and a is the answer to that query. Dataset Generation  Use online newspapers (CNN and DailyMail) and their matching summaries. Parse summaries and bullet points into Cloze style questions. Generate corpus of document-query-answer triplets by replacing one entity at a time with a placeholder. Data anonymized and randomised using coreference systems, abstract entity markers and random permutation of the entity markers. The processed data set is more focused in terms of evaluating reading comprehension as models can not exploit co-occurrence. Models  Baseline Models  Majority Baseline  Picks the most frequently observed entity in the context document. Exclusive Majority  Picks the most frequently observed entity in the context document which is not observed in the query. Symbolic Matching Models  Frame-Semantic Parsing  Parse the sentence to find predicates to answer questions like \"who did what to whom\". Extracting entity-predicate triples (e1,V, e2) from query q and context document d  Resolve queries using rules like exact match, matching entity etc. Word Distance Benchmark  Align placeholder of Cloze form questions with each possible entity in the context document and calculate the distance between the question and the context around the aligned entity. Sum the distance of every word in q to their nearest aligned word in d  Neural Network Models  Deep LSTM Reader  Test the ability of Deep LSTM encoders to handle significantly longer sequences. Feed the document query pair as a single large document, one word at a time. Use Deep LSTM cell with skip connections from input to hidden layers and hidden layer to output. Attentive Reader  Employ attention model to overcome the bottleneck of fixed width hidden vector. Encode the document and the query using separate bidirectional single layer LSTM. Query encoding is obtained by concatenating the final forward and backwards outputs. Document encoding is obtained by a weighted sum of output vectors (obtained by concatenating the forward and backwards outputs). The weights can be interpreted as the degree to which the network attends to a particular token in the document. Model completed by defining a non-linear combination of document and query embedding. Impatient Reader  As an add-on to the attentive reader, the model can re-read the document as each query token is read. Model accumulates the information from the document as each query token is seen and finally outputs a joint document query representation in the form of a non-linear combination of document embedding and query embedding. Result  Attentive and Impatient Readers outperform all other models highlighting the benefits of attention modelling. Frame-Semantic pipeline does not scale to cases where several methods are needed to answer a query. Moreover, they provide poor coverage as a lot of relations do not adhere to the default predicate-argument structure. Word Distance approach outperformed the Frame-Semantic approach as there was significant lexical overlap between the query and the document. The paper also includes heat maps over the context documents to visualise the attention mechanism. This comment has been minimized. Sign in to view  Copy link  Quote reply  yauhen-info commented  Apr 28, 2017  Thank you for sharing a good piece of work. Let me also ask if you had found a link to an implementation of the Attentive and Impatient Readers?", "prediction": "Learning to read natural language documents Bhattacherjee et al., ICLR 2017  Today\u2019s paper choice is short and sweet, but thought provoking nonetheless. To a man with a hammer (sticker), everything looks like a puzzle. There\ufffd Learning to read natural language documents Bhattacherjee et al., ICLR 2017  Today\u2019s paper choice is short and sweet, but thought provoking nonetheless. To a man with a hammer (sticker), everything looks like a puzzle. There\ufffd The paper presents a new approach to building a supervised reading comprehension data set. The paper shows that the proposed model, coined corpora, outperforms a wide variety of baselines and heuristic models without any specific encoding of the document or query structure. Idea  Use of The paper presents a method to generate large scale supervised training data for machine comprehension models. The method is based on extracting information from online newspaper articles and their matching summaries. Idea  Two machine reading corpora (mCPC) are created - one for CNN and The paper presents a new ngram language model trained on the Daily Mail website for the task of answering the above two questions. Note that the focus of this paper is to provide a corpus for evaluating the model\u2019s ability to read and comprehend a single document This paper describes a number of baselines, benchmarks and new models to evaluate the capabilities of machine reading models. The baselines  Most Frequent Majority baseline  Maximizes the entity most frequently observed in the context document while the exclusive majority (exclusive frequency) chooses Problem Statement  Given a question and a context document d, produce an answer to the question using a number of rules. The authors pretend that all PropBank triples are of the form (e1, V, e2) to extract the information about \u201cwho The paper proposes three neural models for predicting the probability of word type a from document d for any given query q. Each model is fed one word at a time into a Deep LST-CNN network and the end result is a vector representation of q and d The paper tests different attention mechanisms used by machine translation models for reading comprehension task and shows that they perform competitively against systems based on language modelling capabilities of neural models. Experimental Setup  Two datasets - DailyMail Dataset  Subjectively more questions per question than The paper demonstrates how Attentive and Impatient Readers (A&IM) can be used in a multi-document query setting to train a machine translation model. Most important observation is that the model can propagate and integrate semantic information over long distances. Attention and Embedd The precise hyperparameters used for the various attentive models are summarised in the table below. All models were trained using asynchronous RmsProp with a momentum of 0.9 and a decay of 95. A typical hyperparameter used is the element-wise The paper plots the performance of CNN\u2019s attention models for documents up to a certain amount of length. The figure below shows a sliding window of performance across document length, with increasing scale indicating that the models\u2019 performance degrades slightly as documents increase in length What  They provide examples of queries that require both lexical generalization and co-reference in order to be answered. The final positive example (also in Figure 7) demonstrates the fearlessness of our model. Examples from Attentive Reader and Impatient Reader"}
{"ground_truth": "The paper proposes an adversarial approach for estimating generative models where one model (generative model) tries to learn a data distribution and another model (discriminative model) tries to distinguish between samples from the generative model and original data distribution. Adversarial Net  Two models - Generative Model(G) and Discriminative Model(D)  Both are multi-layer perceptrons. G takes as input a noise variable z and outputs data sample x(=G(z)). D takes as input a data sample x and predicts whether it came from true data or from G.  G tries to minimise log(1-D(G(z))) while D tries to maximise the probability of correct classification. Think of it as a minimax game between 2 players and the global optimum would be when G generates perfect samples and D can not distinguish between the samples (thereby always returning 0.5 as the probability of sample coming from true data). Alternate between k steps of training D and 1 step of training G so that D is maintained near its optimal solution. When starting training, the loss log(1-D(G(z))) would saturate as G would be weak. Instead maximise log(D(G(z)))  The paper contains the theoretical proof for global optimum of the minimax game. Experiments  Datasets  MNIST, Toronto Face Database, CIFAR-10  Generator model uses RELU and sigmoid activations. Discriminator model uses maxout and dropout. Evaluation Metric  Fit Gaussian Parzen window to samples obtained from G and compare log-likelihood. Strengths  Computational advantages  Backprop is sufficient for training with no need for Markov chains or performing inference. A variety of functions can be used in the model. Since G is trained only using the gradients from D, fewer chances of directly copying features from the true data. Can represent sharp (even degenerate) distributions. Weakness  D must be well synchronised with G.  While G may learn to sample data points that are indistinguishable from true data, no explicit representation can be obtained. Possible Extensions  Conditional generative models. Inference network to predict z given x. Implement a stochastic extension of the deterministic Multi-Prediction Deep Boltzmann Machines  Using discriminator net or inference net for feature selection. Accelerating training by ensuring better coordination between G and D or by determining better distributions to sample z from during training.", "prediction": "This paper introduces a new generative model, G, that estimates the probability that a sample came from the training data rather than from G.  It also introduces a discriminative model D that makes predictions based on the likelihood of G coming from a different distribution. Both models are trained simultaneously and the training procedure is optimized This paper introduces a new generative model, G, that estimates the probability that a sample came from the training data instead of from G.  G is a one-off feature extractor. D is a discriminative model that makes predictions based on data samples. The training procedure is to maximise the probability This paper presents a new generative model, based on the backpropagation and dropout algorithms, but where the discriminative model is pitted against an adversary that can determine whether the input is from the model distribution or the data distribution. In short, the adversarial net is like a team of counterfeiters trying This paper considers the problem of training directed graphical models with latent variables in an unnormalized setting (i.e. without a Markov chain). It starts from the observation that the log-likelihood distribution $p(x)$ is intractable, so one can derive a tractable, unnormal The paper describes a two-player minimax game where the goal is to minimize a log-likelihood of assigning the correct label to either the training example or the randomly sampled from the training set. The game is designed so that the discriminator is unable to differentiate between the two distributions and so that momentum is carried along in What  The paper proposes a method to train a neural network generative model based on the maximization of the log probability of a sample of the network's output. The network produces noise samples and then updates the discriminator by ascending its stochastic gradient. The method converges to a global optimum in the sense Consider V (G,D) = U(pg, D) as a function of pg. Let x be the discriminator's output. Let d(x) be the parameters of some optimizer g.  We want to optimize G(z; \u03b8g) so that it is convex in What  They suggest a new architecture for GANs. The architecture is based on a combination of linear activations and sigmoid activations. The activations are mostly based on dropout. How  They use a Gaussian Parzen window to estimate the log-likelihood of generated samples under the Ga This new framework comes with advantages and disadvantages relative to previous modeling frameworks. The disadvantages are primarily that there is no explicit representation of pg(x) and that D must be synchronized well with G during training (in particular, G must not be trained too much without updatingD, much as the negative chains of a Boltzmann This paper discusses an extension of the GAN framework that can be used for semi-supervised learning. The motivation behind this extension is to investigate whether using a family of conditional models that share parameters can speed up training by learning approximations to be fed to a classifier. This paper has demonstrated the viability of This paper is a collaboration between Theano Canada and Pylearn2. The paper thanks its contributors for their time and effort in preparing for a paper submission to Google\u2019s open source community in March 2014. We would also like to thank CIFAR and Canada Research Chairs for funding, and Compute"}
{"ground_truth": "Uncertainty propagation in data processing systems Manousakis et al., SoCC\u201918  When I\u2019m writing an edition of The Morning Paper, I often imagine a conversation with a hypothetical reader sat in a coffee shop somewhere at the start of their day. There are three levels of takeaway from today\u2019s paper choice:  If you\u2019re downing a quick espresso, then it\u2019s good to know that uncertainty can creep into our data in lots of different ways, and if you compute with those uncertain values as if they were precise, errors can compound quickly leading to incorrect results or false confidence. If you\u2019re savouring a cortado, then you might also want to dip into the techniques we can use to propagate uncertainty through a computation. If you\u2019re lingering over a latte, then the UP (Uncertainty Propagation) framework additionally shows how to integrate these techniques into a dataflow framework. We implement this framework in a system called UP-MapReduce, and use it to modify ten applications, including AI/ML, image processing, and trend analysis applications to process uncertain data. Our evaluation shows that UP-MapReduce propagates uncertainties with high accuracy and, in many cases, low performance overheads. Are you sure? Uncertainty can arise from a number of different sources including probabilistic modelling, machine learning, approximate computing, imprecise sensor data, and such like. For many applications, uncertain data should be represented as probability distributions or estimated values with error bounds rather than exact values. Failure to properly account for this uncertainty may lead to incorrect results. For example, Bornholt et al. have shown that computing speeds from recorded GPS positions can lead to absurd values (e.g., walking speeds above 30mph) when ignoring uncertainties in the recordings. If you have a dataflow system with computation based on a DAG, then uncertainty in upstream data values needs to flow through the computation. For example, consider a simple 2-node DAG where an approximate query is used to produce an approximate count of the number of customers in different age groups (e.g., using BlinkDB ), and then we take a weighted average of those groups. The second node will by default produce a single value, but in reality it should result in a distribution. There may be meaningful parts of that distribution where the outcome would be disadvantageous (for example), but the probability of this is completely lost when reporting a single value. Uncertainty propagation  Our method offers, to the best of our knowledge, the only known computationally tractable (and as our evaluation will show, potentially with low overheads) large-scale uncertainty propagation. Consider a function  , where  is an arbitrary function without side-effects representing the computation at a node in a dataflow,  is a set of random variables representing inputs with uncertainties, and  is a set of random variables representing outputs with uncertainties. Depending on the nature of  , we can use different statistical methods to approximate the mean and variance of each variable in the output. When  is a continuous differentiable function we can use first-order Differential Analysis:  The general strategy is to compute  by approximating  using its first-order Taylor series at the expected value of  . This approximation is accurate if  is roughly linear around the support (in other words, neighborhood) of  \u2026  When there are multiple inputs and multiple outputs, the calculation also needs to take into account the covariances between the outputs. When  is a semi-continuous function we have two possibilities. If the support of each input mostly or entirely falls within a continuous differentiable part of the function then we can use Differential Analysis (DA) as before. If it spans a discontinuity then we have to use Monte Carlo simulation. For example, consider the function  when  , and  otherwise. If each input is greater than  then we can use DA. We use Monte Carlo simulation to approximate  for functions  that do not meet (or the developers do not know whether they meet) the requirements for DA. is evaluated on  randomly drawn samples of the input, and the outputs are used as an approximation of  . To generate accurate samples, one must know the joint density of  and pay the heavy computational cost of any rejection-sampling algorithm. Unfortunately that cost grows exponentially with an increasing size of  and thus we resort to two approximations:  Given input distributions, generate samples accordingly and ignore covariances  In the absence of full distributional information, assume that each input is normally distributed with the same mean and covariance matrix as the unknown distribution. (This approximation works because the mean and variance estimation of Y depends solely on the mean and variance of  ). Uncertainty propagation in dataflows  As stated earlier, in a dataflow graph we need to perform uncertainty propagation at all nodes downstream of uncertain data. For Monte Carlo simulation-based uncertainty propagation (UP-MC) we can just treat a node as a black box, dynamically generate samples from the input set, and compute the mean and variance for each output using empirically derived distributions (or assume normal distributions in the absence of this information). The implementation of Differential Analysis (henceforth called UP-DA) is more challenging. Specifically, when a DAG node produces multiple outputs, we view it as being implemented by multiple sub-functions, each producing one of the outputs\u2026 input covariances can require additional data flow to be added to the DAG for computing output variances and covariances. If the programmer can provide a partial derivative function, then using this often gives better performance than resorting to numerical differentiation. Observe that we might make a saving early in the dataflow by introducing uncertainty (e.g. by computing an approximate result), but then we have to pay more later for the resulting uncertainty propagation. The evaluation explores this trade-off. UP-MapReduce is an implementation of the above ideas in the in MapReduce. The UP-MapReduce extension includes three Mapper and three Reducer classes that implement UP-MC, UP-DA for continuous functions, and UP-DA for semi-continuous functions. The extension also introduce the uncertain type PV (Probabilistic Value) which contains one or more random variables, each described by a mean, a variance-covariance matrix, and possibly an entire empirical distribution. The UP-DA Continuous Reducer class for example provides an abstract derivative method that a developer can implement to provide a closed-form derivative function. Uncertainty propagation in practice  We have built a toolbox of common operations (e.g., sum) and modified ten common data processing applications using UP-MapReduce to process uncertain data. Baselines for the evaluation are established by running a large Monte Carlo experiment over a precise version of each application. When input errors are small (e.g. below 3%) then UP-MapReduce estimates means with very low error. The following figure shows the relative errors and execution times for the three variants of UP-MC as compared to the baseline. Enlarge  For six of the applications UP-MapReduce is highly accurate, but when input errors are significant (e.g. eig, svd) its estimated relative errors can deviate noticeably from baseline values. The best performance is obtained when using closed-form (user provided) derivatives. tsocial and latency are both multi-stage approximate workflows. The following chart shows the execution times and maximum relative errors for sampling rates from 0.1% to 100% (precise). For tsocial, a sampling rate of 80% or less is required before the overheads of uncertainty propagation are outweighed by the sampling benefits. Experimentation with ten common data analytic applications revealed that UP-MapReduce is highly accurate in many cases, while its performance overheads are very low\u2014 an average of 6% performance degradation\u2014 when closed-form derivatives are provided. When numerical differentiation or Monte Carlo simulation must be used, overheads can become much more significant as input size increases. Fortunately, the impact of these overheads on overall execution time can be reduced by allocating additional computational resources.", "prediction": "This paper presents a framework for dealing with uncertain data in a data processing system. Uncertain data comes from sensors in IoT, sampling based approximate computations and from machine learning Uniform uncertainty propagating in data processing systems Manousakis, et al., SoCC \u201918  Uncertainty Propagation in Data Processing Systems: This paper presents a general framework for processing uncertain data processing applications in data processing systems such as MapReduce, Spark and Scope. The framework is based on techniques This paper presents a list of approximate methods that generate uncertainty as a byproduct of the approximation. This includes systems where precise measurement uncertainty is introduced in some way, such as This paper presents an approach for dealing with uncertain inputs at a DAG node. Specifically, they discuss how to (approximately) compute Y = f (X) where f What  They suggest a method to approximate the mean and variance of a function f using first-order Differential Analysis (DA) for continuous and differentiable functions This paper presents a semi-continuous function detector for continuous functions called as the Chebyshev\u2019s inequality (Cheb)  [ref] What  They generate n samples of data under the condition that they are an approximation of the true distribution Y. Then they generate an n-dimensional vector representation of the What  The paper describes a dynamic, recursive implementation of differential analysis (differential analysis) for data processing DAGs. In brief, the goal is to What  The paper describes a mapReduce implementation called UP-MapReduce. The implementation is an extension of Hadoop MapReduce that includes the The basic idea in UP-MapReduce is simple; each input (key, value) pair in a program is encoded as a set of intermediate (key What  They suggest a few new Reducer classes for Hadoop 2.7 called UP-MC, UP-DA and UP-LU for continuous functions This paper presents a toolbox of operations that can be used with UP-MapReduce to process uncertain data. The applications are different from each other in some The paper evaluates UP-MapReduce by studying it\u2019s accuracy, performance, and scalability. Two applications considered as part of the evaluation are tsocial What  They generate synthetic input data sets of varying sizes and uncertainty for each application. (n = 104 runs of a precise application)  They evaluate tsocial using What  They suggest a two-stage approach to compute outputs for a query in BlinkDB. The first step is to sample some locations in the network. The second and The paper explores the accuracy and performance of UP-MapReduce estimation of the means using a sensitivity analysis. Shows that the accuracy is highly accurate in most cases The paper explores the scalability of UP-MapReduce applications 3-11 on a cluster of 512 servers. It also runs copies of the applications from previous versions This paper showed how Differential Analysis can be used to propagate data uncertainties through DAGs using Monte Carlo simulation of nodes without overheads. The approach also allows This work was partially supported by NSF grant CCF-1319755. The paper describes a scenario in which a neural network is used to predict sentiment scores for"}
{"ground_truth": "KV-Direct: High-performance in-memory key-value store with programmable NIC Li et al., SOSP\u201917  We\u2019ve seen some pretty impressive in-memory datastores in past editions of The Morning Paper, including FaRM , RAMCloud , and DrTM . But nothing that compares with KV-Direct:  With 10 programmable NIC cards in a commodity server, we achieve 1.22 billion KV operations per second, which is almost an order-of-magnitude improvement over existing systems, setting a new milestone for a general-purpose in-memory key-value store. Check out the bottom line in this comparison table from the evaluation:  ( Enlarge )  In addition to sheer speed, you might also notice that KV-Direct is 3x more power efficient than other systems, and the first general purpose KVS system to achieve 1 million KV operations per watt on commodity servers. Since the server CPU can also be used to run other workloads at the same time, you can make a case for KV-Direct being as much as 10x more power efficient than CPU-based systems. What we\u2019re seeing here is a glimpse of how large-scale systems software of the future may well be constructed. As the power ceiling puts a limit on multi-core scaling, people are now turning to domain-specific architectures for better performance. A first generation of key-value stores were built in a straightforward manner on top of traditional operating systems and TCP/IP stacks. More recently, as both the single core frequency scaling and multi-core architecture scaling are slowing down, a new research trend in distributed systems is to leverage Remote Direct Memory Access (RDMA) technology on NIC to reduce network processing cost. KV-Direct however, goes one step beyond. To support network virtualisation, more and more servers in data centers are now equipped with programmable NICS containing field-programmable gate arrays (FPGA). An embedded NIC chip connects to the network, and a PCIe connector attaches to the server. KV-Direct uses the FPGA in the NIC to implement key-value primitives directly. Like one-sided RDMA (Fig 1b below), KV-Direct bypasses the remote CPU. But it also extends the RDMA primitives from simple memory operations (READ and WRITE) to key-value operations (GET, PUT, DELETE and ATOMIC ops) \u2014 Fig 1c below. Compared with one-sided RDMA based systems, KV-Direct deals with the consistency and synchronization issues on the server-side, thus removing computation overhead in the client, and reducing network traffic. In addition, to support vector-based operations and reduce network traffic, KV-Direct also provides new vector primitives UPDATE, REDUCE, and FILTER, allowing users to define active messages and delegate certain computations to programmable NIC for efficiency. Design goals and challenges  Use cases for in-memory key-value stores have evolved beyond caching to things such as storing data indices, machine learning model parameters, nodes and edges in graph computing, and sequencers in distributed synchronisation. The role of the store shifts from object caching to a generic data structure store (c.f. Redis). This leads to the following design goals:  High batch throughput for small key-value pairs (e.g., model parameters, graph node neighbours). Predictable low-latency (e.g., for data-parallel computation,where tail latency matters)  High efficiency under write-intensive workloads (e.g., graph computations, and parameter servers)  Fast atomic operations  (e.g., for centralized schedulers, sequencers , counters and so on). Vector-type operations (for machine learning and graph computing workloads that often require operating on every element in a vector). The throughput constraint ends up being PCIe bandwidth:  In order to saturate the network with GET operations, the KVS on NIC must make full use of PCIe bandwidth and achieve close to one average memory access per GET. Getting to this level involves work on three fronts:  Minimising DMA (direct memory access) requests per KV operation. The two major components that drive random memory access are hash tables and memory allocation. Hiding PCIe latency while maintaining consistency, which entails pipelining requests. Care must be taken to respect causal dependencies here though. Balancing load between NIC DRAM and host memory. The NIC itself has a small amount of DRAM available, but it turns out not to be much faster than going over PCIe. So the trick turns out to be to use both in order to utilise the joint bandwidth. KV-Direct  KV-Direct enables remote direct key-value access. Clients send operation requests to the KVS server, and the programmable NIC processes requests and sends back results, bypassing the CPU. The following table shows the supported operations. The most interesting of course are the vector operations. KV-Direct supports two types of vector operations: sending a scalar to the NIC on the server, where the NIC applies the update to each element in the vector; and sending a vector to the server, where the NIC updates the original vector element-by-element. Furthermore, KV-Direct supports user-defined update functions as a generalisation to atomic operations. The update functions needs to be pre-registered and compiled to hardware logic before executing. When the user supplies an update function, the KV-Direct toolchain duplicates it several times to leverage FPGA parallelism and match computation with PCIe throughput, and then compiles it into reconfigurable hardware logic using a high-level synthesis (HLS) tool. These functions can be used for general stream processing on a vector value. The programmable NIC on the KVS server is reconfigured as a KV processor, which receives packets from the network, decodes vector operations, and buffers KV operations in a reservation station. The out-of-order engine then issues independent KV operations from the reservation station into the decoder. To minimise memory accesses, small KV pairs are stored inline in the hash table, while others are stored in dynamically allocated memory from a slab memory allocator. After a KV operation completes, the result is sent back to the out-of-order execution engine to find and execute matching KV operations in the reservation station. The reservation station is used to avoid dependencies between two KV operations leading to data hazards and a stalled pipeline. We borrow the concept of dynamic scheduling from computer architecture and implement a reservation station to track all in-flight KV operations and their execution context. To saturate PCIe, DRAM and the processing pipeline, up to 256 in-flight KV operations are needed. However, comparing 256 16-byte keys in parallel would take 40% of the logic resource of our FPGA. Instead, we store the KV operations in a small hash table in on-chip BRAM, indexed by the hash of the key. When a KV operation completes, the latest value is forwarded to the reservation station, where pending operations in the same hash slot are checked. Those with a matching key are executed immediately and removed from the station. Further design and implementation details can be found in sections 3 and 4 of the paper. Evaluation  The evaluation section contains a suite of microbenchmarks, followed by a system benchmark based on the YCSB workload. To simulate a skewed Zipf workload, skewness 0.99 was chosen. This is referred to as the long-tail workload in the figures. The testbed comprises eight servers with two 8-core CPUS per server,and one Arista switch. There is a total of 128 GiB of host memory per server. A programmable NIC is connected to the PCIe root complex of CPU 0, and its 40 Gbps Ethernet port is connected to the switch. The NIC has two PCIe Gen3 x8 links in a bifurcated Gen3 x16 physical connector. Here\u2019s the overall throughput achieved by the system. The throughput of a KV-Direct NIC is on-par with a state-of-the-art KVS server with tens of CPU cores. Without network batching, the tail latency ranges from 3-9  s depending on KV size, operation type, and key distribution. Network batching adds less than 1  s latency, but significantly improves performance. It is possible to attach multiple NICs per server. With 10 KV-Direct NICs on a server, one billion KV ops/s is readily achievable on a commodity server. Each NIC owns a disjoin partition of the keys. Multiple NICs suffer the same load imbalance problem as a multi-core KVS implementation, but for a relatively small number of partitions (e.g. 10) the load imbalance is not too great \u2013 1.5x of the average in the highest loaded NIC even for the long-tail highly skewed workload. KV-Direct throughput scales almost linearly with the number of NICS on a server. The last word:  After years of broken promises, FPGA-based reconfigurable hardware finally becomes widely available in main stream data centers. Many significant workloads will be scrutinized to see whether they can benefit from reconfigurable hardware, and we expect much more fruitful work in this general direction.", "prediction": "Boosted RDMA access to main memory Bau et al., SOSP \u201917  KVS is a key infrastructure in data centers. Performance of in-memory KV-Direct: high-performance in-memory key-value store with programmable NIC Li et al., SOSP \u201917  Key-value KV-Direct: In-memory key-value store for web services Li et al., FAST\u201918  (** corrected spelling of Li et KVS: a data structure store for low-latency computation Tian et al., ICSE\u201918  Many data structures can be expressed in a key-value Boosting High-Performance KVS \u2013 Yang et al 2013  The 7th IEEE/ACM International Conference on Utility and Cloud Computing is coming to London in a couple Boosted NICs with FPGA: A case study in high-performance networking and low-latency NICs for datacenters Yadwadkar What  KV-Direct moves KV processing from the CPU to the programmable NIC in the server (like RDMA)  How  The goal is KV-Direct enables remote direct key-value access bypassing the CPU. The programmable NIC on KVS server is an FPGA reconfigured into KV-Direct: Stream processing on vectors using user-defined update functions \u2013 Golan-Gueta et al. 2015  Today\u2019s paper introduces a Hash Table  FPGA KV processor receives packets from the network, decodes vector operations and buffers KV operations in the reservation station. Next, the out What  The hardware platform is built on top of Intel Stratix V FPGA based programmable NICs (partner in the open source community)  The What  KV-Direct is a high-performance hyper-threaded Intel processor platform. The authors evaluate it with eight servers and one Arista DCS Hash Table Analysis  Comparison of KV-Direct, Cuckoo Hashing, Hopscotch Hashing and FaRM Hashing \u2013 Andersen et al What  The authors test KV-Direct on YCSB uniform and long tail workloads. They use a packet generator to generate batched KV operations, PCIe has 29% TLP header and padding overhead for 64B DMA operations and the DMA engine may not have enough parallelism to saturate the PCIe Overview  One billion KV op/s in a server with 10 KV-Direct NICs on a server  The benchmark server used in the paper is The goal of KV-Direct is to leverage existing hardware in data centers to offload an important workload (KV access), instead of designing a special hardware Overview  A large body of distributed key-value store systems are based on CPU. A new approach to reduce the computation cost of such systems is to use two- KVDirect: Fast, In-memory key-value store \u2013 Golan-Gueta et al. 2014  The 7th IEEE/ACM International conference We would like to thank Kun Tan, Ningyi Xu, Ming Wu, Jiansong Zhang and Anuj Kalia for all technical discussions and valuable comments."}
{"ground_truth": "The paper presents a framework that uses diverse suboptimal world models that can be used to break complex policies into simpler and modular sub-policies. Given a task, both the sub-policies and the controller are simultaneously learned in a bottom-up manner. The framework is called as Model Primitive Hierarchical Reinforcement Learning (MPHRL). Idea  Instead of learning a single transition model of the environment (aka world model) that can model the transitions very well, it is sufficient to learn several (say k) suboptimal models (aka model primitives). Each model primitive will be good in only a small part of the state space (aka region of specialization). These model primitives can then be used to train a gating mechanism for selecting sub-policies to solve a given task. Since these model primitives are sub-optimal, they are not directly used with model-based RL but are used to obtain useful functional decompositions and sub-policies are trained with model-free approaches. Single Task Learning  A gating controller is trained to choose the sub-policy whose model primitive makes the best prediction. This requires modeling p(Mk | st, at, st+1) where p(Mk) denotes the probability of selecting the kth model primitive. This is hard to compute as the system does not have access to st+1 and at at time t before it has choosen the sub-policy. Properly marginalizing st+1 and at would require expensive MC sampling. Hence an approximation is used and the gating controller is modeled as a categorical distribution - to produce p(Mk | st). This is trained via a conditional cross entropy loss where the ground truth distribution is obtained from transitions sampled in a rollout. The paper notes that technique is biased but reports that it still works for the downstream tasks. The gating controller composes the sub-policies as a mixture of Gaussians. For learning, PPO algorithm is used with each model primitives gradient weighted by the probability from the gating controller. Lifelong Learning  Different tasks could share common subtasks but may require a different composition of subtasks. Hence, the learned sub-policies are transferred across tasks but not the gating controller or the baseline estimator (from PPO). Experiments  Domains:  Mujoco ant navigating different mazes. Stacker arm picking up and placing different boxes. Implementation Details:  Gaussian subpolicies  PPO as the baseline  Model primitives are hand-crafted using the true next state provided by the environment simulator. Single Task  Only maze task is considered with the start position (of the ant) and the goal position is fixed. Observation includes distance from the goal. Forcing the agent to decompose the problem, when a more direct solution may be available, causes the sample complexity to increase on one task. Lifelong Learning  Maze  10 random Mujoco ant mazes used as the task distribution. MPHRL takes almost twice the number of steps (as compared to PPO baseline) to solve the first task but this cost gets amortized over the distribution and the model takes half the number of steps as compared to the baseline (summed over the 10 tasks). Pick and Place  8 Pick and Place tasks are created with max 3 goal locations. Observation includes the position of the goal. Ablations  Overlapping model primitives can degrade the performance (to some extent). Similarly, the performance suffers when redundant primitives are introduced indicating that the gating mechanism is not very robust. Sub-policies could quickly adapt to the previous tasks (on which they were trained initially) despite being finetuned on subsequent tasks. The order of tasks (in the 10-Mazz task) does not degrage the performance. Transfering the gating controller leads to negative transfer. Notes  I think the biggest strength of the work is that accurate dynamics model are not needed (which are hard to train anyways!) through the experimental results are not conclusive given the limited number of domains on which the approach is tested.", "prediction": "TuckER is a simple, yet powerful linear model that uses Tucker decomposition for the task of link prediction in knowledge graphs. Paper  Implementation  Knowledge Graph as a Tensor  Let H = Height, W = Width, T = Batch size  We want RReL: Model Primitive Hierarchical Lifelong Reinforcement Learning \u2013 Wu, Kochenderfer, & Gupta 2019  AAMAS\u201919  The 18th International Conference on Autonomous Agents and Multiagent Systems (AAMAS 2019 This paper presents a simple yet effective approach for learning the hierarchical task over a sequence of tasks. The underlying idea is that the agent must learn to solve a series of tasks that are related to each other and must be able to transfer knowledge from previous tasks to improve on This paper presents the lifelong RL agent with a Markov Decision Process (MDP) over the reward-transition function $S$ (synthesized over time steps) and a momentum policy $r$ that selects actions that maximize the expected reward over the This section outlines the Model Primitive Hierarchical Reinforcement Learning (MPHRL) framework which can be used to solve the problem of effective piecewise functional decomposition for transfer across a distribution of tasks. Architecture  The idea is to represent the problem as The key assumption in MPHRL is access to several diverse world models of the environment dynamics. Model primitives  We use the term model primitives to refer to these approximate world models. The goal of the MPHRL framework is to use these suboptimal predictions from different What  The paper describes a learning algorithm for continuous action optimization, with a focus on how it integrates with the gating controller. The standard policy (SP) optimization objective is:  maximizes the policy gradient E by factorizing into:  \u03b8 - The paper tests if model primitives can ensure task decomposition and if such decomposition improves transfer for lifelong learning. Setup  Two tasks are considered - MuJoCo ant navigating different mazes and a Stacker arm picking up and placing different boxes. Both tasks use Ga The paper presents experiments on two tasks where the agent needs to learn a number of interpretable subpolicies to solve a single task. The tasks are L-Maze and D-Mazes. The paper reports that using model primitives like E, W The paper introduces a family of 10 random mazes for MuJoCo Ant environment called as the 10-Maze taskset (synthesized version of Ant Environment). The family of mazes has a maximum of 10 goal locations and only 3 goal locations The paper explores the following questions:  How much gain in sample efficiency is achieved by transfer-ring subpolicies? Can MPHRL learn the task decomposition even when the model primitives are quite noisy or when the source task does not cover all \u201ccases\ufffd What  They showed how imperfect world models can be used to decompose a complex task into simpler ones. The paper also demonstrated how the decomposition avoids negative transfer and catastrophic interference, a major concern for lifelong learning systems. How  Architecture  They start with two This work was supported in part by DARPA under agreement number D17AP00032. The authors are grateful to Kunal Menda and everyone at SISL for useful comments and suggestions. We are also grateful for the support from Google Cloud in scaling our"}
{"ground_truth": "Understanding lifecycle management complexity of datacenter topologies Zhang et al., NSDI\u201919  There has been plenty of interesting research on network topologies for datacenters, with Clos-like tree topologies and Expander based graph topologies both shown to scale using widely deployed hardware. This research tends to focus on performance properties such as throughput and latency, together with resilience to failures. Important as these are, note that they\u2019re also what\u2019s right in front of you as a designer, and relatively easy to measure. The great thing about today\u2019s paper is that the authors look beneath the surface to consider the less visible but still very important \u201clifecycle management\u201d implications of topology design. In networking, this translates into how easy it is to physically deploy the network, and how easy it to subsequently expand. They find a way to quantify the associated lifecycle management costs, and then use this to help drive the design of a new class of topologies, called FatClique. \u2026 we show that existing topology classes have low lifecycle management complexity by some measures, but not by others. Motivated by this, we design a new class of topologies, FatClique, that, while being performance-equivalent to existing topologies, is comparable to, or better than them by all our lifecycle management complexity metrics. Now, there\u2019s probably only a relatively small subset of The Morning Paper readers involved in designing and deploying datacenter network topologies. So my challenge to you as you read through this paper, is to think about where the hidden complexity and costs are in your own systems. Would you do things differently if these were made more visible? It would be great to see more emphasis for example on things like developer experience (DX) and operational simplicity \u2013 in my experience these kinds of attributes can have an outsize impact on the long-term success of a system. Anyway, let\u2019s get back to cables and switches\u2026  Physically deploying network topologies  When it comes to laying out a network topology for real in a datacenter, you need to think about packaging, placement, and bundling. Packaging is how you group things together, e.g. the arrangement of switches in racks, and placement concerns how these racks are physically placed on the datacenter floor. Placement in turn determines the kinds of cabling you need, and for optical cables the power of the transceivers. Within a rack we might package several connected switches into a single chassis using a backplane. At the other end of the scale, blocks are larger units of co-placement and packaging that combine several racks. With all those connections, it makes things a lot easier to group together multiple fibres all connecting the same two endpoints (racks) into bundles, which contain a fixed number of identical length fibres. Manufacturing bundles is simpler than manufacturing individual fibres, and handling such bundles significantly simplifies operational complexity. Patch panels make bundling easier by providing a convenient aggregation point to create and route bundles. Bundles and fibres are physically routed through the datacenter on cable trays. The trays themselves have capacity constraints of course. Here\u2019s an example of a logical Clos topology and its physical instantiation:  The authors identify three key metrics that together capture much of the deployment complexity in a topology:  The number of switches. More switches equals more packaging complexity. The number of patch panels, which is a function of topological structure and a good proxy for wiring complexity. The number of bundle types. This metric captures the other important part of wiring complexity \u2013 how many distinct bundle types are needed. A bundle type is represented by its capacity (how how many fibres) and its length. These complexity measures are complete. The number of cable trays, the design of the chassis, and the number of racks can be derived from the number of switches (and the number of servers and the datacenter floor dimensions, which are inputs to the topology design). The number of cables and transceivers can be derived from the number of patch panels. Here\u2019s how Clos and Expander (Jellyfish) representative topologies for the same number of servers stack up against these metrics:  The expander graph topology shows much higher deployment complexity in terms of the number of bundle types. Clos also exposes far fewer ports outside of a rack (it has better port hiding). Expanding existing networks  When you want to expand an existing network first you need to buy all the new gear and lay it out on the datacenter floor, and then you can begin a re-wiring process. This is all going on with live traffic flowing, so expansion is carried out in steps. During each step the capacity of the topology is guaranteed to be at least some percentage of the existing topology capacity. The percentage is sometimes known as the expansion SLO. During a step existing links to be re-wired are drained, then human operators physical rewire links at patch panels. The new links are tested and then undrained (strange word! ), i.e., brought into service. For example, here\u2019s a logical expansion (top row) and its physical realisation:  The most time-consuming part of all this is the physical rewiring. The two metrics that capture expansion complexity are therefore:  The number of expansion steps, and  The average number of rewired links in a patch panel rack. Here\u2019s how Clos and Expander stack up on those metrics for the same networks we saw earlier:  This time the victory goes to Expander (Jellyfish). Jellyfish has a much higher north-to-south capacity ratio. Northbound links exit a block, and southbound links are to/from servers within a block. \u201cFat edges\u201d have more northbound than southbound links, and the extra capacity means you can accomplish more movement in each step. Clos topologies re-wire more links in each patch panel during an expansion step and require many steps because they have a low north-south capacity ratio. Enter the FatClique  Inspired by these insights, the authors define a new class of topologies called FatClique, which combine the hierarchical structure of Clos with the edge expansion capabilities of expander graphs. There are three levels in the hierarchy. A clique of switches form a sub-block. Cliques of sub-blocks come together to form blocks. And cliques of blocks come together to from the full FatClique topology. Four key design variables determine the particular instantiation of a FatClique topology: the number of ports in a switch that connect to other servers; the number of ports in a switch that connect to other sub-blocks in a block; the number of switches in a sub-block; and the number of sub-blocks in a block. A synthesis algorithm  takes a set of six input constraints (see \u00a75.1) and determines the values for these four design variables. There is plenty more detail in section 5 of the paper which I don\u2019t have the space to do justice too here. FatClique vs Clos vs Expander  The evaluation compares FatClique to Clos, Xpander, and Jellyfish at different network topology sizes, as shown in the table below. ( Enlarge )  Here\u2019s how they stack up against the complexity metrics:  Number of switches  Number of patch panels  Number of bundle types  and associated cabling costs:  Number of expansion steps  Average number of rewired links  We find that FatClique is the best at most scales by all our complexity metrics. (The one exception is that at small and medium scales, Clos has slightly fewer patch panels). It uses 50% fewer switches and 33% fewer patch panels than Clos at large scale, and has a 23% lower cabling cost (an estimate we were able to derive from published cable prices). Finally, FatClique can permit fast expansion while degrading network capacity by small amounts (2.5-10%): at these levels, Clos can take 5x longer to expand the topology, and each step of Clos expansion can take longer than FatClique because the number of links to be rewired at each step per patch panel can be 30-50% higher. The one thing I couldn\u2019t find in the evaluation is any data to back up the opening claim that FatClique achieves all of this \u201cwhile being performance-equivalent to existing topologies.\u201d  The last word  As the management complexity of networks increases, the importance of designing for manageability will increase in the coming years. Our paper is only a first step in this direction\u2026", "prediction": "Overview  Most recent datacenter topology designs have focused on performance properties such as latency and throughput. In this This paper introduces a new dimension, life cycle management complexity, that attempts to understand the complexity of deploying a topology and fact sheet: assessing lifecycle management costs in a network Tzimpragos et al., USENIX Symposium What  They compare various data center topologies, specifically Clos and Expander graphs. The families are:  Clos What is deployed? Deployment is the process of realizing a physical topology in a data center space (e.g What  They suggest a method to pack individual switch cables into racks (for efficiency). The method is based on a combination of What  The authors identify several metrics that quantify the complexity of datacenter topology deployment: packaging and placement. What  They compare the Clos and Jellyfish topologies and compare how they compare on port-hiding, The second important component of topology lifecycle management is expansion. Datacenters are rarely deployed to maximal capacity in one shot  expanding a topology in two phases: (a) procuring new switches, servers, and cables and laying them What happens during a step of Clos expansion? Each spine and aggregation block are connected by two links (green and red) What  They identify two metrics that quantify expansion complexity and use these metrics to identify differences between Clos and Jellyfish. Number What  The authors compare Clos and Jellyfish network architectures and compare the number of links per patch panel in Jelly What  FatClique answers the question \u201cIs there a family of topologies which are comparable to, or What  FatClique combines the hierarchical structure of Clos with the edge expansion in expander graphs to achieve lower Re-wiring during expansion of FatClique topology \u2013 Golan-Gueta et al. 2014  Yesterday we Achieving low complexity with FatClique \u2013 Gupter et al 2014  Today\u2019s paper choice is inspired Comparing three architectures, Clos, expander graphs and fatclique by complexity metrics Lange et al., ASPLOS Comparing Clos, Xpander, Jellyfish, and FatClique topologies \u2013 Golan-Gueta What  The placement of patch panels is determined both by the structure of the topology and its scale (e.g What  The authors compare the number of switches used by different topologies (small and large) on various scales. They find The paper evaluates the expansion of symmetric Clos topologies using two measures of expansion complexity: number of expansion steps required and What  FatClique is the best network architecture at most scales, according to a recent study by the USenix This paper explores the design of topology designs for efficiency and cost efficiency in the context of a datacenter. Overview  This paper tries to characterize the complexity of lifecycle management of datacenter topologies. The management complexity of What  The authors want a fast way to generate Clos topologies, similar to the design of Jupiter. They base their"}
{"ground_truth": "The paper presents a generalized framework for graph clustering (clusters of network motifs) on the basis of higher-order connectivity patterns. Approach  Given a motif M , the framework aims to find a cluster of the set of nodes S such that nodes of S participate in many instances of M and avoid cutting instances of M (that is only a subset of nodes in instances of M appears in S). Mathematically, the aim is to minimise the motif conductance metric given as cutM(S, S\u2019) / min[volM(S), volM(S\u2019)] where S\u2019 is complement of S, cutM(S, S\u2019) = number of instances of M which have atleast one node from both S and S\u2019 and volM(S) = Number of nodes in instances of M that belong only to S.  Solving the above equation is computationally infeasible and an approximate solution is proposed using eigenvalues and matrices. The approximate solution is easy to implement, efficient and guaranteed to find clusters that are at most a quadratic factor away from the optimal. Algorithm  Given the network and motif M, form a motif adjacency matrix WM where WM(i, j) is the number of instances of M that contains i and j.  Compute spectral ordering of the nodes from normalized motif laplacian matrix. Compute prefix set of spectral ordering with small motif conductance. Scalability  Worst case O(m1.5), based on experiments O(m1.2) where m is the number of edges. Advantages  Applicable to directed, undirected and weighted graphs (allows for negative edge weights as well). In case the motif is not known beforehand, the framework can be used to compute significant motifs. The proposed framework unifies the two fundamental tools of network science (motif analysis and network partitioning) along with some worst-case guarantees for the approximations employed and can be extended to identify higher order modular organization of networks.", "prediction": "This paper presents a generalized approach for clustering networks based on higher-order connectivity patterns. This framework provides mathematical guarantees on the optimality of obtained clusters and scales to networks with billions of edges. Link to the code  Setup  Information propagation units (IS) are Higher-order organization of complex networks \u2013 Aaronson et al. 2015  This is the last paper we\u2019ll be looking at this year, so I\u2019ve chosen something a little more reflective to leave you with (The Morning Paper will return on The paper presents a method to derive the notions of cut and volume measures for defined network motifs in a graph. The method is inspired from the graph Laplacian and its application to directed graphs. Formally, the notion of a motif is defined by conductance on the weighted graph defined by Equation S19. When |A| = 3, the motif cut and motif volume are both equal to half the motif length. Theorem 6. Motif Cheeger Inequality  Theorem states that for any The paper discusses the idea of motif Cheeger inequality for network motifs with four or more nodes. The result follows from Theorem 5 and the standard Cheeger ineqaulity. The first result says that the set of nodes S is within a quadratic factor Theorem 1 and 3  Theorem 2  If we have a collection of k x k motifs M, and we want to cluster them into k clusters (each having different size), then we can have a discussion on how to weight these clusters using the Theorem 6: Theorem adjacency matrix WM - complexity of the algorithm for finding clusters of triangular motifs in a graph G. We now analyze the computation of the higher-order clustering method, in terms of the time to access edges in a The formula for the motif adjacency matrix WM has a simple formulation where A = A while B = A and U = A\u2212B. Note that in all cases, WM is symmetric. The central computational kernel in these computations is (X \u00b7 What  They compare the results of edge-based spectral clustering with the method of Infomap. The method is a special case of motif-based cluster-inducing. How  Let x be the adjacency matrix for a graph. Let f(x) What  The cluster found by Algorithm 1 consists of a total of 131 nodes and 764 edges. The nodes are neurons and the edges are synapses. The largest connected component of the motif adjacency matrix for motif Mbifan contains 112 nodes. The What  The paper describes a method to embed the spectral map of airports in the United States and Canada into a transport reachability network. The network is not symmetric so the authors estimate the travel times between nodes using a likelihood ratio estimator. They compare the The paper uses the motif based clustering framework to analyze the organization of networks. Motifs are considered a building block for food webs and energy sources for some species. Analysis of higher-order modular organization on the Florida Bay ecosystem food web  Motif M What  The paper describes a model based on the Laplacian family of proteins. The model is optimized so that each node in the network gets a fixed size eigenvector W.  The eigenvalue of W is the spectral norm of the whole"}
{"ground_truth": "Scalable Atomic Visibility with RAMP Transactions \u2013 Bailis et al. 2014  RAMP transactions came up last week as part of the secret sauce in Coordination avoidance in database systems that contributed to a 25x improvement on the TPC-C benchmark. So what exactly are RAMP transactions and why might we need them? As soon as you partition your database across multiple servers, things start to get interesting. We\u2019d like to maintain atomic isolation \u2013 either all of a transaction\u2019s effects are visible or none are \u2013 for transactions that span partitions\u2026  The status quo for these multi-partition atomic transactions provides an uncomfortable choice between algorithms that are fast but deliver inconsistent results and algorithms that deliver consistent results but are often slow and unavailable under failure. A lot of implemented systems have chosen to go with the fast-and-furious option resulting in incorrect behaviour for cases where atomic visibility matters. The RAMP (Read Atomic Multiple Partition) transaction models introduced in this paper show that you can have performance and scalability of transactions spanning multiple partitions with atomic visibility. \u2026data stores like Bigtable, Dynamo, and many popular \u201cNoSQL\u201d and even some \u201cNewSQL\u201d stores do not provide transactional guarantees for multi-item operations. The designers of these Internet-scale, real-world systems have made a conscious decision to provide scalability at the expense of multi-partition transactional semantics. Our goal with RAMP transactions is to preserve this scalability but deliver correct, atomically visible behavior for the use cases we have described. Under evaluation, the RAMP algorithms did not degrade substantially under contention, and scaled linearly to over 7.1 million operations per second on 100 servers. Bad things that can happen when you don\u2019t have atomic multi-partition isolation  Without atomic isolation foreign key constraints, secondary indexing, and materialized view maintenance can all break! Data models often represent bi-directional relationships as two distinct uni-directional relationships. \u201cFor example, in TAO, a user performing a \u2018like\u2019 action on a Facebook page produces updates to both the LIKES and LIKED_BY associations.\u201d  These applications require foreign key maintenance and often, due to their unidirectional relationships, multi-entity update and access. Without atomic isolation broken bi-directional relationships, and dangling or incorrect references can surface. With data partitioned across servers by primary key, access by secondary attributes becomes more challenging. There are two dominant strategies for distributed secondary indexing. First, the local secondary index approach co-locates secondary indexes and primary data, so each server contains a secondary index that only references (and indexes) data stored on its server. This allows easy, single-server updates but requires contacting every partition for secondary attribute lookups (write-one, read-all), compromising scalability for read-heavy workloads. Alternatively, the global secondary index approach locates secondary indexes (which may be partitioned, but by a secondary attribute) separately from primary data. This alternative allows fast secondary lookups (read-one) but requires multi-partition update (at least write-two)  Real-world services tend to use either local secondary indexing (non-scalable but correct), or non-atomic (scalable but incorrect) global indexes. In the latter cases queries involving the secondary attributes can return records that shouldn\u2019t match, and omit ones that should. Without atomic isolation, materialized views can diverge from the base data. For example, a count may become inaccurate. With RAMP transactions, base data and views can be updated atomically. The physical maintenance of a view depends on its specification, but RAMP transactions provide appropriate concurrency control primitives for ensuring that changes are delivered to the materialized view partition. For select-project views, a simple solution is to treat the view as a separate table and perform maintenance as needed: new rows can be inserted/deleted according to the specification, and, if necessary, the view can be (re-)computed on demand (i.e., lazy view maintenance). For more complex views, such as counters, users can execute RAMP transactions over specialized data structures such as the CRDT G-Counter. Scalability Requirements  Consider databases that are partitioned over multiple servers. Each item has a single logical copy stored on one of those partitions, which one can be calculated using the item itself (e.g. primary key). In order to achieve scalability the author\u2019s identify two key properties that must be preserved: synchronization independence, and partition independence. Synchronization independence ensures that one client\u2019s transactions cannot cause another client\u2019s to block and that, if a client can contact the partition responsible for each item in its transaction, the transaction will eventually commit (or abort of its own volition). (Also known as transactional availability). Partition independence ensures that, in order to execute a transaction, a client never has to contact partitions that its transaction does not access. Thus, a partition failure only affects transactions that access items contained on the partition. This also reduces load on servers not directly involved in a transaction\u2019s execution. In the distributed systems literature, partition independence for replicated data is called replica availability or genuine partial replication. A third constraint is that the metadata required to achieve synchronization and partition independence is not too large: \u201cthere are many potential solutions for providing atomic visibility that rely on storing prohibitive amounts of state.\u201d  The RAMP transaction algorithms  You may be wondering why I keep referring to algorithms (plural). This is because the authors actually define three RAMP variants: RAMP-Fast, RAMP-Small, and RAMP-Hybrid. These trade-off between performance and the amount of metadata that needs to be kept. At a high level, RAMP transactions allow reads and writes to proceed concurrently. This provides excellent performance but, in turn, introduces a race condition: one transaction might only read a subset of another transaction\u2019s writes, violating RA (i.e., fractured reads might occur). Instead of preventing this race (hampering scalability), RAMP readers autonomously detect the race (using metadata attached to each data item) and fetch any missing, in-flight writes from their respective partitions. To make sure that readers never have to block for writes to arrive at a partition, writers use a two-phase (atomic commitment) protocol that ensures that once a write is visible to readers on one partition, any other writes in the transaction are present on and, if appropriately identified by version, readable from their respective partitions. RAMP-Fast stores metadata in the form of write sets (thus the overhead is linear in transaction size), and has one RTT for reads in the best case (two in the worst case). RAMP-Small uses constant size metadata (it only stores the transaction timestamp) but always requires two RTT for reads. RAMP-Hybrid takes the same write set information as RAMP-Fast, but encodes it in a Bloom filter. With no false positives from the filter, Ramp-Hybrid would therefore behave as RAMP-Fast. And with all false positives, it behaves as RAMP-Small. All of the variants require two RTTs/transaction for writes. The two-phase atomic commitment protocol used by RAMP ensures readers never block waiting for writes to arrive. It is known that every atomic commitment protocol may block during failures. Blocked writes instead act as \u201cresource leaks\u201d on partitions: partitions will retain prepared versions indefinitely unless action is taken. To \u201cfree\u201d these leaks, RAMP servers can use the Cooperative Termination Protocol (CTP). CTP can always complete the transaction except when every partition has performed PREPARE but no partition has performed COMMIT\u2026 Compared to alternatives (e.g. replicating clients), we have found CTP to be both lightweight and effective. There is of course much more detail in the full paper, which I encourage you to go on and read. Section 6 on Related Work contains a nice short summary of isolation guarantees in the wild. \u201cIn recent years, many \u2018NoSQL\u2019 designs have avoided cross-partition transactions entirely, effectively providing Read Uncommitted isolation\u2026\u201d", "prediction": "Read atomic (RA) isolation: atomic visibility in the context of multi-partition, multi-operation transactional access Read Atomic Multi-partition: Isolation for transactional visibility in a database Davis et al. SIGMOD \u201914  Athena et al., ICSE\u201918  We consider the problem of making transactional updates atomically visible to There are at least two basic scenarios for using Read Atomic isolation:  Foreign Key Constraint  If two users become \u201cfriends In this section, we formalize Read Atomic isolation and, to capture scalability, formulate a pair of strict scalability criteria: Read Atomic Isolation (RA) is a restriction on write visibility\u2014if all or none of a transaction\u2019s updates are performed Read-only and write-only transactions are the best choices for many applications, but RA is not sufficient for all applications. Because it The goal in this paper is to provide robust and scalable transactional functionality, and so we first define criteria for \u201cscalability Read-only and write-only transactions with a \u201clast writer wins\u201d overwrite policy Ramasubramanian et What  RAMP-Fast is an algorithm for fast writes, with one RTT for reads and two RTTs for writes What  RAMP-Fast Server-side Data Structures (RAMP-Fast) is a fast data structure implementation of RAM What  RAMP-H is a hybrid between RAMP and RAMp-S.  It stores an entire write set The RAMP algorithms allow readers to safely race writers without requiring either to stall. More specifically, readers do not interfere with other readers, What  RAMP transactions rely on multi-versioning to allow readers to access versions that have not yet committed and/or have been CTP: Cooperative Termination Protocol for Multi-Bit Transactions \u2013 Golan-Gueta et al. 2014  This is the What  RAMP algorithms provide the following performance improvements over Paxos Commit:  Faster commit detection. If a server returns a RamP-F, RAMP-H, RAMp-S: scalability vs transactional and non-transact The paper implemented a multi-versioned, main memory database prototype using Kryo 2.20 for serialization using a distributed The RAMP algorithms achieve low latency (on average) and low overhead compared to lock based and E-PCI techniques. We also evaluated the overhead of blocked writes in the implementation of the Cooperative Termination Protocol (CTP) We artificially lowered a We deployed an increasing number of servers within the us-west-2 EC2 region and, to mitigate the effects of hot items A very short primer on Isolation  There are three main categories of isolation guarantees in modern database systems:  Serializability This paper describes how to achieve atomically visible multi-version transactions without incurring the performance and availability penalties of traditional algorithms. The A very topical choice for today\u2019s paper choice. The paper looks at a wonderful example of distributed database systems supporting transaction The paper formalizes the concept of a companion set in the RAMP-F database, and shows that the two-round"}
{"ground_truth": "RPCValet: NI-driven tail-aware balancing of \u00b5s-scale RPCs Daglis et al., ASPLOS\u201919  Last week we learned about the [increased tail-latency sensitivity of microservices based applications with high RPC fan-outs. Seer uses estimates of queue depths to mitigate latency spikes on the order of 10-100ms, in conjunction with a cluster manager. Today\u2019s paper choice, RPCValet, operates at latencies 3 orders of magnitude lower, targeting reduction in tail latency for services that themselves have service times on the order of a small number of \u00b5s (e.g., the average service time for memcached is approximately 2\u00b5s). The net result of rapid advancements in the networking world is that inter-tier communications latency will approach the fundamental lower bound of speed-of-light propagation in the foreseeable future. The focus of optimization hence will completely shift to efficiently handling RPCs at the endpoints as soon as they are delivered from the network. Furthermore, the evaluation shows that \u201cRPCValet leaves no significant room for improvement\u201d when compared against the theoretical ideal (it comes within 3-15%). So what we have here is a glimpse of the limits for low-latency RPCs under load. When it\u2019s no longer physically possible to go meaningfully faster, further application-level performance gains will have to come from eliminating RPCs altogether. RPCValet balances incoming RPC requests among the multiple cores of a server. Consider for example a Redis server maintaining a sorted array in memory\u2026  \u2026 an RPC to add a new entry may incur multiple TLB misses, stalling the core for a few \u00b5s while new translations are installed. While this core is stalled on the TLB miss(es), it is best to dispatch RPCs to other available cores on the server. In theory, how fast could we go? Consider a 16-core server handling 16 requests. We could put anywhere from 1 to 16 queues in front of those cores. At one extreme we have a \u201816 x 1\u2019 architecture with 16 queues each with one associated processing unit. At the other extreme is a \u20181 x 16\u2019 architecture with one shared queue serving all 16 processing units. Or we could have e.g. a \u20184 x 4\u2019 with 4 queues each serving 4 units, and so on\u2026  If you model that out with Poisson arrivals and variety of different service time distributions (fixed, uniform, exponential, and generalised extreme value, GEV) what you\u2019ll find is that the \u20181\u00d716\u2019 architecture performs the best, and the \u201816\u00d71\u2019 architecture performs the worst. 1 x 16 significantly outperforms 16 x 1. 16 x 1\u2019s inability to assign requests to idle cores results in higher tail latencies and a peak throughput 25-73% lower than 1 x 16 under a tail latency SLO at 10x the mean service time\u2026 The theoretical results suggest that systems should implement a queueing configuration that is as close as possible to a single queue (1 x 16) configuration. In practice those models failed to account for a significant source of overhead: synchronizing across multiple cores on the single queue. When you take synchronisation into account, a dedicated queue per core starts to look like a good idea again. NICs supporting Receive-Side Scaling (RSS) can push messages into each core\u2019s queue, but while RSS can help to achieve load distribution, it can\u2019t truly achieving load balancing. Any resulting load imbalance after applying these [RSS] rules must be handled by system software, introducing unacceptable latency for the most latency-sensitive RPCs with \u00b5s-scale service times. Introducing RPCValet  RPCValet uses a push-based model, while also taking into account the current loading of the cores. It\u2019s designed for \u201cemerging architectures featuring fully integrated NIs and hardware-terminated transport protocols.\u201d. The key hardware feature is that the network interface has direct access to the server\u2019s memory hierarchy, eliminating round trips over e.g. PCIe. Servers register a part of their DRAM into a partitioned global address space (PGAS), where every server can read and write memory in RDMA fashion. (We\u2019re not given any details on system reconfiguration etc.). An integrated NI can, with proper hardware support, monitor each core\u2019s state and steer RPCs to the least loaded cores. Such monitoring is implausible without NI integration, as the latency of transferring load information over an I/O bus (e.g. ~ 1.5 \u00b5s for a 3-hop posted PCIe transaction) would mean that the NI will make delayed\u2014hence sub-optimal, or even wrong\u2014 decisions until the information arrives. With N participants in the system, RPCValet first writes every incoming message into a single PGAS-resident message buffer of NxS slots. Then it notifies the selected core to process the request. Message arrival and memory location are thus decoupled from the assignment of a core for processing. We have the synchronization-free zero-copy behaviour of a partitioned multi-queue architecture, together with the load-balancing flexibility of a single queue system. In the implementation each node maintains a send and a receive buffer. Send buffers contain a valid bit indicating whether they are currently being used, and a pointer to a buffer in local memory containing the payload. Receive buffers on the other hand have slots that are size to accommodate message payloads directly. Overall, the messaging mechanism\u2019s memory footprint is 32 x N x S + (max_msg_size + 64) x N x S bytes. That is, a few tens of MB at most. The implementation uses a simple scheme to estimate core loads. RPCValet simply keeps track of the number of outstanding send requests assigned to each core. Allowing only one inflight request per core corresponds to a true single-system queue behaviour, but introduces a small inefficiency waiting for the notification of completed request processing. A practical compromise is to allow two outstanding requests per core. This results in marginal performance gains over the single request design for ultra-fast RPCs with service times of a few nanoseconds. All IN backends independently handle incoming network packets and access memory directly, but they hand off to a single NI dispatcher (over the on-chip interconnect) that is statically assigned to dispatch requests to cores for servicing. \u2026 for modern server processor core counts, the required dispatch throughput should be easily sustainable by a single centralized hardware unit, while the additional latency due to the indirection from any NI backend to the NI dispatcher is negligible (just a few ns). Evaluation  The evaluation is conducted using against three different service implementations: a synthetic service that emulates different service time distributions; the HERD key-value store, and the Masstree data store. An SLO of less than or equal to 10x the mean service time is assumed in each case, and configurations are evaluated in terms of throughput under SLO. Compared to a software implementation, which requires a synchronisation primitive, the hardware implementation delivers 2.3x-2.7x higher throughput under SLO. The following plots show the performance of different queueing arrangements under the three workloads, with the \u20181\u00d716\u2019 arrangement that RPCValet simulates performing the best as expected. ( Enlarge )  Compared to a theoretically optimal 1 x 16 model, RPCValet gets within 3-15% (depending on the service time distribution). \u201cWe attribute the gap between the implementation and the model to contention that emerges under high load in the implemented systems, which is not captured by the model.\u201d  At the end of the day though:  RPCValet leaves no significant room for improvement; neither centralizing dispatch nor maintaining private request queues per core introduces performance concerns. Throughput under tight tail latency goals is improved by up to 1.4x, and tail latency before saturation is reduced by up to 4x.", "prediction": "RPCValet: NI-driven tail-Aware balancing of mcp-scale RPCs Daglis et al., ASPLOS \u201919  We are RPCValet: NI-Driven Tail-Aware Balancing of \u00b5s-Scale RPCs Daglis et al., ASPLOS \u201919  Today we\ufffd Dynamic load balancing at scale: tail-tolerant computing for online services Yoon et al., EPFL\u201918  We\u2019re seeing a shift towards  NI integration: handling \u00b5s-scale RPCs with fine-grained communication Bau et al., SoCC\u201918  (If you don\u2019t What  The paper proposes a queuing system with Q FIFOs (with a variable number of input queues and 16 serving units) and U serving units per FIFO What  The authors present a new load-balancing algorithm for Double DAGs, inspired by the work  [ref]  and their previous work on multi- CPC-RPCVet: optimized for short-scale service processing at the \u00b5s level \u2013 Golan-Gueta et al. 2015  Today\u2019 The NI\u2019s integration on the same piece of silicon as the CPU is the key enabler for handling \u00b5s-scale events. By leveraging the fact that such What  They describe an architecture for multi-queue messaging based on the VIA QP (International Queue Accessories Association of America) principles. (VIA is soNUMA: Fast, Scalable Memory Access for Manycore CPUs \u2013 Golan-Gueta et al. 2014  SoNUma is another research project, this What  They devise a lightweight implementation of native messaging as a required building block for dynamic load-balancing at the NI. A key difficulty to overcome is support for multi- Dynamic load balancing at the NI dispatcher \u2013 Golan-Gueta et al. 2014  Today we\u2019re temporarily pausing our tour through some of the OSDI\u2019 The paper describes a method to evaluate the performance of RPCValet with a single tiled 16-core chip implementing soNUMA with a Manycore NI. The What  HERD with 1 \u00d7 16 delivers 29x higher throughput than 4 \u00d7 4 and 16x 1x 1 at SLO. Up to 4x lower tail latency What  They compare the performance of RPCValet with a software implementation, both of which implement the same theoretically optimal queuing system (i.e. 1 \u00d7 16). What  The paper compares the results of RPCValet with results from purely theoretical queuing systems, in order to determine the performance gap between the two systems. The results show Controling Tail Latency at Scale \u2013 Joachims et al 2014  Today\u2019s paper choice won a best paper award at the recent ACM Symposium on Cloud Computing Dynamic load-balancing for scale-scale RPCs \u2013 Golan-Gueta et al. 2014  Today\u2019s paper choice combines the benefits of a single-queue This paper presents a high-level look at an architecture for massively parallel distributed systems. The architecture is independent of any company, but under the supervision of the ISO standards body"}
{"ground_truth": "The paper presents the task of abductive NLP (pronounced as alpha NLP) where the model needs to perform abductive reasoning. Abductive reasoning is the inference to the most plausible explanation. Even though it is considered to be an important component for understanding narratives, the work in this domain is sparse. A new dataset called as Abstractive Reasoning in narrative Text (ART) consisting of 20K narrative contexts and 200k explanations is also provided. The dataset models the task as multiple-choice questions to make the evaluation process easy. Task Setup  Given a pair of observations O1 and O2 and two hypothesis h1 and h2, the task is to select the most plausible hypothesis. In general, P(h | O1, O2) is propotional to P(h |O1)P(O2|h, O1). Different independence assumptions can be imposed on the structure of the problem eg one assumption could be that the hypothesis is independent of the observations or the \u201cfully connected\u201d assumption would jointly model both the observations and the hypothesis. Dataset  Along with crowdsourcing several plausible hypotheses for each observation instance pair, an adversarial filtering algorithm (AF) is used to remove weak pairs of hypothesis. Observation pairs are created using the ROCStories dataset which is a collection of short, manually crafted stories of 5 sentences. The average word length for both the content and the hypothesis is between 8 to 9. To collect plausible hypothesis, the crowd workers were asked to fill in a plausible \u201cin-between\u201d sentence in natural language. Given the plausible hypothesis, the crowd workers were asked to create an implausible hypothesis by editing fewer than 6 words. Adversarial filtering approach from Zellers et al. is used with BERT as the adversary. A temperature parameter is introduced to control the maximum number of instances that can be changed in each adversarial filtering iteration. Key Observations  Human performance: 91.4%  Baselines like SVM classifier, the bag-of-words classifier (using Glove) and max-pooling overt BiLSTM representation: approx 50%  Entailment NLI baseline: 59%. This highlights the additional complexity of abductive NLI as compared to entailment NLI. BERT: 68.9%  GPT: 63.1%  Numerical and spatial knowledge-based data points are particularly hard. The model is more likely to fail when the narrative created by the incorrect hypothesis is plausible", "prediction": "The paper explores the feasibility of language-based abductive reasoning for predicting the most plausible explanation in natural language. Two tasks are introduced \u2013 Abductive NLI: multiple-choice question The paper presents a new dataset of 20K narratives accompanied by over 200K explanatory hypothesis (ART) for the task of Abductive Natural Language Generation (\u03b1NLG) and Abductive Natural Language Inference (\u03b1NLI) is the task of generating a valid hypothesis h+ given the two observations O1 and O2. Formally, the task requires A Probabilistic Framework for \u03b1NLI \u2013 Christiano et al. 2014  Today\u2019s paper choice is part of the work of the SyncFree European research project on large The paper presents a new dataset, ART, for the task of ABDUCTIVE reasoning in narrative text. The dataset consists of  (20K - 200K) narratives with over This paper presents an evaluation of finetuned versions of the state-of-the-art pre-trained language models on the ART dataset. In the \u03b1NLI setting, What  The paper describes three different approaches to train language models for the task of inference on the ART dataset. The models are BERT, GPT and ESIM+ELMo What  The paper uses the GPT model to train a neural network adversary network. The paper shows that the performance of the best GPT network plateaus after about 10,000 This paper presents a generative model based on the ATOMIC transformer that generates nine commonsense inferences of events in natural language. The knowledge is a natural source of background commons This paper presents a novel approach to reasoning about plausible sequences of events in a narrative setting. Rather than learning about plausible scripts or narrative chains, the authors instead reason about the most plausible events conditioned The paper explores the feasibility of language-based abductive reasoning in a new task, Abductive Natural Language Inference (\u03b1NLI) \u2013 a task focused on abductive This research was supported in part by NSF (IIS-1524371) and the National Science Foundation Graduate Research Fellowship under Grant No. DGE 1256082. We thank the The paper presents a three-part story consisting of an initial observation (O1), a middle sentence (h+, called a \u201cmiddle sentence\u201d, and a final observation What  The paper fine-tunes BERT using a grid search with the following set of hyper-parameters:  batch size: 4  learning rate: 5e-5 What  They train an SVM classifier and a bag-of-words model using GloVe embeddings. Both models achieve accuracies close to 50%. How  Architecture What  The paper proposes a version of Adversarial Filtering (AF) where the adversary only chooses plausible and implausible hypotheses and uses a different, human-generated distractor for What  The goal is to represent commonsense knowledge as a graph with events as nodes and relations as edges. The input to the graph is the current event. The output is the Table 8 describes the format of input to each variation of the generative model evaluated in the paper. Each variation is represented by a vector representing the form (x1, null),"}
{"ground_truth": "An empirical analysis of anonymity in Zcash Kappos et al., USENIX Security\u201918  As we\u2019ve seen before, in practice Bitcoin offers little in the way of anonymity . Zcash on the other hand was carefully designed with privacy in mind. It offers strong theoretical guarantees concerning privacy. So in theory users of Zcash can remain anonymous. In practice though it depends on the way those users interact with Zcash. Today\u2019s paper choice, \u2018An empirical analysis of anonymity in Zcash\u2019 studies how identifiable transaction participants are in practice based on the 2,242,847 transactions in the blockchain at the time of the study. We conclude that while it is possible to use Zcash in a private way, it is also possible to shrink its anonymity set considerably by developing simple heuristics based on identifiable patterns of usage. The analysis also provides some interesting insights into who is using Zcash and for what as well. Founders and miners combined account for around 66% of the value drawn from the shielded pool. The code for the analysis is available online at  [url]", "prediction": "Overview  Zcash is often touted as the one with the strongest anonymity guarantees, due to its basis in well- Overview  Zcash is often touted as the one with the strongest anonymity guarantees, due to its basis in well- A first look at Zcash for anonymity and pseudonymous transactions Baltes et al., USENIX Security Sym This paper links together the transactions used to shield anonymity in the Bitcoin ecosystem, based on a heuristic about What  ZEC is an alternative cryptocurrency developed as a (code) fork of Bitcoin that aims to break Overview of participants in Zcash ecosystem  We\u2019ll focus on the individuals and entities that interact with What  The Zcash blockchain has been evolving since the inception of zcash on September 27th, 2017 Overview of transactions over time  Zcash had 2,242,847 transactions across all blocks in 2014. What  Last week we looked at some of the amazing properties of Bitcoin\u2019s block reward system ( As discussed in Section 4, a large proportion of the activity on Zcash does not use the shielded pool. This Identifying transparent addresses in Zcash using multi-input heuristic Leis et al., CCS\u201918 Identifying Zcash exchanges and assigning names to them Guo et al., USENIX Security Symposium What  They generated a cluster of 560,319 clusters, of which 97,539 contained more than Identifying exchanges for ZEC users  The paper conducted a clustering analysis of the top 5 clusters in Although mining pools and founders account for a large proportion of the activity in Zcash (as we explore in Section 6 The Internet Archive, torservers.net and Wikileaks We are able to identify 31 donations to the Internet Archive This section explores the deposits and withdrawals into (and out of) Zcash\u2019s shielded pool, Overview  The paper examined the following patterns in the usage of the addresses in a bitcoin co-ingeniation The Zcash protocol specifies that all newly generated coins are required to be put into the shielded pool before they can be What  We split the category of miners into individual miners, who operate on their own, and mining pools, What  The authors conducted a heuristic analysis of z-to-t transactions in Zcash, focusing Identifying entities in the shielded pool Cui et al., Zcash\u201917  We ran the This section considers z-to-z transactions (8,444 vJoinSplits in Zcash) and provides TSB: A t-to-z guide to identifying transactions that could represent payments to The Shadow Bro Identifying transactions associated with TSB Blunsom et al., USenix Security Symposium (USen Overview  The number of transactions matching our requirements up until 17 January 2018 is summarized in Table 6. Before the first This paper explores the privacy and anonymity guarantees of Zcash, with a particular focus on its shielded pool. The paper contains an extensive Q&A section with questions and answers to common questions about the Zchain explorer"}
